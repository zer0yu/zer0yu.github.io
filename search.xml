<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[commix-系统命令注入自动化测试实例]]></title>
      <url>%2F2017%2F01%2F21%2Fcommix-%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B%2F</url>
      <content type="text"><![CDATA[引言​ commix是一款很好用的命令注入的工具，前几天看了看国内对其的介绍和使用示例挺少的，所以最近有空就写了这一篇文章来列举几个使用的栗子。 概念​ 命令注入就是部分Web应用程序提供了一些命令执行的操作，那么在Web应用程序底层去调用系统操作命令时，如果没有过滤好用户输入的数据，就很有可能形成系统命令执行漏洞来直接执行操作系统命令。详细讲解参考Command Injection commix简介​ 此处就不详细介绍了如果想要了解可以看这两篇文章： ​ http://www.mottoin.com/91981.html ​ http://www.mottoin.com/91806.html 测试环境搭建​ 在这里你可以使用DVWA或者DWAPP来实战，当然我觉得要尽可能全的包含各种类型的命令注入漏洞才算完美所以我们在此处使用commix提供的一个测试平台commix-testbed。 1.如果你在使用windows平台那么我推荐PHPStudy来搭建环境 安装完成后你只需要在phpstudy的www目录下打开cmd键入： git clone https://github.com/commixproject/commix-testbed.git (当然你要确保你安装了Git) 之后只要启动phpstudy就可以在浏览器中访问了 2.如果你使用的是Linux或者MacOS平台我推荐用xampp来搭建环境 搭建好之后你就可以看到如下界面 环境搭建好后我们来进行渗透测试 示例一：Results-based命令注入攻击我们选择GET方式的Classic regular example ping下127.0.0.1试下 复制url并打开commix开始hack 渗透主机为win后期可以借助empire（不知道empire？？？没关系戳我） 可以使用 commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/classic.php?addr=127.0.0.1&quot; --hostname --current-user --sys-info 含义：显示当前测试主机的主机名，用户名和系统信息 如果渗透主机为Linux则后期可以借助msf(不会msf？？？没关系戳我) 示例二：User-Agent HTTP头注入攻击选择User-Agent HTTP Header中的第一个Classic user-agent-based example http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot; 含义：post参数addr=192.168.1.121并指定要使用的进样技术 效果如下： 示例三：Referer HTTP头注入攻击选择Referer HTTP Header中的第一个Classic referer-based example http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot; 和上面的差不多不解释了 效果如下： 示例四：Blind 命令注入攻击选择Regular (GET / POST)中的Blind regular example http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1&quot; --technique=&quot;tf&quot; -v 1 效果如下： 执行命令： 彩蛋上面的例子不是很全，有几个使用commix进行命令注入的视频，有兴趣可以下载看下 链接: https://pan.baidu.com/s/1qXMNjZm 密码: 5peb 参考https://github.com/commixproject/commix-testbed https://github.com/commixproject/commix http://www.commixproject.com/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[3xp10it搭建指南]]></title>
      <url>%2F2017%2F01%2F21%2F3xp10it%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97%2F</url>
      <content type="text"><![CDATA[引言​ 突然想到前几天看到Scanners-Box有一款扫描器3xp10it于是就搭建使用了一下，刚觉还不错，就简要记录下我的搭建过程。（bing api key目前已经无法注册） 安装环境kali linux rolling 2016.2 安装过程1.安装git apt-get install git 2.把3xp10it克隆到本合适的位置 1git clone https://github.com/3xp10it/3xp10it.git 3.安装相关依赖,第一次使用工具时需要运行,以后不用再运行 1bash beforeWork.sh 4.python3安装 12345678apt-get install python3或:wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xztar xJf Python-3.5.2.tar.xzcd Python-3.5.2./configure --prefix=/opt/python3make &amp;&amp; make installln -s /opt/python3/bin/python3.5 /usr/local/bin/python3 5.pip3安装 1234echo "deb-src http://http.kali.org/kali kali main non-free contrib" &gt;&gt; /etc/apt/sources.listecho "deb-src http://security.kali.org/kali-security kali/updates main contrib non-free" &gt;&gt;/etc/apt/sources.listapt-get updateapt-get install python3-pip 6.mysql 需要mysql，如果mysql密码忘记了可以参考这篇文章《kali-linux-2016-使用指南二》 7.运行主程序,工作时运行,第一次运行时需要先运行上面的beforeWork.sh 1python3 3xp10it.py 8.要新开一个终端运行以便于查看相关输出信息,该工具为web后台 1python3 web.py 效果示例 关于这款工具a)3xp10it是一个自动化渗透测试框架,目前没有做到完全自动化[自动上传漏洞利用框架和自动fuzz框架暂时没有加入] b)支持功能列表 cdn真实ip查找模块 旁站获取[如果在cdn模块中发现有cdn但是没有获取到真实ip则不进行旁站获取] 子站获取 高危漏洞扫描模块 爬虫模块 目标网站脚本类型检测 目录扫描模块 sqli扫描模块 robots/sitemap自动收集 cms识别与cms漏洞扫描模块 自动识别管理员页面并爆破[支持自动识别简单验证码] webshell自动查找与爆破,支持asp,php,aspx,jsp,支持chopper一句话webshell和大马类型webshell 12345a)apache,iis,nginx,lighttpd在phpstudy中测试默认可接收1000个post参数 b)一句话类型webshell根据上面的特点可以正常情况下(单线程)的1000倍速度来爆破,可用大字典爆破,但是不能用多线程, 可能是因为用多线程会太快而让web server觉得每次的参数不止1000个 c)其他类型web server未测试,暂用多线程1倍速爆破,用最常用的webshell较小字典,17659个左右 d)大马类型webshell由于表单名是一定的,所以不能以1000倍速爆破,于是也用和c)中一样的小字典多线程1倍速爆破 资源文件收集 端口扫描模块 whois信息收集 支持人工渗透时记录笔记 123笔记功能需要额外安装phpmyadmin等可以编辑数据库的工具,访问数据库,在targets|xxx_pang|xxx_sub表中有一个note列可用于记录人工渗透时的笔记,查看扫描结果最好也用phpmyadmin来查看数据库的targets表和xxx_pang和xxx_sub表,如果不安装phpmyadmin也可由web.py在web后台中查看扫描结果 c)可选工作模式 模式一:扫描目标和目标的所有旁站模式二:扫描目标和目标的所有子站模式三:扫描目标和目标的所有旁站和所有子站模式四:只扫描目标 123默认使用模式一扫描[在运行3xp10it后可自选],上面四种模式中的[扫描目标]里的目标支持批量导入多个目标和手工录入多个目标.四种工作模式中与旁站和子站相关的由程序自动完成[eg.选择模式三工作时,将自动获取导入的目标的所有旁站和所有子站,并对这些旁站和子站依次遍历上面的各个扫描模块] d)特点 可在中断后重新运行时从断点附近接着上次的过程扫描,不用重新扫描 运行3xp10it后自动从数据库中取出待完成的扫描任务进行扫描 支持正常扫描和优先扫描两个扫描组,如果优先扫描组里有任务则先扫描优先扫描组里的目标,在添加任务时可选择将目标是 正常扫描还是优先扫描 上述支持功能列表中的功能默认全部遍历扫描,如果要使用单个模块可在web界面使用 3xp10it配备一个web后台,web页面可查询当前扫描结果与使用单个模块功能 3xp10it独立于web运行,也即没有目录下的pannel文件夹也可运行 目录下的pannel文件夹是Django为3xp10it写的一些相关界面,web界面使用在下面介绍 支持找到高危漏洞邮件通知[eg.sqli,webshell爆破成功等] web后台相当于3xp10it的部分界面+分割的模块化工具+exp10it中没有的功能的附加工具的集合 web后台由Django==1.10.3开发 web后台中支持工具列表 targets:查看扫描目标,新增/删除扫描目标 获取旁[子]站:获取旁站或子站模块 xcdn:尝试识别cdn背后的真实ip 高危漏扫:高危漏洞扫描模块 sqli:sql注入模块 扫目录:目录扫描模块 cms漏扫:cms漏洞扫描模块 webshell爆破:webshell爆破模块 管理员登录爆破:管理员登录爆破模块 waf爆破:waf自动爆破模块[3xp10it中没有这个功能] dbquery:数据库语句执行接口 扫描结果:查看当前扫描结果 详细1234567891011121314151617181920212223242526272829303132333435363738394041421.3xp10it需要用到bingapi,需要先申请好bingapi2.上面的web.py不一定要运行,核心功能在3xp10it.py文件中3.如果要后台功能需运行python3 web.py4.如果要使用web.py,重新开机后需要重新运行web.py5.运行web.py常见错误:端口被占用.解决方法:a)netstat -ntlp | grep 8000b)在a)中找到pid后kill -9 pidc)重新运行python3 web.py6.3xp10it中调用的是关键模块exp10it中的exp10itScanner,exp10it模块由pip3 install exp10it安装,安装路径一般如下:/usr/local/lib/python3.5/dist-packages7.文件分布结构如下:当前目录.├── 3xp10it.py├── pannel│ ├── ghostdriver.log│ ├── manage.py│ ├── models.py[web后台没有用django的模型]│ ├── pages[web页面的html文件,相当于django的template]│ └── pannel[django相关文件]│ ├── __init__.py│ ├── settings.py│ ├── urls.py[django配置的访问与响应规则]│ ├── views.py[django配置的关键函数]│ └── wsgi.py├── readme.md├── uninstall.py└── web.py/usr/local/lib/python3.5/dist-packages路径下相关文件├── cms_identify[cms识别模块相关文件]├── cms_scan[cms漏洞扫描模块相关文件]├── config.ini[配置文件]├── dicts[字典文件]├── dirsearch[目录扫描模块相关文件]├── exp10it.py[关键模块文件]├── exps[exp模块相关文件]├── log[日志文件夹]├── tools[web后台中的各个工具] FAQ12345678910111213141516Q0:config.ini 这个文件怎么没有找到?A0:config.ini在python3 3xp10it.py初次运行后会自动生成,用于设置bing API key,发邮件的帐号,数据库连接配置,扫描模式 等信息,一般会在/usr/local/lib/python3.5/dist-packages/config.ini这里,与python3的安装路径有关Q1:单个模块怎么使用?A1:单个模块执行有2种方法: 1)web后台 2)cd /usr/local/lib/python3.5/dist-packages/tools &amp;&amp; ls -alQ2:为什么需要连接google才能用?A2:要保证能直接ping通google证明可以绕过GFW,有些domain不连vpn会无法访问,这样的domain在正常情况下被GFW拦截时会影响 代码获取真实ip的效果,代码中强制要求连接vpnQ3:bing api key怎么注册?网上的教程都是错的?A3:好像是bing暂停注册了,这样的话只能向以前注册过的人要,如果bing一直这样,将考虑在代码中修改这个接口,但3个月内暂 时不修改 参考https://github.com/3xp10it/3xp10it http://zeroyu.xyz/2017/01/05/kali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%BA%8C/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F01%2F21%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
    
  
</search>
